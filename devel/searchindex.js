Search.setIndex({"titles": ["API Reference", "References", "Bootstrapping", "Bootstrap Examples", "Confidence Intervals", "arch.bootstrap.CircularBlockBootstrap", "arch.bootstrap.IIDBootstrap", "arch.bootstrap.IndependentSamplesBootstrap", "arch.bootstrap.MovingBlockBootstrap", "arch.bootstrap.StationaryBootstrap", "arch.bootstrap.optimal_block_length", "arch.bootstrap.CircularBlockBootstrap.apply", "arch.bootstrap.CircularBlockBootstrap.bootstrap", "arch.bootstrap.CircularBlockBootstrap.clone", "arch.bootstrap.CircularBlockBootstrap.conf_int", "arch.bootstrap.CircularBlockBootstrap.cov", "arch.bootstrap.CircularBlockBootstrap.generator", "arch.bootstrap.CircularBlockBootstrap.get_state", "arch.bootstrap.CircularBlockBootstrap.index", "arch.bootstrap.CircularBlockBootstrap.random_state", "arch.bootstrap.CircularBlockBootstrap.reset", "arch.bootstrap.CircularBlockBootstrap.seed", "arch.bootstrap.CircularBlockBootstrap.set_state", "arch.bootstrap.CircularBlockBootstrap.state", "arch.bootstrap.CircularBlockBootstrap.update_indices", "arch.bootstrap.CircularBlockBootstrap.var", "arch.bootstrap.IIDBootstrap.apply", "arch.bootstrap.IIDBootstrap.bootstrap", "arch.bootstrap.IIDBootstrap.clone", "arch.bootstrap.IIDBootstrap.conf_int", "arch.bootstrap.IIDBootstrap.cov", "arch.bootstrap.IIDBootstrap.generator", "arch.bootstrap.IIDBootstrap.get_state", "arch.bootstrap.IIDBootstrap.index", "arch.bootstrap.IIDBootstrap.random_state", "arch.bootstrap.IIDBootstrap.reset", "arch.bootstrap.IIDBootstrap.seed", "arch.bootstrap.IIDBootstrap.set_state", "arch.bootstrap.IIDBootstrap.state", "arch.bootstrap.IIDBootstrap.update_indices", "arch.bootstrap.IIDBootstrap.var", "arch.bootstrap.IndependentSamplesBootstrap.apply", "arch.bootstrap.IndependentSamplesBootstrap.bootstrap", "arch.bootstrap.IndependentSamplesBootstrap.clone", "arch.bootstrap.IndependentSamplesBootstrap.conf_int", "arch.bootstrap.IndependentSamplesBootstrap.cov", "arch.bootstrap.IndependentSamplesBootstrap.generator", "arch.bootstrap.IndependentSamplesBootstrap.get_state", "arch.bootstrap.IndependentSamplesBootstrap.index", "arch.bootstrap.IndependentSamplesBootstrap.random_state", "arch.bootstrap.IndependentSamplesBootstrap.reset", "arch.bootstrap.IndependentSamplesBootstrap.seed", "arch.bootstrap.IndependentSamplesBootstrap.set_state", "arch.bootstrap.IndependentSamplesBootstrap.state", "arch.bootstrap.IndependentSamplesBootstrap.update_indices", "arch.bootstrap.IndependentSamplesBootstrap.var", "arch.bootstrap.MovingBlockBootstrap.apply", "arch.bootstrap.MovingBlockBootstrap.bootstrap", "arch.bootstrap.MovingBlockBootstrap.clone", "arch.bootstrap.MovingBlockBootstrap.conf_int", "arch.bootstrap.MovingBlockBootstrap.cov", "arch.bootstrap.MovingBlockBootstrap.generator", "arch.bootstrap.MovingBlockBootstrap.get_state", "arch.bootstrap.MovingBlockBootstrap.index", "arch.bootstrap.MovingBlockBootstrap.random_state", "arch.bootstrap.MovingBlockBootstrap.reset", "arch.bootstrap.MovingBlockBootstrap.seed", "arch.bootstrap.MovingBlockBootstrap.set_state", "arch.bootstrap.MovingBlockBootstrap.state", "arch.bootstrap.MovingBlockBootstrap.update_indices", "arch.bootstrap.MovingBlockBootstrap.var", "arch.bootstrap.StationaryBootstrap.apply", "arch.bootstrap.StationaryBootstrap.bootstrap", "arch.bootstrap.StationaryBootstrap.clone", "arch.bootstrap.StationaryBootstrap.conf_int", "arch.bootstrap.StationaryBootstrap.cov", "arch.bootstrap.StationaryBootstrap.generator", "arch.bootstrap.StationaryBootstrap.get_state", "arch.bootstrap.StationaryBootstrap.index", "arch.bootstrap.StationaryBootstrap.random_state", "arch.bootstrap.StationaryBootstrap.reset", "arch.bootstrap.StationaryBootstrap.seed", "arch.bootstrap.StationaryBootstrap.set_state", "arch.bootstrap.StationaryBootstrap.state", "arch.bootstrap.StationaryBootstrap.update_indices", "arch.bootstrap.StationaryBootstrap.var", "Independent, Identical Distributed Data (i.i.d.)", "Low-level Interfaces", "Covariance Estimation", "Semiparametric Bootstraps", "Time-series Bootstraps", "Change Logs", "Version 1", "Version 2", "Version 3", "Version 4", "Version 5", "Version 6", "Long-run Covariance Estimation", "arch.covariance.kernel.Andrews", "arch.covariance.kernel.Bartlett", "arch.covariance.kernel.CovarianceEstimate", "arch.covariance.kernel.Gallant", "arch.covariance.kernel.NeweyWest", "arch.covariance.kernel.Parzen", "arch.covariance.kernel.ParzenCauchy", "arch.covariance.kernel.ParzenGeometric", "arch.covariance.kernel.ParzenRiesz", "arch.covariance.kernel.QuadraticSpectral", "arch.covariance.kernel.TukeyHamming", "arch.covariance.kernel.TukeyHanning", "arch.covariance.kernel.TukeyParzen", "arch.covariance.kernel.Andrews.bandwidth", "arch.covariance.kernel.Andrews.bandwidth_scale", "arch.covariance.kernel.Andrews.centered", "arch.covariance.kernel.Andrews.cov", "arch.covariance.kernel.Andrews.force_int", "arch.covariance.kernel.Andrews.kernel_const", "arch.covariance.kernel.Andrews.kernel_weights", "arch.covariance.kernel.Andrews.name", "arch.covariance.kernel.Andrews.opt_bandwidth", "arch.covariance.kernel.Andrews.rate", "arch.covariance.kernel.Bartlett.bandwidth", "arch.covariance.kernel.Bartlett.bandwidth_scale", "arch.covariance.kernel.Bartlett.centered", "arch.covariance.kernel.Bartlett.cov", "arch.covariance.kernel.Bartlett.force_int", "arch.covariance.kernel.Bartlett.kernel_const", "arch.covariance.kernel.Bartlett.kernel_weights", "arch.covariance.kernel.Bartlett.name", "arch.covariance.kernel.Bartlett.opt_bandwidth", "arch.covariance.kernel.Bartlett.rate", "arch.covariance.kernel.CovarianceEstimate.long_run", "arch.covariance.kernel.CovarianceEstimate.one_sided", "arch.covariance.kernel.CovarianceEstimate.one_sided_strict", "arch.covariance.kernel.CovarianceEstimate.short_run", "arch.covariance.kernel.Gallant.bandwidth", "arch.covariance.kernel.Gallant.bandwidth_scale", "arch.covariance.kernel.Gallant.centered", "arch.covariance.kernel.Gallant.cov", "arch.covariance.kernel.Gallant.force_int", "arch.covariance.kernel.Gallant.kernel_const", "arch.covariance.kernel.Gallant.kernel_weights", "arch.covariance.kernel.Gallant.name", "arch.covariance.kernel.Gallant.opt_bandwidth", "arch.covariance.kernel.Gallant.rate", "arch.covariance.kernel.NeweyWest.bandwidth", "arch.covariance.kernel.NeweyWest.bandwidth_scale", "arch.covariance.kernel.NeweyWest.centered", "arch.covariance.kernel.NeweyWest.cov", "arch.covariance.kernel.NeweyWest.force_int", "arch.covariance.kernel.NeweyWest.kernel_const", "arch.covariance.kernel.NeweyWest.kernel_weights", "arch.covariance.kernel.NeweyWest.name", "arch.covariance.kernel.NeweyWest.opt_bandwidth", "arch.covariance.kernel.NeweyWest.rate", "arch.covariance.kernel.Parzen.bandwidth", "arch.covariance.kernel.Parzen.bandwidth_scale", "arch.covariance.kernel.Parzen.centered", "arch.covariance.kernel.Parzen.cov", "arch.covariance.kernel.Parzen.force_int", "arch.covariance.kernel.Parzen.kernel_const", "arch.covariance.kernel.Parzen.kernel_weights", "arch.covariance.kernel.Parzen.name", "arch.covariance.kernel.Parzen.opt_bandwidth", "arch.covariance.kernel.Parzen.rate", "arch.covariance.kernel.ParzenCauchy.bandwidth", "arch.covariance.kernel.ParzenCauchy.bandwidth_scale", "arch.covariance.kernel.ParzenCauchy.centered", "arch.covariance.kernel.ParzenCauchy.cov", "arch.covariance.kernel.ParzenCauchy.force_int", "arch.covariance.kernel.ParzenCauchy.kernel_const", "arch.covariance.kernel.ParzenCauchy.kernel_weights", "arch.covariance.kernel.ParzenCauchy.name", "arch.covariance.kernel.ParzenCauchy.opt_bandwidth", "arch.covariance.kernel.ParzenCauchy.rate", "arch.covariance.kernel.ParzenGeometric.bandwidth", "arch.covariance.kernel.ParzenGeometric.bandwidth_scale", "arch.covariance.kernel.ParzenGeometric.centered", "arch.covariance.kernel.ParzenGeometric.cov", "arch.covariance.kernel.ParzenGeometric.force_int", "arch.covariance.kernel.ParzenGeometric.kernel_const", "arch.covariance.kernel.ParzenGeometric.kernel_weights", "arch.covariance.kernel.ParzenGeometric.name", "arch.covariance.kernel.ParzenGeometric.opt_bandwidth", "arch.covariance.kernel.ParzenGeometric.rate", "arch.covariance.kernel.ParzenRiesz.bandwidth", "arch.covariance.kernel.ParzenRiesz.bandwidth_scale", "arch.covariance.kernel.ParzenRiesz.centered", "arch.covariance.kernel.ParzenRiesz.cov", "arch.covariance.kernel.ParzenRiesz.force_int", "arch.covariance.kernel.ParzenRiesz.kernel_const", "arch.covariance.kernel.ParzenRiesz.kernel_weights", "arch.covariance.kernel.ParzenRiesz.name", "arch.covariance.kernel.ParzenRiesz.opt_bandwidth", "arch.covariance.kernel.ParzenRiesz.rate", "arch.covariance.kernel.QuadraticSpectral.bandwidth", "arch.covariance.kernel.QuadraticSpectral.bandwidth_scale", "arch.covariance.kernel.QuadraticSpectral.centered", "arch.covariance.kernel.QuadraticSpectral.cov", "arch.covariance.kernel.QuadraticSpectral.force_int", "arch.covariance.kernel.QuadraticSpectral.kernel_const", "arch.covariance.kernel.QuadraticSpectral.kernel_weights", "arch.covariance.kernel.QuadraticSpectral.name", "arch.covariance.kernel.QuadraticSpectral.opt_bandwidth", "arch.covariance.kernel.QuadraticSpectral.rate", "arch.covariance.kernel.TukeyHamming.bandwidth", "arch.covariance.kernel.TukeyHamming.bandwidth_scale", "arch.covariance.kernel.TukeyHamming.centered", "arch.covariance.kernel.TukeyHamming.cov", "arch.covariance.kernel.TukeyHamming.force_int", "arch.covariance.kernel.TukeyHamming.kernel_const", "arch.covariance.kernel.TukeyHamming.kernel_weights", "arch.covariance.kernel.TukeyHamming.name", "arch.covariance.kernel.TukeyHamming.opt_bandwidth", "arch.covariance.kernel.TukeyHamming.rate", "arch.covariance.kernel.TukeyHanning.bandwidth", "arch.covariance.kernel.TukeyHanning.bandwidth_scale", "arch.covariance.kernel.TukeyHanning.centered", "arch.covariance.kernel.TukeyHanning.cov", "arch.covariance.kernel.TukeyHanning.force_int", "arch.covariance.kernel.TukeyHanning.kernel_const", "arch.covariance.kernel.TukeyHanning.kernel_weights", "arch.covariance.kernel.TukeyHanning.name", "arch.covariance.kernel.TukeyHanning.opt_bandwidth", "arch.covariance.kernel.TukeyHanning.rate", "arch.covariance.kernel.TukeyParzen.bandwidth", "arch.covariance.kernel.TukeyParzen.bandwidth_scale", "arch.covariance.kernel.TukeyParzen.centered", "arch.covariance.kernel.TukeyParzen.cov", "arch.covariance.kernel.TukeyParzen.force_int", "arch.covariance.kernel.TukeyParzen.kernel_const", "arch.covariance.kernel.TukeyParzen.kernel_weights", "arch.covariance.kernel.TukeyParzen.name", "arch.covariance.kernel.TukeyParzen.opt_bandwidth", "arch.covariance.kernel.TukeyParzen.rate", "Introduction", "References", "arch.bootstrap.MCS", "arch.bootstrap.SPA", "arch.bootstrap.StepM", "arch.bootstrap.MCS.compute", "arch.bootstrap.MCS.excluded", "arch.bootstrap.MCS.included", "arch.bootstrap.MCS.pvalues", "arch.bootstrap.MCS.reset", "arch.bootstrap.MCS.seed", "arch.bootstrap.SPA.better_models", "arch.bootstrap.SPA.compute", "arch.bootstrap.SPA.critical_values", "arch.bootstrap.SPA.pvalues", "arch.bootstrap.SPA.reset", "arch.bootstrap.SPA.seed", "arch.bootstrap.SPA.subset", "arch.bootstrap.StepM.compute", "arch.bootstrap.StepM.reset", "arch.bootstrap.StepM.seed", "arch.bootstrap.StepM.superior_models", "Module Reference", "Multiple Comparisons", "Multiple Comparison Procedures", "Cointegration Tests", "arch.unitroot.ADF", "arch.unitroot.DFGLS", "arch.unitroot.KPSS", "arch.unitroot.PhillipsPerron", "arch.unitroot.VarianceRatio", "arch.unitroot.ZivotAndrews", "arch.unitroot.auto_bandwidth", "arch.unitroot.cointegration.CanonicalCointegratingReg", "arch.unitroot.cointegration.CointegrationAnalysisResults", "arch.unitroot.cointegration.DynamicOLS", "arch.unitroot.cointegration.DynamicOLSResults", "arch.unitroot.cointegration.EngleGrangerTestResults", "arch.unitroot.cointegration.FullyModifiedOLS", "arch.unitroot.cointegration.PhillipsOuliarisTestResults", "arch.unitroot.cointegration.engle_granger", "arch.unitroot.cointegration.phillips_ouliaris", "arch.unitroot.ADF.alternative_hypothesis", "arch.unitroot.ADF.critical_values", "arch.unitroot.ADF.lags", "arch.unitroot.ADF.max_lags", "arch.unitroot.ADF.nobs", "arch.unitroot.ADF.null_hypothesis", "arch.unitroot.ADF.pvalue", "arch.unitroot.ADF.regression", "arch.unitroot.ADF.stat", "arch.unitroot.ADF.summary", "arch.unitroot.ADF.trend", "arch.unitroot.ADF.valid_trends", "arch.unitroot.ADF.y", "arch.unitroot.DFGLS.alternative_hypothesis", "arch.unitroot.DFGLS.critical_values", "arch.unitroot.DFGLS.lags", "arch.unitroot.DFGLS.max_lags", "arch.unitroot.DFGLS.nobs", "arch.unitroot.DFGLS.null_hypothesis", "arch.unitroot.DFGLS.pvalue", "arch.unitroot.DFGLS.regression", "arch.unitroot.DFGLS.stat", "arch.unitroot.DFGLS.summary", "arch.unitroot.DFGLS.trend", "arch.unitroot.DFGLS.valid_trends", "arch.unitroot.DFGLS.y", "arch.unitroot.KPSS.alternative_hypothesis", "arch.unitroot.KPSS.critical_values", "arch.unitroot.KPSS.lags", "arch.unitroot.KPSS.nobs", "arch.unitroot.KPSS.null_hypothesis", "arch.unitroot.KPSS.pvalue", "arch.unitroot.KPSS.stat", "arch.unitroot.KPSS.summary", "arch.unitroot.KPSS.trend", "arch.unitroot.KPSS.valid_trends", "arch.unitroot.KPSS.y", "arch.unitroot.PhillipsPerron.alternative_hypothesis", "arch.unitroot.PhillipsPerron.critical_values", "arch.unitroot.PhillipsPerron.lags", "arch.unitroot.PhillipsPerron.nobs", "arch.unitroot.PhillipsPerron.null_hypothesis", "arch.unitroot.PhillipsPerron.pvalue", "arch.unitroot.PhillipsPerron.regression", "arch.unitroot.PhillipsPerron.stat", "arch.unitroot.PhillipsPerron.summary", "arch.unitroot.PhillipsPerron.test_type", "arch.unitroot.PhillipsPerron.trend", "arch.unitroot.PhillipsPerron.valid_trends", "arch.unitroot.PhillipsPerron.y", "arch.unitroot.VarianceRatio.alternative_hypothesis", "arch.unitroot.VarianceRatio.critical_values", "arch.unitroot.VarianceRatio.debiased", "arch.unitroot.VarianceRatio.lags", "arch.unitroot.VarianceRatio.nobs", "arch.unitroot.VarianceRatio.null_hypothesis", "arch.unitroot.VarianceRatio.overlap", "arch.unitroot.VarianceRatio.pvalue", "arch.unitroot.VarianceRatio.robust", "arch.unitroot.VarianceRatio.stat", "arch.unitroot.VarianceRatio.summary", "arch.unitroot.VarianceRatio.trend", "arch.unitroot.VarianceRatio.valid_trends", "arch.unitroot.VarianceRatio.vr", "arch.unitroot.VarianceRatio.y", "arch.unitroot.ZivotAndrews.alternative_hypothesis", "arch.unitroot.ZivotAndrews.critical_values", "arch.unitroot.ZivotAndrews.lags", "arch.unitroot.ZivotAndrews.nobs", "arch.unitroot.ZivotAndrews.null_hypothesis", "arch.unitroot.ZivotAndrews.pvalue", "arch.unitroot.ZivotAndrews.stat", "arch.unitroot.ZivotAndrews.summary", "arch.unitroot.ZivotAndrews.trend", "arch.unitroot.ZivotAndrews.valid_trends", "arch.unitroot.ZivotAndrews.y", "arch.unitroot.cointegration.CanonicalCointegratingReg.fit", "arch.unitroot.cointegration.CointegrationAnalysisResults.bandwidth", "arch.unitroot.cointegration.CointegrationAnalysisResults.cov", "arch.unitroot.cointegration.CointegrationAnalysisResults.kernel", "arch.unitroot.cointegration.CointegrationAnalysisResults.long_run_variance", "arch.unitroot.cointegration.CointegrationAnalysisResults.params", "arch.unitroot.cointegration.CointegrationAnalysisResults.pvalues", "arch.unitroot.cointegration.CointegrationAnalysisResults.resid", "arch.unitroot.cointegration.CointegrationAnalysisResults.residual_variance", "arch.unitroot.cointegration.CointegrationAnalysisResults.rsquared", "arch.unitroot.cointegration.CointegrationAnalysisResults.rsquared_adj", "arch.unitroot.cointegration.CointegrationAnalysisResults.std_errors", "arch.unitroot.cointegration.CointegrationAnalysisResults.summary", "arch.unitroot.cointegration.CointegrationAnalysisResults.tvalues", "arch.unitroot.cointegration.DynamicOLS.fit", "arch.unitroot.cointegration.DynamicOLSResults.bandwidth", "arch.unitroot.cointegration.DynamicOLSResults.cov", "arch.unitroot.cointegration.DynamicOLSResults.cov_type", "arch.unitroot.cointegration.DynamicOLSResults.full_cov", "arch.unitroot.cointegration.DynamicOLSResults.full_params", "arch.unitroot.cointegration.DynamicOLSResults.kernel", "arch.unitroot.cointegration.DynamicOLSResults.lags", "arch.unitroot.cointegration.DynamicOLSResults.leads", "arch.unitroot.cointegration.DynamicOLSResults.long_run_variance", "arch.unitroot.cointegration.DynamicOLSResults.params", "arch.unitroot.cointegration.DynamicOLSResults.pvalues", "arch.unitroot.cointegration.DynamicOLSResults.resid", "arch.unitroot.cointegration.DynamicOLSResults.residual_variance", "arch.unitroot.cointegration.DynamicOLSResults.rsquared", "arch.unitroot.cointegration.DynamicOLSResults.rsquared_adj", "arch.unitroot.cointegration.DynamicOLSResults.std_errors", "arch.unitroot.cointegration.DynamicOLSResults.summary", "arch.unitroot.cointegration.DynamicOLSResults.tvalues", "arch.unitroot.cointegration.EngleGrangerTestResults.alternative_hypothesis", "arch.unitroot.cointegration.EngleGrangerTestResults.cointegrating_vector", "arch.unitroot.cointegration.EngleGrangerTestResults.critical_values", "arch.unitroot.cointegration.EngleGrangerTestResults.distribution_order", "arch.unitroot.cointegration.EngleGrangerTestResults.lags", "arch.unitroot.cointegration.EngleGrangerTestResults.max_lags", "arch.unitroot.cointegration.EngleGrangerTestResults.name", "arch.unitroot.cointegration.EngleGrangerTestResults.null_hypothesis", "arch.unitroot.cointegration.EngleGrangerTestResults.plot", "arch.unitroot.cointegration.EngleGrangerTestResults.pvalue", "arch.unitroot.cointegration.EngleGrangerTestResults.resid", "arch.unitroot.cointegration.EngleGrangerTestResults.rho", "arch.unitroot.cointegration.EngleGrangerTestResults.stat", "arch.unitroot.cointegration.EngleGrangerTestResults.summary", "arch.unitroot.cointegration.EngleGrangerTestResults.trend", "arch.unitroot.cointegration.FullyModifiedOLS.fit", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.alternative_hypothesis", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.bandwidth", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.cointegrating_vector", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.critical_values", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.distribution_order", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.kernel", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.name", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.null_hypothesis", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.plot", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.pvalue", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.resid", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.stat", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.summary", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.trend", "Introduction", "The Unit Root Tests", "Unit Root Testing", "Cointegration Testing", "Unit Root Testing", "Theoretical Background", "Distributions", "Forecasting", "arch.univariate.APARCH", "arch.univariate.ARCH", "arch.univariate.ARCHInMean", "arch.univariate.ARX", "arch.univariate.ConstantMean", "arch.univariate.ConstantVariance", "arch.univariate.EGARCH", "arch.univariate.EWMAVariance", "arch.univariate.FIGARCH", "arch.univariate.FixedVariance", "arch.univariate.GARCH", "arch.univariate.GeneralizedError", "arch.univariate.HARCH", "arch.univariate.HARX", "arch.univariate.LS", "arch.univariate.MIDASHyperbolic", "arch.univariate.Normal", "arch.univariate.RiskMetrics2006", "arch.univariate.SkewStudent", "arch.univariate.StudentsT", "arch.univariate.ZeroMean", "arch.univariate.base.ARCHModel", "arch.univariate.base.ARCHModelFixedResult", "arch.univariate.base.ARCHModelForecast", "arch.univariate.base.ARCHModelForecastSimulation", "arch.univariate.base.ARCHModelResult", "arch.univariate.distribution.Distribution", "arch.univariate.recursions_python.VolatilityUpdater", "arch.univariate.volatility.VolatilityProcess", "arch.univariate.APARCH.backcast", "arch.univariate.APARCH.backcast_transform", "arch.univariate.APARCH.bounds", "arch.univariate.APARCH.common_asym", "arch.univariate.APARCH.compute_variance", "arch.univariate.APARCH.constraints", "arch.univariate.APARCH.delta", "arch.univariate.APARCH.forecast", "arch.univariate.APARCH.name", "arch.univariate.APARCH.num_params", "arch.univariate.APARCH.parameter_names", "arch.univariate.APARCH.simulate", "arch.univariate.APARCH.start", "arch.univariate.APARCH.starting_values", "arch.univariate.APARCH.stop", "arch.univariate.APARCH.update", "arch.univariate.APARCH.updateable", "arch.univariate.APARCH.variance_bounds", "arch.univariate.APARCH.volatility_updater", "arch.univariate.ARCH.backcast", "arch.univariate.ARCH.backcast_transform", "arch.univariate.ARCH.bounds", "arch.univariate.ARCH.compute_variance", "arch.univariate.ARCH.constraints", "arch.univariate.ARCH.forecast", "arch.univariate.ARCH.name", "arch.univariate.ARCH.num_params", "arch.univariate.ARCH.parameter_names", "arch.univariate.ARCH.simulate", "arch.univariate.ARCH.start", "arch.univariate.ARCH.starting_values", "arch.univariate.ARCH.stop", "arch.univariate.ARCH.update", "arch.univariate.ARCH.updateable", "arch.univariate.ARCH.variance_bounds", "arch.univariate.ARCH.volatility_updater", "arch.univariate.ARCHInMean.bounds", "arch.univariate.ARCHInMean.compute_param_cov", "arch.univariate.ARCHInMean.constraints", "arch.univariate.ARCHInMean.distribution", "arch.univariate.ARCHInMean.fit", "arch.univariate.ARCHInMean.fix", "arch.univariate.ARCHInMean.forecast", "arch.univariate.ARCHInMean.form", "arch.univariate.ARCHInMean.name", "arch.univariate.ARCHInMean.num_params", "arch.univariate.ARCHInMean.parameter_names", "arch.univariate.ARCHInMean.resids", "arch.univariate.ARCHInMean.simulate", "arch.univariate.ARCHInMean.starting_values", "arch.univariate.ARCHInMean.volatility", "arch.univariate.ARCHInMean.x", "arch.univariate.ARCHInMean.y", "arch.univariate.ARX.bounds", "arch.univariate.ARX.compute_param_cov", "arch.univariate.ARX.constraints", "arch.univariate.ARX.distribution", "arch.univariate.ARX.fit", "arch.univariate.ARX.fix", "arch.univariate.ARX.forecast", "arch.univariate.ARX.name", "arch.univariate.ARX.num_params", "arch.univariate.ARX.parameter_names", "arch.univariate.ARX.resids", "arch.univariate.ARX.simulate", "arch.univariate.ARX.starting_values", "arch.univariate.ARX.volatility", "arch.univariate.ARX.x", "arch.univariate.ARX.y", "arch.univariate.ConstantMean.bounds", "arch.univariate.ConstantMean.compute_param_cov", "arch.univariate.ConstantMean.constraints", "arch.univariate.ConstantMean.distribution", "arch.univariate.ConstantMean.fit", "arch.univariate.ConstantMean.fix", "arch.univariate.ConstantMean.forecast", "arch.univariate.ConstantMean.name", "arch.univariate.ConstantMean.num_params", "arch.univariate.ConstantMean.parameter_names", "arch.univariate.ConstantMean.resids", "arch.univariate.ConstantMean.simulate", "arch.univariate.ConstantMean.starting_values", "arch.univariate.ConstantMean.volatility", "arch.univariate.ConstantMean.x", "arch.univariate.ConstantMean.y", "arch.univariate.ConstantVariance.backcast", "arch.univariate.ConstantVariance.backcast_transform", "arch.univariate.ConstantVariance.bounds", "arch.univariate.ConstantVariance.compute_variance", "arch.univariate.ConstantVariance.constraints", "arch.univariate.ConstantVariance.forecast", "arch.univariate.ConstantVariance.name", "arch.univariate.ConstantVariance.num_params", "arch.univariate.ConstantVariance.parameter_names", "arch.univariate.ConstantVariance.simulate", "arch.univariate.ConstantVariance.start", "arch.univariate.ConstantVariance.starting_values", "arch.univariate.ConstantVariance.stop", "arch.univariate.ConstantVariance.update", "arch.univariate.ConstantVariance.updateable", "arch.univariate.ConstantVariance.variance_bounds", "arch.univariate.ConstantVariance.volatility_updater", "arch.univariate.EGARCH.backcast", "arch.univariate.EGARCH.backcast_transform", "arch.univariate.EGARCH.bounds", "arch.univariate.EGARCH.compute_variance", "arch.univariate.EGARCH.constraints", "arch.univariate.EGARCH.forecast", "arch.univariate.EGARCH.name", "arch.univariate.EGARCH.num_params", "arch.univariate.EGARCH.parameter_names", "arch.univariate.EGARCH.simulate", "arch.univariate.EGARCH.start", "arch.univariate.EGARCH.starting_values", "arch.univariate.EGARCH.stop", "arch.univariate.EGARCH.update", "arch.univariate.EGARCH.updateable", "arch.univariate.EGARCH.variance_bounds", "arch.univariate.EGARCH.volatility_updater", "arch.univariate.EWMAVariance.backcast", "arch.univariate.EWMAVariance.backcast_transform", "arch.univariate.EWMAVariance.bounds", "arch.univariate.EWMAVariance.compute_variance", "arch.univariate.EWMAVariance.constraints", "arch.univariate.EWMAVariance.forecast", "arch.univariate.EWMAVariance.name", "arch.univariate.EWMAVariance.num_params", "arch.univariate.EWMAVariance.parameter_names", "arch.univariate.EWMAVariance.simulate", "arch.univariate.EWMAVariance.start", "arch.univariate.EWMAVariance.starting_values", "arch.univariate.EWMAVariance.stop", "arch.univariate.EWMAVariance.update", "arch.univariate.EWMAVariance.updateable", "arch.univariate.EWMAVariance.variance_bounds", "arch.univariate.EWMAVariance.volatility_updater", "arch.univariate.FIGARCH.backcast", "arch.univariate.FIGARCH.backcast_transform", "arch.univariate.FIGARCH.bounds", "arch.univariate.FIGARCH.compute_variance", "arch.univariate.FIGARCH.constraints", "arch.univariate.FIGARCH.forecast", "arch.univariate.FIGARCH.name", "arch.univariate.FIGARCH.num_params", "arch.univariate.FIGARCH.parameter_names", "arch.univariate.FIGARCH.simulate", "arch.univariate.FIGARCH.start", "arch.univariate.FIGARCH.starting_values", "arch.univariate.FIGARCH.stop", "arch.univariate.FIGARCH.truncation", "arch.univariate.FIGARCH.update", "arch.univariate.FIGARCH.updateable", "arch.univariate.FIGARCH.variance_bounds", "arch.univariate.FIGARCH.volatility_updater", "arch.univariate.FixedVariance.backcast", "arch.univariate.FixedVariance.backcast_transform", "arch.univariate.FixedVariance.bounds", "arch.univariate.FixedVariance.compute_variance", "arch.univariate.FixedVariance.constraints", "arch.univariate.FixedVariance.forecast", "arch.univariate.FixedVariance.name", "arch.univariate.FixedVariance.num_params", "arch.univariate.FixedVariance.parameter_names", "arch.univariate.FixedVariance.simulate", "arch.univariate.FixedVariance.start", "arch.univariate.FixedVariance.starting_values", "arch.univariate.FixedVariance.stop", "arch.univariate.FixedVariance.update", "arch.univariate.FixedVariance.updateable", "arch.univariate.FixedVariance.variance_bounds", "arch.univariate.FixedVariance.volatility_updater", "arch.univariate.GARCH.backcast", "arch.univariate.GARCH.backcast_transform", "arch.univariate.GARCH.bounds", "arch.univariate.GARCH.compute_variance", "arch.univariate.GARCH.constraints", "arch.univariate.GARCH.forecast", "arch.univariate.GARCH.name", "arch.univariate.GARCH.num_params", "arch.univariate.GARCH.parameter_names", "arch.univariate.GARCH.simulate", "arch.univariate.GARCH.start", "arch.univariate.GARCH.starting_values", "arch.univariate.GARCH.stop", "arch.univariate.GARCH.update", "arch.univariate.GARCH.updateable", "arch.univariate.GARCH.variance_bounds", "arch.univariate.GARCH.volatility_updater", "arch.univariate.GeneralizedError.bounds", "arch.univariate.GeneralizedError.cdf", "arch.univariate.GeneralizedError.constraints", "arch.univariate.GeneralizedError.generator", "arch.univariate.GeneralizedError.loglikelihood", "arch.univariate.GeneralizedError.moment", "arch.univariate.GeneralizedError.name", "arch.univariate.GeneralizedError.parameter_names", "arch.univariate.GeneralizedError.partial_moment", "arch.univariate.GeneralizedError.ppf", "arch.univariate.GeneralizedError.random_state", "arch.univariate.GeneralizedError.simulate", "arch.univariate.GeneralizedError.starting_values", "arch.univariate.HARCH.backcast", "arch.univariate.HARCH.backcast_transform", "arch.univariate.HARCH.bounds", "arch.univariate.HARCH.compute_variance", "arch.univariate.HARCH.constraints", "arch.univariate.HARCH.forecast", "arch.univariate.HARCH.name", "arch.univariate.HARCH.num_params", "arch.univariate.HARCH.parameter_names", "arch.univariate.HARCH.simulate", "arch.univariate.HARCH.start", "arch.univariate.HARCH.starting_values", "arch.univariate.HARCH.stop", "arch.univariate.HARCH.update", "arch.univariate.HARCH.updateable", "arch.univariate.HARCH.variance_bounds", "arch.univariate.HARCH.volatility_updater", "arch.univariate.HARX.bounds", "arch.univariate.HARX.compute_param_cov", "arch.univariate.HARX.constraints", "arch.univariate.HARX.distribution", "arch.univariate.HARX.fit", "arch.univariate.HARX.fix", "arch.univariate.HARX.forecast", "arch.univariate.HARX.name", "arch.univariate.HARX.num_params", "arch.univariate.HARX.parameter_names", "arch.univariate.HARX.resids", "arch.univariate.HARX.simulate", "arch.univariate.HARX.starting_values", "arch.univariate.HARX.volatility", "arch.univariate.HARX.x", "arch.univariate.HARX.y", "arch.univariate.LS.bounds", "arch.univariate.LS.compute_param_cov", "arch.univariate.LS.constraints", "arch.univariate.LS.distribution", "arch.univariate.LS.fit", "arch.univariate.LS.fix", "arch.univariate.LS.forecast", "arch.univariate.LS.name", "arch.univariate.LS.num_params", "arch.univariate.LS.parameter_names", "arch.univariate.LS.resids", "arch.univariate.LS.simulate", "arch.univariate.LS.starting_values", "arch.univariate.LS.volatility", "arch.univariate.LS.x", "arch.univariate.LS.y", "arch.univariate.MIDASHyperbolic.backcast", "arch.univariate.MIDASHyperbolic.backcast_transform", "arch.univariate.MIDASHyperbolic.bounds", "arch.univariate.MIDASHyperbolic.compute_variance", "arch.univariate.MIDASHyperbolic.constraints", "arch.univariate.MIDASHyperbolic.forecast", "arch.univariate.MIDASHyperbolic.name", "arch.univariate.MIDASHyperbolic.num_params", "arch.univariate.MIDASHyperbolic.parameter_names", "arch.univariate.MIDASHyperbolic.simulate", "arch.univariate.MIDASHyperbolic.start", "arch.univariate.MIDASHyperbolic.starting_values", "arch.univariate.MIDASHyperbolic.stop", "arch.univariate.MIDASHyperbolic.update", "arch.univariate.MIDASHyperbolic.updateable", "arch.univariate.MIDASHyperbolic.variance_bounds", "arch.univariate.MIDASHyperbolic.volatility_updater", "arch.univariate.Normal.bounds", "arch.univariate.Normal.cdf", "arch.univariate.Normal.constraints", "arch.univariate.Normal.generator", "arch.univariate.Normal.loglikelihood", "arch.univariate.Normal.moment", "arch.univariate.Normal.name", "arch.univariate.Normal.parameter_names", "arch.univariate.Normal.partial_moment", "arch.univariate.Normal.ppf", "arch.univariate.Normal.random_state", "arch.univariate.Normal.simulate", "arch.univariate.Normal.starting_values", "arch.univariate.RiskMetrics2006.backcast", "arch.univariate.RiskMetrics2006.backcast_transform", "arch.univariate.RiskMetrics2006.bounds", "arch.univariate.RiskMetrics2006.compute_variance", "arch.univariate.RiskMetrics2006.constraints", "arch.univariate.RiskMetrics2006.forecast", "arch.univariate.RiskMetrics2006.name", "arch.univariate.RiskMetrics2006.num_params", "arch.univariate.RiskMetrics2006.parameter_names", "arch.univariate.RiskMetrics2006.simulate", "arch.univariate.RiskMetrics2006.start", "arch.univariate.RiskMetrics2006.starting_values", "arch.univariate.RiskMetrics2006.stop", "arch.univariate.RiskMetrics2006.update", "arch.univariate.RiskMetrics2006.updateable", "arch.univariate.RiskMetrics2006.variance_bounds", "arch.univariate.RiskMetrics2006.volatility_updater", "arch.univariate.SkewStudent.bounds", "arch.univariate.SkewStudent.cdf", "arch.univariate.SkewStudent.constraints", "arch.univariate.SkewStudent.generator", "arch.univariate.SkewStudent.loglikelihood", "arch.univariate.SkewStudent.moment", "arch.univariate.SkewStudent.name", "arch.univariate.SkewStudent.parameter_names", "arch.univariate.SkewStudent.partial_moment", "arch.univariate.SkewStudent.ppf", "arch.univariate.SkewStudent.random_state", "arch.univariate.SkewStudent.simulate", "arch.univariate.SkewStudent.starting_values", "arch.univariate.StudentsT.bounds", "arch.univariate.StudentsT.cdf", "arch.univariate.StudentsT.constraints", "arch.univariate.StudentsT.generator", "arch.univariate.StudentsT.loglikelihood", "arch.univariate.StudentsT.moment", "arch.univariate.StudentsT.name", "arch.univariate.StudentsT.parameter_names", "arch.univariate.StudentsT.partial_moment", "arch.univariate.StudentsT.ppf", "arch.univariate.StudentsT.random_state", "arch.univariate.StudentsT.simulate", "arch.univariate.StudentsT.starting_values", "arch.univariate.ZeroMean.bounds", "arch.univariate.ZeroMean.compute_param_cov", "arch.univariate.ZeroMean.constraints", "arch.univariate.ZeroMean.distribution", "arch.univariate.ZeroMean.fit", "arch.univariate.ZeroMean.fix", "arch.univariate.ZeroMean.forecast", "arch.univariate.ZeroMean.name", "arch.univariate.ZeroMean.num_params", "arch.univariate.ZeroMean.parameter_names", "arch.univariate.ZeroMean.resids", "arch.univariate.ZeroMean.simulate", "arch.univariate.ZeroMean.starting_values", "arch.univariate.ZeroMean.volatility", "arch.univariate.ZeroMean.x", "arch.univariate.ZeroMean.y", "arch.univariate.base.ARCHModel.bounds", "arch.univariate.base.ARCHModel.compute_param_cov", "arch.univariate.base.ARCHModel.constraints", "arch.univariate.base.ARCHModel.distribution", "arch.univariate.base.ARCHModel.fit", "arch.univariate.base.ARCHModel.fix", "arch.univariate.base.ARCHModel.forecast", "arch.univariate.base.ARCHModel.name", "arch.univariate.base.ARCHModel.num_params", "arch.univariate.base.ARCHModel.parameter_names", "arch.univariate.base.ARCHModel.resids", "arch.univariate.base.ARCHModel.simulate", "arch.univariate.base.ARCHModel.starting_values", "arch.univariate.base.ARCHModel.volatility", "arch.univariate.base.ARCHModel.y", "arch.univariate.base.ARCHModelFixedResult.aic", "arch.univariate.base.ARCHModelFixedResult.arch_lm_test", "arch.univariate.base.ARCHModelFixedResult.bic", "arch.univariate.base.ARCHModelFixedResult.conditional_volatility", "arch.univariate.base.ARCHModelFixedResult.forecast", "arch.univariate.base.ARCHModelFixedResult.hedgehog_plot", "arch.univariate.base.ARCHModelFixedResult.loglikelihood", "arch.univariate.base.ARCHModelFixedResult.model", "arch.univariate.base.ARCHModelFixedResult.nobs", "arch.univariate.base.ARCHModelFixedResult.num_params", "arch.univariate.base.ARCHModelFixedResult.params", "arch.univariate.base.ARCHModelFixedResult.plot", "arch.univariate.base.ARCHModelFixedResult.resid", "arch.univariate.base.ARCHModelFixedResult.std_resid", "arch.univariate.base.ARCHModelFixedResult.summary", "arch.univariate.base.ARCHModelForecast.mean", "arch.univariate.base.ARCHModelForecast.residual_variance", "arch.univariate.base.ARCHModelForecast.simulations", "arch.univariate.base.ARCHModelForecast.variance", "arch.univariate.base.ARCHModelForecastSimulation.index", "arch.univariate.base.ARCHModelForecastSimulation.residual_variances", "arch.univariate.base.ARCHModelForecastSimulation.residuals", "arch.univariate.base.ARCHModelForecastSimulation.values", "arch.univariate.base.ARCHModelForecastSimulation.variances", "arch.univariate.base.ARCHModelResult.aic", "arch.univariate.base.ARCHModelResult.arch_lm_test", "arch.univariate.base.ARCHModelResult.bic", "arch.univariate.base.ARCHModelResult.conditional_volatility", "arch.univariate.base.ARCHModelResult.conf_int", "arch.univariate.base.ARCHModelResult.convergence_flag", "arch.univariate.base.ARCHModelResult.fit_start", "arch.univariate.base.ARCHModelResult.fit_stop", "arch.univariate.base.ARCHModelResult.forecast", "arch.univariate.base.ARCHModelResult.hedgehog_plot", "arch.univariate.base.ARCHModelResult.loglikelihood", "arch.univariate.base.ARCHModelResult.model", "arch.univariate.base.ARCHModelResult.nobs", "arch.univariate.base.ARCHModelResult.num_params", "arch.univariate.base.ARCHModelResult.optimization_result", "arch.univariate.base.ARCHModelResult.param_cov", "arch.univariate.base.ARCHModelResult.params", "arch.univariate.base.ARCHModelResult.plot", "arch.univariate.base.ARCHModelResult.pvalues", "arch.univariate.base.ARCHModelResult.resid", "arch.univariate.base.ARCHModelResult.rsquared", "arch.univariate.base.ARCHModelResult.rsquared_adj", "arch.univariate.base.ARCHModelResult.scale", "arch.univariate.base.ARCHModelResult.std_err", "arch.univariate.base.ARCHModelResult.std_resid", "arch.univariate.base.ARCHModelResult.summary", "arch.univariate.base.ARCHModelResult.tvalues", "arch.univariate.distribution.Distribution.bounds", "arch.univariate.distribution.Distribution.cdf", "arch.univariate.distribution.Distribution.constraints", "arch.univariate.distribution.Distribution.generator", "arch.univariate.distribution.Distribution.loglikelihood", "arch.univariate.distribution.Distribution.moment", "arch.univariate.distribution.Distribution.name", "arch.univariate.distribution.Distribution.parameter_names", "arch.univariate.distribution.Distribution.partial_moment", "arch.univariate.distribution.Distribution.ppf", "arch.univariate.distribution.Distribution.random_state", "arch.univariate.distribution.Distribution.simulate", "arch.univariate.distribution.Distribution.starting_values", "arch.univariate.recursions_python.VolatilityUpdater.initialize_update", "arch.univariate.recursions_python.VolatilityUpdater.update", "arch.univariate.volatility.VolatilityProcess.backcast", "arch.univariate.volatility.VolatilityProcess.backcast_transform", "arch.univariate.volatility.VolatilityProcess.bounds", "arch.univariate.volatility.VolatilityProcess.compute_variance", "arch.univariate.volatility.VolatilityProcess.constraints", "arch.univariate.volatility.VolatilityProcess.forecast", "arch.univariate.volatility.VolatilityProcess.name", "arch.univariate.volatility.VolatilityProcess.num_params", "arch.univariate.volatility.VolatilityProcess.parameter_names", "arch.univariate.volatility.VolatilityProcess.simulate", "arch.univariate.volatility.VolatilityProcess.start", "arch.univariate.volatility.VolatilityProcess.starting_values", "arch.univariate.volatility.VolatilityProcess.stop", "arch.univariate.volatility.VolatilityProcess.update", "arch.univariate.volatility.VolatilityProcess.updateable", "arch.univariate.volatility.VolatilityProcess.variance_bounds", "arch.univariate.volatility.VolatilityProcess.volatility_updater", "Introduction to ARCH Models", "Mean Models", "Model Results", "Univariate Volatility Models", "Forecasting with Exogenous Regressors", "Using the Fixed Variance process", "Volatility Forecasting", "ARCH Modeling", "Volatility Scenarios", "Utilities", "Volatility Processes"], "terms": {"thi": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 24, 25, 27, 29, 30, 39, 40, 42, 44, 45, 54, 55, 57, 59, 60, 69, 70, 72, 74, 75, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 236, 237, 238, 239, 240, 253, 258, 259, 260, 262, 266, 267, 277, 417, 419, 420, 421, 424, 425, 431, 432, 433, 435, 442, 452, 461, 478, 496, 513, 529, 534, 544, 561, 578, 595, 613, 630, 660, 678, 694, 709, 739, 783, 788, 799, 812, 840, 872, 879, 891, 895, 896, 897, 898, 899], "page": [0, 900], "list": [0, 18, 21, 33, 36, 39, 48, 51, 54, 63, 66, 78, 81, 95, 101, 242, 243, 246, 247, 252, 253, 256, 257, 288, 289, 301, 302, 312, 313, 325, 326, 339, 340, 351, 352, 427, 428, 437, 447, 448, 449, 450, 456, 464, 475, 481, 490, 500, 507, 516, 523, 532, 541, 547, 558, 564, 575, 581, 592, 598, 610, 616, 627, 633, 642, 649, 657, 663, 672, 681, 688, 697, 706, 712, 721, 728, 736, 742, 751, 758, 764, 771, 777, 786, 793, 802, 859, 866, 876, 882, 891], "contain": [0, 2, 3, 4, 5, 6, 7, 8, 9, 12, 14, 15, 17, 22, 23, 25, 27, 29, 30, 32, 37, 38, 40, 42, 44, 45, 47, 48, 52, 53, 55, 57, 59, 60, 62, 67, 68, 70, 72, 74, 75, 77, 82, 83, 85, 87, 89, 90, 95, 96, 115, 125, 139, 149, 159, 169, 179, 189, 199, 209, 219, 229, 236, 238, 244, 249, 257, 259, 260, 271, 279, 287, 292, 300, 305, 311, 316, 323, 329, 338, 344, 350, 366, 385, 389, 400, 406, 415, 417, 419, 420, 421, 424, 427, 428, 429, 434, 438, 439, 445, 447, 448, 449, 450, 458, 461, 469, 471, 476, 478, 486, 488, 494, 495, 496, 502, 511, 512, 513, 518, 527, 528, 529, 534, 542, 544, 552, 554, 559, 561, 569, 571, 576, 578, 586, 588, 593, 595, 604, 606, 611, 613, 621, 623, 628, 630, 638, 640, 642, 654, 658, 660, 668, 670, 676, 677, 678, 683, 692, 693, 694, 699, 707, 709, 717, 719, 721, 737, 739, 747, 749, 751, 763, 764, 776, 781, 782, 783, 788, 797, 798, 799, 811, 812, 819, 822, 825, 835, 836, 840, 849, 857, 859, 877, 879, 887, 889, 895, 897, 898, 899], "essenti": [0, 258], "end": [0, 4, 5, 87, 88, 90, 100, 104, 105, 106, 107, 108, 109, 110, 111, 266, 267, 269, 274, 277, 417, 424, 496, 513, 529, 678, 694, 783, 799, 812, 839, 840, 891], "user": [0, 89, 94, 95, 112, 122, 136, 146, 156, 166, 176, 186, 196, 206, 216, 226, 425, 455, 474, 495, 512, 528, 540, 557, 574, 591, 609, 626, 656, 677, 693, 705, 735, 782, 798, 875, 898], "function": [0, 4, 11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 87, 88, 89, 92, 93, 95, 259, 262, 265, 268, 427, 440, 452, 465, 482, 548, 565, 582, 599, 617, 634, 643, 646, 651, 664, 713, 722, 730, 743, 752, 755, 760, 765, 768, 773, 860, 868, 872, 883, 891, 896, 897, 898, 899], "class": [0, 3, 5, 6, 7, 8, 9, 12, 15, 25, 27, 30, 40, 42, 45, 55, 57, 60, 70, 72, 75, 85, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 238, 239, 240, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 461, 472, 478, 489, 544, 555, 561, 572, 578, 589, 595, 607, 613, 624, 630, 641, 660, 671, 709, 720, 739, 750, 879, 890, 891, 892, 893, 898, 899, 900, 901], "The": [1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 18, 25, 27, 28, 29, 30, 31, 33, 40, 42, 43, 44, 45, 46, 48, 55, 57, 58, 59, 60, 61, 63, 70, 72, 73, 74, 75, 76, 78, 85, 88, 89, 90, 92, 95, 96, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 144, 145, 146, 147, 149, 151, 152, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 258, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 276, 277, 278, 282, 283, 286, 291, 295, 296, 299, 304, 307, 308, 310, 315, 318, 319, 321, 322, 328, 332, 333, 337, 341, 343, 346, 347, 349, 354, 355, 356, 357, 359, 361, 362, 363, 364, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 387, 388, 390, 391, 392, 394, 395, 396, 397, 398, 399, 401, 402, 403, 405, 407, 410, 411, 412, 413, 414, 416, 417, 419, 420, 421, 424, 426, 427, 428, 429, 432, 433, 435, 438, 439, 442, 443, 445, 447, 450, 452, 457, 460, 461, 462, 463, 465, 469, 472, 478, 479, 480, 482, 486, 489, 496, 497, 498, 513, 514, 529, 530, 544, 545, 546, 548, 552, 555, 561, 562, 563, 565, 569, 572, 578, 579, 580, 582, 586, 589, 595, 596, 597, 599, 604, 607, 613, 614, 615, 617, 621, 624, 630, 631, 632, 634, 638, 641, 645, 646, 648, 650, 652, 660, 661, 662, 664, 668, 671, 678, 679, 694, 695, 709, 710, 711, 713, 717, 720, 724, 725, 727, 729, 731, 733, 739, 740, 741, 743, 747, 750, 754, 755, 757, 759, 761, 767, 768, 770, 772, 774, 783, 784, 799, 800, 811, 812, 813, 827, 830, 835, 840, 841, 854, 862, 865, 867, 869, 871, 872, 873, 879, 880, 881, 883, 887, 890, 891, 895, 896, 897, 898, 899, 900, 901], "bootstrap": [1, 4, 86, 88, 92, 95, 236, 259, 260, 262, 263, 265, 280, 282, 293, 295, 306, 307, 317, 318, 331, 332, 345, 346, 449, 461, 478, 496, 513, 529, 544, 561, 578, 595, 613, 630, 660, 678, 694, 709, 739, 783, 799, 812, 813, 840, 841, 879, 894], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 20, 23, 25, 26, 27, 29, 30, 35, 38, 40, 41, 42, 44, 45, 50, 53, 55, 56, 57, 59, 60, 65, 68, 70, 71, 72, 74, 75, 80, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 114, 116, 120, 124, 126, 130, 138, 140, 144, 148, 150, 154, 158, 160, 164, 168, 170, 174, 178, 180, 184, 188, 190, 194, 198, 200, 204, 208, 210, 214, 218, 220, 224, 228, 230, 234, 236, 238, 239, 240, 244, 247, 253, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 269, 271, 274, 276, 277, 280, 293, 306, 317, 331, 345, 354, 362, 368, 377, 381, 398, 402, 417, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 450, 452, 456, 457, 459, 460, 461, 469, 472, 475, 477, 478, 486, 489, 494, 496, 502, 511, 513, 518, 527, 529, 534, 541, 543, 544, 552, 555, 558, 560, 561, 569, 572, 575, 577, 578, 586, 589, 592, 594, 595, 604, 607, 610, 612, 613, 621, 624, 627, 629, 630, 638, 641, 646, 650, 651, 652, 653, 654, 657, 659, 660, 668, 671, 676, 678, 683, 692, 694, 699, 706, 709, 717, 720, 725, 729, 730, 731, 732, 736, 738, 739, 747, 750, 755, 759, 760, 761, 762, 768, 772, 773, 774, 775, 781, 783, 788, 797, 799, 811, 812, 813, 819, 835, 840, 841, 849, 867, 868, 869, 870, 872, 876, 878, 879, 887, 890, 891, 893, 895, 896, 897, 898, 899, 901], "larg": [1, 91, 95, 97, 259, 269, 274, 417, 420, 421, 898], "area": 1, "number": [1, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 17, 21, 22, 25, 26, 27, 29, 30, 32, 36, 37, 40, 41, 42, 44, 45, 47, 51, 52, 55, 56, 57, 59, 60, 62, 66, 67, 70, 71, 72, 74, 75, 77, 81, 82, 85, 89, 94, 95, 96, 100, 104, 105, 106, 107, 108, 109, 110, 111, 121, 131, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 238, 239, 240, 246, 252, 256, 259, 262, 263, 264, 265, 266, 267, 271, 272, 273, 276, 279, 280, 282, 292, 293, 295, 305, 306, 307, 316, 317, 318, 321, 329, 331, 332, 344, 345, 346, 354, 362, 368, 375, 376, 377, 381, 390, 391, 392, 402, 407, 417, 419, 424, 427, 428, 429, 436, 438, 439, 441, 442, 443, 444, 445, 459, 461, 463, 465, 471, 477, 478, 480, 482, 488, 492, 495, 496, 499, 502, 509, 512, 513, 515, 518, 525, 528, 529, 531, 534, 543, 544, 546, 548, 554, 560, 561, 563, 565, 571, 577, 578, 580, 582, 588, 594, 595, 597, 599, 606, 612, 613, 615, 617, 623, 629, 630, 632, 634, 640, 659, 660, 662, 664, 670, 674, 677, 678, 680, 683, 690, 693, 694, 696, 699, 709, 711, 713, 719, 738, 739, 741, 743, 749, 779, 782, 783, 785, 788, 795, 798, 799, 801, 809, 812, 813, 816, 817, 833, 840, 841, 844, 845, 872, 878, 879, 881, 883, 889, 891, 895, 897, 898, 899], "high": [1, 2, 4, 87, 88, 92, 894, 896], "qualiti": 1, "book": 1, "lead": [1, 259, 271, 272, 368, 372, 373], "includ": [1, 3, 89, 95, 118, 128, 142, 152, 162, 172, 182, 192, 202, 212, 222, 232, 236, 237, 259, 262, 263, 264, 265, 267, 269, 271, 272, 274, 276, 277, 279, 292, 305, 316, 329, 344, 368, 373, 375, 376, 385, 417, 420, 421, 424, 427, 428, 437, 438, 439, 440, 494, 496, 502, 511, 513, 518, 527, 529, 676, 678, 683, 692, 694, 699, 781, 783, 797, 799, 809, 812, 833, 840, 895, 898], "chernick": 1, "m": [1, 4, 10, 87, 88, 237, 238, 240, 264, 266, 271, 362, 377, 381, 437, 438, 440, 819, 849], "r": [1, 3, 5, 7, 8, 9, 88, 237, 238, 239, 263, 421, 450, 852, 853, 891, 895, 896, 898, 899], "2011": [1, 237, 238, 258, 262, 897], "method": [1, 3, 5, 6, 7, 8, 9, 14, 29, 44, 59, 74, 87, 88, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 238, 239, 240, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 366, 385, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 461, 478, 494, 496, 511, 513, 527, 529, 544, 561, 578, 595, 613, 630, 660, 676, 678, 692, 694, 709, 739, 781, 783, 797, 799, 812, 813, 825, 840, 841, 879, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901], "A": [1, 3, 4, 10, 23, 38, 53, 68, 83, 86, 87, 89, 100, 104, 105, 106, 107, 108, 109, 110, 111, 114, 124, 138, 148, 158, 168, 178, 188, 198, 208, 218, 228, 237, 238, 239, 258, 263, 264, 265, 266, 267, 271, 274, 366, 385, 420, 421, 423, 424, 427, 428, 437, 438, 440, 459, 477, 494, 496, 511, 513, 527, 529, 543, 560, 577, 594, 612, 629, 644, 659, 676, 678, 692, 694, 708, 723, 738, 753, 766, 781, 783, 797, 799, 812, 840, 861, 878, 891, 896, 898, 899, 900, 901], "guid": 1, "practition": 1, "research": 1, "vol": [1, 424, 427, 496, 497, 513, 529, 650, 678, 694, 729, 759, 772, 783, 799, 813, 841, 867, 891, 895, 896, 897, 898, 899], "619": [1, 259], "john": [1, 266], "wilei": 1, "son": 1, "davidson": 1, "davison": 1, "c": [1, 96, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 417, 420, 421, 452, 646, 755, 897], "1997": [1, 266], "applic": [1, 88, 89, 259, 266, 446, 891, 892, 899], "1": [1, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 25, 29, 30, 40, 44, 45, 55, 59, 60, 70, 74, 75, 85, 87, 88, 89, 94, 100, 104, 105, 106, 107, 108, 109, 110, 111, 118, 120, 128, 130, 142, 144, 152, 154, 162, 164, 172, 174, 182, 184, 192, 194, 202, 204, 212, 214, 222, 224, 232, 234, 238, 239, 240, 247, 249, 259, 263, 264, 265, 266, 269, 271, 274, 277, 341, 362, 368, 381, 389, 398, 406, 417, 420, 421, 424, 425, 426, 427, 428, 431, 432, 433, 435, 437, 438, 440, 442, 443, 461, 478, 494, 496, 502, 511, 513, 518, 527, 529, 534, 544, 561, 578, 595, 613, 630, 646, 650, 651, 654, 660, 676, 678, 683, 692, 694, 699, 708, 709, 725, 729, 730, 739, 755, 759, 760, 768, 772, 773, 781, 783, 788, 797, 799, 811, 812, 813, 835, 840, 841, 854, 867, 868, 873, 879, 891, 892, 895, 896, 897, 898, 899], "cambridg": 1, "univers": [1, 3, 262, 265, 266], "press": [1, 262, 265, 266], "efrontibshirani": 1, "efron": 1, "b": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 25, 26, 27, 28, 29, 30, 40, 41, 42, 43, 44, 45, 55, 56, 57, 58, 59, 60, 70, 71, 72, 73, 74, 75, 85, 86, 87, 88, 89, 120, 130, 144, 154, 164, 174, 184, 194, 204, 214, 224, 234, 259, 264, 265, 274, 424, 443, 459, 477, 492, 509, 525, 543, 560, 577, 594, 612, 629, 644, 659, 674, 690, 708, 723, 738, 753, 755, 766, 779, 795, 861, 878, 899], "tibshirani": 1, "j": [1, 237, 238, 240, 259, 262, 263, 265, 269, 271, 431, 433, 435, 437, 438, 440, 496, 502, 513, 518, 529, 678, 683, 694, 699, 783, 799, 812, 840, 895], "1994": [1, 9, 262, 264, 265, 268, 443], "an": [1, 3, 4, 5, 6, 7, 8, 9, 12, 14, 27, 29, 42, 44, 57, 59, 72, 74, 88, 89, 90, 95, 96, 100, 104, 105, 106, 107, 108, 109, 110, 111, 116, 126, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 238, 239, 240, 257, 258, 259, 263, 264, 266, 267, 271, 276, 277, 354, 368, 402, 419, 420, 421, 423, 424, 428, 436, 437, 440, 441, 443, 444, 447, 448, 449, 450, 458, 476, 495, 496, 502, 512, 513, 518, 528, 529, 534, 542, 559, 576, 593, 611, 628, 658, 677, 678, 683, 693, 694, 699, 707, 737, 782, 783, 788, 798, 799, 812, 813, 819, 840, 841, 849, 877, 891, 896, 897, 898, 899], "introduct": [1, 419, 894, 898], "57": [1, 420, 421, 895, 898], "crc": 1, "politisromanowolf": 1, "politi": [1, 5, 8, 9, 10], "d": [1, 2, 4, 10, 15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 262, 264, 265, 267, 417, 424, 427, 428, 433, 438, 496, 513, 529, 653, 678, 694, 732, 762, 775, 783, 799, 812, 813, 819, 840, 841, 849, 870, 895, 896, 898], "n": [1, 3, 10, 262, 265, 266, 269, 270, 271, 272, 274, 276, 277, 420, 424, 438, 647, 650, 726, 729, 756, 759, 769, 772, 864, 867, 895, 898, 899], "romano": [1, 5, 8, 9, 10, 237, 240, 258], "p": [1, 4, 87, 88, 96, 237, 238, 239, 240, 244, 247, 249, 250, 253, 258, 259, 262, 263, 264, 265, 271, 274, 277, 284, 287, 297, 300, 309, 311, 320, 323, 335, 338, 348, 350, 360, 362, 379, 381, 396, 398, 400, 412, 415, 417, 420, 421, 424, 425, 426, 427, 428, 431, 433, 435, 438, 502, 518, 683, 699, 788, 850, 891, 895, 896, 897, 898, 899, 900], "wolf": [1, 237, 240, 258], "1999": [1, 899], "subsampl": 1, "articl": [1, 237], "us": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 53, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 83, 85, 87, 88, 90, 91, 92, 95, 96, 97, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 121, 122, 123, 127, 128, 131, 136, 137, 141, 142, 145, 146, 147, 151, 152, 155, 156, 157, 161, 162, 165, 166, 167, 171, 172, 175, 176, 177, 181, 182, 185, 186, 187, 191, 192, 195, 196, 197, 201, 202, 205, 206, 207, 211, 212, 215, 216, 217, 221, 222, 225, 226, 227, 231, 232, 235, 236, 237, 238, 239, 240, 246, 247, 249, 252, 253, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 276, 277, 280, 281, 282, 288, 290, 293, 294, 295, 301, 303, 306, 307, 312, 314, 317, 318, 321, 325, 327, 330, 331, 332, 334, 336, 339, 342, 345, 346, 351, 353, 354, 355, 357, 358, 368, 369, 371, 374, 377, 391, 392, 401, 402, 404, 416, 417, 420, 421, 424, 425, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 447, 450, 452, 454, 458, 459, 461, 465, 466, 467, 468, 469, 471, 473, 476, 477, 478, 482, 483, 484, 485, 486, 488, 490, 491, 492, 494, 495, 496, 501, 502, 507, 508, 509, 511, 512, 513, 517, 518, 523, 524, 525, 527, 528, 529, 533, 534, 539, 542, 543, 544, 548, 549, 550, 551, 552, 554, 556, 559, 560, 561, 565, 566, 567, 568, 569, 571, 573, 576, 577, 578, 582, 583, 584, 585, 586, 588, 590, 593, 594, 595, 599, 600, 601, 602, 604, 606, 608, 611, 612, 613, 617, 618, 619, 620, 621, 623, 625, 628, 629, 630, 634, 635, 636, 637, 638, 640, 642, 643, 644, 646, 647, 650, 651, 652, 654, 655, 658, 659, 660, 664, 665, 666, 667, 668, 670, 672, 673, 674, 676, 677, 678, 682, 683, 688, 689, 690, 692, 693, 694, 698, 699, 704, 707, 709, 713, 714, 715, 716, 717, 719, 721, 722, 723, 725, 726, 729, 730, 731, 733, 737, 738, 739, 743, 744, 745, 746, 747, 749, 751, 752, 753, 755, 756, 759, 760, 761, 763, 764, 765, 766, 768, 769, 772, 773, 774, 776, 777, 778, 779, 781, 782, 783, 787, 788, 793, 794, 795, 797, 798, 799, 803, 811, 812, 813, 815, 816, 819, 825, 829, 835, 836, 838, 839, 840, 841, 843, 844, 849, 859, 860, 861, 864, 867, 868, 869, 871, 872, 873, 874, 877, 878, 879, 883, 884, 885, 886, 887, 889, 891, 893, 894, 897, 898, 899, 901], "creation": [1, 237], "modul": [1, 2, 95, 236, 237, 260, 267, 419], "carpenterbithel": 1, "carpent": 1, "bithel": 1, "2000": [1, 7, 237, 239, 258, 424, 438, 496, 513, 529, 678, 694, 783, 799, 813, 841, 891], "confid": [1, 2, 3, 14, 29, 44, 59, 74, 89, 95, 237, 238, 241, 836], "interv": [1, 2, 3, 14, 29, 44, 59, 74, 89, 95, 651, 730, 760, 773, 836, 868], "when": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 24, 25, 26, 27, 29, 30, 39, 40, 41, 42, 44, 45, 54, 55, 56, 57, 59, 60, 69, 70, 71, 72, 74, 75, 84, 85, 87, 89, 91, 95, 96, 97, 100, 104, 105, 106, 107, 108, 109, 110, 111, 238, 239, 240, 247, 249, 253, 259, 262, 263, 265, 267, 271, 276, 277, 280, 281, 282, 293, 294, 295, 306, 307, 317, 318, 331, 332, 345, 346, 368, 420, 421, 424, 427, 428, 429, 432, 433, 434, 438, 439, 443, 445, 450, 452, 458, 461, 465, 467, 469, 476, 478, 482, 484, 486, 494, 495, 496, 501, 502, 511, 512, 513, 517, 518, 527, 528, 529, 533, 534, 542, 544, 548, 550, 552, 559, 561, 565, 567, 569, 576, 578, 582, 584, 586, 593, 595, 599, 601, 604, 611, 613, 617, 619, 621, 628, 630, 634, 636, 638, 642, 658, 660, 664, 666, 668, 676, 677, 678, 682, 683, 692, 693, 694, 698, 699, 707, 709, 713, 715, 717, 721, 737, 739, 743, 745, 747, 751, 764, 781, 782, 783, 787, 788, 797, 798, 799, 803, 812, 813, 819, 836, 840, 841, 849, 859, 877, 879, 883, 885, 887, 891, 893, 894, 895, 896, 897, 898, 899], "which": [1, 3, 4, 10, 89, 90, 92, 94, 95, 247, 253, 258, 259, 260, 266, 268, 417, 421, 424, 433, 435, 437, 452, 494, 496, 511, 513, 527, 529, 643, 654, 676, 678, 692, 694, 722, 752, 765, 781, 783, 797, 799, 811, 812, 819, 835, 840, 849, 860, 895, 896, 897, 898, 899], "what": [1, 899], "practic": [1, 91, 97], "medic": 1, "statistician": 1, "statist": [1, 4, 7, 15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 95, 237, 239, 259, 262, 264, 265, 266, 267, 273, 277, 282, 284, 286, 287, 290, 295, 297, 299, 300, 303, 307, 309, 310, 311, 314, 318, 320, 321, 322, 323, 327, 332, 335, 337, 338, 342, 346, 348, 349, 350, 353, 367, 386, 389, 396, 399, 400, 406, 412, 414, 415, 417, 420, 421, 850, 858, 900], "medicin": 1, "19": [1, 3, 263, 421, 496, 513, 529, 650, 678, 694, 729, 759, 772, 783, 799, 812, 840, 867, 895, 896, 897, 898], "9": [1, 3, 91, 97, 259, 420, 421, 891, 895, 896, 897, 898, 899], "1141": 1, "1164": 1, "davidsonmackinnon": 1, "mackinnon": [1, 262, 265], "g": [1, 3, 4, 10, 86, 94, 95, 96, 262, 263, 264, 265, 267, 424, 427, 891, 897], "2006": [1, 442, 898], "econometr": [1, 10, 262, 264, 266, 269, 271, 274, 277, 440], "palgrav": 1, "handbook": 1, "812": 1, "38": [1, 3, 420, 421, 891], "diciccioefron": 1, "diciccio": 1, "t": [1, 3, 4, 89, 94, 95, 120, 130, 144, 154, 164, 174, 184, 194, 204, 214, 224, 234, 238, 239, 240, 259, 262, 263, 265, 267, 269, 271, 274, 276, 277, 354, 362, 367, 368, 377, 381, 386, 398, 402, 420, 421, 424, 425, 426, 427, 428, 431, 432, 433, 435, 437, 438, 440, 443, 496, 513, 529, 678, 694, 755, 768, 783, 799, 811, 812, 835, 840, 850, 858, 873, 891, 895, 896, 897, 899], "1996": [1, 263], "scienc": [1, 650, 729, 759, 772, 867], "189": [1, 896], "212": 1, "1987": [1, 265], "better": [1, 258, 259, 420], "journal": [1, 237, 239, 262, 264, 265, 267, 269, 271, 277], "american": 1, "associ": [1, 472, 489, 555, 572, 589, 607, 624, 641, 671, 720, 750, 890], "82": [1, 899], "397": 1, "171": 1, "185": [1, 420], "provid": [2, 3, 5, 6, 8, 9, 11, 14, 20, 26, 29, 35, 41, 44, 50, 56, 59, 65, 71, 74, 80, 89, 95, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 122, 136, 146, 156, 166, 176, 186, 196, 206, 216, 226, 238, 239, 240, 271, 277, 354, 368, 402, 423, 424, 425, 432, 436, 441, 443, 444, 455, 474, 494, 496, 511, 513, 527, 529, 540, 557, 574, 591, 609, 626, 656, 676, 678, 692, 694, 705, 735, 781, 783, 797, 799, 812, 813, 819, 840, 841, 849, 875, 892, 894, 895, 896, 898, 899, 901], "both": [2, 4, 5, 6, 7, 8, 9, 89, 259, 420, 894, 895, 897, 899], "low": [2, 4, 88, 92, 95, 262, 894], "level": [2, 92, 95, 421, 894], "interfac": 2, "data": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 25, 26, 27, 28, 29, 30, 40, 41, 42, 43, 44, 45, 55, 56, 57, 58, 59, 60, 70, 71, 72, 73, 74, 75, 85, 87, 88, 89, 90, 91, 95, 96, 97, 100, 104, 105, 106, 107, 108, 109, 110, 111, 114, 124, 138, 148, 158, 168, 178, 188, 198, 208, 218, 228, 236, 237, 238, 239, 240, 249, 259, 262, 263, 264, 265, 266, 267, 268, 269, 274, 277, 282, 290, 295, 303, 307, 314, 318, 327, 332, 342, 346, 353, 354, 368, 402, 417, 419, 420, 421, 424, 427, 428, 429, 434, 438, 439, 440, 445, 447, 450, 465, 482, 496, 502, 513, 518, 529, 534, 548, 565, 582, 599, 617, 634, 646, 664, 678, 683, 694, 699, 713, 725, 743, 755, 768, 783, 788, 799, 811, 812, 813, 816, 819, 835, 840, 841, 844, 849, 854, 863, 883, 891, 898, 899], "numpi": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 19, 25, 26, 27, 29, 30, 34, 40, 41, 42, 44, 45, 49, 55, 56, 57, 59, 60, 64, 70, 71, 72, 74, 75, 79, 85, 87, 89, 91, 95, 96, 97, 118, 128, 142, 152, 162, 172, 182, 192, 202, 212, 222, 232, 238, 239, 240, 259, 262, 263, 264, 265, 420, 421, 427, 428, 429, 438, 439, 445, 459, 461, 465, 467, 471, 477, 478, 482, 484, 488, 492, 496, 501, 502, 503, 509, 513, 517, 518, 519, 525, 529, 533, 534, 535, 543, 544, 548, 550, 554, 560, 561, 565, 567, 571, 577, 578, 582, 584, 588, 594, 595, 599, 601, 606, 612, 613, 617, 619, 623, 629, 630, 634, 636, 640, 643, 644, 645, 652, 654, 659, 660, 664, 666, 670, 674, 678, 682, 683, 684, 690, 694, 698, 699, 700, 709, 713, 715, 719, 722, 723, 724, 731, 733, 734, 738, 739, 743, 745, 749, 752, 753, 754, 761, 763, 765, 766, 767, 774, 776, 779, 783, 787, 788, 789, 795, 799, 803, 805, 812, 840, 860, 861, 862, 869, 871, 878, 879, 883, 885, 889, 895, 896, 897, 898, 899], "arrai": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 25, 26, 30, 40, 41, 45, 55, 56, 60, 70, 71, 75, 85, 87, 88, 89, 96, 100, 104, 105, 106, 107, 108, 109, 110, 111, 238, 239, 240, 253, 257, 259, 269, 274, 277, 417, 427, 428, 434, 438, 439, 458, 459, 461, 465, 467, 469, 471, 476, 477, 478, 482, 484, 486, 488, 492, 494, 496, 502, 509, 511, 513, 518, 525, 527, 529, 534, 542, 543, 544, 548, 550, 552, 554, 559, 560, 561, 565, 567, 569, 571, 576, 577, 578, 582, 584, 586, 588, 593, 594, 595, 599, 601, 604, 606, 611, 612, 613, 617, 619, 621, 623, 628, 629, 630, 634, 636, 638, 640, 644, 654, 658, 659, 660, 664, 666, 668, 670, 674, 676, 678, 683, 690, 692, 694, 699, 707, 709, 713, 715, 717, 719, 723, 737, 738, 739, 743, 745, 747, 749, 753, 763, 766, 776, 779, 781, 783, 788, 795, 797, 799, 811, 812, 835, 836, 840, 850, 855, 858, 861, 863, 873, 877, 878, 879, 883, 885, 887, 889, 897], "panda": [2, 3, 4, 5, 6, 7, 8, 9, 10, 87, 88, 91, 95, 96, 97, 244, 249, 250, 259, 389, 406, 417, 421, 438, 447, 450, 496, 502, 513, 518, 529, 534, 678, 683, 694, 699, 783, 788, 799, 812, 813, 836, 840, 841, 895, 897, 898, 899], "seri": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 58, 59, 60, 70, 71, 72, 73, 74, 75, 85, 88, 91, 95, 97, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 239, 240, 249, 250, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 290, 303, 314, 327, 342, 353, 359, 360, 361, 365, 367, 373, 378, 379, 380, 384, 386, 388, 389, 397, 405, 406, 413, 417, 419, 420, 421, 427, 428, 429, 438, 439, 445, 446, 447, 450, 465, 478, 482, 494, 495, 496, 501, 502, 506, 511, 512, 513, 517, 518, 522, 527, 528, 529, 533, 534, 538, 544, 548, 561, 565, 578, 582, 595, 599, 613, 617, 630, 634, 643, 646, 647, 650, 651, 653, 660, 664, 676, 677, 678, 682, 683, 687, 692, 693, 694, 698, 699, 703, 709, 713, 722, 725, 726, 729, 730, 732, 739, 743, 752, 755, 756, 759, 760, 762, 765, 768, 769, 772, 773, 775, 781, 782, 783, 787, 788, 792, 797, 798, 799, 803, 804, 807, 811, 812, 813, 818, 820, 821, 835, 840, 841, 848, 850, 851, 855, 856, 858, 860, 863, 864, 867, 868, 870, 879, 883, 891, 895, 898], "datafram": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 58, 59, 60, 70, 71, 72, 73, 74, 75, 85, 87, 88, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 132, 133, 134, 135, 238, 239, 240, 244, 247, 257, 259, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 274, 276, 277, 290, 303, 314, 327, 342, 353, 356, 370, 372, 417, 421, 424, 427, 428, 429, 438, 439, 445, 446, 496, 501, 502, 505, 506, 513, 517, 518, 521, 522, 529, 533, 534, 537, 538, 646, 678, 682, 683, 686, 687, 694, 698, 699, 702, 703, 725, 755, 768, 783, 787, 788, 791, 792, 799, 803, 804, 807, 812, 823, 824, 826, 836, 840, 847, 863, 891, 897, 898], "all": [2, 3, 4, 7, 10, 14, 29, 44, 59, 74, 87, 88, 95, 96, 239, 259, 266, 267, 271, 368, 372, 385, 417, 419, 420, 421, 423, 424, 425, 427, 428, 430, 437, 438, 446, 452, 461, 478, 496, 513, 529, 544, 561, 578, 595, 613, 630, 660, 678, 694, 709, 739, 783, 799, 812, 813, 840, 841, 879, 892, 893, 894, 895, 897, 898, 899, 901], "have": [2, 4, 7, 15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 86, 95, 96, 100, 104, 105, 106, 107, 108, 109, 110, 111, 259, 419, 420, 421, 424, 425, 434, 437, 447, 450, 495, 496, 502, 512, 513, 518, 528, 529, 646, 677, 678, 683, 693, 694, 699, 755, 768, 782, 783, 798, 799, 812, 813, 840, 841, 854, 895, 896, 897, 898, 899, 901], "same": [2, 3, 4, 5, 6, 7, 8, 9, 14, 29, 44, 59, 74, 258, 259, 271, 321, 377, 420, 421, 425, 430, 434, 447, 450, 458, 471, 476, 488, 496, 503, 513, 519, 529, 535, 542, 554, 559, 571, 576, 588, 593, 606, 611, 623, 628, 640, 658, 670, 678, 684, 694, 700, 707, 719, 737, 749, 783, 789, 799, 805, 812, 840, 873, 877, 889, 891, 893, 895, 896, 898, 899], "onli": [2, 3, 4, 7, 89, 94, 95, 239, 259, 264, 265, 266, 362, 381, 385, 420, 421, 424, 451, 469, 486, 496, 513, 529, 552, 569, 586, 604, 621, 638, 668, 678, 694, 717, 747, 783, 799, 812, 813, 840, 841, 887, 891, 895, 897, 898, 899], "differ": [2, 3, 13, 14, 28, 29, 43, 44, 58, 59, 73, 74, 86, 89, 96, 239, 258, 259, 263, 269, 271, 274, 276, 277, 417, 421, 424, 427, 428, 429, 438, 439, 445, 891, 897, 898], "name": [2, 3, 12, 15, 25, 27, 30, 40, 42, 45, 55, 57, 60, 70, 72, 75, 85, 95, 99, 102, 103, 242, 243, 244, 247, 257, 259, 277, 354, 368, 402, 408, 421, 427, 438, 447, 450, 464, 481, 496, 500, 513, 516, 529, 532, 547, 564, 581, 598, 616, 633, 649, 663, 678, 681, 694, 697, 712, 728, 742, 758, 771, 783, 786, 799, 802, 812, 840, 866, 882, 891, 895, 896, 897, 899, 900], "setup": [2, 3, 259, 420, 895, 897], "paramet": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 85, 88, 89, 94, 95, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 238, 239, 240, 246, 247, 249, 252, 253, 256, 259, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 276, 277, 354, 355, 356, 358, 359, 360, 365, 366, 367, 368, 369, 370, 371, 372, 373, 377, 378, 379, 384, 385, 386, 395, 402, 411, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 452, 453, 454, 455, 456, 458, 459, 461, 463, 464, 465, 467, 469, 471, 473, 474, 475, 476, 477, 478, 480, 481, 482, 484, 486, 488, 490, 491, 492, 494, 495, 496, 499, 500, 501, 502, 507, 508, 509, 511, 512, 513, 515, 516, 517, 518, 523, 524, 525, 527, 528, 529, 531, 532, 533, 534, 539, 540, 541, 542, 543, 544, 546, 547, 548, 550, 552, 554, 556, 557, 558, 559, 560, 561, 563, 564, 565, 567, 569, 571, 573, 574, 575, 576, 577, 578, 580, 581, 582, 584, 586, 588, 590, 591, 592, 593, 594, 595, 597, 598, 599, 601, 604, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 619, 621, 623, 625, 626, 627, 628, 629, 630, 632, 633, 634, 636, 638, 640, 642, 643, 644, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 666, 668, 670, 672, 673, 674, 676, 677, 678, 680, 681, 682, 683, 688, 689, 690, 692, 693, 694, 696, 697, 698, 699, 704, 705, 706, 707, 708, 709, 711, 712, 713, 715, 717, 719, 721, 722, 723, 725, 726, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 745, 747, 749, 751, 752, 753, 755, 756, 758, 759, 760, 762, 763, 764, 765, 766, 768, 769, 771, 772, 773, 775, 776, 777, 778, 779, 781, 782, 783, 785, 786, 787, 788, 793, 794, 795, 797, 798, 799, 801, 802, 803, 809, 812, 813, 817, 818, 819, 833, 836, 838, 839, 840, 841, 845, 847, 848, 849, 854, 855, 859, 860, 861, 863, 864, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 885, 887, 889, 891, 893, 895, 896, 897, 899, 900, 901], "intern": [2, 87, 253, 443, 899], "gener": [2, 3, 5, 6, 7, 8, 9, 12, 13, 15, 17, 19, 21, 22, 23, 25, 27, 28, 30, 32, 34, 36, 37, 38, 40, 42, 43, 45, 47, 49, 51, 52, 53, 55, 57, 58, 60, 62, 64, 66, 67, 68, 70, 72, 73, 75, 77, 79, 81, 82, 83, 85, 89, 92, 95, 96, 238, 239, 240, 246, 252, 256, 259, 264, 424, 436, 437, 441, 443, 444, 451, 461, 465, 478, 482, 494, 495, 496, 511, 512, 513, 527, 528, 529, 544, 548, 561, 565, 578, 582, 595, 599, 613, 617, 630, 634, 646, 652, 660, 664, 676, 677, 678, 692, 693, 694, 709, 713, 731, 739, 743, 761, 774, 781, 782, 783, 797, 798, 799, 812, 813, 840, 841, 869, 879, 883, 891, 895, 898], "sampl": [2, 4, 7, 10, 14, 15, 25, 29, 30, 40, 44, 45, 55, 59, 60, 70, 74, 75, 85, 88, 89, 90, 94, 95, 120, 130, 144, 154, 164, 174, 184, 194, 204, 214, 224, 234, 263, 264, 273, 424, 427, 428, 429, 438, 439, 445, 461, 478, 491, 496, 508, 513, 524, 529, 544, 561, 578, 595, 613, 630, 660, 673, 678, 689, 694, 709, 739, 778, 783, 794, 799, 812, 838, 839, 840, 872, 879, 891, 897, 899], "scheme": [2, 424], "exampl": [2, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 85, 87, 88, 89, 95, 236, 259, 260, 262, 263, 264, 265, 266, 419, 421, 425, 426, 427, 428, 429, 431, 432, 433, 435, 437, 438, 439, 440, 442, 445, 452, 496, 502, 513, 518, 529, 534, 678, 683, 694, 699, 783, 788, 799, 812, 813, 819, 840, 841, 849, 891, 894, 895, 896, 897, 898, 899, 901], "construct": [2, 3, 4, 5, 6, 8, 9, 89, 96, 259, 424, 433, 454, 459, 471, 473, 477, 488, 490, 492, 494, 495, 496, 507, 509, 511, 512, 513, 523, 525, 527, 528, 529, 539, 543, 554, 556, 560, 571, 573, 577, 588, 590, 594, 606, 608, 612, 623, 625, 629, 640, 644, 654, 655, 659, 670, 672, 674, 676, 677, 678, 688, 690, 692, 693, 694, 704, 719, 723, 733, 734, 738, 749, 753, 763, 766, 776, 777, 779, 781, 782, 783, 793, 795, 797, 798, 799, 812, 822, 836, 840, 857, 861, 871, 874, 878, 889, 891, 895, 898, 899], "covari": [2, 3, 4, 14, 15, 25, 29, 30, 40, 44, 45, 55, 59, 60, 70, 74, 75, 85, 95, 236, 264, 265, 269, 272, 274, 277, 321, 354, 355, 356, 357, 358, 368, 369, 370, 371, 372, 374, 377, 402, 404, 408, 420, 421, 450, 491, 494, 508, 511, 524, 527, 673, 676, 689, 692, 778, 781, 794, 797, 847, 891, 895, 896, 898, 899], "estim": [2, 4, 5, 8, 9, 10, 14, 15, 25, 29, 30, 40, 44, 45, 55, 59, 60, 70, 74, 75, 85, 89, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 119, 120, 121, 122, 124, 125, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 143, 144, 145, 146, 148, 149, 153, 154, 155, 156, 158, 159, 163, 164, 165, 166, 168, 169, 173, 174, 175, 176, 178, 179, 183, 184, 185, 186, 188, 189, 193, 194, 195, 196, 198, 199, 203, 204, 205, 206, 208, 209, 213, 214, 215, 216, 218, 219, 223, 224, 225, 226, 228, 229, 233, 234, 235, 236, 250, 259, 264, 265, 268, 269, 271, 272, 274, 276, 277, 280, 285, 293, 298, 306, 317, 331, 334, 336, 345, 354, 355, 356, 357, 358, 359, 362, 366, 368, 369, 370, 371, 374, 377, 378, 381, 385, 388, 398, 402, 404, 405, 408, 419, 420, 421, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 438, 439, 443, 445, 447, 450, 452, 453, 457, 459, 460, 471, 477, 488, 490, 494, 496, 507, 511, 513, 523, 527, 529, 543, 554, 560, 571, 577, 588, 594, 606, 612, 623, 629, 640, 654, 659, 670, 672, 676, 678, 688, 692, 694, 719, 733, 738, 749, 763, 776, 777, 781, 783, 793, 797, 799, 809, 811, 812, 813, 816, 833, 835, 838, 839, 840, 841, 844, 854, 871, 878, 889, 891, 893, 895, 897, 898, 899, 901], "semiparametr": [2, 4, 14, 29, 44, 59, 74], "parametr": [2, 14, 15, 25, 29, 30, 40, 44, 45, 55, 59, 60, 70, 74, 75, 85, 438], "independ": [2, 3, 7, 95, 424, 895], "ident": [2, 4, 14, 29, 44, 59, 74, 259, 263, 277, 420, 424, 437, 443, 496, 513, 529, 678, 694, 783, 799, 812, 813, 840, 841, 897, 898, 899], "distribut": [2, 4, 5, 8, 9, 10, 89, 90, 94, 95, 96, 239, 262, 265, 273, 277, 420, 424, 427, 428, 429, 436, 438, 439, 441, 443, 444, 445, 446, 495, 502, 512, 518, 528, 534, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 677, 683, 693, 699, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 782, 788, 798, 891, 894, 895, 896, 897, 899], "time": [2, 3, 4, 10, 95, 259, 262, 263, 264, 265, 266, 267, 276, 277, 417, 419, 420, 421, 424, 496, 513, 529, 678, 694, 783, 799, 811, 812, 813, 835, 840, 841, 873, 891, 895, 896, 898, 899, 901], "background": [2, 260, 894], "refer": [2, 10, 238, 239, 240, 260, 262, 263, 264, 265, 266, 267, 269, 271, 274, 277, 440, 443, 650, 729, 759, 772, 867, 894], "code": [3, 94, 95, 259, 420, 421, 424, 896, 897, 898], "requir": [3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 85, 89, 91, 95, 97, 239, 240, 259, 262, 266, 420, 421, 424, 461, 465, 478, 482, 496, 502, 513, 518, 529, 544, 548, 561, 565, 578, 582, 595, 599, 613, 617, 630, 634, 660, 664, 678, 683, 694, 699, 709, 713, 739, 743, 783, 799, 812, 840, 879, 883, 896, 897, 898], "run": [3, 14, 29, 44, 59, 74, 95, 101, 132, 135, 236, 253, 259, 263, 264, 265, 267, 269, 274, 277, 280, 293, 306, 317, 331, 345, 354, 358, 362, 368, 377, 381, 402, 404, 408, 420, 421, 461, 478, 496, 513, 529, 544, 561, 578, 595, 613, 630, 660, 678, 694, 709, 739, 783, 799, 812, 813, 840, 841, 879, 895, 896, 897, 898, 899], "ipython": [3, 94, 259, 420, 421, 896, 897, 898], "notebook": [3, 91, 94, 97, 259, 420, 421, 496, 513, 529, 678, 694, 783, 799, 812, 840, 895, 896, 897, 898], "matplotlib": [3, 259, 395, 411, 420, 421, 895, 896, 897, 898, 899], "inlin": [3, 95, 259, 420, 421, 895, 896, 897, 898, 899], "import": [3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 85, 87, 88, 89, 91, 95, 97, 259, 262, 263, 264, 265, 266, 417, 420, 421, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 437, 438, 439, 440, 442, 445, 496, 502, 513, 518, 529, 534, 678, 683, 694, 699, 783, 788, 799, 813, 819, 841, 849, 891, 892, 895, 896, 897, 898, 899], "pyplot": [3, 259, 420, 421, 895, 896, 897, 898, 899], "plt": [3, 259, 420, 421, 895, 896, 897, 898, 899], "seaborn": [3, 87, 259, 420, 421, 895, 896, 897, 898, 899], "set_styl": [3, 259, 420, 421, 895, 896, 897, 898, 899], "darkgrid": [3, 259, 420, 421, 895, 896, 897, 898, 899], "rc": [3, 259, 420, 421, 895, 896, 897, 898, 899], "figur": [3, 259, 395, 411, 420, 421, 813, 819, 841, 849, 895, 896, 897, 898, 899], "figsiz": [3, 259, 420, 421, 895, 896, 897, 898, 899], "16": [3, 259, 420, 421, 891, 895, 896, 897, 898, 899], "6": [3, 4, 108, 259, 420, 421, 438, 812, 840, 891, 895, 896, 897, 898, 899], "savefig": [3, 259, 420, 421, 895, 896, 897, 898, 899], "dpi": [3, 259, 420, 421, 895, 896, 897, 898, 899], "90": [3, 259, 420, 421, 895, 896, 897, 898, 899], "font": [3, 259, 420, 421, 895, 896, 897, 898, 899], "famili": [3, 240, 259, 420, 421, 895, 896, 897, 898, 899], "san": [3, 259, 420, 421, 895, 896, 897, 898, 899], "serif": [3, 259, 420, 421, 895, 896, 897, 898, 899], "size": [3, 4, 5, 8, 9, 10, 14, 29, 44, 59, 74, 86, 88, 95, 120, 130, 144, 154, 164, 174, 184, 194, 204, 214, 224, 234, 238, 240, 244, 258, 259, 260, 262, 263, 264, 265, 267, 273, 420, 421, 458, 476, 496, 513, 529, 542, 559, 576, 593, 611, 628, 653, 658, 678, 694, 707, 732, 733, 737, 762, 775, 783, 799, 812, 836, 840, 870, 871, 877, 896, 897, 898, 899, 900], "14": [3, 88, 259, 420, 421, 442, 891, 895, 896, 897, 898, 899], "measur": [3, 259, 420, 494, 511, 527, 676, 692, 781, 797], "return": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 83, 85, 87, 88, 89, 95, 101, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 242, 243, 244, 247, 249, 250, 257, 258, 268, 276, 277, 284, 285, 290, 297, 298, 303, 309, 314, 320, 321, 324, 327, 334, 335, 342, 348, 353, 354, 362, 366, 368, 377, 381, 385, 389, 395, 398, 402, 406, 411, 417, 421, 424, 427, 454, 455, 456, 459, 461, 464, 465, 467, 469, 471, 472, 473, 474, 475, 477, 478, 481, 482, 484, 486, 488, 489, 490, 492, 494, 495, 496, 499, 500, 501, 502, 503, 506, 507, 509, 511, 512, 513, 515, 516, 517, 518, 519, 522, 523, 525, 527, 528, 529, 531, 532, 533, 534, 535, 538, 539, 540, 541, 543, 544, 547, 548, 550, 552, 554, 555, 556, 557, 558, 560, 561, 564, 565, 567, 569, 571, 572, 573, 574, 575, 577, 578, 581, 582, 584, 586, 588, 589, 590, 591, 592, 594, 595, 598, 599, 601, 604, 606, 607, 608, 609, 610, 612, 613, 616, 617, 619, 621, 623, 624, 625, 626, 627, 629, 630, 633, 634, 636, 638, 640, 641, 642, 643, 644, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 659, 660, 663, 664, 666, 668, 670, 671, 672, 674, 676, 677, 678, 680, 681, 682, 683, 684, 687, 688, 690, 692, 693, 694, 696, 697, 698, 699, 700, 703, 704, 705, 706, 709, 712, 713, 715, 717, 719, 720, 721, 722, 723, 725, 726, 728, 729, 730, 732, 733, 734, 735, 736, 738, 739, 742, 743, 745, 747, 749, 750, 751, 752, 753, 755, 756, 758, 759, 760, 762, 763, 764, 765, 766, 768, 769, 771, 772, 773, 775, 776, 777, 779, 781, 782, 783, 785, 786, 787, 788, 789, 792, 793, 795, 797, 798, 799, 802, 803, 805, 807, 809, 811, 812, 813, 819, 822, 825, 833, 835, 836, 840, 841, 846, 849, 857, 859, 860, 861, 863, 864, 866, 867, 868, 870, 871, 874, 875, 876, 878, 879, 882, 883, 885, 887, 889, 890, 891, 893, 895, 897, 898, 899], "per": [3, 267, 872], "unit": [3, 91, 93, 95, 97, 236, 262, 263, 264, 265, 267, 276, 277, 286, 299, 310, 322, 337, 349, 417, 420, 434, 755, 768, 896, 898, 899], "risk": [3, 894], "show": [3, 12, 27, 42, 57, 72, 417, 420, 895, 896, 897, 898, 899], "how": [3, 87, 420, 424, 452, 899], "varianc": [3, 15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 89, 93, 95, 121, 131, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 239, 240, 265, 266, 277, 280, 293, 306, 317, 330, 331, 334, 336, 341, 345, 358, 362, 368, 377, 381, 419, 420, 424, 425, 426, 427, 430, 431, 432, 433, 434, 435, 437, 440, 442, 448, 449, 450, 453, 458, 461, 465, 466, 468, 469, 471, 476, 478, 482, 483, 485, 486, 488, 494, 496, 497, 511, 513, 527, 529, 542, 544, 548, 549, 551, 552, 554, 559, 561, 565, 566, 568, 569, 571, 576, 578, 582, 583, 585, 586, 588, 593, 595, 599, 600, 602, 604, 606, 611, 613, 617, 618, 620, 621, 623, 628, 630, 634, 635, 637, 638, 640, 646, 658, 660, 664, 665, 667, 668, 670, 676, 678, 692, 694, 707, 709, 713, 714, 716, 717, 719, 725, 737, 739, 743, 744, 746, 747, 749, 755, 768, 781, 783, 797, 799, 811, 812, 813, 819, 824, 828, 835, 840, 841, 849, 863, 873, 877, 879, 883, 884, 886, 887, 889, 892, 894, 895, 897, 898, 899], "long": [3, 95, 101, 132, 236, 262, 264, 265, 269, 274, 277, 280, 293, 306, 317, 331, 334, 341, 345, 354, 358, 368, 377, 402, 404, 408, 420, 421, 442, 895], "u": [3, 4, 277, 420], "": [3, 4, 5, 8, 10, 17, 21, 22, 23, 32, 36, 37, 38, 47, 51, 52, 53, 62, 66, 67, 68, 77, 81, 82, 83, 87, 88, 94, 100, 104, 105, 106, 107, 108, 109, 110, 111, 119, 129, 143, 153, 163, 173, 183, 193, 203, 213, 223, 233, 245, 246, 252, 255, 256, 259, 262, 263, 265, 273, 276, 277, 354, 368, 402, 420, 421, 424, 443, 444, 494, 511, 527, 676, 692, 755, 768, 781, 797, 872, 891, 896, 897, 900], "equiti": 3, "2": [3, 4, 5, 6, 8, 9, 10, 11, 14, 26, 29, 41, 44, 48, 56, 59, 71, 74, 87, 104, 105, 107, 108, 110, 237, 238, 239, 259, 262, 263, 264, 266, 271, 273, 274, 275, 277, 362, 381, 420, 421, 424, 426, 427, 431, 432, 433, 435, 437, 438, 439, 440, 442, 471, 488, 490, 496, 502, 507, 513, 518, 523, 529, 554, 571, 588, 606, 623, 640, 646, 670, 672, 678, 683, 688, 694, 699, 719, 725, 749, 755, 768, 777, 783, 793, 799, 808, 810, 812, 813, 832, 834, 840, 841, 873, 889, 891, 892, 895, 896, 897, 898, 899], "arch": [3, 4, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 236, 259, 417, 420, 421, 423, 424, 894, 895, 896, 897, 899, 900], "frenchdata": [3, 421], "np": [3, 4, 5, 6, 8, 9, 11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 85, 87, 88, 89, 259, 262, 263, 264, 265, 266, 420, 421, 427, 428, 429, 436, 438, 439, 441, 443, 444, 445, 502, 518, 534, 683, 699, 788, 895, 896, 897, 898, 899], "pd": [3, 4, 10, 87, 88, 259, 421, 448, 449, 496, 513, 529, 678, 694, 783, 799, 813, 841, 895, 897, 898, 899], "ff": [3, 421], "load": [3, 262, 263, 264, 265, 420, 421, 427, 459, 477, 492, 509, 525, 543, 560, 577, 594, 612, 629, 644, 659, 674, 690, 723, 738, 753, 766, 779, 795, 861, 878, 896, 897, 898, 899], "set": [3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 16, 19, 20, 22, 23, 26, 29, 31, 34, 35, 37, 38, 41, 44, 46, 49, 50, 52, 53, 56, 59, 61, 64, 65, 67, 68, 71, 74, 76, 79, 80, 82, 83, 86, 91, 95, 96, 97, 237, 238, 241, 247, 253, 254, 260, 263, 264, 265, 276, 277, 280, 281, 288, 293, 294, 301, 306, 312, 317, 324, 325, 330, 331, 334, 336, 339, 345, 351, 354, 368, 373, 393, 402, 409, 417, 420, 424, 432, 434, 436, 441, 443, 444, 493, 494, 496, 502, 504, 510, 511, 513, 518, 520, 526, 527, 529, 536, 675, 676, 678, 683, 685, 691, 692, 694, 699, 701, 780, 781, 783, 790, 796, 797, 799, 806, 812, 813, 840, 841, 897, 898, 899], "fama": 3, "french": [3, 421], "factor": [3, 259], "excess": [3, 421], "market": [3, 266, 421, 897, 898], "3": [3, 4, 10, 15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 87, 88, 89, 104, 108, 236, 259, 262, 264, 417, 420, 421, 424, 425, 443, 496, 502, 513, 518, 529, 646, 650, 678, 683, 694, 699, 729, 755, 759, 772, 783, 799, 812, 813, 840, 841, 867, 891, 892, 895, 896, 897, 898, 899], "excess_market": [3, 421], "iloc": [3, 259, 421, 895, 897, 899], "0": [3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 87, 88, 89, 94, 95, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 118, 128, 142, 152, 162, 172, 182, 192, 202, 212, 222, 232, 238, 240, 247, 249, 259, 262, 263, 264, 265, 266, 267, 269, 274, 275, 277, 354, 368, 402, 417, 420, 421, 424, 425, 427, 428, 431, 432, 433, 435, 436, 438, 440, 441, 443, 444, 455, 459, 471, 474, 477, 488, 492, 494, 496, 502, 509, 511, 513, 518, 525, 527, 529, 534, 540, 543, 554, 557, 560, 571, 574, 577, 588, 591, 594, 606, 609, 612, 623, 626, 629, 640, 644, 650, 651, 652, 656, 659, 670, 674, 676, 678, 683, 690, 692, 694, 699, 705, 708, 719, 723, 729, 730, 731, 735, 738, 749, 753, 759, 760, 761, 766, 772, 773, 774, 779, 781, 783, 788, 795, 797, 799, 813, 819, 827, 836, 841, 849, 854, 858, 861, 867, 868, 869, 873, 875, 878, 889, 891, 895, 896, 897, 898, 899], "print": [3, 259, 262, 263, 264, 265, 266, 417, 421, 424, 438, 494, 511, 527, 676, 692, 781, 797, 891, 895, 896, 897, 898, 899], "describ": [3, 10, 262, 421, 424, 427, 428, 429, 438, 439, 445, 450], "mkt": [3, 421], "rf": [3, 421], "smb": [3, 421], "hml": [3, 421], "count": [3, 421, 891, 896, 897, 898], "1109": [3, 421], "000000": [3, 420, 421, 897], "mean": [3, 4, 11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 87, 88, 94, 95, 96, 259, 266, 420, 421, 424, 427, 429, 434, 445, 446, 448, 453, 458, 476, 495, 496, 497, 500, 502, 503, 512, 513, 516, 518, 519, 528, 529, 532, 534, 535, 542, 559, 576, 593, 611, 628, 658, 677, 678, 681, 683, 684, 693, 694, 697, 699, 700, 707, 737, 782, 783, 786, 788, 789, 798, 799, 802, 805, 812, 813, 840, 841, 877, 891, 894, 895, 897, 899, 901], "659946": [3, 421], "206555": [3, 421], "368864": [3, 421], "274220": [3, 421], "std": [3, 366, 385, 421, 891, 895, 896, 898, 899], "5": [3, 4, 5, 6, 8, 9, 10, 91, 108, 237, 239, 259, 389, 406, 417, 420, 421, 424, 426, 428, 431, 436, 437, 438, 441, 443, 444, 496, 502, 513, 518, 529, 652, 654, 678, 683, 694, 699, 708, 731, 761, 774, 783, 799, 813, 841, 869, 891, 895, 896, 897, 898, 899], "327524": [3, 421], "191132": [3, 421], "482352": [3, 421], "253377": [3, 421], "min": [3, 4, 10, 87, 88, 420, 421, 897, 898], "29": [3, 95, 421, 424, 897, 898], "130000": [3, 421], "870000": [3, 421], "13": [3, 236, 259, 417, 420, 421, 895, 897, 898], "280000": [3, 421], "060000": [3, 421], "25": [3, 96, 421, 433, 435, 896, 897, 898], "970000": [3, 421], "560000": [3, 421], "320000": [3, 421], "030000": [3, 421], "50": [3, 259, 421, 896, 898], "020000": [3, 421], "070000": [3, 421], "140000": [3, 421], "230000": [3, 421], "75": [3, 265, 421, 897, 899], "610000": [3, 421], "730000": [3, 421], "740000": [3, 421], "430000": [3, 421], "max": [3, 4, 10, 87, 88, 91, 95, 97, 238, 420, 421, 502, 518, 683, 699, 895, 898], "850000": [3, 421], "36": [3, 420, 421, 895, 896], "700000": [3, 421], "35": [3, 421, 443, 896, 897, 898, 899], "460000": [3, 421], "350000": [3, 421], "next": [3, 24, 39, 54, 69, 84, 259, 438, 895, 897, 898, 899], "step": [3, 12, 27, 42, 57, 72, 89, 95, 96, 263, 419, 420, 424, 496, 513, 529, 678, 694, 783, 799, 812, 813, 840, 841, 895, 896, 897], "comput": [3, 4, 10, 11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 87, 88, 89, 95, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 120, 130, 144, 154, 164, 174, 184, 194, 204, 214, 224, 234, 239, 240, 247, 249, 253, 259, 264, 265, 277, 282, 295, 307, 318, 332, 346, 421, 424, 450, 458, 461, 467, 469, 471, 476, 478, 484, 486, 488, 491, 494, 496, 501, 508, 511, 513, 517, 524, 527, 529, 533, 542, 544, 550, 552, 554, 559, 561, 567, 569, 571, 576, 578, 584, 586, 588, 593, 595, 601, 604, 606, 611, 613, 619, 621, 623, 628, 630, 636, 638, 640, 642, 646, 654, 658, 660, 666, 668, 670, 673, 676, 678, 682, 689, 692, 694, 698, 707, 709, 715, 717, 719, 721, 725, 733, 737, 739, 745, 747, 749, 751, 755, 763, 764, 768, 776, 778, 781, 783, 787, 794, 797, 799, 803, 811, 812, 813, 835, 840, 841, 859, 871, 872, 877, 879, 885, 887, 889, 895, 897, 898, 899], "also": [3, 89, 90, 96, 258, 259, 264, 267, 421, 895, 897, 898], "annual": [3, 4, 87, 819, 849, 898, 899], "standard": [3, 4, 14, 29, 44, 59, 74, 86, 87, 88, 95, 262, 365, 384, 421, 424, 425, 431, 433, 435, 438, 441, 443, 444, 471, 488, 491, 508, 524, 554, 571, 588, 606, 623, 640, 654, 670, 673, 689, 719, 725, 733, 749, 755, 763, 768, 776, 778, 794, 809, 819, 821, 833, 849, 855, 856, 871, 889, 891, 895, 897, 898, 899], "deviat": [3, 4, 87, 88, 259, 809, 833, 895, 899], "allow": [3, 4, 7, 14, 15, 25, 29, 30, 40, 44, 45, 55, 59, 60, 70, 74, 75, 85, 94, 95, 96, 258, 259, 260, 262, 266, 421, 434, 453, 495, 512, 528, 677, 693, 782, 798, 892, 895, 898, 899, 901], "matrix": [3, 264, 265, 269, 274, 321, 420, 421, 450, 494, 511, 527, 676, 692, 781, 797], "4": [3, 10, 89, 91, 115, 125, 139, 149, 159, 169, 179, 189, 199, 209, 219, 229, 236, 237, 239, 240, 259, 262, 264, 265, 277, 420, 421, 424, 425, 442, 496, 502, 513, 518, 529, 678, 683, 694, 699, 755, 783, 799, 812, 813, 840, 841, 891, 895, 896, 897, 898, 899], "def": [3, 4, 11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 87, 88, 89, 895, 899], "sharpe_ratio": [3, 4, 87, 88], "x": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 85, 87, 89, 95, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 259, 269, 271, 274, 276, 277, 427, 428, 438, 439, 496, 502, 513, 518, 529, 534, 646, 650, 678, 683, 694, 699, 725, 729, 755, 759, 768, 772, 783, 788, 799, 804, 812, 840, 867, 891, 897, 899], "mu": [3, 4, 88, 424, 427, 428, 429, 438, 439, 534, 891, 897, 898, 899], "sigma": [3, 4, 10, 88, 269, 271, 277, 362, 368, 381, 424, 427, 494, 511, 527, 646, 676, 692, 725, 755, 768, 781, 797, 891, 898], "12": [3, 4, 9, 87, 88, 259, 262, 263, 264, 265, 266, 269, 274, 420, 421, 424, 819, 849, 891, 895, 896, 897, 898, 899], "sqrt": [3, 4, 10, 87, 88, 89, 238, 239, 240, 277, 424, 431, 442, 755, 897, 899], "var": [3, 14, 15, 29, 30, 44, 45, 59, 60, 74, 75, 87, 88, 277, 427, 497], "valu": [3, 5, 6, 8, 9, 10, 11, 13, 14, 16, 21, 23, 26, 28, 29, 31, 36, 38, 41, 43, 44, 46, 51, 53, 56, 58, 59, 61, 66, 68, 71, 73, 74, 76, 81, 83, 89, 91, 94, 95, 97, 113, 117, 123, 127, 137, 141, 147, 151, 157, 161, 167, 171, 177, 181, 187, 191, 197, 201, 207, 211, 217, 221, 227, 231, 238, 239, 240, 244, 246, 247, 249, 250, 252, 253, 256, 258, 259, 262, 263, 264, 265, 266, 271, 273, 276, 277, 279, 284, 287, 292, 297, 300, 305, 309, 311, 316, 320, 323, 324, 329, 335, 338, 344, 348, 350, 360, 379, 389, 396, 398, 400, 406, 412, 415, 417, 420, 421, 424, 425, 427, 428, 437, 438, 447, 449, 450, 452, 454, 455, 457, 458, 459, 460, 461, 465, 467, 469, 471, 473, 474, 476, 477, 478, 482, 484, 486, 488, 491, 494, 496, 501, 502, 503, 505, 508, 511, 513, 517, 518, 519, 521, 524, 527, 529, 533, 534, 535, 537, 539, 540, 542, 543, 544, 548, 550, 552, 554, 556, 557, 559, 560, 561, 565, 567, 569, 571, 573, 574, 576, 577, 578, 582, 584, 586, 588, 590, 591, 593, 594, 595, 599, 601, 604, 606, 608, 609, 611, 612, 613, 617, 619, 621, 623, 625, 626, 628, 629, 630, 634, 636, 638, 640, 643, 644, 651, 654, 655, 656, 658, 659, 660, 664, 666, 668, 670, 673, 676, 678, 682, 683, 684, 686, 689, 692, 694, 698, 699, 700, 702, 704, 705, 707, 709, 713, 715, 717, 719, 722, 723, 730, 733, 734, 735, 737, 738, 739, 743, 745, 747, 749, 752, 753, 760, 763, 765, 766, 773, 776, 778, 781, 783, 787, 788, 789, 791, 794, 797, 799, 803, 805, 811, 812, 819, 823, 824, 826, 829, 831, 835, 840, 849, 850, 860, 861, 868, 871, 872, 873, 874, 875, 877, 878, 879, 883, 885, 887, 889, 891, 894, 896, 898, 899, 900], "squeez": [3, 417], "index": [3, 4, 87, 88, 101, 244, 259, 420, 421, 424, 438, 448, 449, 450, 461, 466, 468, 469, 478, 483, 485, 486, 496, 513, 529, 544, 549, 551, 552, 561, 566, 568, 569, 578, 583, 585, 586, 595, 600, 602, 604, 613, 618, 620, 621, 630, 635, 637, 638, 660, 665, 667, 668, 678, 694, 709, 714, 716, 717, 739, 744, 746, 747, 783, 799, 812, 813, 840, 841, 873, 879, 884, 886, 887, 895, 896, 897, 898, 899], "sr": [3, 4, 87, 88], "can": [3, 4, 5, 6, 7, 8, 9, 87, 88, 89, 92, 95, 239, 240, 259, 267, 417, 420, 421, 424, 433, 435, 452, 458, 476, 496, 513, 529, 542, 559, 576, 593, 611, 628, 658, 678, 694, 707, 737, 783, 799, 812, 813, 840, 841, 872, 877, 891, 894, 895, 896, 897, 898, 899, 901], "call": [3, 11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 89, 95, 96, 248, 258, 424, 450, 872, 873, 896, 897, 898, 901], "full": [3, 385], "param": [3, 4, 11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 88, 89, 259, 270, 272, 424, 447, 450, 491, 495, 496, 501, 502, 508, 512, 513, 517, 518, 524, 528, 529, 533, 534, 673, 677, 678, 682, 683, 689, 693, 694, 698, 699, 778, 782, 783, 787, 788, 794, 798, 799, 803, 804, 812, 813, 840, 841, 895, 897, 898], "7": [3, 8, 259, 264, 267, 420, 421, 891, 895, 896, 897, 898, 899], "919351": 3, "18": [3, 236, 421, 496, 513, 529, 678, 694, 783, 799, 895, 896, 897, 898], "455084": 3, "429115": 3, "dtype": [3, 88, 259, 420, 897, 898, 899], "float64": [3, 88, 259, 420, 897, 898, 899], "accept": [3, 89, 94, 96, 496, 513, 529, 678, 694, 783, 799, 812, 840, 895], "keyword": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 25, 26, 27, 28, 29, 30, 40, 41, 42, 43, 44, 45, 48, 55, 56, 57, 58, 59, 60, 70, 71, 72, 73, 74, 75, 85, 87, 88, 89, 95, 96], "argument": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 25, 26, 27, 28, 29, 30, 40, 41, 42, 43, 44, 45, 48, 55, 56, 57, 58, 59, 60, 70, 71, 72, 73, 74, 75, 85, 87, 88, 89, 95, 96, 238, 239, 240, 436, 441, 443, 444, 653, 732, 762, 775, 870, 898], "seed": [3, 5, 6, 7, 8, 9, 13, 16, 20, 28, 31, 35, 43, 46, 50, 58, 61, 65, 73, 76, 80, 96, 238, 239, 240, 259, 436, 441, 443, 444, 451, 898, 899], "randomst": [3, 5, 6, 7, 8, 9, 13, 16, 19, 23, 28, 31, 34, 38, 43, 46, 49, 53, 58, 61, 64, 68, 73, 76, 79, 83, 89, 95, 96, 238, 239, 240, 436, 438, 441, 443, 444, 451, 461, 478, 496, 513, 529, 544, 561, 578, 595, 613, 630, 645, 652, 660, 678, 694, 709, 724, 731, 739, 754, 761, 767, 774, 783, 799, 812, 840, 862, 869, 879, 895, 898, 899], "int": [3, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 17, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47, 51, 52, 53, 55, 56, 57, 58, 59, 60, 62, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 81, 82, 83, 85, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 238, 239, 240, 246, 252, 256, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 280, 281, 282, 293, 294, 295, 306, 307, 317, 318, 331, 332, 345, 346, 368, 375, 376, 390, 391, 392, 407, 425, 426, 427, 428, 429, 431, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 450, 451, 461, 463, 465, 466, 468, 469, 478, 480, 482, 483, 485, 486, 494, 495, 496, 497, 499, 502, 511, 512, 513, 515, 518, 527, 528, 529, 531, 534, 544, 546, 548, 549, 551, 552, 561, 563, 565, 566, 568, 569, 578, 580, 582, 583, 585, 586, 595, 597, 599, 600, 602, 603, 604, 613, 615, 617, 618, 620, 621, 630, 632, 634, 635, 637, 638, 647, 650, 653, 660, 662, 664, 665, 667, 668, 676, 677, 678, 680, 683, 692, 693, 694, 696, 699, 709, 711, 713, 714, 716, 717, 726, 729, 732, 739, 741, 743, 744, 746, 747, 756, 759, 762, 769, 772, 775, 781, 782, 783, 785, 788, 797, 798, 799, 801, 804, 809, 812, 813, 816, 817, 833, 837, 838, 839, 840, 841, 844, 845, 864, 867, 870, 872, 873, 879, 881, 883, 884, 886, 887, 891, 895, 896, 898, 899, 900], "pass": [3, 5, 6, 7, 8, 9, 12, 13, 15, 25, 27, 28, 30, 40, 42, 43, 45, 55, 57, 58, 60, 70, 72, 73, 75, 85, 87, 89, 95, 96, 436, 441, 443, 444, 494, 496, 511, 513, 527, 529, 676, 678, 692, 694, 781, 783, 797, 799, 812, 840, 895, 897, 898], "random": [3, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 19, 21, 22, 25, 26, 27, 29, 30, 31, 32, 34, 36, 37, 40, 41, 42, 44, 45, 46, 47, 49, 51, 52, 55, 56, 57, 59, 60, 61, 62, 64, 66, 67, 70, 71, 72, 74, 75, 76, 77, 79, 81, 82, 85, 87, 89, 95, 96, 246, 252, 256, 259, 266, 421, 424, 428, 429, 436, 438, 439, 441, 443, 444, 445, 461, 465, 478, 482, 496, 502, 513, 518, 529, 544, 548, 561, 565, 578, 582, 595, 599, 613, 617, 630, 634, 660, 664, 678, 683, 694, 699, 709, 713, 739, 743, 783, 799, 812, 840, 879, 883, 895, 898], "default_rng": [3, 5, 6, 8, 9, 96, 238, 239, 240, 259, 436, 441, 443, 444], "creat": [3, 5, 6, 7, 8, 9, 24, 39, 54, 69, 84, 96, 238, 239, 240, 898], "core": [3, 424, 898], "pseudo": [3, 16, 31, 46, 61, 76, 89], "across": [3, 7, 14, 29, 44, 59, 74, 259, 421, 424], "multipl": [3, 14, 29, 44, 59, 74, 87, 93, 236, 237, 240, 266, 419, 421, 458, 476, 542, 559, 576, 593, 611, 628, 658, 707, 737, 877], "chosen": [3, 4, 10, 238, 239, 240, 271], "must": [3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 24, 25, 26, 29, 30, 39, 40, 41, 44, 45, 54, 55, 56, 59, 60, 69, 70, 71, 74, 75, 84, 85, 89, 100, 104, 105, 106, 107, 108, 109, 110, 111, 248, 266, 269, 271, 274, 423, 425, 427, 452, 461, 478, 493, 495, 496, 504, 510, 512, 513, 520, 526, 528, 529, 536, 544, 561, 578, 595, 613, 630, 660, 675, 677, 678, 685, 691, 693, 694, 701, 709, 739, 780, 782, 783, 790, 796, 798, 799, 806, 812, 813, 840, 841, 879, 892, 895, 901], "appropri": [3, 4, 7, 14, 29, 44, 59, 74, 86, 238, 239, 240, 455, 474, 540, 557, 574, 591, 609, 626, 656, 705, 735, 875], "squar": [3, 4, 259, 368, 421, 424, 427, 439, 450, 471, 488, 496, 513, 529, 554, 571, 588, 606, 623, 640, 670, 678, 694, 719, 749, 783, 799, 811, 812, 813, 835, 840, 841, 852, 853, 889, 891, 895, 896, 898, 899], "ar": [3, 4, 7, 10, 11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 85, 89, 90, 91, 95, 96, 97, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 114, 124, 138, 148, 158, 168, 178, 188, 198, 208, 218, 228, 236, 238, 239, 240, 242, 243, 247, 258, 259, 260, 262, 263, 265, 266, 267, 269, 271, 274, 276, 277, 321, 324, 354, 368, 402, 417, 419, 420, 421, 424, 425, 427, 428, 431, 433, 435, 437, 438, 442, 446, 452, 453, 459, 461, 471, 477, 478, 488, 494, 495, 496, 502, 511, 512, 513, 518, 527, 528, 529, 543, 544, 554, 560, 561, 571, 577, 578, 588, 594, 595, 606, 612, 613, 623, 629, 630, 640, 646, 659, 660, 670, 676, 677, 678, 683, 692, 693, 694, 699, 708, 709, 719, 725, 738, 739, 749, 755, 768, 781, 782, 783, 788, 797, 798, 799, 811, 812, 813, 819, 835, 840, 841, 849, 858, 863, 878, 879, 889, 891, 892, 893, 895, 896, 897, 898, 899, 901], "serial": [3, 4, 86, 265, 266, 267], "correl": [3, 4, 259, 265, 266, 267], "so": [3, 7, 12, 15, 25, 27, 30, 40, 42, 45, 55, 57, 60, 70, 72, 75, 85, 89, 90, 91, 94, 95, 96, 97, 258, 259, 269, 274, 277, 420, 421, 424, 427, 434, 438, 440, 496, 513, 529, 678, 694, 783, 799, 811, 812, 835, 840, 895, 896, 897, 898, 899, 901], "initi": [3, 5, 6, 7, 8, 9, 11, 20, 26, 35, 41, 50, 56, 65, 71, 80, 89, 94, 95, 96, 245, 247, 251, 255, 263, 277, 421, 458, 461, 465, 469, 476, 478, 482, 486, 502, 518, 534, 542, 544, 548, 552, 559, 561, 565, 569, 576, 578, 582, 586, 593, 595, 599, 604, 611, 613, 617, 621, 628, 630, 634, 638, 658, 660, 664, 668, 683, 699, 707, 709, 713, 717, 737, 739, 743, 747, 788, 872, 877, 879, 883, 887, 891, 895, 897, 898], "ani": [3, 5, 6, 7, 8, 9, 11, 12, 14, 15, 17, 22, 23, 25, 26, 27, 29, 30, 32, 37, 38, 40, 41, 42, 44, 45, 47, 52, 53, 55, 56, 57, 59, 60, 62, 67, 68, 70, 71, 72, 74, 75, 77, 82, 83, 85, 259, 265, 271, 277, 354, 362, 368, 381, 402, 417, 421, 424, 446, 494, 496, 511, 513, 527, 529, 676, 678, 692, 694, 781, 783, 797, 799, 812, 840, 895, 897, 898, 899], "specif": [3, 89, 95, 96, 271, 273, 277, 279, 292, 305, 316, 321, 329, 344, 424, 452, 494, 495, 511, 512, 527, 528, 676, 677, 692, 693, 781, 782, 797, 798, 891, 892, 897, 899], "here": [3, 4, 259, 420, 421, 895, 899], "averag": [3, 9, 15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 88, 259, 424, 432, 438, 442, 898, 899], "window": [3, 10, 94, 238, 239, 240], "stationari": [3, 10, 88, 90, 238, 239, 240, 264, 417, 419, 420, 421], "input": [3, 4, 5, 6, 7, 8, 9, 15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 87, 89, 91, 95, 97, 259, 417, 424, 447, 450, 461, 465, 478, 482, 496, 513, 529, 544, 548, 561, 565, 578, 582, 595, 599, 613, 617, 630, 634, 660, 664, 678, 694, 709, 713, 739, 743, 783, 799, 811, 812, 813, 835, 840, 841, 863, 879, 883, 891, 897, 898], "from": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 85, 87, 88, 89, 91, 94, 95, 96, 97, 101, 238, 242, 258, 259, 262, 263, 264, 265, 266, 267, 269, 271, 272, 274, 276, 277, 285, 298, 354, 368, 377, 397, 398, 402, 413, 417, 420, 421, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 435, 437, 438, 439, 440, 442, 445, 447, 448, 449, 450, 452, 453, 461, 465, 478, 482, 495, 496, 502, 503, 512, 513, 518, 519, 528, 529, 534, 535, 544, 548, 561, 565, 578, 582, 595, 599, 613, 617, 630, 634, 650, 653, 660, 664, 677, 678, 683, 684, 693, 694, 699, 700, 709, 713, 729, 732, 739, 743, 759, 762, 772, 775, 782, 783, 788, 789, 798, 799, 805, 812, 813, 819, 822, 840, 841, 846, 849, 857, 867, 870, 879, 883, 891, 892, 895, 896, 897, 899, 901], "stationarybootstrap": [3, 5, 8, 10, 88, 90, 96], "entropi": [3, 5, 6, 8, 9, 436, 441, 443, 444], "org": [3, 236, 262, 265], "877788388": 3, "418255226": 3, "989657335": 3, "69307515": 3, "result": [3, 5, 6, 8, 9, 11, 14, 26, 29, 41, 44, 56, 59, 71, 74, 95, 267, 272, 273, 276, 277, 285, 298, 321, 354, 368, 402, 417, 420, 421, 424, 427, 428, 429, 438, 439, 445, 447, 450, 494, 495, 511, 512, 527, 528, 676, 677, 692, 693, 781, 782, 797, 798, 809, 822, 825, 833, 837, 846, 857, 891, 894, 895, 896, 897, 898, 899], "appli": [3, 87, 95, 268, 455, 474, 494, 511, 527, 540, 557, 574, 591, 609, 626, 656, 676, 692, 705, 735, 781, 797, 854, 875], "2500": [3, 259], "column": [3, 10, 14, 29, 44, 59, 74, 87, 88, 101, 242, 243, 244, 247, 253, 257, 259, 421, 424, 438, 458, 461, 469, 471, 476, 478, 486, 488, 496, 502, 513, 518, 529, 534, 542, 544, 552, 554, 559, 561, 569, 571, 576, 578, 586, 588, 593, 595, 604, 606, 611, 613, 621, 623, 628, 630, 638, 640, 658, 660, 668, 670, 678, 683, 694, 699, 707, 709, 717, 719, 737, 739, 747, 749, 783, 788, 799, 812, 840, 877, 879, 887, 889, 897, 898, 899], "fig": [3, 259, 420, 421, 496, 513, 529, 678, 694, 783, 799, 813, 819, 841, 849, 897, 898, 899], "hist": [3, 87], "bin": [3, 87], "40": [3, 259, 897], "cov": [3, 14, 29, 44, 59, 74, 88, 92, 270, 272], "1000": [3, 4, 11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 85, 87, 89, 95, 238, 239, 240, 259, 433, 461, 478, 496, 502, 513, 518, 529, 534, 544, 561, 578, 595, 613, 630, 660, 678, 683, 694, 699, 709, 739, 783, 788, 799, 812, 813, 840, 841, 879, 895, 898], "se": 3, "diag": [3, 4], "error": [3, 4, 14, 29, 44, 59, 74, 95, 240, 258, 259, 260, 265, 365, 366, 368, 384, 385, 421, 427, 428, 429, 436, 438, 439, 445, 491, 493, 496, 502, 508, 510, 513, 518, 524, 526, 529, 534, 646, 673, 675, 678, 683, 689, 691, 694, 699, 778, 780, 783, 788, 794, 796, 799, 811, 812, 835, 840, 855, 891, 895], "837196": 3, "638431": 3, "224722": 3, "019569": 3, "105762": 3, "014915": 3, "958876": 3, "737691": 3, "122126": 3, "8": [3, 88, 259, 265, 271, 274, 420, 421, 788, 891, 895, 896, 897, 898, 899], "ci": [3, 4, 14, 29, 44, 59, 74, 89, 836], "conf_int": [3, 4, 89, 92], "basic": [3, 14, 29, 44, 59, 74, 259, 421, 496, 513, 529, 534, 678, 694, 783, 788, 799, 812, 840, 891], "lower": [3, 4, 14, 29, 44, 59, 74, 95, 239, 247, 249, 250, 259, 421, 456, 458, 461, 469, 471, 475, 476, 478, 486, 488, 492, 509, 525, 541, 542, 544, 552, 554, 558, 559, 561, 569, 571, 575, 576, 578, 586, 588, 592, 593, 595, 604, 606, 610, 611, 613, 621, 623, 627, 628, 630, 638, 640, 642, 650, 657, 658, 660, 668, 670, 674, 690, 706, 707, 709, 717, 719, 721, 729, 736, 737, 739, 747, 749, 751, 759, 764, 772, 779, 795, 859, 867, 873, 876, 877, 879, 887, 889, 898], "upper": [3, 4, 14, 29, 44, 59, 74, 239, 247, 249, 250, 259, 262, 456, 458, 461, 469, 471, 475, 476, 478, 486, 488, 541, 542, 544, 552, 554, 558, 559, 561, 569, 571, 575, 576, 578, 586, 588, 592, 593, 595, 604, 606, 610, 611, 613, 621, 623, 627, 628, 630, 638, 640, 642, 650, 657, 658, 660, 668, 670, 706, 707, 709, 717, 719, 721, 729, 736, 737, 739, 747, 749, 751, 759, 764, 772, 859, 867, 873, 876, 877, 879, 887, 889], "367662": 3, "780547": 3, "166759": 3, "11": [3, 96, 259, 269, 274, 277, 420, 421, 891, 895, 897, 898, 899], "958503": 3, "21": [3, 274, 277, 417, 421, 895, 897], "735752": 3, "659350": 3, "altern": [3, 14, 29, 44, 59, 74, 88, 94, 99, 102, 103, 239, 240, 258, 262, 263, 264, 265, 273, 275, 278, 291, 304, 315, 328, 343, 387, 403, 417, 419, 420, 421, 438, 496, 501, 513, 517, 529, 533, 678, 682, 694, 698, 783, 787, 799, 803, 812, 813, 840, 841, 891, 895, 898, 900], "varieti": [3, 90], "reus": [3, 14, 29, 44, 59, 74], "true": [3, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 91, 95, 97, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 239, 240, 259, 266, 276, 354, 362, 368, 377, 381, 385, 402, 425, 427, 428, 429, 434, 438, 439, 440, 445, 491, 494, 508, 511, 524, 527, 646, 673, 676, 689, 692, 725, 755, 768, 778, 781, 794, 797, 863, 891, 892, 896, 898], "previou": [3, 89, 421, 496, 513, 529, 678, 694, 783, 799, 812, 840, 895, 896], "percentil": [3, 14, 29, 44, 59, 74, 89], "880198": 3, "15": [3, 265, 267, 420, 421, 895, 897, 898], "174416": 3, "198880": 3, "471040": 3, "22": [3, 269, 274, 277, 421, 428, 437, 438, 440, 496, 502, 513, 518, 529, 678, 683, 694, 699, 783, 799, 813, 841, 891, 895, 896, 897, 899], "129620": 3, "691471": 3, "optimal_block_length": [3, 5, 8, 9], "circular": [3, 8, 9, 10, 90, 238, 239, 240], "we": [3, 277, 420, 421, 895, 896, 897, 898], "sinc": [3, 4, 5, 6, 8, 9, 10, 89, 239, 240, 259, 420, 421, 424, 432, 436, 441, 442, 443, 444, 452, 494, 496, 511, 513, 527, 529, 652, 676, 678, 692, 694, 725, 731, 761, 774, 781, 783, 797, 799, 812, 840, 869, 895, 896, 898, 899], "depend": [3, 7, 10, 12, 27, 42, 57, 72, 86, 88, 91, 95, 96, 97, 120, 130, 144, 154, 164, 174, 184, 194, 204, 214, 224, 234, 249, 258, 264, 265, 421, 427, 428, 429, 438, 439, 445, 447, 450, 502, 506, 518, 522, 534, 538, 683, 687, 699, 703, 733, 788, 792, 807, 871, 891, 895, 897], "autocorrel": [3, 10, 264, 265, 362, 368, 381, 421], "stronger": 3, "than": [3, 4, 10, 89, 95, 96, 239, 247, 258, 259, 262, 263, 267, 277, 424, 427, 428, 429, 433, 435, 438, 439, 445, 654, 891, 897, 898, 899], "10": [3, 10, 87, 236, 259, 267, 389, 406, 417, 420, 421, 424, 438, 496, 513, 529, 678, 694, 783, 799, 812, 813, 840, 841, 891, 895, 897, 898, 899], "opt": [3, 10], "47": [3, 420], "766787": 3, "54": [3, 109, 264], "679322": 3, "repeat": [3, 95, 259, 895, 896], "analysi": [3, 236, 262, 265], "abov": [3, 89, 259, 262, 263, 264, 265, 277, 420, 899], "see": [3, 4, 11, 14, 26, 29, 41, 44, 56, 59, 71, 74, 95, 238, 259, 264, 269, 271, 274, 288, 301, 312, 325, 339, 351, 420, 452, 496, 513, 529, 650, 678, 694, 729, 759, 772, 783, 799, 812, 840, 867, 894, 895, 898, 901], "extrem": 3, "appear": [3, 95, 262, 263, 264, 265, 269, 274, 419, 420, 421, 427, 898], "slightli": [3, 267, 277, 897], "more": [3, 4, 89, 95, 259, 262, 263, 267, 277, 424, 437, 650, 729, 759, 772, 867, 898, 899], "reiniti": 3, "loc": [3, 259, 897, 899], "second": [3, 5, 6, 7, 8, 9, 87, 89, 259], "make": [3, 4, 14, 29, 44, 59, 74, 87, 89, 259, 421, 424, 895, 897, 898, 899], "demo": 3, "admiss": 3, "binari": 3, "variabl": [3, 5, 6, 7, 8, 9, 86, 91, 95, 96, 97, 259, 265, 269, 271, 274, 276, 277, 417, 420, 421, 427, 428, 429, 438, 439, 445, 447, 450, 464, 481, 496, 500, 502, 506, 513, 516, 518, 522, 529, 532, 538, 547, 564, 581, 598, 616, 633, 663, 678, 681, 683, 687, 694, 697, 699, 703, 712, 742, 783, 786, 792, 799, 802, 807, 812, 840, 882, 891, 894, 896, 898, 899], "being": [3, 95, 247, 258, 276, 420, 424, 496, 513, 529, 678, 694, 783, 799, 812, 840], "admit": 3, "gre": 3, "score": [3, 368], "gpa": 3, "quartil": 3, "rank": [3, 95], "download": [3, 4, 421, 898], "internet": 3, "dropna": [3, 4, 87, 88, 424, 427, 891, 896, 897, 898, 899], "400": [3, 259], "00000": 3, "317500": 3, "587": 3, "389900": 3, "48500": 3, "466087": 3, "115": 3, "516536": 3, "380567": 3, "94446": 3, "220": [3, 259], "260000": 3, "520": 3, "580": 3, "395000": 3, "660": 3, "670000": 3, "800": [3, 896], "first": [3, 5, 6, 7, 8, 9, 10, 15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 87, 89, 259, 277, 417, 419, 420, 421, 424, 438, 450, 461, 478, 494, 495, 496, 511, 512, 513, 527, 528, 529, 544, 561, 578, 595, 613, 630, 660, 676, 677, 678, 692, 693, 694, 709, 739, 781, 782, 783, 797, 798, 799, 812, 813, 840, 841, 879, 895, 896, 897, 898, 899], "build": [3, 95, 891, 899], "regressor": [3, 89, 95, 354, 362, 368, 377, 381, 402, 420, 427, 428, 438, 439, 496, 501, 502, 505, 513, 517, 518, 521, 529, 533, 537, 678, 682, 683, 686, 694, 698, 699, 702, 783, 787, 791, 799, 803, 812, 840, 891, 898], "Then": 3, "api": [3, 259, 262, 263, 264, 265, 421], "sm": [3, 259, 262, 263, 264, 265, 421], "endog": 3, "exog": [3, 496, 513, 529, 678, 694, 783, 799, 812, 840, 895], "const": [3, 420, 421, 895, 896, 898], "ones": 3, "shape": [3, 4, 89, 434, 438, 443, 447, 450, 459, 461, 477, 478, 496, 513, 529, 543, 544, 560, 561, 577, 578, 594, 595, 612, 613, 629, 630, 646, 649, 654, 659, 660, 678, 694, 709, 725, 728, 733, 738, 739, 755, 758, 763, 768, 771, 776, 783, 799, 812, 813, 840, 841, 863, 866, 871, 873, 878, 879, 895, 896, 899], "mod": [3, 438, 895, 896, 899], "disp": [3, 428, 494, 511, 527, 676, 692, 781, 797, 819, 849, 895, 896, 897, 898, 899], "003536": 3, "001643": 3, "454575": 3, "most": [3, 89, 417, 421, 424, 496, 513, 529, 678, 694, 783, 799, 812, 819, 840, 849, 891, 895, 898, 899], "implement": [3, 4, 10, 89, 238, 240, 262, 276, 421, 452, 896, 897, 899], "explicit": 3, "other": [3, 4, 89, 91, 93, 95, 97, 258, 259, 277, 420, 421, 425, 432, 433, 435, 895, 898, 899, 900], "quantiti": [3, 420, 813, 841, 898], "These": [3, 89, 260, 277, 420, 421, 424, 471, 488, 554, 571, 588, 606, 623, 640, 670, 719, 749, 889, 895, 896, 897, 898, 899], "cannot": [3, 5, 6, 8, 9, 96, 262, 263, 264, 265, 420], "howev": [3, 898, 899], "simpl": [3, 4, 263, 265, 271, 420, 421, 438, 891, 895, 898], "written": [3, 95, 452], "take": [3, 15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 259, 443, 461, 465, 478, 482, 544, 548, 561, 565, 578, 582, 595, 599, 613, 617, 630, 634, 653, 660, 664, 709, 713, 732, 739, 743, 762, 775, 870, 879, 883, 898], "probit_wrap": 3, "should": [3, 4, 12, 15, 25, 27, 30, 40, 42, 45, 55, 57, 60, 70, 72, 75, 85, 89, 100, 104, 105, 106, 107, 108, 109, 110, 111, 236, 238, 239, 240, 259, 262, 265, 271, 427, 428, 433, 434, 435, 438, 439, 446, 494, 511, 527, 676, 692, 781, 797, 819, 849, 892, 895, 896, 899], "iidbootstrap": [3, 4, 7, 11, 12, 14, 15, 25, 41, 42, 43, 44, 45, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 85, 86, 87, 89, 96], "397473": 3, "641971e": 3, "05": [3, 238, 240, 247, 249, 421, 424, 425, 788, 836, 895, 897, 898, 899], "102525": 3, "000066": 3, "467596e": 3, "07": [3, 502, 518, 534, 683, 699, 819, 849, 895, 897, 898, 899], "000058": 3, "815162e": 3, "039859": 3, "17": [3, 5, 420, 421, 895, 897, 898], "stat": [3, 15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 262, 263, 264, 265, 267, 273, 275, 276, 324, 417, 420, 898, 900], "630455": 3, "000668": 3, "199647": 3, "764077": 3, "457413": 3, "276894": 3, "214157": 3, "000360": 3, "005706": 3, "622607": 3, "002906": 3, "871725": 3, "start": [3, 4, 5, 87, 88, 90, 266, 417, 419, 424, 427, 428, 429, 438, 439, 445, 454, 461, 467, 473, 478, 484, 494, 496, 503, 511, 513, 519, 527, 529, 535, 539, 544, 550, 556, 561, 567, 573, 578, 584, 590, 595, 601, 608, 613, 619, 625, 630, 636, 654, 655, 660, 666, 676, 678, 684, 692, 694, 700, 704, 709, 715, 733, 734, 739, 745, 763, 776, 781, 783, 789, 797, 799, 805, 812, 813, 838, 840, 841, 871, 874, 879, 885, 891, 892, 895, 897, 899], "save": [3, 259, 898], "find": [3, 259, 494, 511, 527, 676, 692, 781, 797, 899], "close": [3, 4, 13, 28, 43, 58, 73, 87, 88, 258, 262, 265, 420, 424, 427, 891, 896, 897, 898, 899], "origin": [3, 4, 15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 88, 89, 95, 259, 267, 424, 447, 448, 450, 496, 513, 529, 678, 694, 783, 799, 812, 840, 854, 895, 896], "reason": [3, 90, 259, 421, 899], "extra_kwarg": [3, 11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 95], "dictionari": [3, 5, 6, 7, 8, 9, 12, 15, 17, 22, 23, 25, 27, 30, 32, 37, 38, 40, 42, 45, 47, 48, 52, 53, 55, 57, 60, 62, 67, 68, 70, 72, 75, 77, 82, 83, 85, 87, 279, 292, 305, 316, 329, 344, 496, 513, 529, 678, 694, 783, 799, 812, 840, 895], "modifi": [3, 4, 259, 269, 274, 419, 420, 452], "probit_wrap_start_param": 3, "start_param": 3, "none": [3, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 20, 21, 22, 25, 26, 27, 28, 29, 30, 35, 36, 37, 40, 41, 42, 43, 44, 45, 50, 51, 52, 55, 56, 57, 58, 59, 60, 65, 66, 67, 70, 71, 72, 73, 74, 75, 80, 81, 82, 85, 89, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 238, 239, 240, 241, 245, 246, 248, 251, 252, 253, 254, 255, 256, 262, 263, 264, 265, 267, 269, 271, 273, 274, 275, 276, 277, 281, 294, 354, 368, 392, 395, 402, 411, 417, 425, 427, 428, 429, 432, 436, 438, 439, 441, 443, 444, 445, 446, 448, 449, 450, 451, 461, 465, 478, 482, 491, 494, 495, 496, 501, 502, 505, 506, 508, 511, 512, 513, 517, 518, 521, 522, 524, 527, 528, 529, 533, 534, 537, 538, 544, 548, 561, 565, 578, 582, 595, 599, 613, 617, 630, 634, 643, 647, 650, 651, 660, 664, 673, 676, 677, 678, 682, 683, 686, 687, 689, 692, 693, 694, 698, 699, 702, 703, 709, 713, 722, 726, 729, 730, 739, 743, 752, 756, 759, 760, 765, 769, 772, 773, 778, 781, 782, 783, 787, 788, 791, 792, 794, 797, 798, 799, 803, 804, 807, 809, 812, 813, 819, 828, 829, 830, 831, 833, 840, 841, 849, 860, 864, 867, 868, 872, 873, 879, 883, 891, 895, 897, 898], "20": [3, 87, 259, 420, 421, 895, 897, 898, 899], "reset": [3, 898, 899], "state": [3, 17, 19, 20, 22, 32, 34, 35, 37, 47, 49, 50, 52, 62, 64, 65, 67, 77, 79, 80, 82, 89, 96, 245, 251, 255, 898, 899], "compar": [3, 14, 29, 44, 59, 74, 89, 260, 421, 427, 428, 429, 438, 439, 445, 891], "common": [3, 7, 10, 95, 259, 271, 277, 354, 368, 402, 417, 421, 424, 425, 427, 428, 429, 437, 438, 439, 445, 891, 900], "experi": [3, 7], "e": [3, 86, 89, 94, 95, 96, 258, 259, 267, 269, 274, 368, 424, 433, 435, 443, 891, 897], "test": [3, 86, 91, 93, 95, 96, 97, 236, 237, 238, 239, 240, 260, 262, 263, 264, 265, 266, 267, 271, 273, 276, 277, 279, 282, 284, 286, 287, 288, 290, 292, 295, 297, 299, 300, 301, 303, 305, 307, 309, 310, 311, 312, 314, 316, 318, 320, 321, 322, 323, 324, 325, 327, 329, 332, 335, 337, 338, 339, 342, 344, 346, 348, 349, 350, 351, 353, 368, 389, 393, 396, 398, 399, 400, 406, 409, 412, 414, 415, 417, 809, 833, 858], "websit": [3, 86], "arbitrari": [3, 435], "within": [3, 276, 277], "observ": [3, 7, 90, 94, 100, 104, 105, 106, 107, 108, 109, 110, 111, 259, 264, 266, 277, 279, 282, 292, 295, 305, 307, 316, 318, 329, 332, 344, 346, 421, 424, 427, 428, 429, 438, 439, 445, 450, 461, 465, 469, 478, 482, 486, 491, 494, 495, 496, 508, 511, 512, 513, 524, 527, 528, 529, 544, 548, 552, 561, 565, 569, 578, 582, 586, 595, 599, 604, 613, 617, 621, 630, 634, 638, 660, 664, 668, 673, 676, 677, 678, 689, 692, 693, 694, 709, 713, 717, 739, 743, 747, 778, 781, 782, 783, 794, 797, 798, 799, 812, 813, 840, 841, 872, 879, 883, 887, 891, 895, 896, 897, 898, 899], "natur": [3, 86, 895], "independentsamplesbootstrap": [3, 6, 86, 95], "dataset": [3, 262, 263, 264, 265], "exploit": [3, 424], "separ": [3, 95, 453, 898], "each": [3, 4, 7, 11, 14, 26, 29, 41, 44, 48, 56, 59, 71, 74, 86, 259, 267, 424, 452, 456, 459, 475, 477, 496, 513, 529, 541, 543, 558, 560, 575, 577, 592, 594, 610, 612, 627, 629, 657, 659, 678, 694, 706, 734, 736, 738, 783, 799, 812, 840, 872, 873, 876, 878, 895], "compon": [3, 262, 263, 264, 265, 267, 423, 442, 458, 476, 494, 511, 527, 542, 559, 576, 593, 611, 628, 658, 676, 692, 707, 734, 737, 781, 797, 877, 891, 899], "below": [3, 5, 6, 7, 8, 9, 259, 420, 897, 898], "two": [3, 4, 5, 6, 7, 8, 9, 10, 14, 29, 44, 59, 74, 87, 269, 274, 420, 421, 443, 892, 895, 896, 897, 898, 899], "group": 3, "mean_diff": 3, "y": [3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 87, 89, 259, 262, 263, 264, 265, 266, 267, 268, 269, 271, 274, 276, 277, 421, 427, 428, 429, 438, 439, 445, 446, 496, 501, 513, 517, 529, 533, 678, 682, 694, 698, 783, 787, 799, 803, 812, 840, 854, 891, 895], "treatment": 3, "standard_norm": [3, 5, 6, 7, 8, 9, 89, 895, 899], "200": [3, 7, 259, 502, 518, 683, 699, 898], "control": [3, 121, 131, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 240, 258, 259, 260, 443, 898], "student": [3, 14, 29, 44, 59, 74, 95, 239, 240, 259, 424, 443, 444, 755, 768, 891], "19450863": 3, "49723719": 3, "three": [4, 90, 95, 239, 250, 259, 389, 406, 421, 424, 496, 513, 529, 678, 694, 783, 799, 812, 840, 891, 897, 898], "resampl": [4, 6, 7, 266], "residu": [4, 89, 95, 269, 272, 274, 276, 277, 354, 361, 362, 377, 380, 381, 395, 397, 402, 411, 413, 420, 421, 424, 447, 449, 450, 454, 456, 458, 461, 465, 467, 469, 471, 473, 475, 476, 478, 482, 484, 486, 488, 501, 517, 533, 539, 541, 542, 544, 548, 550, 552, 554, 556, 558, 559, 561, 565, 567, 569, 571, 573, 575, 576, 578, 582, 584, 586, 588, 590, 592, 593, 595, 599, 601, 604, 606, 608, 610, 611, 613, 617, 619, 621, 623, 625, 627, 628, 630, 634, 636, 638, 640, 642, 646, 654, 655, 657, 658, 660, 664, 666, 668, 670, 682, 698, 704, 706, 707, 709, 713, 715, 717, 719, 721, 725, 733, 734, 736, 737, 739, 743, 745, 747, 749, 751, 755, 763, 764, 768, 776, 787, 803, 809, 819, 820, 821, 824, 828, 833, 849, 851, 856, 859, 863, 871, 873, 874, 876, 877, 879, 883, 885, 887, 889, 891, 894, 895, 896, 897, 898, 899], "simul": [4, 14, 15, 25, 29, 30, 40, 44, 45, 55, 59, 60, 70, 74, 75, 85, 87, 89, 95, 96, 259, 264, 274, 277, 427, 428, 429, 438, 439, 445, 449, 461, 478, 496, 513, 529, 544, 561, 578, 595, 613, 630, 660, 678, 694, 709, 739, 783, 799, 812, 813, 819, 827, 828, 829, 831, 840, 841, 849, 879, 894, 899], "one": [4, 10, 95, 101, 133, 134, 259, 265, 269, 274, 277, 421, 424, 459, 477, 534, 543, 560, 577, 594, 612, 629, 659, 738, 878, 897, 898, 899], "sharp": [4, 87, 88], "ratio": [4, 87, 88, 93, 266, 277, 330, 341, 419, 420], "500": [4, 5, 6, 7, 8, 9, 87, 88, 259, 424, 465, 482, 502, 518, 534, 548, 565, 582, 599, 617, 634, 664, 683, 699, 713, 743, 788, 804, 883, 895, 897], "yahoo": [4, 87, 88, 891, 897, 898], "datetim": [4, 87, 88, 417, 424, 494, 495, 496, 511, 512, 513, 527, 528, 529, 676, 677, 678, 692, 693, 694, 781, 782, 783, 797, 798, 799, 812, 813, 840, 841, 891, 896, 897, 898], "dt": [4, 87, 88, 417, 424, 891, 896, 897, 898], "pandas_dataread": [4, 87, 88, 266, 417, 424, 891], "web": [4, 87, 88, 417, 424, 891], "1951": [4, 87, 88], "2014": [4, 87, 88, 417, 424, 891], "sp500": [4, 87, 88, 424, 427, 891, 897, 898], "dataread": [4, 87, 88, 417, 891], "gspc": [4, 87, 88, 424, 891], "monthly_d": [4, 87, 88], "date_rang": [4, 87, 88, 438, 496, 513, 529, 678, 694, 783, 799, 813, 841], "freq": [4, 87, 88, 438], "monthli": [4, 87, 88, 819, 849], "reindex": [4, 87, 88, 91, 95, 97, 448, 496, 513, 529, 678, 694, 783, 799, 812, 840], "ffill": [4, 87, 88], "100": [4, 5, 6, 7, 8, 9, 11, 12, 26, 27, 41, 42, 56, 57, 71, 72, 87, 88, 89, 95, 259, 264, 265, 424, 427, 428, 429, 438, 439, 445, 496, 502, 513, 518, 529, 678, 683, 694, 699, 783, 799, 812, 840, 891, 895, 896, 897, 898, 899], "adj": [4, 87, 88, 421, 424, 427, 891, 895, 896, 897, 898, 899], "pct_chang": [4, 87, 88, 424, 427, 891, 897, 898, 899], "main": [4, 897], "element": [4, 5, 6, 7, 8, 9, 48, 87, 100, 104, 105, 106, 107, 108, 109, 110, 111, 239, 240, 259, 417, 427, 428, 429, 438, 439, 445, 456, 471, 475, 488, 496, 513, 529, 541, 554, 558, 571, 575, 588, 592, 606, 610, 623, 627, 640, 657, 670, 678, 694, 706, 719, 736, 749, 783, 799, 811, 812, 835, 840, 873, 876, 889], "simplest": [4, 891, 898], "non": [4, 89, 95, 264, 266, 421, 424, 438, 490, 492, 494, 507, 509, 511, 523, 525, 527, 672, 674, 676, 688, 690, 692, 777, 779, 781, 788, 793, 795, 797, 813, 841, 898], "well": [4, 259, 421, 898, 899, 900], "mix": [4, 440], "limit": [4, 259, 899], "form": [4, 89, 90, 259, 269, 271, 274, 424, 427, 438, 459, 477, 543, 560, 577, 594, 612, 629, 659, 738, 878, 897, 898], "usual": [4, 258, 259, 421, 433, 435, 819, 849, 898, 899], "final": [4, 259, 277, 419, 421, 423, 424, 438, 494, 496, 511, 513, 527, 529, 676, 678, 692, 694, 781, 783, 797, 799, 812, 840, 895, 897, 898, 899], "exact": [4, 89, 266, 420, 421], "conceptu": 4, "mani": [4, 259, 419, 424, 895, 898], "replic": [4, 11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 85, 87, 238, 239, 240, 259, 264], "order": [4, 5, 6, 7, 8, 9, 87, 271, 273, 275, 420, 425, 426, 431, 433, 435, 502, 518, 534, 647, 650, 683, 699, 726, 729, 756, 759, 769, 772, 788, 864, 867, 891, 895], "empir": [4, 897], "while": [4, 258, 259, 260, 266, 420, 424, 891, 895, 897, 899], "littl": [4, 421], "highli": [4, 419, 421, 898], "persist": [4, 419, 421], "iid": [4, 899], "good": [4, 259, 421, 899], "choic": [4, 277, 354, 368, 402, 424, 495, 512, 528, 677, 693, 782, 798, 898], "instead": [4, 5, 6, 8, 9, 94, 421, 436, 441, 443, 444, 652, 731, 761, 774, 869, 895, 899], "block": [4, 5, 8, 9, 10, 88, 90, 238, 239, 240, 259, 266, 269, 274, 341, 421, 891, 899], "side": [4, 101, 133, 134, 269, 271, 274, 276, 277, 421], "95": [4, 14, 29, 44, 59, 74, 420, 891, 895, 896, 898, 899], "default": [4, 14, 15, 20, 25, 29, 30, 35, 40, 44, 45, 50, 55, 59, 60, 65, 70, 74, 75, 80, 85, 91, 95, 97, 238, 239, 240, 259, 262, 263, 264, 265, 266, 267, 268, 417, 421, 424, 425, 432, 433, 435, 442, 461, 471, 478, 488, 496, 513, 529, 544, 554, 561, 571, 578, 588, 595, 606, 613, 623, 630, 640, 654, 660, 670, 678, 694, 709, 719, 739, 749, 783, 799, 812, 813, 840, 841, 879, 889, 891, 895, 897, 898, 899], "hat": [4, 10, 120, 130, 144, 154, 164, 174, 184, 194, 204, 214, 224, 234, 269, 271, 274, 277, 362, 368, 381, 398, 424], "theta": [4, 274, 440, 708], "_b": 4, "star": [4, 274], "left": [4, 10, 100, 104, 108, 120, 130, 144, 154, 164, 174, 184, 194, 204, 214, 224, 234, 269, 271, 274, 276, 277, 424, 425, 431, 435, 437, 440, 646, 725, 755, 768, 898], "_": [4, 269, 271, 274, 277, 362, 368, 381, 424, 438, 895], "right": [4, 10, 100, 104, 108, 120, 130, 144, 154, 164, 174, 184, 194, 204, 214, 224, 234, 269, 271, 274, 276, 277, 424, 425, 431, 435, 437, 440, 646, 725, 755, 768, 898], "l": [4, 433, 891, 898], "where": [4, 7, 10, 11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 86, 87, 88, 95, 96, 100, 104, 105, 106, 107, 108, 109, 110, 111, 120, 130, 144, 154, 164, 174, 184, 194, 204, 214, 224, 234, 244, 258, 259, 269, 271, 274, 276, 277, 354, 362, 368, 377, 381, 402, 420, 424, 427, 431, 433, 435, 437, 438, 440, 442, 446, 456, 475, 496, 502, 513, 518, 529, 541, 558, 575, 592, 610, 627, 646, 657, 678, 683, 694, 699, 706, 736, 755, 768, 783, 799, 812, 836, 840, 863, 876, 895, 896, 897, 898, 899], "alpha": [4, 120, 130, 144, 154, 164, 174, 184, 194, 204, 214, 224, 234, 277, 420, 424, 440, 708, 836, 891, 895, 896, 897, 898, 899], "quantil": [4, 897], "vector": [4, 14, 29, 44, 59, 74, 89, 95, 100, 104, 105, 106, 107, 108, 109, 110, 111, 118, 128, 142, 152, 162, 172, 182, 192, 202, 212, 222, 232, 269, 271, 274, 277, 354, 356, 359, 360, 365, 367, 368, 370, 378, 379, 384, 385, 386, 388, 402, 405, 419, 420, 427, 428, 429, 438, 439, 445, 454, 456, 458, 465, 473, 475, 476, 482, 496, 513, 529, 539, 541, 542, 548, 556, 558, 559, 565, 573, 575, 576, 582, 590, 592, 593, 599, 608, 610, 611, 617, 625, 627, 628, 634, 646, 655, 657, 658, 664, 678, 694, 704, 706, 707, 713, 725, 734, 736, 737, 743, 755, 768, 783, 799, 812, 840, 863, 874, 876, 877, 883], "directli": [4, 5, 6, 7, 8, 9, 87, 89, 421, 809, 833, 891, 896], "cdf": [4, 651, 730, 760, 773, 868], "defin": [4, 94, 101, 259, 269, 274, 277, 362, 381, 417], "combin": [4, 89, 100, 104, 105, 106, 107, 108, 109, 110, 111, 420], "phi": [4, 277, 433], "mai": [4, 86, 89, 95, 276, 277, 421, 424, 895, 896, 898, 899, 901], "accur": [4, 895], "some": [4, 7, 10, 258, 259, 266, 421, 424, 893, 895, 898, 899, 901], "either": [4, 14, 20, 29, 35, 44, 50, 59, 65, 74, 80, 86, 238, 269, 274, 368, 461, 478, 494, 496, 502, 511, 513, 518, 527, 529, 544, 561, 578, 595, 613, 630, 660, 676, 678, 683, 692, 694, 699, 709, 739, 781, 783, 797, 799, 812, 813, 840, 841, 879, 891, 894, 895, 897, 898, 899], "analyt": [4, 14, 29, 44, 59, 74, 88, 461, 478, 496, 513, 529, 544, 561, 578, 595, 613, 630, 660, 678, 694, 709, 739, 783, 799, 812, 813, 840, 841, 879, 894, 899], "nest": [4, 14, 29, 44, 59, 74, 239, 240], "version": [4, 5, 6, 8, 9, 11, 14, 26, 29, 41, 44, 56, 59, 71, 74, 89, 236, 258, 266, 421, 436, 441, 443, 444, 496, 513, 529, 652, 678, 694, 731, 761, 774, 783, 799, 812, 840, 869, 898], "produc": [4, 12, 16, 27, 31, 42, 46, 57, 61, 72, 76, 89, 95, 96, 258, 259, 277, 354, 368, 402, 424, 427, 428, 429, 433, 435, 438, 439, 445, 452, 461, 471, 478, 488, 496, 513, 529, 544, 554, 561, 571, 578, 588, 595, 606, 613, 623, 630, 640, 660, 670, 678, 694, 709, 719, 739, 749, 763, 776, 783, 799, 812, 813, 815, 819, 829, 840, 841, 843, 849, 879, 889, 891, 893, 894, 897, 898, 899], "higher": [4, 87, 259, 271, 895], "refin": 4, "circumst": [4, 89, 898, 899], "although": [4, 89, 259, 420, 421, 424, 433, 435, 895, 898], "slow": [4, 239, 240], "inner": [4, 14, 29, 44, 59, 74, 100, 104, 105, 106, 107, 108, 109, 110, 111, 277], "outer": 4, "In": [4, 89, 238, 239, 240, 259, 417, 420, 424, 425, 431, 433, 435, 437, 440, 494, 496, 511, 513, 527, 529, 676, 678, 692, 694, 781, 783, 797, 799, 812, 813, 840, 841, 891, 892, 895, 896, 898, 899], "necessari": [4, 89, 895], "done": 4, "moment": [4, 95, 650, 729, 759, 763, 772, 776, 867], "delta": [4, 269, 271, 274, 398, 420, 425, 457], "detail": [4, 238, 239, 240, 259, 269, 271, 274, 277, 650, 729, 759, 772, 825, 867, 897], "descript": [4, 273, 427, 428, 438], "mathemat": 4, "formula": 4, "beyond": [4, 899], "intent": [4, 421], "document": [4, 236, 424], "sharpe_ratio_s": 4, "e1": 4, "e2": 4, "vstack": 4, "vcv": 4, "dot": [4, 89, 259, 459, 477, 492, 509, 525, 543, 560, 577, 594, 612, 629, 644, 659, 674, 690, 708, 723, 738, 753, 766, 779, 795, 861, 878], "avar": 4, "std_err_func": [4, 14, 29, 44, 59, 74], "match": [4, 10, 91, 97, 496, 513, 529, 678, 694, 783, 799, 812, 840, 895], "patter": 4, "arg": [4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 25, 26, 28, 29, 30, 40, 41, 43, 44, 45, 55, 56, 58, 59, 60, 70, 71, 73, 74, 75, 85], "kwarg": [4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 25, 26, 28, 29, 30, 40, 41, 43, 44, 45, 55, 56, 58, 59, 60, 70, 71, 73, 74, 75, 85], "improv": [4, 95, 96, 258, 263, 421, 452, 898], "jackknif": [4, 95], "term": [4, 265, 269, 271, 274, 276, 277, 279, 288, 289, 292, 301, 302, 305, 312, 313, 316, 325, 326, 329, 339, 340, 344, 351, 352, 368, 420, 424, 425, 440, 898], "offer": [4, 898], "accuraci": 4, "condit": [4, 95, 266, 421, 424, 425, 427, 431, 433, 435, 443, 445, 446, 447, 450, 453, 458, 471, 476, 488, 497, 502, 518, 534, 542, 554, 559, 571, 576, 588, 593, 606, 611, 623, 628, 640, 646, 658, 670, 683, 699, 707, 719, 725, 737, 749, 755, 768, 788, 809, 811, 819, 821, 823, 824, 826, 833, 835, 849, 856, 863, 873, 877, 889, 892, 895, 897, 898], "satisfi": [4, 266, 425, 492, 509, 525, 644, 674, 690, 723, 753, 766, 779, 795, 861], "special": [4, 437, 901], "case": [4, 89, 100, 104, 105, 106, 107, 108, 109, 110, 111, 259, 420, 437, 891], "base": [4, 89, 95, 260, 264, 265, 267, 277, 282, 295, 307, 318, 332, 346, 354, 368, 402, 420, 424, 452, 453, 496, 513, 529, 678, 694, 763, 776, 783, 894, 897, 899], "frac": [4, 10, 100, 104, 105, 106, 107, 108, 109, 110, 111, 120, 130, 144, 154, 164, 174, 184, 194, 204, 214, 224, 234, 271, 277, 424, 433, 437, 646, 725, 755, 768], "z_": [4, 277, 420], "skew": [4, 94, 421, 443, 755, 891, 898], "like": [4, 10, 88, 89, 258, 420, 424, 427, 428, 429, 438, 439, 445, 496, 513, 529, 678, 694, 783, 799, 812, 840, 891, 896, 898, 899], "leav": [4, 95], "out": [4, 94, 95, 424, 892, 897, 899], "block_siz": [5, 8, 9, 238, 239, 240], "arraylik": [5, 6, 7, 8, 9, 13, 28, 43], "random_st": [5, 6, 7, 8, 9, 95, 96, 436, 441, 443, 444, 451, 461, 478, 496, 513, 529, 544, 561, 578, 595, 613, 630, 660, 678, 694, 709, 739, 783, 799, 812, 840, 879, 899], "sourc": [5, 6, 7, 8, 9, 10, 13, 24, 26, 27, 28, 29, 30, 32, 35, 36, 37, 39, 40, 50, 54, 69, 84, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 238, 239, 240, 241, 247, 248, 249, 251, 253, 254, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 354, 368, 385, 400, 402, 415, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 458, 459, 464, 465, 467, 484, 496, 501, 503, 532, 533, 534, 539, 540, 541, 542, 543, 547, 548, 550, 556, 557, 558, 559, 560, 564, 565, 567, 571, 575, 576, 577, 581, 582, 584, 590, 591, 592, 593, 594, 598, 599, 601, 606, 608, 610, 611, 612, 616, 617, 619, 625, 626, 627, 628, 629, 633, 634, 636, 640, 642, 643, 644, 646, 647, 649, 650, 651, 653, 654, 657, 658, 659, 663, 664, 666, 678, 681, 682, 683, 706, 707, 708, 712, 713, 715, 721, 722, 723, 725, 726, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 742, 743, 745, 749, 751, 752, 753, 755, 756, 758, 759, 760, 762, 763, 764, 765, 766, 768, 769, 771, 772, 773, 775, 776, 786, 787, 788, 793, 794, 795, 797, 798, 799, 802, 803, 804, 805, 809, 812, 813, 819, 822, 836, 857, 859, 860, 861, 863, 864, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 882, 883, 885, 887, 889, 891, 900], "length": [5, 7, 8, 9, 10, 90, 91, 95, 96, 97, 238, 239, 240, 262, 263, 265, 267, 271, 276, 281, 294, 392, 420, 421, 424, 427, 428, 429, 437, 438, 439, 440, 442, 445, 496, 502, 513, 518, 529, 534, 678, 683, 694, 699, 783, 788, 799, 812, 840, 891, 897], "wrap": [5, 8, 9, 10, 90], "around": [5, 8, 9, 10, 90, 258, 420], "posit": [5, 6, 7, 8, 9, 12, 13, 27, 28, 42, 43, 48, 57, 58, 72, 73, 87, 118, 128, 142, 152, 162, 172, 182, 192, 202, 212, 222, 232, 259, 265, 266, 421, 424, 433, 435, 496, 513, 529, 678, 694, 783, 799, 811, 812, 835, 840, 895], "ensur": [5, 6, 7, 8, 9, 89, 277, 436, 441, 443, 444, 471, 488, 554, 571, 588, 606, 623, 640, 670, 719, 749, 889], "reproduc": [5, 6, 7, 8, 9, 89, 95, 259, 436, 441, 443, 444, 898], "If": [5, 6, 7, 8, 9, 20, 23, 35, 38, 50, 53, 65, 68, 80, 83, 95, 96, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 238, 239, 240, 262, 263, 264, 265, 266, 267, 271, 277, 354, 362, 368, 377, 381, 402, 424, 425, 427, 428, 429, 434, 436, 438, 439, 441, 443, 444, 445, 450, 461, 472, 478, 489, 494, 496, 502, 511, 513, 518, 527, 529, 544, 555, 561, 572, 578, 589, 595, 607, 613, 624, 630, 641, 660, 671, 676, 678, 683, 692, 694, 699, 709, 720, 739, 750, 781, 783, 797, 799, 809, 812, 813, 819, 833, 840, 841, 849, 854, 879, 890, 891, 895, 897], "fresh": [5, 6, 8, 9, 13, 28, 43, 58, 73], "system": [5, 6, 8, 9, 271, 436, 441, 443, 444], "deprec": [5, 6, 8, 9, 92, 93, 96, 436, 441, 443, 444, 652, 731, 761, 774, 869], "ha": [5, 6, 7, 8, 9, 20, 35, 50, 65, 80, 95, 96, 259, 267, 419, 421, 424, 430, 432, 442, 725, 812, 840, 873, 895, 897, 898, 899], "been": [5, 6, 7, 8, 9, 20, 35, 50, 65, 80, 95, 96, 267, 421, 437, 812, 840, 854, 873, 895, 899], "tupl": [5, 6, 7, 8, 9, 12, 17, 18, 22, 23, 27, 32, 33, 37, 38, 39, 42, 47, 48, 52, 53, 54, 57, 62, 63, 67, 68, 72, 77, 78, 82, 83, 87, 456, 459, 465, 475, 477, 478, 482, 490, 492, 496, 507, 509, 513, 523, 525, 529, 541, 543, 544, 548, 558, 560, 561, 565, 575, 577, 578, 582, 592, 594, 595, 599, 610, 612, 613, 617, 627, 629, 630, 634, 642, 644, 653, 657, 659, 660, 664, 672, 674, 678, 688, 690, 694, 706, 708, 709, 713, 721, 723, 732, 736, 738, 739, 743, 751, 753, 762, 764, 766, 775, 777, 779, 783, 793, 795, 799, 812, 840, 859, 861, 870, 876, 878, 879, 883], "pos_data": [5, 6, 7, 8, 9], "kw_data": [5, 6, 7, 8, 9], "type": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 83, 85, 86, 95, 96, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 242, 243, 244, 247, 249, 250, 257, 268, 272, 276, 277, 280, 293, 306, 317, 324, 331, 345, 354, 362, 366, 368, 371, 377, 381, 385, 389, 395, 398, 402, 406, 411, 421, 424, 454, 455, 456, 461, 464, 467, 469, 471, 472, 473, 474, 475, 478, 481, 484, 486, 488, 489, 490, 494, 495, 496, 500, 501, 502, 503, 507, 511, 512, 513, 516, 517, 518, 519, 523, 527, 528, 529, 532, 533, 534, 535, 539, 540, 541, 544, 547, 550, 552, 554, 555, 556, 557, 558, 561, 564, 567, 569, 571, 572, 573, 574, 575, 578, 581, 584, 586, 588, 589, 590, 591, 592, 595, 598, 601, 604, 606, 607, 608, 609, 610, 613, 616, 619, 621, 623, 624, 625, 626, 627, 630, 633, 636, 638, 640, 641, 642, 643, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 660, 663, 666, 668, 670, 671, 672, 676, 677, 678, 681, 682, 683, 684, 688, 692, 693, 694, 697, 698, 699, 700, 704, 705, 706, 709, 712, 715, 717, 719, 720, 721, 722, 725, 726, 728, 729, 730, 732, 733, 734, 735, 736, 739, 742, 745, 747, 749, 750, 751, 752, 755, 756, 758, 759, 760, 762, 763, 764, 765, 768, 769, 771, 772, 773, 775, 776, 777, 781, 782, 783, 786, 787, 788, 789, 793, 797, 798, 799, 802, 803, 805, 809, 811, 812, 813, 819, 822, 825, 833, 835, 836, 840, 841, 846, 849, 857, 859, 860, 864, 866, 867, 868, 870, 871, 874, 875, 876, 879, 882, 885, 887, 889, 890, 891, 897, 899, 900], "enter": [5, 6, 7, 8, 9, 12, 27, 42, 57, 72, 892], "dict": [5, 6, 7, 8, 9, 11, 12, 14, 15, 17, 18, 22, 23, 25, 26, 27, 29, 30, 32, 33, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 52, 53, 54, 55, 56, 57, 59, 60, 62, 63, 67, 68, 70, 71, 72, 74, 75, 77, 78, 82, 83, 85, 279, 292, 305, 316, 329, 344, 494, 496, 511, 513, 527, 529, 676, 678, 692, 694, 781, 783, 797, 799, 812, 840, 900], "note": [5, 6, 7, 8, 9, 10, 11, 14, 26, 29, 41, 44, 56, 59, 71, 74, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 120, 130, 144, 154, 164, 174, 184, 194, 204, 214, 224, 234, 238, 239, 240, 247, 248, 258, 262, 263, 264, 265, 266, 267, 269, 271, 274, 276, 277, 362, 368, 377, 381, 398, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 442, 443, 445, 452, 459, 461, 477, 478, 492, 494, 495, 496, 509, 511, 512, 513, 525, 527, 528, 529, 543, 544, 560, 561, 577, 578, 594, 595, 612, 613, 629, 630, 644, 646, 650, 654, 659, 660, 674, 676, 677, 678, 690, 692, 693, 694, 708, 709, 723, 725, 729, 733, 738, 739, 753, 755, 759, 763, 766, 768, 772, 776, 779, 781, 782, 783, 795, 797, 798, 799, 812, 840, 861, 863, 867, 871, 872, 873, 878, 879, 891, 895, 897, 899], "support": [5, 6, 7, 8, 9, 91, 95, 96, 97, 277, 288, 301, 312, 325, 339, 351, 366, 385, 417, 424, 461, 470, 478, 487, 494, 496, 511, 513, 527, 529, 544, 553, 561, 570, 578, 587, 595, 605, 613, 622, 630, 639, 660, 669, 676, 678, 692, 694, 709, 718, 739, 748, 781, 783, 797, 799, 812, 813, 819, 840, 841, 849, 879, 888, 891, 892, 895, 899], "date": [5, 6, 7, 8, 9, 91, 97, 421, 424, 496, 513, 529, 678, 694, 783, 799, 812, 813, 840, 841, 891, 895, 896, 897, 898, 899], "accessibli": [5, 6, 7, 8, 9], "attribut": [5, 6, 7, 8, 9, 424, 897, 899], "To": [5, 6, 7, 8, 9, 420, 422], "you": [5, 6, 7, 8, 9, 895, 899], "after": [5, 6, 7, 8, 9, 95, 96, 424, 496, 513, 529, 678, 694, 783, 799, 897], "reserv": [5, 6, 7, 8, 9, 898], "instanc": [5, 7, 8, 9, 13, 16, 19, 28, 31, 34, 43, 46, 49, 58, 61, 64, 73, 76, 79, 87, 89, 95, 96, 115, 125, 139, 149, 159, 169, 179, 189, 199, 209, 219, 229, 272, 273, 354, 366, 385, 395, 402, 411, 436, 441, 443, 444, 461, 478, 496, 513, 529, 544, 561, 578, 595, 613, 630, 660, 678, 694, 709, 739, 783, 799, 812, 815, 822, 840, 843, 857, 879, 898], "optim": [5, 8, 9, 10, 95, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 120, 121, 122, 123, 127, 130, 131, 136, 137, 141, 144, 145, 146, 147, 151, 154, 155, 156, 157, 161, 164, 165, 166, 167, 171, 174, 175, 176, 177, 181, 184, 185, 186, 187, 191, 194, 195, 196, 197, 201, 204, 205, 206, 207, 211, 214, 215, 216, 217, 221, 224, 225, 226, 227, 231, 234, 235, 268, 271, 277, 354, 368, 402, 450, 490, 492, 494, 507, 509, 511, 523, 525, 527, 642, 644, 654, 672, 674, 676, 688, 690, 692, 721, 723, 733, 751, 753, 763, 764, 766, 776, 777, 779, 781, 793, 795, 797, 837, 846, 859, 861, 871, 891, 896, 897, 898, 899], "exp": [5, 8, 10], "access": [5, 6, 7, 8, 9, 248, 259, 421, 898], "wai": [5, 6, 7, 8, 9, 898], "retain": [5, 6, 7, 8, 9], "wa": [5, 6, 7, 8, 9, 91, 94, 95, 96, 97, 421, 447, 450, 496, 513, 529, 678, 694, 783, 799, 895], "avail": [5, 6, 7, 8, 9, 259, 262, 265, 421, 424, 452, 461, 478, 496, 513, 529, 544, 561, 578, 595, 613, 630, 660, 678, 694, 709, 739, 783, 799, 812, 840, 879, 897, 898, 899], "syntax": [5, 6, 7, 8, 9, 496, 513, 529, 678, 694, 783, 799, 812, 840], "z": [5, 6, 7, 8, 9, 87, 96, 100, 104, 105, 106, 107, 108, 109, 110, 111, 263, 277, 368, 421, 650, 729, 759, 772, 867], "bs_x": [5, 6, 7, 8, 9], "bs_y": [5, 6, 7, 8, 9], "bs_z": [5, 6, 7, 8, 9], "1234": [5, 6, 7, 8, 9, 438], "properti": [5, 6, 7, 8, 9, 16, 18, 19, 23, 31, 33, 34, 38, 46, 48, 49, 53, 61, 63, 64, 68, 76, 78, 79, 83, 91, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 242, 243, 244, 250, 257, 262, 263, 264, 265, 266, 267, 270, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 416, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 457, 460, 462, 463, 466, 468, 470, 472, 479, 480, 483, 485, 487, 489, 493, 496, 497, 498, 499, 504, 505, 506, 510, 513, 514, 515, 520, 521, 522, 526, 529, 530, 531, 536, 537, 538, 545, 546, 549, 551, 553, 555, 562, 563, 566, 568, 570, 572, 579, 580, 583, 585, 587, 589, 596, 597, 600, 602, 603, 605, 607, 614, 615, 618, 620, 622, 624, 631, 632, 635, 637, 639, 641, 645, 648, 652, 661, 662, 665, 667, 669, 671, 675, 678, 679, 680, 685, 686, 687, 691, 694, 695, 696, 701, 702, 703, 710, 711, 714, 716, 718, 720, 724, 727, 731, 740, 741, 744, 746, 748, 750, 754, 757, 761, 767, 770, 774, 780, 783, 784, 785, 790, 791, 792, 796, 799, 800, 801, 806, 807, 808, 810, 811, 812, 814, 815, 816, 817, 818, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 858, 862, 865, 869, 880, 881, 884, 886, 888, 890, 892, 893, 898, 900], "uniform": 6, "integ": [6, 94, 96, 100, 104, 105, 106, 107, 108, 109, 110, 111, 116, 126, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 238, 239, 240, 246, 252, 256, 259, 277, 354, 368, 402, 421, 424, 450, 465, 482, 496, 513, 529, 548, 565, 582, 599, 617, 634, 664, 678, 694, 713, 743, 783, 799, 812, 813, 840, 841, 883, 891], "equival": [6, 259, 368, 427, 438, 496, 513, 529, 678, 694, 783, 799, 812, 840, 891, 899], "structur": [7, 89, 267, 417, 420, 421, 424, 427, 428, 438, 895], "unequ": 7, "cross": [7, 273, 276, 277, 368, 420], "section": [7, 273, 276, 277, 368, 420], "relat": [7, 95, 96, 258, 433, 435, 891, 898], "inappropri": 7, "without": [8, 14, 29, 44, 59, 74, 89, 427, 428, 429, 438, 439, 445, 891], "circularblockbootstrap": [8, 9, 10, 58, 73, 90], "expon": 9, "arraylike1d": [10, 461], "arraylike2d": 10, "dimension": [10, 15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 89, 895, 896], "oper": [10, 433], "b_sb": 10, "b_cb": 10, "algorithm": [10, 262, 267, 901], "its": [10, 20, 35, 50, 65, 80, 251, 258, 259, 368, 420, 421, 898], "correct": [10, 14, 29, 44, 59, 74, 259, 495, 512, 528, 677, 693, 782, 798], "tune": 10, "k_n": 10, "consecut": 10, "insid": [10, 895], "conserv": 10, "band": 10, "pm": 10, "log_": 10, "maximum": [10, 262, 263, 267, 271, 276, 281, 294, 392, 424, 440, 891, 895, 896, 898, 899], "lceil": 10, "rceil": 10, "_i": 10, "2g": 10, "d_": [10, 269, 274], "sum_": [10, 269, 271, 274, 277, 398, 424, 425, 426, 427, 428, 431, 433, 435, 437, 438, 440], "k": [10, 238, 239, 240, 259, 264, 265, 267, 271, 354, 368, 402, 425, 427, 428, 431, 435, 438, 439, 502, 518, 683, 699, 899], "h": [10, 95, 100, 104, 105, 106, 107, 108, 109, 110, 111, 237, 239, 262, 263, 264, 269, 271, 274, 424, 496, 513, 529, 678, 694, 783, 799, 812, 840, 895, 897, 899], "gamma_": [10, 425, 431, 435], "c_": 10, "x_k": 10, "bar": [10, 421, 438], "x_": [10, 95, 271, 895], "remain": [10, 895], "constant": [10, 95, 117, 120, 127, 130, 141, 144, 151, 154, 161, 164, 171, 174, 181, 184, 191, 194, 201, 204, 211, 214, 221, 224, 231, 234, 262, 263, 264, 265, 267, 269, 271, 274, 276, 277, 417, 420, 421, 424, 427, 428, 429, 430, 438, 439, 496, 502, 513, 518, 529, 534, 678, 683, 694, 699, 755, 783, 788, 799, 813, 841, 891, 896, 899], "c_i": 10, "taken": 10, "andrew": [10, 95, 108, 264, 266, 267, 268, 419], "patton": 10, "matlab": 10, "program": 10, "do": [10, 12, 27, 42, 57, 72, 269, 274, 424, 438, 496, 513, 529, 678, 694, 783, 799, 812, 813, 840, 841, 872, 897, 900], "autocovari": [10, 277], "rather": [10, 96, 258, 259, 263, 267, 424, 897, 898], "dimitri": 10, "halbert": 10, "white": [10, 237, 239, 258, 277, 354, 368, 402, 421, 896, 898], "2004": [10, 264, 267], "automat": [10, 91, 95, 96, 97, 262, 263, 264, 265, 267, 268, 276, 281, 294, 417, 419, 421, 427, 428, 429, 438, 439, 445, 891], "select": [10, 95, 96, 121, 131, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 240, 262, 263, 264, 267, 268, 271, 273, 276, 281, 294, 392, 417, 419, 421, 466, 468, 483, 485, 549, 551, 566, 568, 583, 585, 600, 602, 618, 620, 635, 637, 665, 667, 714, 716, 744, 746, 884, 886], "review": [10, 264, 443], "23": [10, 237, 239, 421, 896], "53": [10, 420, 896], "70": [10, 259], "doi": [10, 236], "1081": 10, "etc": [10, 424, 898], "120028836": 10, "2009": [10, 420, 424, 897], "28": [10, 421, 424, 891, 895, 896, 897, 898], "372": 10, "375": 10, "1080": 10, "07474930802459016": 10, "func": [11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 891, 896, 897, 898], "callabl": [11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 95, 258, 452, 461, 465, 478, 482, 496, 513, 529, 544, 548, 561, 565, 578, 582, 595, 599, 613, 617, 630, 634, 653, 660, 664, 678, 694, 709, 713, 732, 739, 743, 762, 775, 783, 799, 812, 840, 870, 879, 883], "ndarrai": [11, 12, 14, 15, 17, 18, 21, 22, 23, 24, 25, 26, 27, 29, 30, 32, 33, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 84, 85, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 118, 128, 132, 133, 134, 135, 142, 152, 162, 172, 182, 192, 202, 212, 222, 232, 238, 239, 240, 246, 247, 252, 253, 256, 262, 263, 264, 265, 266, 267, 268, 269, 271, 274, 276, 277, 290, 303, 314, 327, 342, 353, 427, 428, 429, 434, 438, 439, 445, 446, 447, 450, 454, 455, 456, 458, 459, 465, 467, 469, 471, 473, 474, 475, 476, 477, 478, 482, 484, 486, 488, 491, 492, 494, 495, 496, 501, 502, 503, 505, 506, 508, 509, 511, 512, 513, 517, 518, 519, 521, 522, 524, 525, 527, 528, 529, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 548, 550, 552, 554, 556, 557, 558, 559, 560, 561, 565, 567, 569, 571, 573, 574, 575, 576, 577, 578, 582, 584, 586, 588, 590, 591, 592, 593, 594, 595, 599, 601, 604, 606, 608, 609, 610, 611, 612, 613, 617, 619, 621, 623, 625, 626, 627, 628, 629, 630, 634, 636, 638, 640, 642, 643, 644, 646, 647, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 664, 666, 668, 670, 673, 674, 676, 677, 678, 682, 683, 684, 686, 687, 689, 690, 692, 693, 694, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 713, 715, 717, 719, 721, 722, 723, 725, 726, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 743, 745, 747, 749, 751, 752, 753, 755, 756, 759, 760, 762, 763, 764, 765, 766, 768, 769, 772, 773, 775, 776, 778, 779, 781, 782, 783, 787, 788, 789, 791, 792, 794, 795, 797, 798, 799, 803, 804, 805, 807, 811, 812, 813, 820, 821, 828, 829, 830, 831, 835, 840, 841, 851, 856, 859, 860, 861, 863, 864, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 885, 887, 889, 891, 895], "rep": [11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 85, 238, 239, 240, 259], "str": [11, 12, 14, 15, 17, 18, 22, 23, 25, 26, 27, 29, 30, 32, 33, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 52, 53, 54, 55, 56, 57, 59, 60, 62, 63, 67, 68, 70, 71, 72, 74, 75, 77, 78, 82, 83, 85, 101, 119, 129, 143, 153, 163, 173, 183, 193, 203, 213, 223, 233, 259, 270, 272, 273, 275, 277, 278, 279, 283, 288, 289, 291, 292, 296, 302, 304, 305, 308, 312, 313, 315, 316, 319, 324, 325, 326, 328, 329, 333, 339, 340, 343, 344, 347, 351, 352, 354, 357, 368, 371, 374, 387, 393, 394, 395, 401, 402, 403, 408, 409, 410, 411, 416, 447, 450, 462, 464, 479, 481, 494, 495, 496, 498, 500, 511, 512, 513, 514, 516, 527, 528, 529, 530, 532, 545, 547, 562, 564, 579, 581, 596, 598, 614, 616, 631, 633, 648, 649, 661, 663, 676, 677, 678, 679, 681, 692, 693, 694, 695, 697, 710, 712, 727, 728, 740, 742, 757, 758, 770, 771, 781, 782, 783, 784, 786, 797, 798, 799, 800, 802, 812, 813, 819, 840, 841, 849, 865, 866, 880, 882, 900], "extra": [11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 239, 240], "conflict": [11, 26, 41, 56, 71], "nparam": [11, 26, 41, 56, 71], "row": [11, 14, 26, 29, 41, 44, 56, 59, 71, 74, 424, 496, 513, 529, 678, 694, 783, 799, 812, 836, 840, 895], "correspond": [11, 14, 26, 29, 41, 44, 56, 59, 71, 74, 239, 250, 259, 471, 488, 494, 496, 511, 513, 527, 529, 554, 571, 588, 606, 623, 640, 670, 676, 678, 692, 694, 719, 749, 781, 783, 797, 799, 812, 840, 889, 897, 898], "iter": [11, 12, 24, 26, 27, 39, 41, 42, 54, 56, 57, 69, 71, 72, 84, 92, 452, 494, 511, 527, 676, 692, 781, 797, 891, 896, 897, 898], "up": [11, 14, 26, 29, 41, 44, 56, 59, 71, 74, 267, 421, 424, 437, 496, 513, 529, 678, 694, 783, 799, 812, 840, 895, 897, 899], "append": [11, 14, 26, 29, 41, 44, 56, 59, 71, 74, 259, 895, 897], "befor": [11, 14, 26, 29, 41, 44, 56, 59, 71, 74, 100, 104, 105, 106, 107, 108, 109, 110, 111, 248, 263, 421, 494, 511, 527, 676, 692, 781, 797, 854, 899], "randn": [11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 85, 87, 89, 259, 428, 429, 438, 439, 445, 502, 518, 683, 699], "over": [12, 27, 42, 57, 72, 94, 899], "calcul": [12, 27, 42, 57, 72, 95, 113, 117, 118, 123, 127, 128, 137, 141, 142, 147, 151, 152, 157, 161, 162, 167, 171, 172, 177, 181, 182, 187, 191, 192, 197, 201, 202, 207, 211, 212, 217, 221, 222, 227, 231, 232, 264, 267, 646, 647, 725, 726, 755, 756, 768, 769, 864], "kei": [12, 27, 42, 57, 72, 389, 406, 417, 496, 513, 529, 678, 694, 783, 799, 812, 840, 895], "problem": [12, 27, 42, 57, 72, 89, 96, 421], "doe": [12, 27, 42, 57, 72, 90, 259, 277, 362, 381, 421, 471, 488, 494, 511, 527, 554, 571, 588, 606, 623, 640, 670, 676, 692, 719, 749, 781, 797, 873, 889, 891, 897], "output": [12, 27, 42, 57, 72, 88, 259, 494, 511, 527, 653, 676, 692, 732, 762, 775, 781, 797, 870, 891, 897, 898], "arang": [12, 27, 42, 57, 72, 89, 895, 897, 899], "posdata": [12, 27, 42, 57, 72], "kwdata": [12, 27, 42, 57, 72], "someth": [12, 27, 42, 57, 72], "prng": [13, 16, 28, 31, 43, 46, 58, 61, 73, 76], "norm": [14, 29, 44, 59, 74], "bc": [14, 29, 44, 59, 74, 755], "bca": [14, 29, 44, 59, 74, 95], "float": [14, 15, 17, 22, 23, 25, 29, 30, 32, 37, 38, 40, 44, 45, 47, 52, 53, 55, 59, 60, 62, 67, 68, 70, 74, 75, 77, 82, 83, 85, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 120, 121, 122, 123, 127, 130, 131, 136, 137, 141, 144, 145, 146, 147, 151, 154, 155, 156, 157, 161, 164, 165, 166, 167, 171, 174, 175, 176, 177, 181, 184, 185, 186, 187, 191, 194, 195, 196, 197, 201, 204, 205, 206, 207, 211, 214, 215, 216, 217, 221, 224, 225, 226, 227, 231, 234, 235, 238, 240, 247, 249, 267, 268, 270, 273, 275, 279, 284, 286, 292, 297, 299, 305, 309, 310, 316, 320, 322, 329, 335, 337, 341, 344, 348, 349, 354, 355, 358, 362, 363, 364, 369, 377, 381, 382, 383, 396, 398, 399, 402, 404, 412, 414, 425, 427, 432, 433, 435, 442, 447, 450, 454, 455, 456, 458, 460, 461, 465, 469, 471, 473, 474, 475, 476, 478, 482, 486, 488, 490, 491, 494, 495, 497, 502, 507, 508, 511, 512, 518, 523, 524, 527, 528, 534, 539, 540, 541, 542, 544, 548, 552, 554, 556, 557, 558, 559, 561, 565, 569, 571, 573, 574, 575, 576, 578, 582, 586, 588, 590, 591, 592, 593, 595, 599, 604, 606, 608, 609, 610, 611, 613, 617, 621, 623, 625, 626, 627, 628, 630, 634, 638, 640, 642, 643, 646, 647, 650, 651, 653, 655, 656, 657, 658, 660, 664, 668, 670, 672, 673, 676, 677, 683, 688, 689, 692, 693, 699, 704, 705, 706, 707, 709, 713, 717, 719, 721, 722, 725, 726, 729, 730, 732, 734, 735, 736, 737, 739, 743, 747, 749, 751, 752, 755, 756, 759, 760, 762, 764, 765, 768, 769, 772, 773, 775, 777, 778, 781, 782, 788, 793, 794, 797, 798, 804, 808, 810, 814, 819, 832, 834, 836, 842, 849, 852, 853, 854, 859, 860, 863, 864, 867, 868, 870, 872, 874, 875, 876, 877, 879, 883, 887, 889, 891, 895, 900], "tail": [14, 29, 44, 59, 74, 424, 443, 654, 895, 898], "bool": [14, 15, 20, 25, 29, 30, 35, 40, 44, 45, 50, 55, 59, 60, 65, 70, 74, 75, 80, 85, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 116, 124, 126, 138, 140, 148, 150, 158, 160, 168, 170, 178, 180, 188, 190, 198, 200, 208, 210, 218, 220, 228, 230, 239, 240, 262, 263, 266, 270, 271, 272, 277, 330, 334, 336, 354, 368, 385, 402, 425, 427, 428, 429, 434, 438, 439, 440, 445, 446, 447, 448, 450, 457, 470, 487, 491, 494, 496, 508, 511, 513, 524, 527, 529, 553, 570, 587, 605, 622, 639, 646, 669, 673, 676, 678, 689, 692, 694, 718, 725, 748, 755, 768, 778, 781, 783, 794, 797, 799, 809, 812, 833, 840, 863, 888, 891], "fals": [14, 15, 20, 25, 29, 30, 35, 40, 44, 45, 50, 55, 59, 60, 65, 70, 74, 75, 80, 85, 88, 91, 95, 97, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 239, 240, 266, 271, 277, 354, 368, 385, 402, 421, 425, 427, 428, 429, 434, 438, 439, 440, 445, 448, 491, 494, 508, 511, 513, 524, 527, 529, 646, 673, 676, 678, 689, 692, 694, 725, 755, 768, 778, 781, 783, 794, 797, 799, 809, 812, 833, 840, 863, 891, 895, 897, 899], "nonparametr": [14, 29, 44, 59, 74, 89], "semi": [14, 29, 44, 59, 74, 89], "studentize_rep": [14, 29, 44, 59, 74], "One": [14, 29, 44, 59, 74, 421, 424], "debias": [14, 29, 44, 59, 74, 266, 277], "bia": [14, 29, 44, 59, 74, 274, 420], "coverag": [14, 29, 44, 59, 74], "flag": [14, 20, 29, 35, 44, 50, 59, 65, 74, 80, 100, 104, 105, 106, 107, 108, 109, 110, 111, 114, 116, 124, 126, 138, 140, 148, 150, 158, 160, 168, 170, 178, 180, 188, 190, 198, 200, 208, 210, 218, 220, 228, 230, 239, 240, 262, 271, 385, 427, 428, 429, 434, 438, 439, 440, 445, 470, 487, 491, 494, 508, 511, 524, 527, 553, 570, 587, 605, 622, 639, 646, 669, 673, 676, 689, 692, 718, 725, 748, 755, 768, 778, 781, 794, 797, 809, 833, 837, 863, 888, 891], "indic": [14, 20, 24, 29, 35, 39, 44, 48, 50, 54, 59, 65, 69, 74, 80, 84, 100, 104, 105, 106, 107, 108, 109, 110, 111, 114, 116, 124, 126, 138, 140, 148, 150, 158, 160, 168, 170, 178, 180, 188, 190, 198, 200, 208, 210, 218, 220, 228, 230, 239, 240, 242, 243, 247, 253, 257, 259, 262, 266, 271, 330, 334, 336, 385, 420, 421, 424, 427, 428, 429, 438, 439, 440, 445, 470, 487, 491, 494, 496, 502, 508, 511, 513, 518, 524, 527, 529, 553, 570, 587, 605, 622, 639, 646, 669, 673, 676, 678, 683, 689, 692, 694, 699, 718, 725, 748, 755, 768, 778, 781, 783, 794, 797, 799, 809, 812, 813, 819, 833, 840, 841, 849, 863, 888, 891, 898], "whether": [14, 15, 20, 25, 29, 30, 35, 40, 44, 45, 50, 55, 59, 60, 65, 70, 74, 75, 80, 85, 100, 104, 105, 106, 107, 108, 109, 110, 111, 114, 116, 124, 126, 138, 140, 148, 150, 158, 160, 168, 170, 178, 180, 188, 190, 198, 200, 208, 210, 218, 220, 228, 230, 258, 259, 262, 265, 266, 272, 277, 354, 368, 385, 402, 417, 419, 421, 427, 428, 429, 434, 438, 439, 440, 445, 447, 450, 491, 494, 496, 508, 511, 513, 524, 527, 529, 646, 673, 676, 678, 689, 692, 694, 725, 755, 768, 778, 781, 783, 794, 797, 799, 812, 840, 863, 891, 898], "previous": [14, 29, 44, 59, 74, 94, 896, 898, 899], "rerun": [14, 29, 44, 59, 74, 420], "ignor": [14, 29, 44, 59, 74, 421, 819, 849, 891, 895], "chang": [14, 29, 44, 59, 74, 93, 94, 95, 97, 259, 277, 420, 421, 452, 496, 513, 529, 678, 694, 783, 799, 812, 840, 872, 896, 897, 898, 899], "about": [14, 29, 44, 59, 74, 496, 513, 529, 678, 694, 783, 799, 846, 897, 898], "elimin": [14, 29, 44, 59, 74, 238], "need": [14, 29, 44, 59, 74, 89, 277, 420, 895, 897, 899], "bound": [14, 29, 44, 59, 74, 239, 250, 458, 461, 469, 471, 476, 478, 486, 488, 492, 509, 525, 542, 544, 552, 554, 559, 561, 569, 571, 576, 578, 586, 588, 593, 595, 604, 606, 611, 613, 621, 623, 628, 630, 638, 640, 650, 658, 660, 668, 670, 674, 690, 707, 709, 717, 719, 729, 737, 739, 747, 749, 759, 772, 779, 795, 867, 873, 877, 879, 887, 889], "inf": [14, 29, 44, 59, 74, 650, 729, 759, 772, 867], "similarli": [14, 29, 44, 59, 74], "between": [14, 29, 44, 59, 74, 95, 258, 259, 417, 421, 427, 428, 438, 763, 776, 813, 841, 898, 899], "direct": [14, 29, 44, 59, 74, 440, 898], "normal": [14, 29, 44, 59, 74, 89, 96, 259, 424, 440, 654, 891, 895, 896, 897, 898, 899], "approxim": [14, 29, 44, 59, 74, 262, 265, 267, 271, 454, 455, 456, 467, 471, 473, 474, 475, 484, 488, 539, 540, 541, 550, 554, 556, 557, 558, 567, 571, 573, 574, 575, 584, 588, 590, 591, 592, 601, 603, 606, 608, 609, 610, 619, 623, 625, 626, 627, 636, 640, 655, 656, 657, 666, 670, 704, 705, 706, 715, 719, 734, 735, 736, 745, 749, 874, 875, 876, 885, 889], "scale": [14, 29, 44, 59, 74, 95, 259, 427, 428, 429, 434, 438, 439, 442, 445, 455, 474, 540, 557, 574, 591, 609, 626, 656, 705, 735, 819, 849, 875, 891, 896, 898, 899], "acceler": [14, 29, 44, 59, 74], "ad": [14, 29, 44, 59, 74, 91, 92, 93, 94, 95, 96, 97, 898, 901], "recent": [15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 88, 236, 239, 277], "interest": [15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 898], "center": [15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 88, 95, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 239, 259, 265, 898], "signatur": [15, 25, 30, 40, 45, 55, 60, 70, 75, 85], "axi": [15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 496, 513, 529, 678, 694, 783, 799, 812, 840, 898, 899], "addit": [15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 236, 265, 421, 465, 482, 548, 565, 582, 599, 617, 634, 664, 713, 743, 883, 897, 898], "elif": [15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 897], "get": [16, 17, 19, 23, 31, 32, 34, 38, 46, 47, 49, 53, 61, 62, 64, 68, 76, 77, 79, 83, 280, 281, 288, 293, 294, 301, 306, 312, 317, 324, 325, 330, 331, 334, 336, 339, 345, 351, 393, 409, 417, 472, 489, 493, 504, 505, 510, 520, 521, 526, 536, 537, 555, 572, 589, 607, 624, 641, 671, 675, 685, 686, 691, 701, 702, 720, 750, 780, 790, 791, 796, 806, 890], "option": [16, 31, 46, 61, 76, 89, 95, 238, 239, 240, 259, 262, 277, 421, 428, 438, 446, 494, 496, 511, 513, 527, 529, 676, 678, 692, 694, 781, 783, 797, 799, 891, 892, 898, 901], "map": [17, 23, 32, 38, 47, 53, 62, 68, 77, 83], "current": [18, 33, 48, 63, 78, 95, 265, 873, 891, 896, 897, 898], "use_se": [20, 35, 50, 65, 80], "last": [20, 35, 50, 65, 80, 266, 269, 274, 424, 450, 494, 495, 511, 512, 527, 528, 676, 677, 692, 693, 781, 782, 797, 798, 895], "rese": [21, 36, 51, 66, 81], "otherwis": [23, 38, 53, 68, 83, 854], "updat": [24, 39, 54, 69, 84, 91, 94, 95, 97, 262, 265, 427, 452, 472, 489, 494, 511, 527, 555, 572, 589, 607, 624, 641, 671, 676, 692, 720, 750, 781, 797, 872, 890, 892], "overridden": [24, 39, 54, 69, 84, 421, 446], "new": [24, 39, 54, 69, 84, 95, 262, 427, 428, 429, 438, 439, 445, 496, 513, 529, 678, 694, 783, 799, 812, 840, 891], "least": [86, 266, 269, 274, 368, 421, 439], "total": 86, "aris": 86, "experiment": 86, "divid": [87, 100, 104, 105, 106, 107, 108, 109, 110, 111, 809, 833, 891, 898], "sharp_ratio": 87, "lowest": 87, "demonstr": [87, 496, 513, 529, 678, 694, 783, 799, 812, 840, 891], "rand": 87, "po": 87, "kw": 87, "xstar": 87, "alwai": [87, 247, 259, 421, 424, 899], "even": [87, 247, 420, 453, 898], "singleton": 87, "ystar": [87, 89], "zstar": 87, "challeng": 88, "simpli": [88, 94, 896], "tradit": 88, "financ": [88, 898], "choos": 88, "captur": [88, 452, 898, 901], "param_cov": [88, 450], "148534": 88, "508540": 88, "561637": 88, "729435": 88, "442891": 88, "273945": 88, "495087": 88, "049454": 88, "020830": 88, "those": [89, 258, 897, 899], "At": 89, "minimum": [89, 91, 96, 97, 262, 263, 267, 277], "thei": [89, 258, 259, 263, 424, 438, 897, 899, 901], "perform": [89, 91, 95, 97, 258, 259, 267, 273, 452], "For": [89, 236, 496, 513, 529, 678, 694, 783, 799, 812, 840, 895, 898, 899], "simplic": 89, "consid": [89, 258, 271, 276, 895], "ol": [89, 96, 259, 263, 271, 272, 273, 274, 277, 285, 298, 321, 354, 368, 402, 419, 421], "regress": [89, 95, 259, 262, 263, 265, 267, 269, 271, 272, 273, 274, 276, 277, 280, 282, 293, 295, 306, 307, 317, 318, 331, 332, 345, 346, 354, 362, 368, 377, 381, 391, 397, 398, 401, 402, 413, 416, 419, 420, 502, 518, 683, 699], "regressand": 89, "x_orig": 89, "linalg": 89, "pinv": 89, "ravel": 89, "resid": [89, 270, 272, 421, 447, 450, 454, 456, 458, 461, 465, 467, 469, 471, 473, 475, 476, 478, 482, 484, 486, 488, 539, 541, 542, 544, 548, 550, 552, 554, 556, 558, 559, 561, 565, 567, 569, 571, 573, 575, 576, 578, 582, 584, 586, 588, 590, 592, 593, 595, 599, 601, 604, 606, 608, 610, 611, 613, 617, 619, 621, 623, 625, 627, 628, 630, 634, 636, 638, 640, 642, 643, 646, 655, 657, 658, 660, 664, 666, 668, 670, 704, 706, 707, 709, 713, 715, 717, 719, 721, 722, 725, 734, 736, 737, 739, 743, 745, 747, 749, 751, 752, 755, 764, 765, 768, 859, 860, 863, 873, 874, 876, 877, 879, 883, 885, 887, 889, 895, 896, 898, 899], "y_star": 89, "1d": [89, 899], "functool": 89, "wrapper": [89, 258], "fix": [89, 90, 91, 94, 95, 96, 97, 421, 424, 425, 432, 434, 442, 447, 893, 894, 901], "ols_parti": 89, "effect": [89, 899], "conduct": 89, "account": [89, 258, 265, 282, 295, 307, 318, 332, 346, 354, 362, 368, 381, 402, 895], "ols_semi_v2": 89, "ultim": 89, "meaningfulli": 89, "simpler": 89, "rel": [89, 442], "expens": [89, 872], "rare": 89, "encount": 89, "actual": [89, 259, 424, 897], "cousin": 89, "fulli": [89, 274, 419], "model": [89, 91, 93, 94, 95, 97, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 253, 254, 257, 260, 267, 271, 272, 273, 274, 276, 280, 285, 293, 298, 306, 317, 331, 345, 354, 361, 362, 363, 366, 368, 372, 375, 376, 377, 380, 381, 382, 385, 402, 417, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 455, 457, 458, 460, 461, 463, 464, 465, 467, 469, 471, 474, 476, 478, 480, 481, 482, 484, 486, 488, 491, 494, 495, 496, 498, 500, 501, 502, 503, 505, 508, 511, 512, 513, 514, 516, 517, 518, 519, 521, 524, 527, 528, 529, 530, 532, 533, 534, 535, 537, 540, 542, 544, 546, 547, 548, 550, 552, 554, 557, 559, 561, 563, 564, 565, 567, 569, 571, 574, 576, 578, 580, 581, 582, 584, 586, 588, 591, 593, 595, 597, 598, 599, 601, 604, 606, 609, 611, 613, 615, 616, 617, 619, 621, 623, 626, 628, 630, 632, 633, 634, 636, 638, 640, 656, 658, 660, 662, 663, 664, 666, 668, 670, 673, 676, 677, 678, 679, 681, 682, 683, 684, 686, 689, 692, 693, 694, 695, 697, 698, 699, 700, 702, 705, 707, 709, 711, 712, 713, 715, 717, 719, 735, 737, 739, 741, 742, 743, 745, 747, 749, 778, 781, 782, 783, 784, 786, 787, 788, 789, 791, 794, 797, 798, 799, 800, 801, 802, 803, 805, 809, 812, 813, 814, 816, 817, 818, 820, 822, 833, 840, 841, 842, 844, 845, 848, 851, 854, 857, 863, 872, 873, 875, 877, 879, 881, 882, 883, 885, 887, 889, 897, 899, 901], "through": [89, 262, 265, 420], "integr": [89, 95, 271, 650, 651, 729, 730, 759, 760, 772, 773, 867, 868], "asymptot": [89, 262, 265, 277], "desir": [89, 899], "present": 89, "rng": [89, 461, 465, 478, 482, 496, 513, 529, 544, 548, 561, 565, 578, 582, 595, 599, 613, 617, 630, 634, 660, 664, 678, 694, 709, 713, 739, 743, 783, 799, 812, 840, 879, 883, 895, 899], "facilit": [89, 822, 857], "manner": 89, "continu": [89, 236], "assum": [89, 95, 276, 420, 421, 424, 494, 511, 527, 646, 676, 692, 725, 755, 768, 781, 797, 873, 895, 897, 898, 899], "mle": [89, 491, 508, 524, 673, 689, 778, 794], "ols_para": 89, "beta": [89, 259, 269, 271, 274, 276, 277, 420, 424, 433, 891, 895, 896, 898, 899], "sigma2": [89, 455, 458, 469, 474, 476, 486, 540, 542, 552, 557, 559, 569, 574, 576, 586, 591, 593, 604, 609, 611, 621, 626, 628, 638, 646, 656, 658, 668, 705, 707, 717, 725, 735, 737, 747, 755, 768, 863, 873, 875, 877, 887, 896, 898], "r_": [89, 897], "plain": 89, "specifi": [89, 91, 94, 95, 97, 420, 421, 424, 427, 433, 435, 438, 446, 447, 453, 495, 512, 528, 677, 693, 782, 798, 809, 833, 891, 892, 894, 895, 897, 899], "complet": [89, 259, 277, 373, 422, 891, 899], "come": [90, 420], "packag": [90, 95, 236, 896], "exponenti": [90, 431, 432, 898], "move": [90, 92, 238, 239, 240, 432, 898], "movingblockbootstrap": 90, "systemat": [90, 898], "under": [90, 277, 390, 407, 420], "It": [90, 95, 258, 259, 362, 381, 421, 438, 895, 899], "recommend": [90, 446, 452], "compat": [91, 96, 97], "futur": [91, 92, 95, 97, 236, 496, 513, 529, 678, 694, 783, 799], "bug": [91, 94, 95, 96, 97], "affect": [91, 95, 96, 97, 269, 274, 277, 420, 496, 513, 529, 678, 694, 783, 799, 812, 813, 840, 841], "forecast": [91, 94, 95, 96, 97, 258, 259, 448, 449, 813, 823, 824, 826, 841, 894, 899], "figarch": [91, 95, 96, 97, 891], "gh606": [91, 97], "warn": [91, 92, 95, 97, 421, 494, 496, 511, 513, 527, 529, 676, 678, 692, 694, 781, 783, 797, 799, 812, 840, 895], "root": [91, 93, 95, 97, 236, 262, 263, 264, 265, 267, 276, 277, 286, 299, 310, 322, 337, 349, 417, 420, 427, 811, 835], "lag": [91, 95, 96, 97, 121, 131, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 262, 263, 264, 265, 266, 267, 271, 272, 273, 276, 281, 282, 294, 295, 307, 318, 321, 332, 341, 346, 368, 372, 373, 392, 417, 420, 425, 427, 428, 429, 431, 433, 435, 437, 438, 439, 440, 445, 496, 502, 513, 518, 529, 603, 678, 683, 694, 699, 783, 799, 809, 813, 833, 841, 891, 895, 896, 898], "search": [91, 97], "univari": [91, 92, 95, 97, 236, 267, 420, 891, 892, 895, 896, 898, 899], "volatil": [91, 94, 95, 97, 236, 425, 427, 428, 429, 430, 434, 438, 439, 440, 445, 446, 447, 450, 452, 454, 461, 462, 465, 470, 472, 473, 478, 479, 482, 487, 489, 495, 496, 502, 512, 513, 518, 528, 529, 534, 539, 544, 545, 548, 553, 555, 556, 561, 562, 565, 570, 572, 573, 578, 579, 582, 587, 589, 590, 595, 596, 599, 605, 607, 608, 613, 614, 617, 622, 624, 625, 630, 631, 634, 639, 641, 655, 660, 661, 664, 669, 671, 677, 678, 683, 693, 694, 699, 704, 709, 710, 713, 718, 720, 739, 740, 743, 748, 750, 782, 783, 788, 798, 799, 811, 812, 813, 819, 821, 835, 840, 841, 849, 856, 891, 892, 895], "made": [91, 97, 259, 267, 424, 496, 513, 529, 678, 694, 783, 799, 812, 840, 895, 899], "__future__": [91, 95, 97], "op": [91, 97], "reflect": [91, 97, 896, 899], "best": [91, 94, 97, 258, 259, 267], "push": [91, 97], "back": [91, 94, 97, 438], "adopt": [91, 97], "cython": [91, 96, 97, 452], "until": [91, 97, 424, 896], "later": [91, 97, 898], "occur": [91, 97, 420, 496, 513, 529, 678, 694, 783, 799, 873], "har": [91, 97, 427, 428, 438, 496, 502, 513, 518, 529, 678, 683, 694, 699, 783, 799, 813, 841, 891, 896], "rescal": [91, 95, 97, 362, 377, 381, 427, 428, 429, 438, 439, 445, 446, 854, 891], "python": [91, 92, 95, 96, 97, 452, 897], "bump": [91, 96, 97], "scipi": [91, 95, 96, 97, 494, 511, 527, 676, 692, 781, 797, 837], "statsmodel": [91, 96, 97, 259, 262, 263, 264, 265, 272, 368, 421], "remov": [91, 93, 94, 95, 96, 97, 100, 104, 105, 106, 107, 108, 109, 110, 111, 502, 518, 534, 683, 699, 788], "cach": [91, 96, 97], "refactor": 92, "routin": [92, 236, 419], "old": [92, 264], "locat": [92, 93, 236, 447, 450, 469, 486, 496, 513, 529, 552, 569, 586, 604, 621, 638, 668, 678, 694, 717, 747, 783, 799, 812, 840, 873, 887, 891], "enabl": [92, 95], "numba": 92, "jit": 92, "compil": [92, 96], "recurs": [92, 424, 433, 452, 454, 458, 461, 469, 473, 476, 478, 486, 494, 511, 527, 539, 542, 544, 552, 556, 559, 561, 569, 573, 576, 578, 586, 590, 593, 595, 604, 608, 611, 613, 621, 625, 628, 630, 638, 655, 658, 660, 668, 676, 692, 704, 707, 709, 717, 734, 737, 739, 747, 781, 797, 872, 873, 874, 877, 879, 887, 895], "framework": [92, 421], "purpos": [92, 895, 901], "via": 92, "comparison": [93, 236, 238, 239, 240, 258, 421, 896], "procedur": [93, 236, 239, 240, 258, 259], "typograph": 93, "small": [93, 95, 96, 258, 259, 896], "add": [93, 96, 259, 898], "augment": [93, 262, 276, 277, 391, 417, 419, 420], "dickei": [93, 95, 262, 263, 276, 277, 391, 398, 417, 419, 420], "fuller": [93, 95, 262, 263, 276, 277, 391, 398, 417, 419, 420], "gl": [93, 96, 263, 419, 434, 896], "phillip": [93, 95, 264, 265, 274, 276, 277, 419], "perron": [93, 96, 263, 265, 276, 277, 419, 420], "kpss": [93, 95, 419], "hedgehog": [94, 899], "plot": [94, 259, 420, 421, 424, 813, 841, 896, 897, 898, 899], "hansen": [94, 237, 238, 239, 258, 274, 443], "stanislav": 94, "khrapov": 94, "latest": [94, 236], "typo": 94, "mc": [94, 95, 259], "give": 94, "pvalu": [94, 247, 248, 249, 259, 262, 263, 264, 265, 266, 273, 275, 417], "nan": [94, 259, 424, 447, 450, 457, 460, 471, 488, 496, 513, 529, 554, 571, 588, 606, 623, 640, 670, 678, 694, 719, 749, 783, 799, 812, 840, 889, 898], "hold_back": [94, 427, 428, 429, 438, 439, 445, 446, 891], "last_ob": [94, 95, 424, 494, 495, 511, 512, 527, 528, 676, 677, 692, 693, 781, 782, 797, 798, 895, 897], "fit": [94, 95, 259, 272, 424, 427, 428, 429, 432, 438, 439, 445, 450, 496, 503, 513, 519, 529, 535, 678, 684, 694, 700, 783, 789, 799, 805, 812, 813, 815, 819, 822, 840, 841, 843, 849, 857, 891, 896, 897, 898, 899, 900], "simplifi": [94, 95, 496, 513, 529, 678, 694, 783, 799, 812, 840, 895], "roll": 94, "redefin": 94, "held": 94, "now": [94, 95, 96, 496, 513, 529, 678, 694, 783, 799], "irrespect": 94, "first_ob": [94, 95, 494, 495, 511, 512, 527, 528, 676, 677, 692, 693, 781, 782, 797, 798, 897], "minim": [95, 271, 421, 424, 494, 511, 527, 676, 692, 781, 797, 837], "preserv": 95, "behavior": 95, "often": [95, 503, 519, 535, 684, 700, 789, 805, 898], "substanti": [95, 898], "memori": [95, 262], "especi": 95, "handl": [95, 813, 819, 841, 849], "exogen": [95, 96, 427, 428, 438, 439, 496, 502, 505, 513, 518, 521, 529, 537, 678, 683, 686, 694, 699, 702, 783, 791, 799, 812, 840, 891, 894, 898], "possibl": [95, 277, 420, 421, 895], "e_t": [95, 424, 891, 897, 898], "typing_extens": 95, "subtli": 95, "introduc": 95, "incorrect": 95, "ewma": [95, 432, 442, 734, 898], "gh458": 95, "aparch": [95, 891], "volatilti": 95, "process": [95, 96, 266, 267, 277, 417, 419, 420, 421, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 442, 445, 446, 462, 470, 472, 479, 487, 489, 502, 504, 518, 520, 534, 536, 545, 553, 555, 562, 570, 572, 579, 587, 589, 596, 605, 607, 614, 622, 624, 631, 639, 641, 661, 669, 671, 683, 685, 699, 701, 710, 718, 720, 740, 748, 750, 788, 790, 806, 823, 826, 830, 880, 888, 890, 891, 892, 894, 895, 897], "gh443": 95, "pyproject": 95, "toml": 95, "gh438": 95, "degre": [95, 100, 104, 105, 106, 107, 108, 109, 110, 111, 272, 364, 383, 763, 776, 853, 898, 900], "freedom": [95, 100, 104, 105, 106, 107, 108, 109, 110, 111, 272, 364, 383, 763, 776, 853, 898, 900], "gh437": 95, "harx": [95, 502, 518, 699, 891, 896, 898], "gh417": 95, "minor": 95, "doc": [95, 96, 236], "notabl": 95, "featur": [95, 895, 898], "part": 95, "gh395": 95, "kernel": [95, 268, 277, 354, 368, 377, 402, 420], "bartlett": [95, 103, 268, 277, 354, 368, 402, 420], "parzen": [95, 102, 105, 106, 107, 111, 268, 277, 354, 368, 402], "suppos": [95, 899], "bandwidth": [95, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 116, 117, 120, 121, 123, 126, 127, 130, 131, 137, 140, 141, 144, 145, 147, 150, 151, 154, 155, 157, 160, 161, 164, 165, 167, 170, 171, 174, 175, 177, 180, 181, 184, 185, 187, 190, 191, 194, 195, 197, 200, 201, 204, 205, 207, 210, 211, 214, 215, 217, 220, 221, 224, 225, 227, 230, 231, 234, 235, 268, 277, 354, 368, 402, 419, 420], "except": [95, 96, 258, 421, 424, 496, 513, 529, 678, 694, 783, 799, 812, 840, 897, 898, 899], "adf": [95, 263, 264, 265, 267, 273, 276, 277, 298, 398, 417, 419, 420, 421], "phillipsperron": [95, 276, 277, 419, 421], "varianceratio": [95, 419, 421], "zivotandrew": [95, 419, 421], "infeas": 95, "too": [95, 259], "short": [95, 101, 135, 362, 381, 442], "reduc": 95, "gh364": 95, "gh366": 95, "ouliari": [95, 276, 277, 419], "phillips_ouliari": [95, 276, 419, 420], "cointegr": [95, 236, 262, 265], "gh360": 95, "canonicalcointegratingreg": [95, 419], "dynamicol": [95, 419], "fullymodifiedol": [95, 419], "gh356": 95, "gh359": 95, "engl": [95, 273, 276, 277, 368, 419, 420], "granger": [95, 273, 276, 277, 368, 419, 420], "engle_grang": [95, 277, 368, 419, 420], "gh354": 95, "issu": [95, 96, 427, 428, 429, 438, 439, 445, 891, 896], "mutat": 95, "Will": 95, "rais": [95, 96, 446, 461, 472, 478, 489, 494, 496, 511, 513, 527, 529, 544, 555, 561, 572, 578, 589, 595, 607, 613, 624, 630, 641, 660, 671, 676, 678, 692, 694, 709, 720, 739, 750, 781, 783, 797, 799, 879, 890], "skewstud": [95, 891, 898], "did": 95, "prevent": 95, "gh353": 95, "restor": [95, 421, 898], "vendor": 95, "copi": [95, 96, 421, 895, 897], "property_cach": 95, "conda": 95, "gh338": 95, "gh341": 95, "gh342": 95, "gh343": 95, "gh345": 95, "gh346": 95, "caus": 95, "fail": 95, "gh339": 95, "drop": [95, 421, 897], "nep": 95, "gh334": 95, "partial": [95, 650, 729, 759, 772, 867], "partial_mo": 95, "gh329": 95, "overflowerror": 95, "gh331": 95, "std_resid": [95, 96, 654, 733, 763, 776, 871, 898], "gh326": 95, "gh315": 95, "check": [95, 237, 239, 259, 421, 495, 512, 528, 677, 693, 782, 798, 873], "zero": [95, 259, 266, 420, 445, 458, 476, 542, 559, 576, 593, 611, 628, 658, 707, 737, 788, 877, 891, 895, 896, 898], "gh322": 95, "arch_lm_test": 95, "gh313": 95, "certain": 95, "environ": 95, "reload": 95, "gh317": 95, "auto_bandwidth": [95, 419], "gh303": 95, "michael": 95, "rabba": 95, "arch_model": [95, 96, 424, 496, 513, 529, 678, 694, 783, 799, 813, 819, 841, 849, 891, 894, 895, 897, 898, 899], "help": [95, 895, 899], "power": [95, 96, 113, 123, 137, 147, 157, 167, 177, 187, 197, 207, 217, 227, 267, 421, 425, 433, 435, 471, 488, 554, 571, 588, 606, 623, 640, 670, 719, 749, 889, 891, 895, 897, 898], "report": [95, 277, 427, 428, 429, 438, 439, 445, 891], "poorli": 95, "wrong": 95, "gh288": 95, "optimization_result": 95, "converg": [95, 420, 427, 428, 429, 438, 439, 445, 494, 511, 527, 676, 692, 781, 797, 846, 891, 896, 898, 899], "numer": [95, 266, 420, 421, 469, 486, 491, 508, 524, 552, 569, 586, 604, 621, 638, 668, 673, 689, 717, 747, 778, 794, 846, 887, 896], "gh292": 95, "object": [95, 417, 424, 447, 450, 494, 495, 511, 512, 527, 528, 676, 677, 692, 693, 781, 782, 797, 798, 822, 857, 893, 896, 897, 898, 899], "gh290": 95, "nonrobust": [95, 421], "infer": [95, 266, 274, 898], "overlap": [95, 266, 421, 438], "gh286": 95, "extens": [95, 96, 264], "correctli": [95, 421, 898], "zivot": [95, 267, 419], "jim": 95, "varanelli": 95, "uneven": 95, "gh260": 95, "lm": [95, 809, 833], "gh261": 95, "veri": [95, 262, 420, 897], "gh262": 95, "abil": [95, 237, 239], "gh259": 95, "fraction": [95, 433], "garch": [95, 424, 427, 428, 502, 518, 534, 683, 699, 788, 891, 892, 895, 896, 897, 899], "backcast": [95, 455, 458, 461, 469, 474, 476, 478, 486, 491, 494, 508, 511, 524, 527, 540, 542, 544, 552, 557, 559, 561, 569, 574, 576, 578, 586, 591, 593, 595, 604, 609, 611, 613, 621, 626, 628, 630, 638, 656, 658, 660, 668, 673, 676, 689, 692, 705, 707, 709, 717, 735, 737, 739, 747, 778, 781, 794, 797, 872, 875, 877, 879, 887], "place": 95, "big": 95, "less": [95, 263, 898], "incorrectli": 95, "gh248": 95, "mida": [95, 440], "hyperbol": [95, 440], "weight": [95, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 118, 128, 142, 152, 162, 172, 182, 192, 202, 212, 222, 232, 432, 433, 442, 896, 898], "midashyperbol": 95, "gh233": 95, "gh225": 95, "fixedvari": 95, "pre": [95, 420, 424, 435, 491, 508, 524, 673, 689, 778, 794, 872], "zig": [95, 901], "zag": [95, 901], "zeromean": [95, 895, 896, 898], "gh156": 95, "mimic": 95, "jointli": [95, 425, 432, 453], "smooth": [95, 432, 442], "gh195": 95, "write": [96, 452, 897], "switch": 96, "theme": 96, "sphinx": 96, "immateri": 96, "wheel": 96, "constructor": [96, 898], "gh572": 96, "downstream": 96, "project": 96, "due": [96, 282, 295, 307, 318, 332, 346, 420, 424, 496, 513, 529, 678, 694, 783, 799, 812, 840, 896, 899], "overli": 96, "assert": 96, "gh569": 96, "would": [96, 259, 899], "gh565": 96, "multi": [96, 266, 421, 424], "usign": 96, "gh551": 96, "dfgl": [96, 419, 421], "detrend": [96, 263, 277, 421], "studi": [96, 264, 267, 274], "qu": [96, 263], "2007": [96, 263], "immut": 96, "trend": [96, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 289, 292, 302, 305, 313, 316, 326, 329, 340, 344, 352, 390, 407, 417, 420, 421], "legaci": 96, "replac": [96, 420, 424, 433, 899], "favor": [96, 420], "get_stat": [96, 898], "set_stat": [96, 898], "studentst": [96, 891, 898], "archinmean": [96, 901], "extend": [96, 419], "volatilityprocess": [96, 427, 428, 429, 438, 439, 445, 446, 504, 520, 536, 685, 701, 790, 806, 901], "volatility_updat": 96, "volatilityupdat": [96, 472, 489, 555, 572, 589, 607, 624, 641, 671, 720, 750, 890, 901], "environment": 96, "disabl": [96, 494, 511, 527, 676, 692, 781, 797], "linux": 96, "osx": 96, "export": [96, 366, 385, 822, 857], "arch_no_binari": 96, "powershel": 96, "env": 96, "cmd": 96, "df_adjust": [99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 270, 272, 354, 362, 368, 377, 381, 402], "force_int": [99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 277, 354, 368, 402], "quadraticspectr": 99, "newei": [100, 264, 265, 268, 277, 321, 354, 368, 402, 421], "west": [100, 264, 265, 268, 277, 321, 354, 368, 402, 420, 421, 898], "adjust": [100, 104, 105, 106, 107, 108, 109, 110, 111, 272, 354, 364, 368, 383, 402, 853], "minu": [100, 104, 105, 106, 107, 108, 109, 110, 111, 266, 424], "product": [100, 104, 105, 106, 107, 108, 109, 110, 111, 277], "demean": [100, 104, 105, 106, 107, 108, 109, 110, 111, 114, 124, 138, 148, 158, 168, 178, 188, 198, 208, 218, 228, 899], "nvar": [100, 104, 105, 106, 107, 108, 109, 110, 111], "forc": [100, 104, 105, 106, 107, 108, 109, 110, 111, 277, 354, 368, 402], "w": [100, 104, 105, 106, 107, 108, 109, 110, 111, 262, 264, 265, 266, 267, 271, 819, 849], "begin": [100, 104, 105, 106, 107, 108, 109, 110, 111, 267, 269, 274, 277, 424, 891, 895], "leq1": [100, 104, 105, 106, 107, 109, 110, 111], "ldot": [100, 104, 105, 106, 107, 108, 109, 110, 111, 424], "short_run": [101, 115, 125, 139, 149, 159, 169, 179, 189, 199, 209, 219, 229], "one_sided_strict": [101, 115, 125, 139, 149, 159, 169, 179, 189, 199, 209, 219, 229], "long_run": [101, 115, 125, 139, 149, 159, 169, 179, 189, 199, 209, 219, 229], "one_sid": [101, 115, 125, 139, 149, 159, 169, 179, 189, 199, 209, 219, 229], "strict": [101, 134, 277], "label": [101, 448, 449, 897, 899], "gamma_0": 101, "lambda_1": [101, 433], "omega": [101, 269, 274, 277, 424, 425, 426, 431, 433, 435, 437, 440, 708, 891, 895, 896, 898, 899], "prime": [101, 274], "lambda_0": [101, 269, 274], "6z": 104, "leq": [104, 259], "cauchi": 105, "geometr": 106, "reisz": 107, "quadrat": [108, 262, 268, 269, 271, 274, 276, 277, 354, 368, 402, 417, 420], "spectral": [108, 268, 277, 354, 368, 402], "sin": 108, "co": [108, 109, 110, 111], "pi": [108, 109, 110, 111, 431, 725, 755, 768], "tukei": [109, 110, 111], "ham": 109, "46": [109, 420, 421, 898], "han": 110, "436": 111, "564": 111, "covarianceestim": [115, 125, 139, 149, 159, 169, 179, 189, 199, 209, 219, 229, 270, 272, 275], "restrict": [116, 126, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 271, 425, 437, 895], "_t": [120, 130, 144, 154, 164, 174, 184, 194, 204, 214, 224, 234, 269, 274, 277, 362, 381, 424], "c_k": [120, 130, 144, 154, 164, 174, 184, 194, 204, 214, 224, 234], "q": [120, 130, 144, 154, 164, 174, 184, 194, 204, 214, 224, 234, 268, 271, 362, 381, 424, 425, 431, 433, 435, 788, 891, 896, 897, 898, 899], "2q": [120, 130, 144, 154, 164, 174, 184, 194, 204, 214, 224, 234], "determin": [120, 121, 130, 131, 144, 145, 154, 155, 164, 165, 174, 175, 184, 185, 194, 195, 204, 205, 214, 215, 224, 225, 234, 235, 259, 267, 276, 419, 442, 650, 729, 759, 772, 867], "rate": [120, 130, 144, 154, 164, 174, 184, 194, 204, 214, 224, 234, 240, 258, 259, 260, 420, 421], "stabl": 236, "releas": 236, "develop": 236, "devel": 236, "toolbox": 236, "plan": 236, "expand": 236, "relev": [236, 239, 891, 893], "financi": [236, 266, 420, 421, 898, 899], "cite": 236, "zenodo": 236, "kevin": [236, 440], "sheppard": [236, 440], "2021": [236, 421, 496, 513, 529, 678, 694, 783, 799], "march": 236, "bashtag": 236, "v4": 236, "http": [236, 262, 265, 443], "5281": 236, "593254": 236, "2005": [237, 239, 240, 258, 420], "superior": [237, 239, 247, 254, 257], "predict": [237, 239, 421], "busi": [237, 239, 262, 264, 265, 267], "econom": [237, 239, 262, 263, 264, 265, 267, 443, 898], "hansenlundenason": 237, "lund": [237, 238, 258], "nason": [237, 238, 258], "econometrica": [237, 238, 239, 240, 263, 264, 265, 269, 271, 277], "79": [237, 238, 420, 891, 898], "453": [237, 238], "497": [237, 238], "romanowolf": 237, "stepwis": [237, 240], "formal": [237, 240, 258], "snoop": [237, 239, 240], "73": [237, 240, 891], "1237": [237, 240, 896], "1282": [237, 240], "realiti": [237, 239, 259], "68": [237, 239, 897, 898], "1097": [237, 239], "1126": [237, 239], "loss": [238, 239, 240, 258, 259, 282, 295, 307, 318, 332, 346], "sb": [238, 239, 240], "cbb": [238, 239, 240], "mbb": [238, 239, 240], "benchmark": [239, 240, 247, 258, 259], "known": [239, 259, 277, 354, 368, 402, 461, 478, 544, 561, 578, 595, 613, 630, 660, 709, 739, 879, 898], "snooper": [239, 259], "differenti": [239, 240], "re": [239, 259, 265, 420, 424, 427, 428, 429, 438, 439, 445, 496, 513, 529, 678, 694, 783, 799, 813, 819, 841, 849, 891, 895, 897, 898, 899], "decis": 239, "never": 239, "consist": [239, 240, 247, 249, 250, 259, 264, 265, 368, 420, 895, 896, 898, 899], "closer": [239, 899], "log": [239, 262, 263, 264, 265, 266, 420, 421, 427, 450, 471, 488, 497, 554, 571, 588, 606, 623, 640, 646, 670, 719, 725, 749, 755, 768, 810, 834, 846, 863, 889, 891, 895, 896, 898, 899], "wors": [239, 247, 258, 259], "stepm": [239, 253], "365": 239, "380": [239, 259, 896], "wise": 240, "fwer": 240, "spa": 240, "hashabl": [242, 243, 247, 257, 496, 513, 529, 678, 694, 783, 799, 812, 840], "inclus": 244, "smallest": 244, "pvalue_typ": 247, "reject": [247, 259, 262, 263, 264, 265, 266, 420, 421], "equal": [247, 259, 271, 494, 511, 527, 676, 692, 781, 797], "string": [247, 277, 354, 368, 402, 424, 427, 450, 496, 513, 529, 678, 694, 783, 799, 812, 813, 819, 840, 841, 849], "critic": [247, 249, 262, 263, 264, 265, 273, 276, 277, 279, 287, 292, 300, 305, 311, 316, 323, 329, 338, 344, 350, 389, 400, 406, 415, 417, 420, 421, 900], "respect": [247, 819, 849], "subset": 247, "crit_val": [249, 273, 275], "methodologi": [249, 368, 898], "pval": [250, 900], "selector": 253, "activ": 253, "primarili": 253, "boolean": [253, 494, 511, 527, 676, 692, 781, 797], "smaller": [258, 259], "null": [258, 259, 262, 263, 264, 265, 266, 273, 275, 276, 277, 283, 296, 308, 319, 333, 347, 390, 394, 407, 410, 417, 419, 420, 421, 858, 900], "h_0": [258, 259], "max_i": [258, 259], "l_i": [258, 259], "geq": [258, 259, 424, 425], "l_": [258, 259, 427, 428, 437, 438], "bm": [258, 259], "h_1": 258, "min_i": 258, "fact": 258, "potenti": 258, "realitycheck": [258, 259], "modif": [258, 263], "attempt": [258, 267, 461, 478, 544, 561, 578, 595, 613, 630, 660, 709, 739, 879, 897], "identifi": [258, 259], "expect": [258, 259, 417, 895, 897], "probabl": [258, 259, 651, 730, 760, 773, 868], "mcp": 258, "familywis": [258, 259, 260], "gen": 259, "23456": 259, "throughout": 259, "31": [259, 266, 424, 891, 897, 898], "examin": 259, "aspect": 259, "There": [259, 421, 534, 788, 892, 895, 898], "outperform": 259, "sequenti": 259, "indistinguish": 259, "That": [259, 897], "prefer": 259, "larger": [259, 424, 433, 435, 461, 478, 544, 561, 578, 595, 613, 630, 660, 709, 739, 879, 895, 897, 899], "evalu": [259, 496, 513, 529, 643, 678, 694, 722, 752, 765, 783, 799, 812, 840, 860, 863, 872, 891, 896, 897, 898], "increas": [259, 898, 899], "absolut": [259, 898], "mse": 259, "mad": 259, "hypothesi": [259, 262, 263, 264, 265, 266, 267, 273, 276, 278, 283, 291, 296, 304, 308, 315, 319, 328, 333, 343, 347, 387, 390, 394, 403, 407, 410, 417, 420, 421, 900], "compet": 259, "technic": 259, "trade": [259, 267, 819, 849], "rule": [259, 897], "serv": 259, "predictor": 259, "contamin": 259, "nois": [259, 421], "bm_factor": 259, "half": 259, "bm_beta": 259, "bm_loss": 259, "model_factor": 259, "model_loss": 259, "rang": [259, 267, 421, 895, 896, 897, 899], "model_beta": 259, "su": 259, "variou": 259, "regard": 259, "real": 259, "work": [259, 262, 265], "given": [259, 442, 495, 512, 528, 677, 693, 755, 782, 798, 898], "realiz": [259, 496, 513, 529, 678, 694, 783, 799, 812, 840], "paper": [259, 262, 265, 267, 443], "005": 259, "amount": [259, 424], "250": [259, 496, 513, 529, 678, 694, 783, 799, 813, 841, 895, 896, 899], "30": [259, 424, 895, 898, 899], "60": [259, 421, 891, 898], "80": 259, "ideal": 259, "45": [259, 420, 891, 896, 898], "o": [259, 424, 425, 431, 435, 788, 891, 896, 897, 898, 899], "line": [259, 269, 274, 897], "col": 259, "sort": 259, "linspac": 259, "995": [259, 895], "violat": [259, 897], "039": 259, "049": 259, "050": 259, "clearli": [259, 420, 421], "avg_model_loss": 259, "style": 259, "similar": [259, 260, 420, 421, 424, 443, 897, 899], "primari": 259, "just": 259, "ask": 259, "question": 259, "split": 259, "superior_model": 259, "39": [259, 420, 891, 896, 898], "379": 259, "466": 259, "475": 259, "better_model": 259, "concat": [259, 898, 899], "isin": 259, "logical_not": 259, "rot": 259, "270": [259, 267], "easili": [259, 424, 897, 899], "exclud": [259, 267, 427, 428, 429, 438, 439, 445, 891], "001": [259, 421, 891, 896, 898], "003": [259, 896], "120": [259, 265], "140": [259, 896], "011": 259, "074": 259, "101": [259, 421], "160": 259, "118": 259, "216": 259, "300": [259, 788], "287": 259, "443": [259, 895], "180": 259, "460": 259, "506": 259, "340": 259, "536": 259, "240": 259, "740": 259, "360": [259, 819, 849], "840": [259, 420, 896], "320": [259, 896], "260": [259, 896, 898], "420": 259, "280": [259, 421], "440": 259, "480": 259, "000": [259, 264, 277, 420, 421, 891, 895, 896, 898, 899], "statu": 259, "design": 260, "ct": [262, 263, 264, 265, 267, 269, 270, 271, 272, 274, 276, 277, 417, 420, 421], "ctt": [262, 269, 270, 271, 272, 274, 276, 277, 417, 420, 421], "max_lag": [262, 263, 267, 271, 276, 421], "aic": [262, 263, 267, 271, 276, 421, 891, 895, 896, 898, 899], "bic": [262, 263, 267, 271, 276, 421, 891, 895, 896, 898, 899], "low_memori": [262, 263], "omit": [262, 263, 264, 265, 267, 502, 518, 683, 699], "No": [262, 265, 267, 269, 271, 273, 274, 275, 276, 277, 417, 420, 421, 650, 729, 759, 772, 867, 891, 895, 896, 897, 898, 899], "linear": [262, 263, 264, 265, 267, 269, 271, 274, 276, 277, 417, 421, 424, 459, 477, 490, 492, 494, 502, 507, 509, 511, 518, 523, 525, 527, 543, 560, 577, 594, 612, 629, 659, 672, 674, 676, 683, 688, 690, 692, 699, 738, 777, 779, 781, 793, 795, 797, 878], "akaik": [262, 263, 267, 271, 808, 832], "ic": [262, 263, 267], "schwarz": [262, 263, 267, 810, 834], "bayesian": [262, 263, 267, 271, 810, 834], "slower": 262, "obtain": [262, 265], "surfac": [262, 265], "2010": [262, 265, 266, 424, 897], "tabl": [262, 265, 417, 822, 857, 895], "signific": [262, 265, 267, 898], "judg": [262, 265], "autolag": [262, 267], "maxlag": 262, "green": 262, "macrodata": [262, 263, 264, 265], "inflat": [262, 263, 264, 265, 898], "diff": [262, 263, 264, 265, 354, 402, 417, 421], "cpi": [262, 263, 264, 265, 898], "4f": [262, 263, 264, 265, 266], "format": [262, 263, 264, 265, 266, 417, 496, 513, 529, 678, 694, 783, 799, 812, 840, 895], "0931": 262, "0271": 262, "2111": 262, "0822": 262, "prentic": 262, "hall": 262, "saddl": 262, "river": 262, "jersei": 262, "hamilton": [262, 265], "princeton": [262, 265, 266], "167": [262, 265], "76": [262, 265, 420, 891, 895, 898], "queen": [262, 265], "dept": [262, 265], "idea": [262, 265, 899], "repec": [262, 265], "qed": [262, 265], "wpaper": [262, 265], "1227": [262, 265], "html": [262, 265, 822, 857], "elliott": 263, "rothenberg": 263, "stock": [263, 271], "7611": 263, "0059": 263, "9036": 263, "0447": 263, "effici": 263, "autoregress": [263, 271, 428, 438, 443, 898], "64": [263, 421, 898], "813": 263, "836": 263, "finit": 263, "ng": 263, "letter": 263, "94": [263, 432, 898], "kwiatkowski": 264, "schmidt": 264, "shin": 264, "stationar": [264, 421], "hobijn": 264, "et": [264, 650, 729, 759, 772, 867], "al": [264, 650, 729, 759, 772, 867], "1998": 264, "1991": [264, 268], "schwert": [264, 267], "1989": [264, 267, 274], "nob": [264, 265, 427, 428, 429, 438, 439, 445, 465, 482, 496, 502, 513, 518, 529, 534, 548, 565, 582, 599, 617, 634, 664, 678, 683, 694, 699, 713, 743, 783, 788, 799, 804, 810, 811, 812, 834, 835, 840, 863, 872, 873, 883, 895, 898], "weakli": [264, 417, 420, 421], "were": [264, 277, 496, 513, 529, 678, 694, 783, 799, 812, 840, 899], "2870": 264, "1473": 264, "2075": 264, "0128": 264, "heteroskedast": [264, 265, 266, 336, 368, 809, 833, 896, 898], "59": [264, 421, 896], "817": 264, "858": [264, 421, 896, 898], "franc": 264, "oom": 264, "statistica": 264, "neerlandica": 264, "52": [264, 420, 819, 849, 891], "483": 264, "502": 264, "1992": [264, 267, 269, 271], "against": [264, 495, 512, 528, 677, 693, 782, 798], "159": [264, 267], "178": 264, "61": [264, 896, 898], "631": 264, "653": [264, 896], "mont": [264, 267, 894], "carlo": [264, 267, 894], "investig": [264, 267, 420], "147": [264, 267, 896], "test_typ": [265, 275, 277, 420, 421], "tau": [265, 277, 324, 421], "rho": [265, 275, 324, 420, 421, 442], "coeffici": [265, 277, 398, 420, 502, 518, 683, 699, 858, 898], "pp": [265, 420, 421], "unlik": 265, "1356": 265, "0000": [265, 898], "2022": 265, "3271": 265, "semidefinit": 265, "55": [265, 895, 898, 899], "703": 265, "708": 265, "1988": [265, 898], "biometrika": 265, "335": 265, "346": 265, "robust": [266, 277, 354, 368, 402, 491, 494, 508, 511, 524, 527, 673, 676, 689, 692, 778, 781, 794, 797, 891, 895, 896, 898, 899], "walk": [266, 421], "period": [266, 267, 334, 341, 420, 421, 424, 430, 438, 440, 496, 513, 529, 678, 694, 783, 799, 812, 813, 840, 841, 873, 895, 899], "drift": 266, "increment": 266, "discard": 266, "vr": [266, 421], "possibli": 266, "plu": [266, 502, 518, 683, 699], "presenc": [266, 267], "pdr": 266, "get_data_fr": [266, 891], "djia": [266, 891], "2020": 266, "month": [266, 421], "1370": 266, "campbel": 266, "lo": 266, "mackinlai": 266, "craig": 266, "nj": 266, "trim": 267, "break": [267, 420, 421], "singl": [267, 417, 419, 421, 424, 461, 465, 469, 478, 482, 486, 496, 513, 529, 544, 548, 552, 561, 565, 569, 578, 582, 586, 595, 599, 604, 613, 617, 621, 630, 634, 638, 642, 646, 653, 660, 664, 668, 678, 694, 709, 713, 717, 721, 725, 732, 739, 743, 747, 751, 755, 762, 764, 768, 775, 783, 799, 812, 840, 859, 870, 879, 883, 887, 896, 899], "percentag": 267, "333": 267, "h0": 267, "follow": [267, 435, 452, 891, 895, 897, 899], "baum": 267, "2015": 267, "candid": 267, "front": 267, "dummi": 267, "subsequ": 267, "reduct": 267, "pessimist": 267, "character": 267, "off": [267, 428, 494, 511, 527, 676, 692, 781, 797, 819, 849, 895, 896, 897, 898, 899], "f": [267, 421, 427, 643, 650, 722, 725, 729, 752, 759, 765, 772, 860, 867, 895], "zandrew": 267, "stata": 267, "softwar": 267, "s437301": 267, "boston": 267, "colleg": 267, "depart": 267, "revis": 267, "further": [267, 269, 271, 274, 897], "evid": [267, 420], "great": 267, "crash": 267, "oil": [267, 420], "price": [267, 420], "shock": [267, 424, 891, 895, 898, 899], "251": 267, "sequenc": [268, 437, 438, 465, 482, 495, 502, 512, 518, 528, 534, 548, 565, 582, 599, 617, 634, 643, 646, 647, 650, 651, 653, 664, 677, 683, 693, 699, 713, 722, 725, 726, 729, 730, 732, 743, 752, 755, 756, 759, 760, 762, 765, 768, 769, 772, 773, 775, 782, 788, 798, 804, 860, 863, 864, 867, 868, 870, 883, 897], "ba": 268, "nw": 268, "pa": 268, "gallant": 268, "x_trend": [269, 274], "canon": [269, 419], "hand": [269, 271, 274, 276, 277], "determinist": [269, 271, 274, 276, 277, 279, 288, 292, 301, 305, 312, 316, 325, 329, 339, 344, 351, 368, 420, 895], "y_t": [269, 271, 274, 276, 277, 398, 420, 427, 428, 429, 438, 439, 445, 895], "1t": [269, 274], "x_t": [269, 271, 274, 276, 277, 420, 427, 428, 438, 439], "eta_": [269, 274], "gamma_1": [269, 274], "2t": [269, 274], "gamma_2": [269, 274], "epsilon_": [269, 274, 424, 425, 426, 431, 433, 435, 437, 440, 891, 897, 898], "eta": [269, 274, 443, 755, 898], "infti": [269, 274, 433, 650, 729, 755, 759, 772, 867, 899], "eta_t": [269, 274], "matric": [269, 274], "partit": [269, 274], "cc": [269, 274, 277], "omega_": [269, 274], "star_t": [269, 274], "lambda": [269, 274, 432, 435, 443, 755, 898], "_2": 269, "kappa": [269, 277, 427, 898], "star_": [269, 274], "park": 269, "societi": [269, 271, 277], "119": 269, "143": [269, 898], "omega_112": 270, "kernel_est": [270, 272, 275], "num_x": [270, 272], "rsquar": [270, 438], "rsquared_adj": 270, "estimator_typ": 270, "max_lead": 271, "hqic": 271, "dynam": [271, 272, 368, 419, 424, 425, 426, 431, 432, 433, 435, 437, 442, 895, 897, 898], "dol": 271, "inform": [271, 420, 452, 494, 511, 527, 676, 692, 781, 797, 808, 810, 811, 832, 834, 835, 846, 897, 898], "criterion": 271, "hannan": 271, "quinn": 271, "schwartz": 271, "d_t": [271, 276, 277, 420], "gamma": [271, 274, 276, 277, 398, 420, 427, 428, 438, 439, 440, 646, 708, 755, 768, 896, 898, 899], "kappa_i": 271, "sum": [271, 362, 381, 440, 646, 725, 755, 768, 863], "lambda_j": [271, 433], "epsilon_t": [271, 276, 368, 398, 420, 424, 427, 428, 429, 433, 438, 439, 445, 891, 895, 898], "contemporan": 271, "ln": [271, 431, 646, 725, 755, 768], "saikkonen": 271, "theori": 271, "27": [271, 420, 424, 897], "watson": [271, 421], "1993": 271, "783": 271, "820": 271, "cov_typ": [272, 368, 450, 494, 511, 527, 676, 692, 781, 797], "reg_result": 272, "regressionresult": [272, 273, 275, 285, 298, 321], "xsection": [273, 275], "dimens": [273, 496, 513, 529, 678, 694, 783, 799, 812, 827, 840, 895], "stochast": [273, 276, 390, 407], "_1": 274, "z_tz": 274, "z_t": [274, 276, 277, 368, 420], "1990": [274, 277], "advanc": 274, "225": 274, "248": 274, "za": [275, 277, 420, 421], "englegrangertestresult": 276, "zt": [277, 420], "pu": [277, 420], "pz": [277, 420], "phillipsouliaristestresult": 277, "z\u03b1": 277, "p\u1d64": 277, "trace": 277, "unadjust": [277, 354, 368, 402], "classic": [277, 354, 368, 402, 491, 494, 508, 511, 524, 527, 673, 676, 689, 692, 778, 781, 794, 797], "go": 277, "still": [277, 433, 496, 513, 529, 678, 694, 783, 799, 812, 840], "far": 277, "5000": 277, "distinct": [277, 420, 895], "u_t": 277, "let": 277, "_u": 277, "2_1": 277, "2_u": 277, "cdot2": 277, "tild": 277, "cdot": [277, 427], "xi_t": 277, "xi_": 277, "_z": 277, "mathrm": 277, "tr": 277, "m_": 277, "zz": [277, 368], "express": 277, "subtract": 277, "z_1": 277, "anyth": 277, "165": [277, 895], "193": 277, "df": [280, 293, 306, 317, 331, 345, 417, 421, 891, 895, 896, 898, 899, 900], "valid_trend": [288, 301, 312, 325, 339, 351], "valid": [289, 302, 313, 324, 326, 340, 352, 494, 496, 511, 513, 527, 529, 676, 678, 692, 694, 781, 783, 797, 799, 812, 840], "cointegrationanalysisresult": [354, 402], "differenc": [354, 402, 433], "multipli": [354, 368, 402], "epsilon": [362, 381, 424, 432], "r\u00b2": [363, 364, 382, 383], "text": [366, 385, 822, 857], "csv": [366, 385], "latex": [366, 385, 822, 857], "homoskedast": 368, "dynamicolsresult": 368, "linear_model": 368, "ordin": 368, "2_": [368, 424, 432, 891], "hac": 368, "incl": 372, "ax": [395, 411, 420, 895, 896, 897, 898, 899], "titl": [395, 411, 420, 421, 896, 897, 899], "hold": [395, 411, 438, 494, 511, 527, 676, 692, 781, 797, 899], "y_": [398, 420, 427, 428, 895], "delta_i": 398, "share": [417, 425], "trigger": 417, "vari": [417, 901], "nc": [417, 421], "summari": [417, 420, 421, 891, 895, 896, 898], "premium": [417, 421], "yield": [417, 421, 891], "portfolio": 417, "baa": [417, 421], "aaa": [417, 421], "bond": [417, 421], "unitroot": [417, 420, 421], "1919": 417, "fred": [417, 421, 896, 898], "448": [417, 898], "045": [417, 898], "97": [417, 421, 898], "41": [417, 420, 421, 895], "analys": 419, "four": [419, 420], "look": 420, "spot": 420, "crude": 420, "cush": 420, "ok": 420, "texa": [420, 898], "intermedi": [420, 898], "brent": 420, "underli": [420, 898], "energi": 420, "administr": 420, "log_pric": 420, "xl": [420, 897], "set_xlim": [420, 895, 897, 898, 899], "verifi": [420, 438], "wti": 420, "780": 420, "391": 420, "constantcrit": 420, "87": [420, 898], "655": [420, 896], "454": [420, 896], "might": [420, 421, 898, 899], "relationship": [420, 424, 763, 776], "eg_test": 420, "468": 420, "007": [420, 421], "\u03c1": 420, "\u03b3": 420, "939": [420, 895], "78": 420, "37": [420, 895], "cointegrationaltern": 420, "cointegrationdistribut": 420, "expos": [420, 898, 899, 901], "he": 420, "cointegrating_vector": 420, "arbitrag": 420, "000621": 420, "conclus": [420, 421], "firmli": 420, "assumpt": [420, 898, 899], "837": 420, "81": [420, 421], "931769": 420, "296939": 420, "000185": 420, "crisi": [420, 899], "2008": [420, 899], "962": 420, "825": 420, "48": [420, 896], "quit": [420, 895], "bit": [420, 895], "happen": [420, 899], "surg": 420, "get_ax": 420, "set_titl": [420, 897, 899], "approach": [420, 895, 899], "stabil": 420, "diverg": 420, "singular": 420, "p_u": 420, "p_z": 420, "multivari": 420, "agre": [420, 421], "po_zt_test": 420, "357": 420, "06": [420, 421, 424, 895, 897, 898, 899], "93": [420, 896, 897, 898], "po_za_test": 420, "531": 420, "34": [420, 896, 897, 898], "denomin": 420, "balanc": 420, "po_pu_test": 420, "102": [420, 496, 513, 529, 678, 694, 783, 799, 812, 840], "868": 420, "648": [420, 895], "01": [420, 424, 438, 496, 502, 513, 518, 529, 534, 678, 683, 694, 699, 783, 799, 812, 813, 819, 840, 841, 849, 895, 897, 898, 899], "32": [420, 895], "po_pz_test": 420, "114": [420, 421], "601": 420, "67": [420, 891], "eg": 420, "simplefilt": 421, "corpor": 421, "default_data": 421, "confirm": 421, "acf": 421, "tsa": 421, "stattool": 421, "kind": [421, 898], "By": [421, 424], "addition": [421, 424], "as_text": 421, "356": 421, "013": 421, "44": [421, 896], "86": [421, 896, 898], "suffici": 421, "pick": 421, "582": 421, "006": 421, "alter": 421, "786": 421, "017": [421, 898], "reg_r": 421, "dep": [421, 891, 895, 896, 898, 899], "095": [421, 896], "090": 421, "83": [421, 897], "tue": [421, 895, 898, 899], "prob": [421, 836], "30e": 421, "02": [421, 891, 895, 896, 898, 899], "likelihood": [421, 450, 452, 471, 488, 554, 571, 588, 606, 623, 640, 646, 670, 719, 725, 749, 755, 768, 846, 863, 872, 889, 891, 895, 896, 898, 899], "630": [421, 898], "1194": 421, "1244": 421, "1186": 421, "1204": 421, "coef": [421, 891, 895, 896, 898, 899], "err": [421, 891, 895, 896, 898, 899], "gt": [421, 895, 896, 897, 898, 899], "025": 421, "975": 421, "l1": 421, "0248": 421, "038": 421, "012": [421, 895], "2229": 421, "029": 421, "669": 421, "166": [421, 899], "l2": 421, "0525": 421, "030": [421, 898], "769": 421, "077": [421, 898], "111": 421, "l3": 421, "1363": 421, "642": [421, 898], "194": 421, "079": [421, 898], "l4": 421, "0510": 421, "727": 421, "084": 421, "109": 421, "l5": 421, "0440": 421, "516": 421, "130": [421, 898], "0383": 421, "004": 421, "065": 421, "586e": 421, "29e": 421, "230": 421, "219": 421, "11e": 421, "43e": 421, "omnibu": 421, "665": 421, "553": 421, "durbin": 421, "jarqu": 421, "bera": 421, "jb": 421, "146083": 421, "295": 421, "425": 421, "00": [421, 897], "kurtosi": [421, 763, 776], "113": [421, 896], "cond": 421, "70e": 421, "03": [421, 891, 895, 896, 897, 898, 899], "7e": 421, "strong": 421, "multicollinear": 421, "322": 421, "020": 421, "96": [421, 895, 896], "464": 421, "009": [421, 896], "43": [421, 895], "58": 421, "898": 421, "002": 421, "024": [421, 895], "262": [421, 896], "088": 421, "74": [421, 896], "393": 421, "900": 421, "040": 421, "pure": [421, 452], "versu": 421, "ken": 421, "neg": [421, 424, 813, 841, 891, 896, 897, 898], "momentum": 421, "de": 421, "bias": 421, "206": 421, "git": 421, "py": 421, "1679": 421, "invalidlengthwarn": 421, "inherit": [423, 452, 892, 901], "public": [423, 446, 892, 901], "forward": 424, "caveat": 424, "particular": [424, 496, 513, 529, 678, 694, 783, 799, 812, 813, 840, 841, 891, 899], "sens": [424, 895, 899], "evolv": [424, 440, 471, 488, 496, 513, 529, 554, 571, 588, 606, 623, 640, 670, 678, 694, 719, 749, 783, 799, 812, 813, 840, 841, 889, 898], "tractabl": [424, 894], "ahead": [424, 496, 513, 529, 678, 694, 783, 799, 812, 840, 895, 897], "harch": [424, 440, 891, 898], "horizon": [424, 461, 478, 496, 513, 529, 544, 561, 578, 595, 613, 630, 660, 678, 694, 709, 739, 783, 799, 812, 813, 840, 841, 879, 895, 897, 899], "prior": [424, 496, 513, 529, 678, 694, 783, 799, 872], "explain": 424, "eqnarrai": [424, 891], "r_t": [424, 891, 898], "sigma_t": [424, 426, 427, 432, 891, 898], "2_t": [424, 427, 891, 898], "sim": [424, 897, 898, 899], "get_data_yahoo": 424, "am": [424, 496, 513, 529, 678, 694, 783, 799, 813, 819, 841, 849, 891, 897, 898], "dist": [424, 891, 897, 898, 899], "year": [424, 819, 849], "split_dat": 424, "sigma_": [424, 425, 431, 432, 435, 437, 440, 897, 898], "e_": [424, 431, 895], "draw": [424, 653, 732, 762, 775, 870, 899], "path": [424, 461, 478, 544, 561, 578, 595, 613, 630, 660, 709, 739, 827, 879, 895, 897], "few": 424, "advantag": [424, 899], "valuabl": 424, "egarch": [424, 496, 513, 529, 678, 694, 783, 799, 812, 813, 840, 841, 891, 892], "equat": [424, 427, 433], "virtual": [424, 899], "drawn": [424, 899], "attach": [424, 645, 652, 724, 731, 754, 761, 767, 774, 862, 869, 897], "dure": [424, 899], "mode": [424, 891, 896, 897, 898], "datetime64": [424, 494, 495, 496, 511, 512, 513, 527, 528, 529, 676, 677, 678, 692, 693, 694, 781, 782, 783, 797, 798, 799, 812, 813, 840, 841], "timestamp": [424, 494, 495, 496, 511, 512, 513, 527, 528, 529, 676, 677, 678, 692, 693, 694, 781, 782, 783, 797, 798, 799, 812, 813, 840, 841], "align": [424, 448, 496, 513, 529, 678, 694, 783, 799, 811, 812, 827, 835, 840, 897], "target": [424, 448, 496, 513, 529, 678, 694, 783, 799, 812, 840, 897], "Not": [424, 496, 513, 529, 678, 694, 783, 799, 812, 813, 840, 841, 892], "archmodelforecast": [424, 496, 513, 529, 678, 694, 783, 799, 812, 840, 897], "residual_vari": [424, 448, 449, 496, 513, 529, 678, 694, 783, 799, 812, 840, 897, 899], "whenev": [424, 897], "2013": [424, 440], "24": [424, 891, 895], "489534": 424, "495875": 424, "501122": 424, "509194": 424, "518614": 424, "26": [424, 897, 898], "474691": 424, "480416": 424, "483664": 424, "491932": 424, "502419": 424, "447054": 424, "454875": 424, "462167": 424, "467515": 424, "475632": 424, "421528": 424, "430024": 424, "439856": 424, "448282": 424, "457368": 424, "407544": 424, "415616": 424, "422848": 424, "430246": 424, "439451": 424, "decemb": 424, "dai": [424, 819, 849, 899], "timedelta": 424, "04": [424, 891, 895, 896, 897, 898, 899], "739303": 424, "741100": 424, "744529": 424, "746940": 424, "752688": 424, "695349": 424, "702488": 424, "706812": 424, "713342": 424, "721629": 424, "649343": 424, "654048": 424, "664055": 424, "672742": 424, "681263": 424, "fill": [424, 496, 513, 529, 678, 694, 783, 799, 812, 840, 896], "common_asym": 425, "asymmetr": [425, 431, 435, 440, 891, 898], "symmetr": [425, 426, 431, 433, 435, 891, 898], "innov": [425, 426, 431, 433, 435, 891], "transform": [425, 427, 428, 429, 431, 433, 435, 438, 439, 445, 455, 474, 494, 511, 527, 540, 557, 574, 591, 609, 626, 651, 656, 676, 692, 705, 730, 735, 760, 773, 781, 797, 868, 872, 875, 891, 892, 898], "lie": 425, "asymmetri": 425, "alpha_": [425, 426, 431, 435, 437], "i_": [425, 898], "beta_": [425, 431, 435], "gamma_i": 425, "scalar": [427, 428, 437, 438, 465, 482, 502, 518, 534, 548, 565, 582, 599, 617, 634, 664, 683, 699, 713, 743, 788, 883, 891], "interpret": 427, "ret": [427, 899], "gim": 427, "phi_": [427, 428, 438, 440], "update_freq": [428, 494, 511, 527, 676, 692, 781, 797, 819, 849, 897, 898], "cm": [429, 534], "earch": 431, "lam": 432, "riskmetr": [432, 442, 898], "daili": [432, 442, 819, 849], "rm": [432, 442], "treat": [432, 895], "truncat": 433, "ab": [433, 435, 895], "fiavarch": 433, "strictli": [433, 435], "point": [433, 461, 465, 478, 482, 496, 502, 513, 518, 529, 544, 548, 561, 565, 578, 582, 595, 599, 613, 617, 630, 634, 646, 660, 664, 678, 683, 694, 699, 709, 713, 725, 739, 743, 755, 768, 783, 799, 812, 816, 840, 844, 879, 883, 895, 899], "represent": 433, "fiarch": 433, "fiavgarch": 433, "h_t": 433, "h_": 433, "lambda_i": 433, "delta_1": 433, "delta_j": 433, "delta_": 433, "lambda_": 433, "unit_scal": [434, 896], "enforc": 434, "proport": 434, "gjr": [435, 896, 899], "avarch": 435, "avgarch": 435, "tarch": [435, 496, 513, 529, 678, 694, 783, 799, 812, 813, 840, 841, 891], "heterogen": [437, 438, 898], "realist": 437, "use_rot": 438, "rotat": 438, "harx_1": 438, "harx_2": 438, "third": 438, "manual": [438, 891], "harx_3": 438, "harx_4": 438, "inspect": 438, "r2": [438, 450], "085": 438, "asym": 440, "longer": [440, 897], "66": 440, "accord": 440, "propto": 440, "phi_i": 440, "foroni": 440, "claudia": 440, "massimiliano": 440, "marcellino": 440, "survei": 440, "frequenc": [440, 494, 511, 527, 676, 692, 781, 797, 819, 849, 898], "norg": 440, "bank": 440, "manuscript": 440, "2018": [440, 897, 898], "tau0": 442, "1560": 442, "tau1": 442, "kmax": 442, "4142135623730951": 442, "cycl": 442, "adjac": 442, "densiti": [443, 651, 730, 760, 773, 868, 897], "705": 443, "730": 443, "www": 443, "ssc": 443, "wisc": 443, "edu": 443, "bhansen": 443, "ier_94": 443, "pdf": 443, "zm": [445, 788], "abstract": [446, 452, 453, 799, 802, 803, 804, 859, 860, 861, 863, 864, 866, 867, 868, 870, 871, 872, 873, 876, 877, 878, 882, 883, 885], "notimplementederror": [446, 461, 472, 478, 489, 544, 555, 561, 572, 578, 589, 595, 607, 613, 624, 630, 641, 660, 671, 709, 720, 739, 750, 879, 890], "subclass": [446, 451, 452, 493, 504, 510, 520, 526, 536, 675, 685, 691, 701, 780, 790, 796, 806], "privat": [446, 892], "overrid": [446, 819, 849], "dep_var": [447, 450], "loglikelihood": [447, 450, 808, 810, 832, 834, 846, 898], "is_panda": [447, 450], "archmodel": [447, 450, 815, 843, 891, 892], "start_index": 448, "float64arrai": [448, 449, 461], "simulated_path": 448, "simulated_vari": 448, "simulated_residual_vari": 448, "simulated_residu": 448, "optim_output": 450, "optimizeresult": [450, 846], "fit_start": 450, "fit_stop": 450, "slice": 450, "notat": 450, "templat": 451, "__init__": [452, 899], "initialize_upd": 452, "precomput": 452, "pyx": 452, "metaclass": 452, "poor": 452, "loop": [452, 895], "though": 453, "var_bound": [458, 461, 469, 471, 476, 478, 486, 488, 542, 544, 552, 554, 559, 561, 569, 571, 576, 578, 586, 588, 593, 595, 604, 606, 611, 613, 621, 623, 628, 630, 638, 640, 658, 660, 668, 670, 707, 709, 717, 719, 737, 739, 747, 749, 873, 877, 879, 887, 889], "store": [458, 469, 476, 486, 542, 552, 559, 569, 576, 586, 593, 604, 611, 621, 628, 638, 658, 668, 707, 717, 737, 747, 877, 887], "inequ": [459, 477, 543, 560, 577, 594, 612, 629, 659, 738, 878], "forecastingmethod": 461, "rngtype": 461, "varianceforecast": [461, 478, 544, 561, 578, 595, 613, 630, 660, 709, 739, 879], "len": [461, 478, 544, 561, 578, 595, 613, 630, 660, 709, 739, 879, 899], "valueerror": [461, 478, 544, 561, 578, 595, 613, 630, 660, 709, 739, 879, 897], "burn": [465, 482, 502, 518, 534, 548, 565, 582, 599, 617, 634, 664, 683, 699, 713, 743, 788, 804, 883, 895], "initial_valu": [465, 482, 502, 518, 534, 548, 565, 582, 599, 617, 634, 664, 683, 699, 713, 743, 788, 804, 883], "subarrai": [466, 468, 483, 485, 549, 551, 566, 568, 583, 585, 600, 602, 618, 620, 635, 637, 665, 667, 714, 716, 744, 746, 884, 886], "sv": [467, 484, 503, 519, 535, 550, 567, 584, 601, 619, 636, 654, 666, 684, 700, 715, 733, 745, 763, 776, 789, 805, 871, 885], "loos": [471, 488, 554, 571, 588, 606, 623, 640, 670, 719, 749, 889], "deriv": [491, 508, 524, 673, 689, 778, 794], "starting_valu": [494, 511, 527, 676, 692, 781, 797], "show_warn": [494, 511, 527, 676, 692, 781, 797], "tol": [494, 511, 527, 676, 692, 781, 797], "archmodelresult": [494, 511, 527, 676, 692, 781, 797, 893, 899], "everi": [494, 511, 527, 676, 692, 781, 797], "displai": [494, 511, 527, 676, 692, 781, 797], "noth": [494, 511, 527, 676, 692, 781, 797], "literatur": [494, 511, 527, 676, 692, 781, 797], "bollerslev": [494, 511, 527, 676, 692, 781, 797], "wooldridg": [494, 511, 527, 676, 692, 781, 797], "shown": [494, 511, 527, 676, 692, 781, 797], "toler": [494, 511, 527, 676, 692, 781, 797], "termin": [494, 511, 527, 676, 692, 781, 797, 891, 896, 897, 898], "entri": [494, 511, 527, 676, 692, 781, 797], "ftol": [494, 511, 527, 676, 692, 781, 797], "ep": [494, 511, 527, 676, 692, 781, 797], "maxit": [494, 511, 527, 676, 692, 781, 797], "2_0": [494, 511, 527, 676, 692, 781, 797], "convergencewarn": [494, 511, 527, 676, 692, 781, 797], "difficulti": [494, 511, 527, 676, 692, 781, 797], "optimum": [494, 511, 527, 676, 692, 781, 797], "slsqp": [494, 511, 527, 676, 692, 781, 797], "archmodelfixedresult": [495, 512, 528, 677, 693, 782, 798, 893], "constraint": [495, 512, 528, 677, 693, 782, 798], "convert": [496, 513, 529, 678, 694, 783, 799, 812, 813, 840, 841], "1945": [496, 513, 529, 678, 694, 783, 799, 812, 813, 840, 841], "th": [496, 513, 529, 678, 694, 783, 799, 811, 812, 835, 840], "custom": [496, 513, 529, 678, 694, 783, 799, 812, 840], "As": [496, 513, 529, 678, 694, 783, 799, 899], "septemb": [496, 513, 529, 678, 694, 783, 799], "nforecast": [496, 513, 529, 678, 694, 783, 799, 812, 840], "had": [496, 513, 529, 678, 694, 783, 799, 812, 840], "panel": [496, 513, 529, 678, 694, 783, 799, 812, 840], "0th": [496, 513, 529, 678, 694, 783, 799, 812, 840], "complex": [496, 513, 529, 678, 694, 783, 799, 812, 840], "accommod": [496, 513, 529, 678, 694, 783, 799, 812, 840], "scenario": [496, 513, 529, 678, 694, 783, 799, 812, 840, 894], "pleas": [496, 513, 529, 678, 694, 783, 799, 812, 840], "sim_data": [496, 502, 513, 518, 529, 534, 678, 683, 694, 699, 783, 788, 799, 813, 819, 841, 849, 898], "hedgehog_plot": [496, 513, 529, 678, 694, 783, 799], "initial_value_vol": [502, 518, 534, 683, 699, 788, 804], "ex": [502, 518, 683, 699], "jth": [502, 518, 683, 699], "simulated_data": [502, 518, 534, 683, 699, 788], "harx_param": [502, 518, 683, 699], "garch_param": [502, 518, 534, 683, 699], "92": [502, 518, 534, 683, 699, 819, 849, 895], "concaten": [502, 518, 534, 683, 699, 895], "x_param": [502, 518, 683, 699], "cm_param": 534, "infin": 603, "cumul": [643, 651, 722, 730, 752, 760, 765, 773, 860, 868], "parameterless": [643, 647, 650, 651, 722, 726, 729, 730, 752, 756, 759, 760, 765, 769, 772, 773, 860, 864, 867, 868, 898], "constrain": [644, 723, 753, 766, 861], "individu": [646, 725, 755, 768, 863, 891], "ged": [646, 891], "ll": [646, 725, 755, 768, 898], "nu": [646, 768, 898], "ln2": [646, 725], "winkler": [650, 729, 759, 772, 867], "1972": [650, 729, 759, 772, 867], "manag": [650, 729, 759, 772, 867], "int_": [650, 729, 759, 772, 867], "dx": [650, 729, 759, 772, 867], "pit": [651, 730, 760, 773, 868], "invers": [651, 730, 760, 773, 868], "icdf": [651, 730, 760, 773, 868], "valuer": [654, 763, 776], "impli": 654, "heavier": 654, "empti": [725, 895], "bx": 755, "sgn": 755, "quad": 755, "trivial": 788, "criteria": [808, 810, 832, 834], "num_param": [808, 810, 832, 834], "waldteststatist": [809, 833, 900], "plot_typ": [813, 841], "skip": [813, 841], "spine": [813, 841], "earliest": [813, 841], "weekli": [819, 849], "252": [819, 849, 896, 899], "2520": [819, 849], "asset": [819, 849, 898], "archmodelforecastsimul": [825, 897], "ith": 836, "optim_result": 846, "onc": 872, "inplac": 873, "popular": 891, "arx": [891, 895, 898], "assembl": [891, 898], "constantmean": [891, 898, 899], "llf": [891, 896, 897, 898], "5159": 891, "58323938": 891, "5156": 891, "09760149": 891, "5152": 891, "29989336": 891, "5146": 891, "47531817": 891, "5143": 891, "86337547": 891, "02096168": 891, "5142": 891, "24105141": 891, "07138907": 891, "5141": 891, "416653": 891, "39212288": 891, "39023885": 891, "85": [891, 895], "39023359": 891, "successfulli": [891, 896, 897, 898], "exit": [891, 896, 897, 898], "gradient": [891, 896, 897, 898], "10290": 891, "10315": 891, "3520": 891, "fri": 891, "dec": 891, "2016": [891, 897], "3516": 891, "conf": [891, 895, 896, 898, 899], "0531": 891, "487e": 891, "569": 891, "581e": 891, "392e": 891, "220e": 891, "0156": 891, "932e": [891, 896], "155": [891, 898], "606e": [891, 895], "892e": 891, "523e": 891, "0879": 891, "140e": 891, "710": 891, "260e": 891, "554e": 891, "110": [891, 898], "9014": 891, "183e": 891, "163": 891, "878": 891, "925": 891, "carefulli": 891, "gaussian": 891, "skewt": [891, 897, 898], "permit": 891, "configur": 891, "silent": 891, "aim": 892, "lack": 893, "univarait": 894, "util": 894, "phi_0": 895, "phi_1": 895, "beta_0": 895, "beta_1": 895, "suppli": 895, "vale": 895, "track": 895, "dim0": 895, "x_mod": 895, "x0": 895, "x1": 895, "resid_mod": 895, "phi1": 895, "phi0": 895, "legend": [895, 897, 899], "frameon": [895, 897, 899], "999": 895, "x_0": 895, "x_1": 895, "x0_oo": 895, "x1_oo": 895, "els": [895, 897], "65805541": 895, "3290277": 895, "16451385": 895, "08225693": 895, "04112846": 895, "02056423": 895, "01028212": 895, "00514106": 895, "00257053": 895, "00128526": 895, "992": 895, "1391": 895, "2796": 895, "08": [895, 897, 898, 899], "2830": 895, "2023": [895, 898, 899], "9447": 895, "151": 895, "308e": 895, "84": [895, 898], "242": [895, 898], "6947": 895, "807e": 895, "182": 895, "482": 895, "687": [895, 898], "702": [895, 898], "9813": 895, "175e": 895, "91": 895, "078": 895, "9620": 895, "564e": 895, "519": [895, 896], "912": [895, 898], "0946": 895, "622": [895, 896], "733e": [895, 896], "389e": 895, "0974": 895, "496e": 895, "903": 895, "516e": 895, "849e": 895, "146": 895, "8083": 895, "059e": 895, "977": 895, "839e": 895, "709": 895, "907": 895, "consider": 895, "exactli": 895, "devic": 895, "exog_fcast": 895, "lt": [895, 897], "free": 895, "array_forecast": 895, "09": [895, 896, 898, 899], "multi_forecast": 895, "990": 895, "638678": 895, "057943": 895, "305712": 895, "876070": 895, "090794": 895, "153279": 895, "187233": 895, "263806": 895, "420245": 895, "672511": 895, "991": [895, 898], "307394": 895, "095492": 895, "176459": 895, "008276": 895, "816890": 895, "707369": 895, "722133": 895, "871672": 895, "150830": 895, "547444": 895, "286380": 895, "896235": 895, "586099": 895, "454254": 895, "517502": 895, "759810": 895, "154606": 895, "674450": 895, "294780": 895, "994971": 895, "993": 895, "177049": 895, "846561": 895, "903832": 895, "944579": 895, "198290": 895, "728217": 895, "527010": 895, "561360": 895, "791967": 895, "181810": 895, "994": [895, 896], "476395": 895, "945167": 895, "325031": 895, "830889": 895, "536242": 895, "450638": 895, "557059": 895, "829543": 895, "241130": 895, "767149": 895, "887372": 895, "827018": 895, "504285": 895, "701208": 895, "250338": 895, "029847": 895, "954356": 895, "965773": 895, "025626": 895, "109140": 895, "996": 895, "091224": 895, "738291": 895, "893515": 895, "402421": 895, "147641": 895, "044580": 895, "034509": 895, "077894": 895, "148903": 895, "231197": 895, "997": 895, "752402": 895, "165799": 895, "584948": 895, "038435": 895, "542245": 895, "103274": 895, "722401": 895, "396828": 895, "121754": 895, "891488": 895, "998": 895, "530046": 895, "262848": 895, "244627": 895, "449407": 895, "837882": 895, "371370": 895, "016716": 895, "747264": 895, "542302": 895, "386034": 895, "481761": 895, "462828": 895, "056773": 895, "917344": 895, "885242": 895, "890079": 895, "902827": 895, "913039": 895, "918147": 895, "918574": 895, "revers": 895, "array_multi_forecast": 895, "955": 895, "2280": [895, 898], "4573": 895, "4603": 895, "42": 895, "4609": 895, "226": 895, "561": 895, "064e": [895, 896, 898], "179": 895, "904": 895, "018": 895, "7695": 895, "995e": [895, 898], "552": 895, "752": 895, "787": 895, "7394": 895, "329e": [895, 898], "643": 895, "021e": 895, "233": [895, 896], "635": 895, "844": 895, "1073": 895, "460e": 895, "438": 895, "150": 895, "895e": 895, "253": 895, "6689e": 895, "513e": 895, "573": 895, "567": [895, 898], "099e": [895, 896], "832e": 895, "9717": 895, "616e": [895, 896], "149": [895, 898], "549e": 895, "302": 895, "920": 895, "023": 895, "forecast_1d": 895, "forecast_2d": 895, "wish": 895, "sim_fixedx": 895, "04095499": 895, "27798546": 895, "30149937": 895, "53498654": 895, "60825322": 895, "53831759": 895, "55948399": 895, "49811376": 895, "74794163": 895, "54496175": 895, "much": [895, 898, 899], "variat": 895, "sim_ar1": 895, "20210301": 895, "x0_sim": 895, "x1_sim": 895, "fcast": [895, 897], "fo": 895, "join": 895, "95980851": 895, "9043695": 895, "49587772": 895, "50716786": 895, "27211937": 895, "71428305": 895, "71321666": 895, "67711577": 895, "80764753": 895, "17554847": 895, "easi": 896, "space": 896, "vix": 896, "illustr": [896, 899], "vix_data": 896, "filter": [896, 899], "876": 896, "2267": 896, "4545": 896, "4571": 896, "thu": 896, "jan": 896, "2024": 896, "1233": 896, "6335": 896, "359": [896, 898], "831e": 896, "264": 896, "9287": 896, "589e": 896, "056e": 896, "058": 896, "0318": 896, "449e": 896, "492": 896, "158": 896, "463e": 896, "0612": 896, "180e": 896, "926": 896, "409e": 896, "076e": [896, 898], "124": [896, 898], "2910": 896, "396": 896, "782": 896, "361e": 896, "514": 896, "068": 896, "vol_mod": 896, "vol_r": 896, "1936": 896, "3881": 896, "3902": 896, "2355": 896, "134e": 896, "578": 896, "647e": 896, "415": 896, "7217": 896, "374": 896, "931": 896, "353e": 896, "098e": 896, "859": 896, "255e": 896, "217": 896, "227": [896, 898], "5789": 896, "184": 896, "692e": 896, "218": 896, "940": 896, "miss": 896, "impos": 896, "empty_lik": 896, "conditional_volatil": [896, 897, 898, 899], "fv": 896, "255806977215": 896, "930291": 896, "4462204215": 896, "3486": 896, "7135083370713": 896, "2885": 896, "692473212838": 896, "65536430": 896, "69379793": 896, "1935": 896, "9527543235638": 896, "9470521680555": 896, "65": 896, "9470515573437": 896, "89": 896, "3907": 896, "5584": 896, "153": [896, 898], "661": 896, "507e": 896, "857": 896, "9376": 896, "625e": 896, "866": 896, "607e": 896, "867": 896, "0249": 896, "782e": 896, "657": 896, "511": 896, "899e": 896, "926e": 896, "0493": 896, "102e": 896, "344": 896, "909e": 896, "044e": 896, "9986": 896, "081e": [896, 899], "358": 896, "420e": 896, "157": 896, "repetit": 896, "strategi": [896, 899], "3879": 896, "3899": 896, "5602": 896, "152": 896, "681": 896, "323e": 896, "9381": 896, "388e": 896, "148": 896, "0262": 896, "774e": 896, "693": 896, "488": 896, "781e": 896, "0499": 896, "810e": 896, "109e": [896, 899], "875": 896, "1932": 896, "3922": 896, "7796": 896, "190": [896, 898], "513": [896, 898], "554": 896, "9180": 896, "291": 896, "156": 896, "597e": 896, "348": 896, "0393": 896, "296": 896, "133": 896, "894": 896, "620": 896, "541": [896, 898], "0632": 896, "136e": 896, "188": 896, "2357": 896, "944": 896, "345": [896, 898], "254": 896, "725": 896, "7091": 896, "069": 896, "664": [896, 898], "507": 896, "386": [896, 898], "804": 896, "367": 896, "172": 896, "726": [896, 898], "308": 896, "5579": 896, "855": 896, "117": 896, "sn": [897, 899], "sy": 897, "Be": 897, "6970": [897, 898], "2779565773335": [897, 898], "63": [897, 898], "6936": [897, 898], "718477482076": [897, 898], "718476988951": [897, 898], "056353": 897, "59647": 897, "568502": 897, "540887": 897, "513621": 897, "486701": 897, "entir": [897, 899], "head": [897, 898, 899], "4578": 897, "713295409127": 897, "4555": 897, "338451419905": 897, "285110045323": 897, "381757": 897, "390905": 897, "399988": 897, "409008": 897, "417964": 897, "451724": 897, "460381": 897, "468976": 897, "477512": 897, "485987": 897, "428416": 897, "437236": 897, "445994": 897, "454691": 897, "463326": 897, "420554": 897, "429429": 897, "438242": 897, "446993": 897, "455683": 897, "402483": 897, "411486": 897, "420425": 897, "429301": 897, "438115": 897, "start_loc": 897, "end_loc": 897, "stdout": 897, "flush": 897, "temp": 897, "615314": 897, "621743": 897, "628133": 897, "751747": 897, "757343": 897, "762905": 897, "710453": 897, "716315": 897, "722142": 897, "666244": 897, "672346": 897, "678411": 897, "634424": 897, "640706": 897, "646949": 897, "600109": 897, "606595": 897, "613040": 897, "565514": 897, "572212": 897, "578869": 897, "599561": 897, "606051": 897, "612501": 897, "608309": 897, "614748": 897, "621148": 897, "575065": 897, "581756": 897, "588406": 897, "629890": 897, "636245": 897, "642561": 897, "695074": 897, "701042": 897, "706974": 897, "737154": 897, "742908": 897, "748627": 897, "954167": 897, "958725": 897, "963255": 897, "253453": 897, "256401": 897, "259332": 897, "178691": 897, "182043": 897, "185374": 897, "112205": 897, "115886": 897, "119545": 897, "051295": 897, "055327": 897, "059335": 897, "085678": 897, "089512": 897, "093324": 897, "085786": 897, "089594": 897, "093378": 897, "751723": 897, "757321": 897, "762885": 897, "709956": 897, "715791": 897, "721591": 897, "666057": 897, "672146": 897, "678197": 897, "634503": 897, "640776": 897, "647011": 897, "600417": 897, "606893": 897, "613329": 897, "565684": 897, "572369": 897, "579014": 897, "599963": 897, "606438": 897, "612874": 897, "608558": 897, "614982": 897, "621366": 897, "575020": 897, "581639": 897, "588217": 897, "629696": 897, "635989": 897, "642244": 897, "694735": 897, "700656": 897, "706541": 897, "736509": 897, "742193": 897, "747842": 897, "952751": 897, "957246": 897, "961713": 897, "251145": 897, "254050": 897, "256936": 897, "176864": 897, "180162": 897, "183441": 897, "110848": 897, "114497": 897, "118124": 897, "050102": 897, "054077": 897, "058028": 897, "084669": 897, "088454": 897, "092216": 897, "085003": 897, "088783": 897, "092541": 897, "6846": 897, "48928243015": 897, "6822": [897, 898], "883188650879": 897, "882823441358": 897, "010188": 897, "meaning": 897, "subplot": [897, 898, 899], "var_2016": 897, "16804": 897, "17165": 897, "color": [897, 899], "9cb2d6": 897, "set_label": 897, "002868": 897, "gca": 897, "set_xtick": [897, 899], "boxplot": 897, "nearli": 897, "var_": 897, "mu_": 897, "q_": 897, "2017": [897, 899], "ppf": 897, "alreadi": 897, "shift": [897, 899], "cond_mean": 897, "cond_var": 897, "64484999": 897, "64965918": 897, "along": [897, 898], "highlight": 897, "value_at_risk": 897, "rets_2018": 897, "idx": [897, 899], "bb0000": 897, "bb00bb": 897, "exceed": 897, "marker": 897, "uniqu": 897, "sel": 897, "scatter": 897, "leg": 897, "ncol": 897, "std_ret": 897, "668273": 897, "723352": 897, "st": 898, "en": 898, "xlim": [898, 899], "invoc": 898, "72": 898, "13881": 898, "13907": 898, "5030": [898, 899], "5029": [898, 899], "0564": 898, "149e": 898, "906": 898, "302e": 898, "384e": 898, "887e": 898, "0175": 898, "683e": 898, "738": 898, "854e": 898, "328e": 898, "669e": 898, "1022": 898, "301e": 898, "852": 898, "105e": 898, "665e": 898, "128": 898, "8852": 898, "380e": 898, "125": 898, "quickli": [898, 899], "visual": 898, "88": 898, "13655": 898, "13688": 898, "145e": 898, "529": 898, "126": 898, "936e": 898, "0196": 898, "051e": 898, "830": 898, "362e": 898, "163e": 898, "751e": 898, "4027e": 898, "026e": 898, "341e": 898, "011e": 898, "1831": 898, "266e": 898, "543e": 898, "139": 898, "8922": 898, "458e": 898, "864": 898, "921": 898, "dramat": 898, "6829": 898, "197763035331": 898, "6799": 898, "178613053096": 898, "178523172141": 898, "103": 898, "13608": 898, "13641": 898, "0143": 898, "091e": 898, "311": 898, "086e": 898, "570e": 898, "0258": 898, "100e": 898, "299": 898, "987e": 898, "779e": 898, "386e": 898, "9528e": 898, "156e": 898, "502e": 898, "794e": 898, "1707": 898, "601e": 898, "501e": 898, "202": 898, "9098": 898, "671e": 898, "067": 898, "891": 898, "929": 898, "heavi": 898, "6728": 898, "995165345449": 898, "6722": 898, "15117736426": 898, "1511833987915": 898, "13456": 898, "13495": 898, "0323": 898, "292e": 898, "777e": 898, "676e": 898, "0201": 898, "492e": 898, "745": 898, "179e": 898, "322e": 898, "691e": 898, "223e": 898, "612e": 898, "1721": 898, "512e": 898, "925e": 898, "9139": 898, "578e": 898, "414": 898, "895": 898, "933": 898, "9549": 898, "880": 898, "036": 898, "620e": 898, "229": 898, "680": 898, "fixed_r": 898, "0235": 898, "9382": 898, "6908": 898, "13829": 898, "13869": 898, "0100": 898, "0600": 898, "10596": 898, "17896": 898, "liquid": 898, "ewmavari": 898, "riskmetrics2006": 898, "adequ": 898, "complic": 898, "feder": 898, "site": 898, "core_cpi": 898, "ann_infl": 898, "cpilfesl": 898, "3299": 898, "6609": 898, "6632": 898, "719": 898, "715": 898, "0216": 898, "981": 898, "762e": 898, "218e": 898, "1921": 898, "475e": 898, "306": 898, "315e": 898, "258": 898, "1798": 898, "411": 898, "030e": 898, "989e": 898, "0232": 898, "370e": 898, "692": 898, "058e": 898, "002e": 898, "666e": 898, "4180": 898, "487": 898, "799": 898, "381e": 898, "410e": 898, "938e": 898, "suppress": 898, "3174": 898, "6369": 898, "6414": 898, "8500": 898, "883": 898, "841": 898, "0859": 898, "534e": 898, "596e": 898, "207": 898, "0788": 898, "855e": 898, "085e": 898, "154": 898, "282e": 898, "0189": 898, "157e": 898, "154e": 898, "820e": 898, "8696": 898, "592e": 898, "478": 898, "083e": 898, "1345": 898, "003e": 898, "827e": 898, "600e": 898, "213": 898, "284e": 898, "628": 898, "861e": [898, 899], "105": 898, "351": 898, "1838": 898, "802e": 898, "894e": 898, "046e": 898, "317": 898, "2538": 898, "826e": 898, "185e": 898, "407": 898, "1954": 898, "756": 898, "856e": 898, "643e": 898, "334": 898, "magnitud": [898, 899], "3168": 898, "6358": 898, "51": 898, "6408": 898, "1220": 898, "861": 898, "678": 898, "343e": 898, "526": 898, "770": 898, "0843": 898, "525e": 898, "762": 898, "350e": 898, "208": 898, "015": 898, "0730": 898, "873e": 898, "885": 898, "948e": 898, "919e": 898, "0236": 898, "316e": 898, "791": 898, "935e": 898, "3503": 898, "625": 898, "235": 898, "283e": 898, "927": 898, "278e": 898, "1715": 898, "087e": 898, "222e": 898, "271": 898, "2202": 898, "394e": 898, "444": 898, "741e": 898, "486e": 898, "1547": 898, "327e": 898, "446": 898, "447e": 898, "072e": 898, "279": 898, "2117": 898, "287e": 898, "905": 898, "677e": 898, "884e": 898, "354": 898, "1959": 898, "853e": 898, "495": 898, "261e": 898, "199e": 898, "350": 898, "0451": 898, "366": 898, "205e": 898, "fairli": 898, "heavili": 898, "collect": 898, "ordereddict": 898, "crude_ret": 898, "dcoilwtico": 898, "res_norm": 898, "res_t": 898, "res_skewt": 898, "18165": 898, "858870": 898, "17919": 898, "643916": 898, "17916": 898, "669052": 898, "085627": 898, "064980": 898, "064889": 898, "909098": 898, "927950": 898, "928215": 898, "186541": 898, "036986": 898, "046682": 898, "056438": 898, "040928": 898, "178598": 898, "055806": 898, "048516": 898, "047683": 898, "unstandard": 898, "peak": 898, "somewhat": 898, "unit_var_resid": 898, "kde": 898, "029365": 898, "044374": 898, "044344": 898, "036104": 898, "931280": 898, "211281": 898, "041616": 898, "sim_mod": 898, "242949": 898, "325649": 898, "213584": 898, "404109": 898, "301873": 898, "374743": 898, "106860": 898, "232734": 898, "136226": 898, "678962": 898, "165269": 898, "708327": 898, "388209": 898, "155309": 898, "417574": 898, "cell": 898, "892380934": 898, "189201902": 898, "129129894": 898, "9890437": 898, "repro_mod": 898, "616836": 898, "787697": 898, "587470": 898, "106780": 898, "637129": 898, "077415": 898, "530200": 898, "561457": 898, "500834": 898, "284833": 898, "507739": 898, "255468": 898, "378519": 898, "381016": 898, "349153": 898, "pattern": 899, "want": 899, "could": 899, "twice": 899, "anoth": 899, "histor": 899, "histori": 899, "ground": 899, "precis": 899, "uniformli": 899, "preliminari": 899, "nasdaq": 899, "2208": 899, "050049": 899, "2251": 899, "270020": 899, "2320": 899, "860107": 899, "2326": 899, "090088": 899, "2344": 899, "409912": 899, "almost": 899, "extern": 899, "convers": 899, "intercept": 899, "8196": 899, "16403": 899, "16436": 899, "0376": 899, "476e": 899, "549": 899, "693e": 899, "656e": 899, "0214": 899, "001e": 899, "281": 899, "161e": 899, "121e": 899, "0152": 899, "442e": 899, "802": 899, "148e": 899, "330e": 899, "176e": 899, "1265": 899, "024e": 899, "684e": 899, "9100": 899, "107e": 899, "232": 899, "888": 899, "932": 899, "id": 899, "0x202821906a0": 899, "toward": 899, "sim_forecast": 899, "623295": 899, "637251": 899, "647817": 899, "663746": 899, "673404": 899, "687952": 899, "599455": 899, "617539": 899, "635838": 899, "649695": 899, "659733": 899, "667267": 899, "567297": 899, "583415": 899, "597571": 899, "613065": 899, "621790": 899, "636180": 899, "542506": 899, "555688": 899, "570280": 899, "585426": 899, "595551": 899, "608487": 899, "515452": 899, "528771": 899, "542658": 899, "559684": 899, "580434": 899, "594855": 899, "697221": 899, "707707": 899, "717701": 899, "729465": 899, "686503": 899, "699708": 899, "707203": 899, "718560": 899, "650287": 899, "663344": 899, "679835": 899, "692300": 899, "619195": 899, "638180": 899, "653185": 899, "661366": 899, "605136": 899, "621835": 899, "634091": 899, "653222": 899, "remaind": 899, "surpris": 899, "grow": 899, "faster": 899, "637504": 899, "651549": 899, "665431": 899, "679154": 899, "692717": 899, "613940": 899, "628257": 899, "642408": 899, "656397": 899, "670223": 899, "582153": 899, "596837": 899, "611352": 899, "625699": 899, "639880": 899, "557649": 899, "572616": 899, "587410": 899, "602034": 899, "616488": 899, "530906": 899, "546183": 899, "561282": 899, "576208": 899, "590961": 899, "706124": 899, "719376": 899, "732475": 899, "745423": 899, "683890": 899, "697399": 899, "710752": 899, "723950": 899, "653897": 899, "667753": 899, "681448": 899, "694985": 899, "630776": 899, "644899": 899, "658858": 899, "672656": 899, "605543": 899, "619957": 899, "634205": 899, "648288": 899, "scenario_rng": 899, "scenario_forecast": 899, "685911": 899, "745202": 899, "821112": 899, "886289": 899, "966737": 899, "668181": 899, "743119": 899, "811486": 899, "877539": 899, "936587": 899, "629195": 899, "691225": 899, "758891": 899, "816663": 899, "893986": 899, "596301": 899, "656603": 899, "721505": 899, "778286": 899, "849680": 899, "567086": 899, "622224": 899, "689831": 899, "775048": 899, "845656": 899, "970796": 899, "977504": 899, "982202": 899, "992547": 899, "955295": 899, "965540": 899, "966432": 899, "974248": 899, "905952": 899, "915208": 899, "930777": 899, "938636": 899, "856175": 899, "873865": 899, "886221": 899, "890002": 899, "851104": 899, "864591": 899, "874696": 899, "894397": 899, "fh": 899, "act": 899, "scenariobootstraprng": 899, "self": 899, "_shock": 899, "asarrai": 899, "_r": 899, "randint": 899, "std_shock": 899, "scenario_bootstrap": 899, "bs_forecast": 899, "676081": 899, "734322": 899, "779325": 899, "828189": 899, "898202": 899, "645237": 899, "697133": 899, "750169": 899, "816280": 899, "888417": 899, "610493": 899, "665995": 899, "722954": 899, "777860": 899, "840369": 899, "597387": 899, "644534": 899, "691387": 899, "741206": 899, "783319": 899, "561312": 899, "611026": 899, "647824": 899, "700559": 899, "757398": 899, "958215": 899, "043704": 899, "124684": 899, "203893": 899, "945120": 899, "013400": 899, "084042": 899, "158148": 899, "889032": 899, "961424": 899, "022412": 899, "097192": 899, "840667": 899, "895559": 899, "957266": 899, "019497": 899, "820788": 899, "887791": 899, "938708": 899, "028614": 899, "rapidli": 899, "slowli": 899, "bootstrp": 899, "color_palett": 899, "dark": 899, "sim_path": 899, "bs_path": 899, "set_ylim": 899, "2019": 899, "get_loc": 899, "new_idx": 899, "holder": 900, "wald": 900, "statement": 900, "critical_valu": 900, "usag": 901}, "objects": {"arch": [[2, 0, 0, 1, "bootstrap", ""], [418, 0, 0, 1, "unitroot", ""]], "arch.bootstrap": [[5, 1, 1, 0, "CircularBlockBootstrap", "Bootstrap using blocks of the same length with end-to-start wrap around"], [6, 1, 1, 0, "IIDBootstrap", "Bootstrap using uniform resampling"], [7, 1, 1, 0, "IndependentSamplesBootstrap", "Bootstrap where each input is independently resampled"], [238, 1, 1, 0, "MCS", "Model Confidence Set (MCS) of Hansen, Lunde and Nason."], [8, 1, 1, 0, "MovingBlockBootstrap", "Bootstrap using blocks of the same length without wrap around"], [239, 1, 1, 0, "SPA", "Test of Superior Predictive Ability (SPA) of White and Hansen."], [9, 1, 1, 0, "StationaryBootstrap", "Politis and Romano (1994) bootstrap with expon distributed block sizes"], [240, 1, 1, 0, "StepM", "StepM multiple comparison procedure of Romano and Wolf."], [258, 0, 0, 1, "multiple_comparison", ""], [10, 6, 1, 0, "optimal_block_length", "Estimate optimal window length for time-series bootstraps"]], "arch.bootstrap.CircularBlockBootstrap.__init__": [[5, 2, 2, 0, "args", "Positional arguments to bootstrap"], [5, 2, 2, 0, "block_size", "Size of block to use"], [5, 2, 2, 0, "kwargs", "Keyword arguments to bootstrap"], [5, 2, 2, 0, "random_state", "RandomState to use to ensure reproducable results. Cannot be used with seed"], [5, 2, 2, 0, "seed", "Seed to use to ensure reproducable results. If an int, passes the value to value to np.random.default_rng. If None, a fresh Generator is constructed with system-provided entropy."]], "arch.bootstrap.CircularBlockBootstrap": [[11, 3, 1, 0, "apply", "Applies a function to bootstrap replicated data"], [12, 3, 1, 0, "bootstrap", "Iterator for use when bootstrapping"], [13, 3, 1, 0, "clone", "Clones the bootstrap using different data with a fresh prng."], [14, 3, 1, 0, "conf_int", "Function the computes parameter values.  See Notes for requirements"], [15, 3, 1, 0, "cov", "Compute parameter covariance using bootstrap"], [5, 4, 1, 0, "data", "Two-element tuple with the pos_data in the first position and kw_data in the second (pos_data, kw_data)"], [16, 5, 1, 0, "generator", "Set or get the instance PRNG"], [17, 3, 1, 0, "get_state", "Gets the state of the bootstrap's random number generator"], [18, 5, 1, 0, "index", "The current index of the bootstrap"], [5, 4, 1, 0, "kw_data", "Dictionary containing the keyword arguments"], [5, 4, 1, 0, "pos_data", "Tuple containing the positional arguments (in the order entered)"], [19, 5, 1, 0, "random_state", "Set or get the instance random state"], [20, 3, 1, 0, "reset", "Resets the bootstrap to either its initial state or the last seed."], [21, 3, 1, 0, "seed", "Reseeds the bootstrap's random number generator"], [22, 3, 1, 0, "set_state", "Sets the state of the bootstrap's random number generator"], [23, 5, 1, 0, "state", "Set or get the generator's state"], [24, 3, 1, 0, "update_indices", "Update indices for the next iteration of the bootstrap.  This must be overridden when creating new bootstraps."], [25, 3, 1, 0, "var", "Compute parameter variance using bootstrap"]], "arch.bootstrap.CircularBlockBootstrap.apply": [[11, 2, 2, 0, "extra_kwargs", "Extra keyword arguments to use when calling func.  Must not conflict with keyword arguments used to initialize bootstrap"], [11, 2, 2, 0, "func", "Function the computes parameter values.  See Notes for requirements"], [11, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.CircularBlockBootstrap.bootstrap": [[12, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.CircularBlockBootstrap.clone": [[13, 2, 2, 0, "args", "Positional arguments to bootstrap"], [13, 2, 2, 0, "kwargs", "Keyword arguments to bootstrap"], [13, 2, 2, 0, "seed", "The seed value to pass to the closed generator"]], "arch.bootstrap.CircularBlockBootstrap.conf_int": [[14, 2, 2, 0, "extra_kwargs", "Extra keyword arguments to use when calling func and std_err_func, when appropriate"], [14, 2, 2, 0, "func", "Function the computes parameter values.  See Notes for requirements"], [14, 2, 2, 0, "method", "One of 'basic', 'percentile', 'studentized', 'norm' (identical to 'var', 'cov'), 'bc' (identical to 'debiased', 'bias-corrected'), or 'bca'"], [14, 2, 2, 0, "reps", "Number of bootstrap replications"], [14, 2, 2, 0, "reuse", "Flag indicating whether to reuse previously computed bootstrap results.  This allows alternative methods to be compared without rerunning the bootstrap simulation.  Reuse is ignored if reps is not the same across multiple runs, func changes across calls, or method is 'studentized'."], [14, 2, 2, 0, "sampling", "Type of sampling to use: 'nonparametric', 'semi-parametric' (or 'semi') or 'parametric'.  The default is 'nonparametric'.  See notes about the changes to func required when using 'semi' or 'parametric'."], [14, 2, 2, 0, "size", "Coverage of confidence interval"], [14, 2, 2, 0, "std_err_func", "Function to use when standardizing estimated parameters when using the studentized bootstrap.  Providing an analytical function eliminates the need for a nested bootstrap"], [14, 2, 2, 0, "studentize_reps", "Number of bootstraps to use in the inner bootstrap when using the studentized bootstrap.  Ignored when std_err_func is provided"], [14, 2, 2, 0, "tail", "One of 'two', 'upper' or 'lower'."]], "arch.bootstrap.CircularBlockBootstrap.cov": [[15, 2, 2, 0, "extra_kwargs", "Dictionary of extra keyword arguments to pass to func"], [15, 2, 2, 0, "func", "Callable function that returns the statistic of interest as a 1-d array"], [15, 2, 2, 0, "recenter", "Whether to center the bootstrap variance estimator on the average of the bootstrap samples (True) or to center on the original sample estimate (False).  Default is True."], [15, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.CircularBlockBootstrap.reset": [[20, 2, 2, 0, "use_seed", "Flag indicating whether to use the last seed if provided.  If False or if no seed has been set, the bootstrap will be reset to the initial state.  Default is True"]], "arch.bootstrap.CircularBlockBootstrap.seed": [[21, 2, 2, 0, "value", "Value to use as the seed."]], "arch.bootstrap.CircularBlockBootstrap.set_state": [[22, 2, 2, 0, "state", "Dictionary or tuple containing the state."]], "arch.bootstrap.CircularBlockBootstrap.var": [[25, 2, 2, 0, "extra_kwargs", "Dictionary of extra keyword arguments to pass to func"], [25, 2, 2, 0, "func", "Callable function that returns the statistic of interest as a 1-d array"], [25, 2, 2, 0, "recenter", "Whether to center the bootstrap variance estimator on the average of the bootstrap samples (True) or to center on the original sample estimate (False).  Default is True."], [25, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.IIDBootstrap.__init__": [[6, 2, 2, 0, "args", "Positional arguments to bootstrap"], [6, 2, 2, 0, "kwargs", "Keyword arguments to bootstrap"], [6, 2, 2, 0, "random_state", "RandomState to use to ensure reproducable results. Cannot be used with seed"], [6, 2, 2, 0, "seed", "Seed to use to ensure reproducable results. If an int, passes the value to value to np.random.default_rng. If None, a fresh Generator is constructed with system-provided entropy."]], "arch.bootstrap.IIDBootstrap": [[26, 3, 1, 0, "apply", "Applies a function to bootstrap replicated data"], [27, 3, 1, 0, "bootstrap", "Iterator for use when bootstrapping"], [28, 3, 1, 0, "clone", "Clones the bootstrap using different data with a fresh prng."], [29, 3, 1, 0, "conf_int", "Function the computes parameter values.  See Notes for requirements"], [30, 3, 1, 0, "cov", "Compute parameter covariance using bootstrap"], [6, 4, 1, 0, "data", "Two-element tuple with the pos_data in the first position and kw_data in the second (pos_data, kw_data)"], [31, 5, 1, 0, "generator", "Set or get the instance PRNG"], [32, 3, 1, 0, "get_state", "Gets the state of the bootstrap's random number generator"], [33, 5, 1, 0, "index", "The current index of the bootstrap"], [6, 4, 1, 0, "kw_data", "Dictionary containing the keyword arguments"], [6, 4, 1, 0, "pos_data", "Tuple containing the positional arguments (in the order entered)"], [34, 5, 1, 0, "random_state", "Set or get the instance random state"], [35, 3, 1, 0, "reset", "Resets the bootstrap to either its initial state or the last seed."], [36, 3, 1, 0, "seed", "Reseeds the bootstrap's random number generator"], [37, 3, 1, 0, "set_state", "Sets the state of the bootstrap's random number generator"], [38, 5, 1, 0, "state", "Set or get the generator's state"], [39, 3, 1, 0, "update_indices", "Update indices for the next iteration of the bootstrap.  This must be overridden when creating new bootstraps."], [40, 3, 1, 0, "var", "Compute parameter variance using bootstrap"]], "arch.bootstrap.IIDBootstrap.apply": [[26, 2, 2, 0, "extra_kwargs", "Extra keyword arguments to use when calling func.  Must not conflict with keyword arguments used to initialize bootstrap"], [26, 2, 2, 0, "func", "Function the computes parameter values.  See Notes for requirements"], [26, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.IIDBootstrap.bootstrap": [[27, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.IIDBootstrap.clone": [[28, 2, 2, 0, "args", "Positional arguments to bootstrap"], [28, 2, 2, 0, "kwargs", "Keyword arguments to bootstrap"], [28, 2, 2, 0, "seed", "The seed value to pass to the closed generator"]], "arch.bootstrap.IIDBootstrap.conf_int": [[29, 2, 2, 0, "extra_kwargs", "Extra keyword arguments to use when calling func and std_err_func, when appropriate"], [29, 2, 2, 0, "func", "Function the computes parameter values.  See Notes for requirements"], [29, 2, 2, 0, "method", "One of 'basic', 'percentile', 'studentized', 'norm' (identical to 'var', 'cov'), 'bc' (identical to 'debiased', 'bias-corrected'), or 'bca'"], [29, 2, 2, 0, "reps", "Number of bootstrap replications"], [29, 2, 2, 0, "reuse", "Flag indicating whether to reuse previously computed bootstrap results.  This allows alternative methods to be compared without rerunning the bootstrap simulation.  Reuse is ignored if reps is not the same across multiple runs, func changes across calls, or method is 'studentized'."], [29, 2, 2, 0, "sampling", "Type of sampling to use: 'nonparametric', 'semi-parametric' (or 'semi') or 'parametric'.  The default is 'nonparametric'.  See notes about the changes to func required when using 'semi' or 'parametric'."], [29, 2, 2, 0, "size", "Coverage of confidence interval"], [29, 2, 2, 0, "std_err_func", "Function to use when standardizing estimated parameters when using the studentized bootstrap.  Providing an analytical function eliminates the need for a nested bootstrap"], [29, 2, 2, 0, "studentize_reps", "Number of bootstraps to use in the inner bootstrap when using the studentized bootstrap.  Ignored when std_err_func is provided"], [29, 2, 2, 0, "tail", "One of 'two', 'upper' or 'lower'."]], "arch.bootstrap.IIDBootstrap.cov": [[30, 2, 2, 0, "extra_kwargs", "Dictionary of extra keyword arguments to pass to func"], [30, 2, 2, 0, "func", "Callable function that returns the statistic of interest as a 1-d array"], [30, 2, 2, 0, "recenter", "Whether to center the bootstrap variance estimator on the average of the bootstrap samples (True) or to center on the original sample estimate (False).  Default is True."], [30, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.IIDBootstrap.reset": [[35, 2, 2, 0, "use_seed", "Flag indicating whether to use the last seed if provided.  If False or if no seed has been set, the bootstrap will be reset to the initial state.  Default is True"]], "arch.bootstrap.IIDBootstrap.seed": [[36, 2, 2, 0, "value", "Value to use as the seed."]], "arch.bootstrap.IIDBootstrap.set_state": [[37, 2, 2, 0, "state", "Dictionary or tuple containing the state."]], "arch.bootstrap.IIDBootstrap.var": [[40, 2, 2, 0, "extra_kwargs", "Dictionary of extra keyword arguments to pass to func"], [40, 2, 2, 0, "func", "Callable function that returns the statistic of interest as a 1-d array"], [40, 2, 2, 0, "recenter", "Whether to center the bootstrap variance estimator on the average of the bootstrap samples (True) or to center on the original sample estimate (False).  Default is True."], [40, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.IndependentSamplesBootstrap.__init__": [[7, 2, 2, 0, "args", "Positional arguments to bootstrap"], [7, 2, 2, 0, "kwargs", "Keyword arguments to bootstrap"]], "arch.bootstrap.IndependentSamplesBootstrap": [[41, 3, 1, 0, "apply", "Applies a function to bootstrap replicated data"], [42, 3, 1, 0, "bootstrap", "Iterator for use when bootstrapping"], [43, 3, 1, 0, "clone", "Clones the bootstrap using different data with a fresh prng."], [44, 3, 1, 0, "conf_int", "Function the computes parameter values.  See Notes for requirements"], [45, 3, 1, 0, "cov", "Compute parameter covariance using bootstrap"], [7, 4, 1, 0, "data", "Two-element tuple with the pos_data in the first position and kw_data in the second (pos_data, kw_data)"], [46, 5, 1, 0, "generator", "Set or get the instance PRNG"], [47, 3, 1, 0, "get_state", "Gets the state of the bootstrap's random number generator"], [48, 5, 1, 0, "index", "Returns the current index of the bootstrap"], [7, 4, 1, 0, "kw_data", "Dictionary containing the keyword arguments"], [7, 4, 1, 0, "pos_data", "Tuple containing the positional arguments (in the order entered)"], [49, 5, 1, 0, "random_state", "Set or get the instance random state"], [50, 3, 1, 0, "reset", "Resets the bootstrap to either its initial state or the last seed."], [51, 3, 1, 0, "seed", "Reseeds the bootstrap's random number generator"], [52, 3, 1, 0, "set_state", "Sets the state of the bootstrap's random number generator"], [53, 5, 1, 0, "state", "Set or get the generator's state"], [54, 3, 1, 0, "update_indices", "Update indices for the next iteration of the bootstrap.  This must be overridden when creating new bootstraps."], [55, 3, 1, 0, "var", "Compute parameter variance using bootstrap"]], "arch.bootstrap.IndependentSamplesBootstrap.apply": [[41, 2, 2, 0, "extra_kwargs", "Extra keyword arguments to use when calling func.  Must not conflict with keyword arguments used to initialize bootstrap"], [41, 2, 2, 0, "func", "Function the computes parameter values.  See Notes for requirements"], [41, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.IndependentSamplesBootstrap.bootstrap": [[42, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.IndependentSamplesBootstrap.clone": [[43, 2, 2, 0, "args", "Positional arguments to bootstrap"], [43, 2, 2, 0, "kwargs", "Keyword arguments to bootstrap"], [43, 2, 2, 0, "seed", "The seed value to pass to the closed generator"]], "arch.bootstrap.IndependentSamplesBootstrap.conf_int": [[44, 2, 2, 0, "extra_kwargs", "Extra keyword arguments to use when calling func and std_err_func, when appropriate"], [44, 2, 2, 0, "func", "Function the computes parameter values.  See Notes for requirements"], [44, 2, 2, 0, "method", "One of 'basic', 'percentile', 'studentized', 'norm' (identical to 'var', 'cov'), 'bc' (identical to 'debiased', 'bias-corrected'), or 'bca'"], [44, 2, 2, 0, "reps", "Number of bootstrap replications"], [44, 2, 2, 0, "reuse", "Flag indicating whether to reuse previously computed bootstrap results.  This allows alternative methods to be compared without rerunning the bootstrap simulation.  Reuse is ignored if reps is not the same across multiple runs, func changes across calls, or method is 'studentized'."], [44, 2, 2, 0, "sampling", "Type of sampling to use: 'nonparametric', 'semi-parametric' (or 'semi') or 'parametric'.  The default is 'nonparametric'.  See notes about the changes to func required when using 'semi' or 'parametric'."], [44, 2, 2, 0, "size", "Coverage of confidence interval"], [44, 2, 2, 0, "std_err_func", "Function to use when standardizing estimated parameters when using the studentized bootstrap.  Providing an analytical function eliminates the need for a nested bootstrap"], [44, 2, 2, 0, "studentize_reps", "Number of bootstraps to use in the inner bootstrap when using the studentized bootstrap.  Ignored when std_err_func is provided"], [44, 2, 2, 0, "tail", "One of 'two', 'upper' or 'lower'."]], "arch.bootstrap.IndependentSamplesBootstrap.cov": [[45, 2, 2, 0, "extra_kwargs", "Dictionary of extra keyword arguments to pass to func"], [45, 2, 2, 0, "func", "Callable function that returns the statistic of interest as a 1-d array"], [45, 2, 2, 0, "recenter", "Whether to center the bootstrap variance estimator on the average of the bootstrap samples (True) or to center on the original sample estimate (False).  Default is True."], [45, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.IndependentSamplesBootstrap.reset": [[50, 2, 2, 0, "use_seed", "Flag indicating whether to use the last seed if provided.  If False or if no seed has been set, the bootstrap will be reset to the initial state.  Default is True"]], "arch.bootstrap.IndependentSamplesBootstrap.seed": [[51, 2, 2, 0, "value", "Value to use as the seed."]], "arch.bootstrap.IndependentSamplesBootstrap.set_state": [[52, 2, 2, 0, "state", "Dictionary or tuple containing the state."]], "arch.bootstrap.IndependentSamplesBootstrap.var": [[55, 2, 2, 0, "extra_kwargs", "Dictionary of extra keyword arguments to pass to func"], [55, 2, 2, 0, "func", "Callable function that returns the statistic of interest as a 1-d array"], [55, 2, 2, 0, "recenter", "Whether to center the bootstrap variance estimator on the average of the bootstrap samples (True) or to center on the original sample estimate (False).  Default is True."], [55, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.MCS.__init__": [[238, 2, 2, 0, "block_size", "Length of window to use in the bootstrap.  If not provided, sqrt(T) is used.  In general, this should be provided and chosen to be appropriate for the data."], [238, 2, 2, 0, "bootstrap", "Bootstrap to use.  Options are 'stationary' or 'sb': Stationary bootstrap (Default) 'circular' or 'cbb': Circular block bootstrap 'moving block' or 'mbb': Moving block bootstrap"], [238, 2, 2, 0, "losses", "T by k array containing losses from a set of models"], [238, 2, 2, 0, "method", "MCS test and elimination implementation method, either 'max' or 'R'. Default is 'R'."], [238, 2, 2, 0, "reps", "Number of bootstrap replications to uses.  Default is 1000."], [238, 2, 2, 0, "seed", "Seed value to use when creating the bootstrap used in the comparison. If an integer or None, the NumPy default_rng is used with the seed value.  If a Generator or a RandomState, the argument is used."], [238, 2, 2, 0, "size", "Value in (0,1) to use as the test size when implementing the mcs. Default value is 0.05."]], "arch.bootstrap.MCS": [[241, 3, 1, 0, "compute", "Compute the set of models in the confidence set."], [242, 5, 1, 0, "excluded", "List of model indices that are excluded from the MCS"], [243, 5, 1, 0, "included", "List of model indices that are included in the MCS"], [244, 5, 1, 0, "pvalues", "Model p-values for inclusion in the MCS"], [245, 3, 1, 0, "reset", "Reset the bootstrap to it's initial state."], [246, 3, 1, 0, "seed", "Seed the bootstrap's random number generator"]], "arch.bootstrap.MCS.seed": [[246, 2, 2, 0, "value", "Integer to use as the seed"]], "arch.bootstrap.MovingBlockBootstrap.__init__": [[8, 2, 2, 0, "args", "Positional arguments to bootstrap"], [8, 2, 2, 0, "block_size", "Size of block to use"], [8, 2, 2, 0, "kwargs", "Keyword arguments to bootstrap"], [8, 2, 2, 0, "random_state", "RandomState to use to ensure reproducable results. Cannot be used with seed"], [8, 2, 2, 0, "seed", "Seed to use to ensure reproducable results. If an int, passes the value to value to np.random.default_rng. If None, a fresh Generator is constructed with system-provided entropy."]], "arch.bootstrap.MovingBlockBootstrap": [[56, 3, 1, 0, "apply", "Applies a function to bootstrap replicated data"], [57, 3, 1, 0, "bootstrap", "Iterator for use when bootstrapping"], [58, 3, 1, 0, "clone", "Clones the bootstrap using different data with a fresh prng."], [59, 3, 1, 0, "conf_int", "Function the computes parameter values.  See Notes for requirements"], [60, 3, 1, 0, "cov", "Compute parameter covariance using bootstrap"], [8, 4, 1, 0, "data", "Two-element tuple with the pos_data in the first position and kw_data in the second (pos_data, kw_data)"], [61, 5, 1, 0, "generator", "Set or get the instance PRNG"], [62, 3, 1, 0, "get_state", "Gets the state of the bootstrap's random number generator"], [63, 5, 1, 0, "index", "The current index of the bootstrap"], [8, 4, 1, 0, "kw_data", "Dictionary containing the keyword arguments"], [8, 4, 1, 0, "pos_data", "Tuple containing the positional arguments (in the order entered)"], [64, 5, 1, 0, "random_state", "Set or get the instance random state"], [65, 3, 1, 0, "reset", "Resets the bootstrap to either its initial state or the last seed."], [66, 3, 1, 0, "seed", "Reseeds the bootstrap's random number generator"], [67, 3, 1, 0, "set_state", "Sets the state of the bootstrap's random number generator"], [68, 5, 1, 0, "state", "Set or get the generator's state"], [69, 3, 1, 0, "update_indices", "Update indices for the next iteration of the bootstrap.  This must be overridden when creating new bootstraps."], [70, 3, 1, 0, "var", "Compute parameter variance using bootstrap"]], "arch.bootstrap.MovingBlockBootstrap.apply": [[56, 2, 2, 0, "extra_kwargs", "Extra keyword arguments to use when calling func.  Must not conflict with keyword arguments used to initialize bootstrap"], [56, 2, 2, 0, "func", "Function the computes parameter values.  See Notes for requirements"], [56, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.MovingBlockBootstrap.bootstrap": [[57, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.MovingBlockBootstrap.clone": [[58, 2, 2, 0, "args", "Positional arguments to bootstrap"], [58, 2, 2, 0, "kwargs", "Keyword arguments to bootstrap"], [58, 2, 2, 0, "seed", "The seed value to pass to the closed generator"]], "arch.bootstrap.MovingBlockBootstrap.conf_int": [[59, 2, 2, 0, "extra_kwargs", "Extra keyword arguments to use when calling func and std_err_func, when appropriate"], [59, 2, 2, 0, "func", "Function the computes parameter values.  See Notes for requirements"], [59, 2, 2, 0, "method", "One of 'basic', 'percentile', 'studentized', 'norm' (identical to 'var', 'cov'), 'bc' (identical to 'debiased', 'bias-corrected'), or 'bca'"], [59, 2, 2, 0, "reps", "Number of bootstrap replications"], [59, 2, 2, 0, "reuse", "Flag indicating whether to reuse previously computed bootstrap results.  This allows alternative methods to be compared without rerunning the bootstrap simulation.  Reuse is ignored if reps is not the same across multiple runs, func changes across calls, or method is 'studentized'."], [59, 2, 2, 0, "sampling", "Type of sampling to use: 'nonparametric', 'semi-parametric' (or 'semi') or 'parametric'.  The default is 'nonparametric'.  See notes about the changes to func required when using 'semi' or 'parametric'."], [59, 2, 2, 0, "size", "Coverage of confidence interval"], [59, 2, 2, 0, "std_err_func", "Function to use when standardizing estimated parameters when using the studentized bootstrap.  Providing an analytical function eliminates the need for a nested bootstrap"], [59, 2, 2, 0, "studentize_reps", "Number of bootstraps to use in the inner bootstrap when using the studentized bootstrap.  Ignored when std_err_func is provided"], [59, 2, 2, 0, "tail", "One of 'two', 'upper' or 'lower'."]], "arch.bootstrap.MovingBlockBootstrap.cov": [[60, 2, 2, 0, "extra_kwargs", "Dictionary of extra keyword arguments to pass to func"], [60, 2, 2, 0, "func", "Callable function that returns the statistic of interest as a 1-d array"], [60, 2, 2, 0, "recenter", "Whether to center the bootstrap variance estimator on the average of the bootstrap samples (True) or to center on the original sample estimate (False).  Default is True."], [60, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.MovingBlockBootstrap.reset": [[65, 2, 2, 0, "use_seed", "Flag indicating whether to use the last seed if provided.  If False or if no seed has been set, the bootstrap will be reset to the initial state.  Default is True"]], "arch.bootstrap.MovingBlockBootstrap.seed": [[66, 2, 2, 0, "value", "Value to use as the seed."]], "arch.bootstrap.MovingBlockBootstrap.set_state": [[67, 2, 2, 0, "state", "Dictionary or tuple containing the state."]], "arch.bootstrap.MovingBlockBootstrap.var": [[70, 2, 2, 0, "extra_kwargs", "Dictionary of extra keyword arguments to pass to func"], [70, 2, 2, 0, "func", "Callable function that returns the statistic of interest as a 1-d array"], [70, 2, 2, 0, "recenter", "Whether to center the bootstrap variance estimator on the average of the bootstrap samples (True) or to center on the original sample estimate (False).  Default is True."], [70, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.SPA.__init__": [[239, 2, 2, 0, "benchmark", "T element array of benchmark model losses"], [239, 2, 2, 0, "block_size", "Length of window to use in the bootstrap.  If not provided, sqrt(T) is used.  In general, this should be provided and chosen to be appropriate for the data."], [239, 2, 2, 0, "bootstrap", "Bootstrap to use.  Options are 'stationary' or 'sb': Stationary bootstrap (Default) 'circular' or 'cbb': Circular block bootstrap 'moving block' or 'mbb': Moving block bootstrap"], [239, 2, 2, 0, "models", "T  by k element array of alternative model losses"], [239, 2, 2, 0, "nested", "Flag indicating to use a nested bootstrap to compute variances for studentization.  Default is False.  Note that this can be slow since the procedure requires k extra bootstraps."], [239, 2, 2, 0, "reps", "Number of bootstrap replications to uses.  Default is 1000."], [239, 2, 2, 0, "seed", "Seed value to use when creating the bootstrap used in the comparison. If an integer or None, the NumPy default_rng is used with the seed value.  If a Generator or a RandomState, the argument is used."], [239, 2, 2, 0, "studentize", "Flag indicating to studentize loss differentials. Default is True"]], "arch.bootstrap.SPA": [[247, 3, 1, 0, "better_models", "Returns set of models rejected as being equal-or-worse than the benchmark"], [248, 3, 1, 0, "compute", "Compute the bootstrap pvalue."], [249, 3, 1, 0, "critical_values", "Returns data-dependent critical values"], [250, 5, 1, 0, "pvalues", "P-values corresponding to the lower, consistent and upper p-values."], [251, 3, 1, 0, "reset", "Reset the bootstrap to its initial state."], [252, 3, 1, 0, "seed", "Seed the bootstrap's random number generator"], [253, 3, 1, 0, "subset", "Sets a list of active models to run the SPA on.  Primarily for internal use."]], "arch.bootstrap.SPA.better_models": [[247, 2, 2, 0, "pvalue", "P-value in (0,1) to use when computing superior models"], [247, 2, 2, 0, "pvalue_type", "String in 'lower', 'consistent', or 'upper' indicating which critical value to use."]], "arch.bootstrap.SPA.critical_values": [[249, 2, 2, 0, "pvalue", "P-value in (0,1) to use when computing the critical values."]], "arch.bootstrap.SPA.seed": [[252, 2, 2, 0, "value", "Integer to use as the seed"]], "arch.bootstrap.SPA.subset": [[253, 2, 2, 0, "selector", "Boolean array indicating which columns to use when computing the p-values.  This is primarily for use by StepM."]], "arch.bootstrap.StationaryBootstrap.__init__": [[9, 2, 2, 0, "args", "Positional arguments to bootstrap"], [9, 2, 2, 0, "block_size", "Average size of block to use"], [9, 2, 2, 0, "kwargs", "Keyword arguments to bootstrap"], [9, 2, 2, 0, "random_state", "RandomState to use to ensure reproducable results. Cannot be used with seed"], [9, 2, 2, 0, "seed", "Seed to use to ensure reproducable results. If an int, passes the value to value to np.random.default_rng. If None, a fresh Generator is constructed with system-provided entropy."]], "arch.bootstrap.StationaryBootstrap": [[71, 3, 1, 0, "apply", "Applies a function to bootstrap replicated data"], [72, 3, 1, 0, "bootstrap", "Iterator for use when bootstrapping"], [73, 3, 1, 0, "clone", "Clones the bootstrap using different data with a fresh prng."], [74, 3, 1, 0, "conf_int", "Function the computes parameter values.  See Notes for requirements"], [75, 3, 1, 0, "cov", "Compute parameter covariance using bootstrap"], [9, 4, 1, 0, "data", "Two-element tuple with the pos_data in the first position and kw_data in the second (pos_data, kw_data)"], [76, 5, 1, 0, "generator", "Set or get the instance PRNG"], [77, 3, 1, 0, "get_state", "Gets the state of the bootstrap's random number generator"], [78, 5, 1, 0, "index", "The current index of the bootstrap"], [9, 4, 1, 0, "kw_data", "Dictionary containing the keyword arguments"], [9, 4, 1, 0, "pos_data", "Tuple containing the positional arguments (in the order entered)"], [79, 5, 1, 0, "random_state", "Set or get the instance random state"], [80, 3, 1, 0, "reset", "Resets the bootstrap to either its initial state or the last seed."], [81, 3, 1, 0, "seed", "Reseeds the bootstrap's random number generator"], [82, 3, 1, 0, "set_state", "Sets the state of the bootstrap's random number generator"], [83, 5, 1, 0, "state", "Set or get the generator's state"], [84, 3, 1, 0, "update_indices", "Update indices for the next iteration of the bootstrap.  This must be overridden when creating new bootstraps."], [85, 3, 1, 0, "var", "Compute parameter variance using bootstrap"]], "arch.bootstrap.StationaryBootstrap.apply": [[71, 2, 2, 0, "extra_kwargs", "Extra keyword arguments to use when calling func.  Must not conflict with keyword arguments used to initialize bootstrap"], [71, 2, 2, 0, "func", "Function the computes parameter values.  See Notes for requirements"], [71, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.StationaryBootstrap.bootstrap": [[72, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.StationaryBootstrap.clone": [[73, 2, 2, 0, "args", "Positional arguments to bootstrap"], [73, 2, 2, 0, "kwargs", "Keyword arguments to bootstrap"], [73, 2, 2, 0, "seed", "The seed value to pass to the closed generator"]], "arch.bootstrap.StationaryBootstrap.conf_int": [[74, 2, 2, 0, "extra_kwargs", "Extra keyword arguments to use when calling func and std_err_func, when appropriate"], [74, 2, 2, 0, "func", "Function the computes parameter values.  See Notes for requirements"], [74, 2, 2, 0, "method", "One of 'basic', 'percentile', 'studentized', 'norm' (identical to 'var', 'cov'), 'bc' (identical to 'debiased', 'bias-corrected'), or 'bca'"], [74, 2, 2, 0, "reps", "Number of bootstrap replications"], [74, 2, 2, 0, "reuse", "Flag indicating whether to reuse previously computed bootstrap results.  This allows alternative methods to be compared without rerunning the bootstrap simulation.  Reuse is ignored if reps is not the same across multiple runs, func changes across calls, or method is 'studentized'."], [74, 2, 2, 0, "sampling", "Type of sampling to use: 'nonparametric', 'semi-parametric' (or 'semi') or 'parametric'.  The default is 'nonparametric'.  See notes about the changes to func required when using 'semi' or 'parametric'."], [74, 2, 2, 0, "size", "Coverage of confidence interval"], [74, 2, 2, 0, "std_err_func", "Function to use when standardizing estimated parameters when using the studentized bootstrap.  Providing an analytical function eliminates the need for a nested bootstrap"], [74, 2, 2, 0, "studentize_reps", "Number of bootstraps to use in the inner bootstrap when using the studentized bootstrap.  Ignored when std_err_func is provided"], [74, 2, 2, 0, "tail", "One of 'two', 'upper' or 'lower'."]], "arch.bootstrap.StationaryBootstrap.cov": [[75, 2, 2, 0, "extra_kwargs", "Dictionary of extra keyword arguments to pass to func"], [75, 2, 2, 0, "func", "Callable function that returns the statistic of interest as a 1-d array"], [75, 2, 2, 0, "recenter", "Whether to center the bootstrap variance estimator on the average of the bootstrap samples (True) or to center on the original sample estimate (False).  Default is True."], [75, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.StationaryBootstrap.reset": [[80, 2, 2, 0, "use_seed", "Flag indicating whether to use the last seed if provided.  If False or if no seed has been set, the bootstrap will be reset to the initial state.  Default is True"]], "arch.bootstrap.StationaryBootstrap.seed": [[81, 2, 2, 0, "value", "Value to use as the seed."]], "arch.bootstrap.StationaryBootstrap.set_state": [[82, 2, 2, 0, "state", "Dictionary or tuple containing the state."]], "arch.bootstrap.StationaryBootstrap.var": [[85, 2, 2, 0, "extra_kwargs", "Dictionary of extra keyword arguments to pass to func"], [85, 2, 2, 0, "func", "Callable function that returns the statistic of interest as a 1-d array"], [85, 2, 2, 0, "recenter", "Whether to center the bootstrap variance estimator on the average of the bootstrap samples (True) or to center on the original sample estimate (False).  Default is True."], [85, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.StepM.__init__": [[240, 2, 2, 0, "benchmark", "T element array of benchmark model losses"], [240, 2, 2, 0, "block_size", "Length of window to use in the bootstrap.  If not provided, sqrt(T) is used.  In general, this should be provided and chosen to be appropriate for the data."], [240, 2, 2, 0, "bootstrap", "Bootstrap to use.  Options are 'stationary' or 'sb': Stationary bootstrap (Default) 'circular' or 'cbb': Circular block bootstrap 'moving block' or 'mbb': Moving block bootstrap"], [240, 2, 2, 0, "models", "T by k element array of alternative model losses"], [240, 2, 2, 0, "nested", "Flag indicating to use a nested bootstrap to compute variances for studentization.  Default is False.  Note that this can be slow since the procedure requires k extra bootstraps."], [240, 2, 2, 0, "reps", "Number of bootstrap replications to uses.  Default is 1000."], [240, 2, 2, 0, "seed", "Seed value to use when creating the bootstrap used in the comparison. If an integer or None, the NumPy default_rng is used with the seed value.  If a Generator or a RandomState, the argument is used."], [240, 2, 2, 0, "size", "Value in (0,1) to use as the test size when implementing the comparison. Default value is 0.05."], [240, 2, 2, 0, "studentize", "Flag indicating to studentize loss differentials. Default is True"]], "arch.bootstrap.StepM": [[254, 3, 1, 0, "compute", "Compute the set of superior models."], [255, 3, 1, 0, "reset", "Reset the bootstrap to it's initial state."], [256, 3, 1, 0, "seed", "Seed the bootstrap's random number generator"], [257, 5, 1, 0, "superior_models", "List of the indices or column names of the superior models"]], "arch.bootstrap.StepM.seed": [[256, 2, 2, 0, "value", "Integer to use as the seed"]], "arch.bootstrap.optimal_block_length": [[10, 2, 2, 0, "x", "A one-dimensional or two-dimensional array-like.  Operates columns by column if 2-dimensional."]], "arch.covariance": [[98, 0, 0, 1, "kernel", ""]], "arch.covariance.kernel": [[99, 1, 1, 0, "Andrews", "Alternative name of the QuadraticSpectral covariance estimator."], [100, 1, 1, 0, "Bartlett", "Bartlett's (Newey-West) kernel covariance estimation."], [101, 1, 1, 0, "CovarianceEstimate", "Covariance estimate using a long-run covariance estimator"], [102, 1, 1, 0, "Gallant", "Alternative name for Parzen covariance estimator."], [103, 1, 1, 0, "NeweyWest", "Alternative name for Bartlett covariance estimator."], [104, 1, 1, 0, "Parzen", "Parzen's kernel covariance estimation."], [105, 1, 1, 0, "ParzenCauchy", "Parzen's Cauchy kernel covariance estimation."], [106, 1, 1, 0, "ParzenGeometric", "Parzen's Geometric kernel covariance estimation."], [107, 1, 1, 0, "ParzenRiesz", "Parzen-Reisz kernel covariance estimation."], [108, 1, 1, 0, "QuadraticSpectral", "Quadratic-Spectral (Andrews') kernel covariance estimation."], [109, 1, 1, 0, "TukeyHamming", "Tukey-Hamming kernel covariance estimation."], [110, 1, 1, 0, "TukeyHanning", "Tukey-Hanning kernel covariance estimation."], [111, 1, 1, 0, "TukeyParzen", "Tukey-Parzen kernel covariance estimation."]], "arch.covariance.kernel.Andrews": [[112, 5, 1, 0, "bandwidth", "The bandwidth used by the covariance estimator."], [113, 5, 1, 0, "bandwidth_scale", "The power used in optimal bandwidth calculation."], [114, 5, 1, 0, "centered", "Flag indicating whether the data are centered (demeaned)."], [115, 5, 1, 0, "cov", "The estimated covariances."], [116, 5, 1, 0, "force_int", "Flag indicating whether the bandwidth is restricted to be an integer."], [117, 5, 1, 0, "kernel_const", "The constant used in optimal bandwidth calculation."], [118, 5, 1, 0, "kernel_weights", "Weights used in covariance calculation."], [119, 5, 1, 0, "name", "The covariance estimator's name."], [120, 5, 1, 0, "opt_bandwidth", "Estimate optimal bandwidth."], [121, 5, 1, 0, "rate", "The optimal rate used in bandwidth selection."]], "arch.covariance.kernel.Bartlett.__init__": [[100, 2, 2, 0, "bandwidth", "The kernel's bandwidth.  If None, optimal bandwidth is estimated."], [100, 2, 2, 0, "center", "A flag indicating whether x should be demeaned before estimating the covariance."], [100, 2, 2, 0, "df_adjust", "Degrees of freedom to remove when adjusting the covariance. Uses the number of observations in x minus df_adjust when dividing inner-products."], [100, 2, 2, 0, "force_int", "Force bandwidth to be an integer."], [100, 2, 2, 0, "weights", "An array of weights used to combine when estimating optimal bandwidth. If not provided, a vector of 1s is used. Must have nvar elements."], [100, 2, 2, 0, "x", "The data to use in covariance estimation."]], "arch.covariance.kernel.Bartlett": [[122, 5, 1, 0, "bandwidth", "The bandwidth used by the covariance estimator."], [123, 5, 1, 0, "bandwidth_scale", "The power used in optimal bandwidth calculation."], [124, 5, 1, 0, "centered", "Flag indicating whether the data are centered (demeaned)."], [125, 5, 1, 0, "cov", "The estimated covariances."], [126, 5, 1, 0, "force_int", "Flag indicating whether the bandwidth is restricted to be an integer."], [127, 5, 1, 0, "kernel_const", "The constant used in optimal bandwidth calculation."], [128, 5, 1, 0, "kernel_weights", "Weights used in covariance calculation."], [129, 5, 1, 0, "name", "The covariance estimator's name."], [130, 5, 1, 0, "opt_bandwidth", "Estimate optimal bandwidth."], [131, 5, 1, 0, "rate", "The optimal rate used in bandwidth selection."]], "arch.covariance.kernel.CovarianceEstimate.__init__": [[101, 2, 2, 0, "columns", "Column labels to use if covariance estimates are returned as DataFrames."], [101, 2, 2, 0, "long_run", "The long-run covariance estimate. If not provided, computed from short_run and one_sided_strict."], [101, 2, 2, 0, "one_sided_strict", "The one-sided-strict covariance estimate. If not provided, computed from short_run and one_sided_strict."], [101, 2, 2, 0, "short_run", "The short-run covariance estimate."]], "arch.covariance.kernel.CovarianceEstimate": [[132, 5, 1, 0, "long_run", "The long-run covariance estimate."], [133, 5, 1, 0, "one_sided", "The one-sided covariance estimate."], [134, 5, 1, 0, "one_sided_strict", "The one-sided strict covariance estimate."], [135, 5, 1, 0, "short_run", "The short-run covariance estimate."]], "arch.covariance.kernel.Gallant": [[136, 5, 1, 0, "bandwidth", "The bandwidth used by the covariance estimator."], [137, 5, 1, 0, "bandwidth_scale", "The power used in optimal bandwidth calculation."], [138, 5, 1, 0, "centered", "Flag indicating whether the data are centered (demeaned)."], [139, 5, 1, 0, "cov", "The estimated covariances."], [140, 5, 1, 0, "force_int", "Flag indicating whether the bandwidth is restricted to be an integer."], [141, 5, 1, 0, "kernel_const", "The constant used in optimal bandwidth calculation."], [142, 5, 1, 0, "kernel_weights", "Weights used in covariance calculation."], [143, 5, 1, 0, "name", "The covariance estimator's name."], [144, 5, 1, 0, "opt_bandwidth", "Estimate optimal bandwidth."], [145, 5, 1, 0, "rate", "The optimal rate used in bandwidth selection."]], "arch.covariance.kernel.NeweyWest": [[146, 5, 1, 0, "bandwidth", "The bandwidth used by the covariance estimator."], [147, 5, 1, 0, "bandwidth_scale", "The power used in optimal bandwidth calculation."], [148, 5, 1, 0, "centered", "Flag indicating whether the data are centered (demeaned)."], [149, 5, 1, 0, "cov", "The estimated covariances."], [150, 5, 1, 0, "force_int", "Flag indicating whether the bandwidth is restricted to be an integer."], [151, 5, 1, 0, "kernel_const", "The constant used in optimal bandwidth calculation."], [152, 5, 1, 0, "kernel_weights", "Weights used in covariance calculation."], [153, 5, 1, 0, "name", "The covariance estimator's name."], [154, 5, 1, 0, "opt_bandwidth", "Estimate optimal bandwidth."], [155, 5, 1, 0, "rate", "The optimal rate used in bandwidth selection."]], "arch.covariance.kernel.Parzen.__init__": [[104, 2, 2, 0, "bandwidth", "The kernel's bandwidth.  If None, optimal bandwidth is estimated."], [104, 2, 2, 0, "center", "A flag indicating whether x should be demeaned before estimating the covariance."], [104, 2, 2, 0, "df_adjust", "Degrees of freedom to remove when adjusting the covariance. Uses the number of observations in x minus df_adjust when dividing inner-products."], [104, 2, 2, 0, "force_int", "Force bandwidth to be an integer."], [104, 2, 2, 0, "weights", "An array of weights used to combine when estimating optimal bandwidth. If not provided, a vector of 1s is used. Must have nvar elements."], [104, 2, 2, 0, "x", "The data to use in covariance estimation."]], "arch.covariance.kernel.Parzen": [[156, 5, 1, 0, "bandwidth", "The bandwidth used by the covariance estimator."], [157, 5, 1, 0, "bandwidth_scale", "The power used in optimal bandwidth calculation."], [158, 5, 1, 0, "centered", "Flag indicating whether the data are centered (demeaned)."], [159, 5, 1, 0, "cov", "The estimated covariances."], [160, 5, 1, 0, "force_int", "Flag indicating whether the bandwidth is restricted to be an integer."], [161, 5, 1, 0, "kernel_const", "The constant used in optimal bandwidth calculation."], [162, 5, 1, 0, "kernel_weights", "Weights used in covariance calculation."], [163, 5, 1, 0, "name", "The covariance estimator's name."], [164, 5, 1, 0, "opt_bandwidth", "Estimate optimal bandwidth."], [165, 5, 1, 0, "rate", "The optimal rate used in bandwidth selection."]], "arch.covariance.kernel.ParzenCauchy.__init__": [[105, 2, 2, 0, "bandwidth", "The kernel's bandwidth.  If None, optimal bandwidth is estimated."], [105, 2, 2, 0, "center", "A flag indicating whether x should be demeaned before estimating the covariance."], [105, 2, 2, 0, "df_adjust", "Degrees of freedom to remove when adjusting the covariance. Uses the number of observations in x minus df_adjust when dividing inner-products."], [105, 2, 2, 0, "force_int", "Force bandwidth to be an integer."], [105, 2, 2, 0, "weights", "An array of weights used to combine when estimating optimal bandwidth. If not provided, a vector of 1s is used. Must have nvar elements."], [105, 2, 2, 0, "x", "The data to use in covariance estimation."]], "arch.covariance.kernel.ParzenCauchy": [[166, 5, 1, 0, "bandwidth", "The bandwidth used by the covariance estimator."], [167, 5, 1, 0, "bandwidth_scale", "The power used in optimal bandwidth calculation."], [168, 5, 1, 0, "centered", "Flag indicating whether the data are centered (demeaned)."], [169, 5, 1, 0, "cov", "The estimated covariances."], [170, 5, 1, 0, "force_int", "Flag indicating whether the bandwidth is restricted to be an integer."], [171, 5, 1, 0, "kernel_const", "The constant used in optimal bandwidth calculation."], [172, 5, 1, 0, "kernel_weights", "Weights used in covariance calculation."], [173, 5, 1, 0, "name", "The covariance estimator's name."], [174, 5, 1, 0, "opt_bandwidth", "Estimate optimal bandwidth."], [175, 5, 1, 0, "rate", "The optimal rate used in bandwidth selection."]], "arch.covariance.kernel.ParzenGeometric.__init__": [[106, 2, 2, 0, "bandwidth", "The kernel's bandwidth.  If None, optimal bandwidth is estimated."], [106, 2, 2, 0, "center", "A flag indicating whether x should be demeaned before estimating the covariance."], [106, 2, 2, 0, "df_adjust", "Degrees of freedom to remove when adjusting the covariance. Uses the number of observations in x minus df_adjust when dividing inner-products."], [106, 2, 2, 0, "force_int", "Force bandwidth to be an integer."], [106, 2, 2, 0, "weights", "An array of weights used to combine when estimating optimal bandwidth. If not provided, a vector of 1s is used. Must have nvar elements."], [106, 2, 2, 0, "x", "The data to use in covariance estimation."]], "arch.covariance.kernel.ParzenGeometric": [[176, 5, 1, 0, "bandwidth", "The bandwidth used by the covariance estimator."], [177, 5, 1, 0, "bandwidth_scale", "The power used in optimal bandwidth calculation."], [178, 5, 1, 0, "centered", "Flag indicating whether the data are centered (demeaned)."], [179, 5, 1, 0, "cov", "The estimated covariances."], [180, 5, 1, 0, "force_int", "Flag indicating whether the bandwidth is restricted to be an integer."], [181, 5, 1, 0, "kernel_const", "The constant used in optimal bandwidth calculation."], [182, 5, 1, 0, "kernel_weights", "Weights used in covariance calculation."], [183, 5, 1, 0, "name", "The covariance estimator's name."], [184, 5, 1, 0, "opt_bandwidth", "Estimate optimal bandwidth."], [185, 5, 1, 0, "rate", "The optimal rate used in bandwidth selection."]], "arch.covariance.kernel.ParzenRiesz.__init__": [[107, 2, 2, 0, "bandwidth", "The kernel's bandwidth.  If None, optimal bandwidth is estimated."], [107, 2, 2, 0, "center", "A flag indicating whether x should be demeaned before estimating the covariance."], [107, 2, 2, 0, "df_adjust", "Degrees of freedom to remove when adjusting the covariance. Uses the number of observations in x minus df_adjust when dividing inner-products."], [107, 2, 2, 0, "force_int", "Force bandwidth to be an integer."], [107, 2, 2, 0, "weights", "An array of weights used to combine when estimating optimal bandwidth. If not provided, a vector of 1s is used. Must have nvar elements."], [107, 2, 2, 0, "x", "The data to use in covariance estimation."]], "arch.covariance.kernel.ParzenRiesz": [[186, 5, 1, 0, "bandwidth", "The bandwidth used by the covariance estimator."], [187, 5, 1, 0, "bandwidth_scale", "The power used in optimal bandwidth calculation."], [188, 5, 1, 0, "centered", "Flag indicating whether the data are centered (demeaned)."], [189, 5, 1, 0, "cov", "The estimated covariances."], [190, 5, 1, 0, "force_int", "Flag indicating whether the bandwidth is restricted to be an integer."], [191, 5, 1, 0, "kernel_const", "The constant used in optimal bandwidth calculation."], [192, 5, 1, 0, "kernel_weights", "Weights used in covariance calculation."], [193, 5, 1, 0, "name", "The covariance estimator's name."], [194, 5, 1, 0, "opt_bandwidth", "Estimate optimal bandwidth."], [195, 5, 1, 0, "rate", "The optimal rate used in bandwidth selection."]], "arch.covariance.kernel.QuadraticSpectral.__init__": [[108, 2, 2, 0, "bandwidth", "The kernel's bandwidth.  If None, optimal bandwidth is estimated."], [108, 2, 2, 0, "center", "A flag indicating whether x should be demeaned before estimating the covariance."], [108, 2, 2, 0, "df_adjust", "Degrees of freedom to remove when adjusting the covariance. Uses the number of observations in x minus df_adjust when dividing inner-products."], [108, 2, 2, 0, "force_int", "Force bandwidth to be an integer."], [108, 2, 2, 0, "weights", "An array of weights used to combine when estimating optimal bandwidth. If not provided, a vector of 1s is used. Must have nvar elements."], [108, 2, 2, 0, "x", "The data to use in covariance estimation."]], "arch.covariance.kernel.QuadraticSpectral": [[196, 5, 1, 0, "bandwidth", "The bandwidth used by the covariance estimator."], [197, 5, 1, 0, "bandwidth_scale", "The power used in optimal bandwidth calculation."], [198, 5, 1, 0, "centered", "Flag indicating whether the data are centered (demeaned)."], [199, 5, 1, 0, "cov", "The estimated covariances."], [200, 5, 1, 0, "force_int", "Flag indicating whether the bandwidth is restricted to be an integer."], [201, 5, 1, 0, "kernel_const", "The constant used in optimal bandwidth calculation."], [202, 5, 1, 0, "kernel_weights", "Weights used in covariance calculation."], [203, 5, 1, 0, "name", "The covariance estimator's name."], [204, 5, 1, 0, "opt_bandwidth", "Estimate optimal bandwidth."], [205, 5, 1, 0, "rate", "The optimal rate used in bandwidth selection."]], "arch.covariance.kernel.TukeyHamming.__init__": [[109, 2, 2, 0, "bandwidth", "The kernel's bandwidth.  If None, optimal bandwidth is estimated."], [109, 2, 2, 0, "center", "A flag indicating whether x should be demeaned before estimating the covariance."], [109, 2, 2, 0, "df_adjust", "Degrees of freedom to remove when adjusting the covariance. Uses the number of observations in x minus df_adjust when dividing inner-products."], [109, 2, 2, 0, "force_int", "Force bandwidth to be an integer."], [109, 2, 2, 0, "weights", "An array of weights used to combine when estimating optimal bandwidth. If not provided, a vector of 1s is used. Must have nvar elements."], [109, 2, 2, 0, "x", "The data to use in covariance estimation."]], "arch.covariance.kernel.TukeyHamming": [[206, 5, 1, 0, "bandwidth", "The bandwidth used by the covariance estimator."], [207, 5, 1, 0, "bandwidth_scale", "The power used in optimal bandwidth calculation."], [208, 5, 1, 0, "centered", "Flag indicating whether the data are centered (demeaned)."], [209, 5, 1, 0, "cov", "The estimated covariances."], [210, 5, 1, 0, "force_int", "Flag indicating whether the bandwidth is restricted to be an integer."], [211, 5, 1, 0, "kernel_const", "The constant used in optimal bandwidth calculation."], [212, 5, 1, 0, "kernel_weights", "Weights used in covariance calculation."], [213, 5, 1, 0, "name", "The covariance estimator's name."], [214, 5, 1, 0, "opt_bandwidth", "Estimate optimal bandwidth."], [215, 5, 1, 0, "rate", "The optimal rate used in bandwidth selection."]], "arch.covariance.kernel.TukeyHanning.__init__": [[110, 2, 2, 0, "bandwidth", "The kernel's bandwidth.  If None, optimal bandwidth is estimated."], [110, 2, 2, 0, "center", "A flag indicating whether x should be demeaned before estimating the covariance."], [110, 2, 2, 0, "df_adjust", "Degrees of freedom to remove when adjusting the covariance. Uses the number of observations in x minus df_adjust when dividing inner-products."], [110, 2, 2, 0, "force_int", "Force bandwidth to be an integer."], [110, 2, 2, 0, "weights", "An array of weights used to combine when estimating optimal bandwidth. If not provided, a vector of 1s is used. Must have nvar elements."], [110, 2, 2, 0, "x", "The data to use in covariance estimation."]], "arch.covariance.kernel.TukeyHanning": [[216, 5, 1, 0, "bandwidth", "The bandwidth used by the covariance estimator."], [217, 5, 1, 0, "bandwidth_scale", "The power used in optimal bandwidth calculation."], [218, 5, 1, 0, "centered", "Flag indicating whether the data are centered (demeaned)."], [219, 5, 1, 0, "cov", "The estimated covariances."], [220, 5, 1, 0, "force_int", "Flag indicating whether the bandwidth is restricted to be an integer."], [221, 5, 1, 0, "kernel_const", "The constant used in optimal bandwidth calculation."], [222, 5, 1, 0, "kernel_weights", "Weights used in covariance calculation."], [223, 5, 1, 0, "name", "The covariance estimator's name."], [224, 5, 1, 0, "opt_bandwidth", "Estimate optimal bandwidth."], [225, 5, 1, 0, "rate", "The optimal rate used in bandwidth selection."]], "arch.covariance.kernel.TukeyParzen.__init__": [[111, 2, 2, 0, "bandwidth", "The kernel's bandwidth.  If None, optimal bandwidth is estimated."], [111, 2, 2, 0, "center", "A flag indicating whether x should be demeaned before estimating the covariance."], [111, 2, 2, 0, "df_adjust", "Degrees of freedom to remove when adjusting the covariance. Uses the number of observations in x minus df_adjust when dividing inner-products."], [111, 2, 2, 0, "force_int", "Force bandwidth to be an integer."], [111, 2, 2, 0, "weights", "An array of weights used to combine when estimating optimal bandwidth. If not provided, a vector of 1s is used. Must have nvar elements."], [111, 2, 2, 0, "x", "The data to use in covariance estimation."]], "arch.covariance.kernel.TukeyParzen": [[226, 5, 1, 0, "bandwidth", "The bandwidth used by the covariance estimator."], [227, 5, 1, 0, "bandwidth_scale", "The power used in optimal bandwidth calculation."], [228, 5, 1, 0, "centered", "Flag indicating whether the data are centered (demeaned)."], [229, 5, 1, 0, "cov", "The estimated covariances."], [230, 5, 1, 0, "force_int", "Flag indicating whether the bandwidth is restricted to be an integer."], [231, 5, 1, 0, "kernel_const", "The constant used in optimal bandwidth calculation."], [232, 5, 1, 0, "kernel_weights", "Weights used in covariance calculation."], [233, 5, 1, 0, "name", "The covariance estimator's name."], [234, 5, 1, 0, "opt_bandwidth", "Estimate optimal bandwidth."], [235, 5, 1, 0, "rate", "The optimal rate used in bandwidth selection."]], "arch.unitroot": [[262, 1, 1, 0, "ADF", "Augmented Dickey-Fuller unit root test"], [263, 1, 1, 0, "DFGLS", "Elliott, Rothenberg and Stock's (1) GLS detrended Dickey-Fuller"], [264, 1, 1, 0, "KPSS", "Kwiatkowski, Phillips, Schmidt and Shin (KPSS) stationarity test"], [265, 1, 1, 0, "PhillipsPerron", "Phillips-Perron unit root test"], [266, 1, 1, 0, "VarianceRatio", "Variance Ratio test of a random walk."], [267, 1, 1, 0, "ZivotAndrews", "Zivot-Andrews structural-break unit-root test"], [268, 6, 1, 0, "auto_bandwidth", "Automatic bandwidth selection of Andrews (1991) and Newey & West (1994)."], [261, 0, 0, 1, "cointegration", ""]], "arch.unitroot.ADF.__init__": [[262, 2, 2, 0, "lags", "The number of lags to use in the ADF regression.  If omitted or None, method is used to automatically select the lag length with no more than max_lags are included."], [262, 2, 2, 0, "low_memory", "Flag indicating whether to use a low memory implementation of the lag selection algorithm. The low memory algorithm is slower than the standard algorithm but will use 2-4% of the memory required for the standard algorithm. This options allows automatic lag selection to be used in very long time series. If None, use automatic selection of algorithm."], [262, 2, 2, 0, "max_lags", "The maximum number of lags to use when selecting lag length"], [262, 2, 2, 0, "method", "The method to use when selecting the lag length"], [262, 2, 2, 0, "trend", "The trend component to include in the test"], [262, 2, 2, 0, "y", "The data to test for a unit root"]], "arch.unitroot.ADF": [[278, 5, 1, 0, "alternative_hypothesis", "The alternative hypothesis"], [279, 5, 1, 0, "critical_values", "Dictionary containing critical values specific to the test, number of observations and included deterministic trend terms."], [280, 5, 1, 0, "lags", "Sets or gets the number of lags used in the model. When bootstrap use DF-type regressions, lags is the number of lags in the regression model.  When bootstrap use long-run variance estimators, lags is the number of lags used in the long-run variance estimator."], [281, 5, 1, 0, "max_lags", "Sets or gets the maximum lags used when automatically selecting lag length"], [282, 5, 1, 0, "nobs", "The number of observations used when computing the test statistic. Accounts for loss of data due to lags for regression-based bootstrap."], [283, 5, 1, 0, "null_hypothesis", "The null hypothesis"], [284, 5, 1, 0, "pvalue", "Returns the p-value for the test statistic"], [285, 5, 1, 0, "regression", "Returns the OLS regression results from the ADF model estimated"], [286, 5, 1, 0, "stat", "The test statistic for a unit root"], [287, 3, 1, 0, "summary", "Summary of test, containing statistic, p-value and critical values"], [288, 5, 1, 0, "trend", "Sets or gets the deterministic trend term used in the test. See valid_trends for a list of supported trends"], [289, 5, 1, 0, "valid_trends", "List of valid trend terms."], [290, 5, 1, 0, "y", "Returns the data used in the test statistic"]], "arch.unitroot.DFGLS.__init__": [[263, 2, 2, 0, "lags", "The number of lags to use in the ADF regression.  If omitted or None, method is used to automatically select the lag length with no more than max_lags are included."], [263, 2, 2, 0, "max_lags", "The maximum number of lags to use when selecting lag length. When using automatic lag length selection, the lag is selected using OLS detrending rather than GLS detrending (2)."], [263, 2, 2, 0, "method", "The method to use when selecting the lag length"], [263, 2, 2, 0, "trend", "The trend component to include in the test"], [263, 2, 2, 0, "y", "The data to test for a unit root"]], "arch.unitroot.DFGLS": [[291, 5, 1, 0, "alternative_hypothesis", "The alternative hypothesis"], [292, 5, 1, 0, "critical_values", "Dictionary containing critical values specific to the test, number of observations and included deterministic trend terms."], [293, 5, 1, 0, "lags", "Sets or gets the number of lags used in the model. When bootstrap use DF-type regressions, lags is the number of lags in the regression model.  When bootstrap use long-run variance estimators, lags is the number of lags used in the long-run variance estimator."], [294, 5, 1, 0, "max_lags", "Sets or gets the maximum lags used when automatically selecting lag length"], [295, 5, 1, 0, "nobs", "The number of observations used when computing the test statistic. Accounts for loss of data due to lags for regression-based bootstrap."], [296, 5, 1, 0, "null_hypothesis", "The null hypothesis"], [297, 5, 1, 0, "pvalue", "Returns the p-value for the test statistic"], [298, 5, 1, 0, "regression", "Returns the OLS regression results from the ADF model estimated"], [299, 5, 1, 0, "stat", "The test statistic for a unit root"], [300, 3, 1, 0, "summary", "Summary of test, containing statistic, p-value and critical values"], [301, 5, 1, 0, "trend", "Sets or gets the deterministic trend term used in the test. See valid_trends for a list of supported trends"], [302, 5, 1, 0, "valid_trends", "List of valid trend terms."], [303, 5, 1, 0, "y", "Returns the data used in the test statistic"]], "arch.unitroot.KPSS.__init__": [[264, 2, 2, 0, "lags", "The number of lags to use in the Newey-West estimator of the long-run covariance.  If omitted or None, the number of lags is calculated with the data-dependent method of Hobijn et al. (1998). See also Andrews (1991), Newey & West (1994), and Schwert (1989). Set lags=-1 to use the old method that only depends on the sample size, 12 * (nobs/100) ** (1/4)."], [264, 2, 2, 0, "trend", "\"c\" - Include a constant (Default) \"ct\" - Include a constant and linear time trend"], [264, 2, 2, 0, "y", "The data to test for stationarity"]], "arch.unitroot.KPSS": [[304, 5, 1, 0, "alternative_hypothesis", "The alternative hypothesis"], [305, 5, 1, 0, "critical_values", "Dictionary containing critical values specific to the test, number of observations and included deterministic trend terms."], [306, 5, 1, 0, "lags", "Sets or gets the number of lags used in the model. When bootstrap use DF-type regressions, lags is the number of lags in the regression model.  When bootstrap use long-run variance estimators, lags is the number of lags used in the long-run variance estimator."], [307, 5, 1, 0, "nobs", "The number of observations used when computing the test statistic. Accounts for loss of data due to lags for regression-based bootstrap."], [308, 5, 1, 0, "null_hypothesis", "The null hypothesis"], [309, 5, 1, 0, "pvalue", "Returns the p-value for the test statistic"], [310, 5, 1, 0, "stat", "The test statistic for a unit root"], [311, 3, 1, 0, "summary", "Summary of test, containing statistic, p-value and critical values"], [312, 5, 1, 0, "trend", "Sets or gets the deterministic trend term used in the test. See valid_trends for a list of supported trends"], [313, 5, 1, 0, "valid_trends", "List of valid trend terms."], [314, 5, 1, 0, "y", "Returns the data used in the test statistic"]], "arch.unitroot.PhillipsPerron.__init__": [[265, 2, 2, 0, "lags", "The number of lags to use in the Newey-West estimator of the long-run covariance.  If omitted or None, the lag length is set automatically to 12 * (nobs/100) ** (1/4)"], [265, 2, 2, 0, "test_type", "The test to use when computing the test statistic. \"tau\" is based on the t-stat and \"rho\" uses a test based on nobs times the re-centered regression coefficient"], [265, 2, 2, 0, "trend", "The trend component to include in the test"], [265, 2, 2, 0, "y", "The data to test for a unit root"]], "arch.unitroot.PhillipsPerron": [[315, 5, 1, 0, "alternative_hypothesis", "The alternative hypothesis"], [316, 5, 1, 0, "critical_values", "Dictionary containing critical values specific to the test, number of observations and included deterministic trend terms."], [317, 5, 1, 0, "lags", "Sets or gets the number of lags used in the model. When bootstrap use DF-type regressions, lags is the number of lags in the regression model.  When bootstrap use long-run variance estimators, lags is the number of lags used in the long-run variance estimator."], [318, 5, 1, 0, "nobs", "The number of observations used when computing the test statistic. Accounts for loss of data due to lags for regression-based bootstrap."], [319, 5, 1, 0, "null_hypothesis", "The null hypothesis"], [320, 5, 1, 0, "pvalue", "Returns the p-value for the test statistic"], [321, 5, 1, 0, "regression", "Returns OLS regression results for the specification used in the test"], [322, 5, 1, 0, "stat", "The test statistic for a unit root"], [323, 3, 1, 0, "summary", "Summary of test, containing statistic, p-value and critical values"], [324, 5, 1, 0, "test_type", "Gets or sets the test type returned by stat. Valid values are \"tau\" or \"rho\""], [325, 5, 1, 0, "trend", "Sets or gets the deterministic trend term used in the test. See valid_trends for a list of supported trends"], [326, 5, 1, 0, "valid_trends", "List of valid trend terms."], [327, 5, 1, 0, "y", "Returns the data used in the test statistic"]], "arch.unitroot.VarianceRatio.__init__": [[266, 2, 2, 0, "debiased", "Indicates whether to use a debiased version of the test. Default is True. Only applicable if overlap is True."], [266, 2, 2, 0, "lags", "The number of periods to used in the multi-period variance, which is the numerator of the test statistic.  Must be at least 2"], [266, 2, 2, 0, "overlap", "Indicates whether to use all overlapping blocks.  Default is True.  If False, the number of observations in y minus 1 must be an exact multiple of lags.  If this condition is not satisfied, some values at the end of y will be discarded."], [266, 2, 2, 0, "robust", "Indicates whether to use heteroskedasticity robust inference. Default is True."], [266, 2, 2, 0, "trend", "\"c\" allows for a non-zero drift in the random walk, while \"n\" requires that the increments to y are mean 0"], [266, 2, 2, 0, "y", "The data to test for a random walk"]], "arch.unitroot.VarianceRatio": [[328, 5, 1, 0, "alternative_hypothesis", "The alternative hypothesis"], [329, 5, 1, 0, "critical_values", "Dictionary containing critical values specific to the test, number of observations and included deterministic trend terms."], [330, 5, 1, 0, "debiased", "Sets of gets the indicator to use debiased variances in the ratio"], [331, 5, 1, 0, "lags", "Sets or gets the number of lags used in the model. When bootstrap use DF-type regressions, lags is the number of lags in the regression model.  When bootstrap use long-run variance estimators, lags is the number of lags used in the long-run variance estimator."], [332, 5, 1, 0, "nobs", "The number of observations used when computing the test statistic. Accounts for loss of data due to lags for regression-based bootstrap."], [333, 5, 1, 0, "null_hypothesis", "The null hypothesis"], [334, 5, 1, 0, "overlap", "Sets of gets the indicator to use overlapping returns in the long-period variance estimator"], [335, 5, 1, 0, "pvalue", "Returns the p-value for the test statistic"], [336, 5, 1, 0, "robust", "Sets of gets the indicator to use a heteroskedasticity robust variance estimator"], [337, 5, 1, 0, "stat", "The test statistic for a unit root"], [338, 3, 1, 0, "summary", "Summary of test, containing statistic, p-value and critical values"], [339, 5, 1, 0, "trend", "Sets or gets the deterministic trend term used in the test. See valid_trends for a list of supported trends"], [340, 5, 1, 0, "valid_trends", "List of valid trend terms."], [341, 5, 1, 0, "vr", "The ratio of the long block lags-period variance to the 1-period variance"], [342, 5, 1, 0, "y", "Returns the data used in the test statistic"]], "arch.unitroot.ZivotAndrews.__init__": [[267, 2, 2, 0, "lags", "The number of lags to use in the ADF regression.  If omitted or None, method is used to automatically select the lag length with no more than max_lags are included."], [267, 2, 2, 0, "max_lags", "The maximum number of lags to use when selecting lag length"], [267, 2, 2, 0, "method", "The method to use when selecting the lag length"], [267, 2, 2, 0, "trend", "The trend component to include in the test"], [267, 2, 2, 0, "trim", "percentage of series at begin/end to exclude from break-period calculation in range [0, 0.333] (default=0.15)"], [267, 2, 2, 0, "y", "data series"]], "arch.unitroot.ZivotAndrews": [[343, 5, 1, 0, "alternative_hypothesis", "The alternative hypothesis"], [344, 5, 1, 0, "critical_values", "Dictionary containing critical values specific to the test, number of observations and included deterministic trend terms."], [345, 5, 1, 0, "lags", "Sets or gets the number of lags used in the model. When bootstrap use DF-type regressions, lags is the number of lags in the regression model.  When bootstrap use long-run variance estimators, lags is the number of lags used in the long-run variance estimator."], [346, 5, 1, 0, "nobs", "The number of observations used when computing the test statistic. Accounts for loss of data due to lags for regression-based bootstrap."], [347, 5, 1, 0, "null_hypothesis", "The null hypothesis"], [348, 5, 1, 0, "pvalue", "Returns the p-value for the test statistic"], [349, 5, 1, 0, "stat", "The test statistic for a unit root"], [350, 3, 1, 0, "summary", "Summary of test, containing statistic, p-value and critical values"], [351, 5, 1, 0, "trend", "Sets or gets the deterministic trend term used in the test. See valid_trends for a list of supported trends"], [352, 5, 1, 0, "valid_trends", "List of valid trend terms."], [353, 5, 1, 0, "y", "Returns the data used in the test statistic"]], "arch.unitroot.auto_bandwidth": [[268, 2, 2, 0, "kernel", "The kernel function to use for selecting the bandwidth"], [268, 2, 2, 0, "y", "Data on which to apply the bandwidth selection"]], "arch.unitroot.cointegration": [[269, 1, 1, 0, "CanonicalCointegratingReg", "Canonical Cointegrating Regression cointegrating vector estimation."], [270, 1, 1, 0, "CointegrationAnalysisResults", "summary()"], [271, 1, 1, 0, "DynamicOLS", "Dynamic OLS (DOLS) cointegrating vector estimation"], [272, 1, 1, 0, "DynamicOLSResults", "Estimation results for Dynamic OLS models"], [273, 1, 1, 0, "EngleGrangerTestResults", "Results class for Engle-Granger cointegration tests."], [274, 1, 1, 0, "FullyModifiedOLS", "Fully Modified OLS cointegrating vector estimation."], [275, 1, 1, 0, "PhillipsOuliarisTestResults", "plot([axes, title])"], [276, 6, 1, 0, "engle_granger", "Test for cointegration within a set of time series."], [277, 6, 1, 0, "phillips_ouliaris", "Test for cointegration within a set of time series."]], "arch.unitroot.cointegration.CanonicalCointegratingReg.__init__": [[269, 2, 2, 0, "trend", "Trend to include in the cointegrating regression. Trends are:"], [269, 2, 2, 0, "x", "The right-hand-side variables in the cointegrating regression."], [269, 2, 2, 0, "x_trend", "Trends that affects affect the x-data but do not appear in the cointegrating regression. x_trend must be at least as large as trend, so that if trend is \"ct\", x_trend must be either \"ct\" or \"ctt\"."], [269, 2, 2, 0, "y", "The left-hand-side variable in the cointegrating regression."]], "arch.unitroot.cointegration.CanonicalCointegratingReg": [[354, 3, 1, 0, "fit", "Estimate the cointegrating vector."]], "arch.unitroot.cointegration.CanonicalCointegratingReg.fit": [[354, 2, 2, 0, "bandwidth", "The bandwidth to use. If not provided, the optimal bandwidth is estimated from the data. Setting the bandwidth to 0 and using \"unadjusted\" produces the classic OLS covariance estimator. Setting the bandwidth to 0 and using \"robust\" produces White's covariance estimator."], [354, 2, 2, 0, "df_adjust", "Whether the adjust the parameter covariance to account for the number of parameters estimated in the regression. If true, the parameter covariance estimator is multiplied by T/(T-k) where k is the number of regressors in the model."], [354, 2, 2, 0, "diff", "Use differenced data to estimate the residuals."], [354, 2, 2, 0, "force_int", "Whether the force the estimated optimal bandwidth to be an integer."], [354, 2, 2, 0, "kernel", "The string name of any of any known kernel-based long-run covariance estimators. Common choices are \"bartlett\" for the Bartlett kernel (Newey-West), \"parzen\" for the Parzen kernel and \"quadratic-spectral\" for the Quadratic Spectral kernel."]], "arch.unitroot.cointegration.CointegrationAnalysisResults": [[355, 5, 1, 0, "bandwidth", "The bandwidth used in the parameter covariance estimation"], [356, 5, 1, 0, "cov", "The estimated parameter covariance of the cointegrating vector"], [357, 5, 1, 0, "kernel", "The kernel used to estimate the covariance"], [358, 5, 1, 0, "long_run_variance", "Long-run variance estimate used in the parameter covariance estimator"], [359, 5, 1, 0, "params", "The estimated parameters of the cointegrating vector"], [360, 5, 1, 0, "pvalues", "P-value of the parameters in the cointegrating vector"], [361, 5, 1, 0, "resid", "The model residuals"], [362, 5, 1, 0, "residual_variance", "The variance of the regression residual."], [363, 5, 1, 0, "rsquared", "The model R\u00b2"], [364, 5, 1, 0, "rsquared_adj", "The degree-of-freedom adjusted R\u00b2"], [365, 5, 1, 0, "std_errors", "Standard errors  of the parameters in the cointegrating vector"], [366, 3, 1, 0, "summary", "Summary of the model, containing estimated parameters and std. errors"], [367, 5, 1, 0, "tvalues", "T-statistics of the parameters in the cointegrating vector"]], "arch.unitroot.cointegration.DynamicOLS.__init__": [[271, 2, 2, 0, "common", "Flag indicating that lags and leads should be restricted to the same value. When common is None, lags must equal leads and max_lag must equal max_lead."], [271, 2, 2, 0, "lags", "The number of lags to include in the model.  If None, the optimal number of lags is chosen using method."], [271, 2, 2, 0, "leads", "The number of leads to include in the model.  If None, the optimal number of leads is chosen using method."], [271, 2, 2, 0, "max_lag", "The maximum lag to consider. See Notes for value used when None."], [271, 2, 2, 0, "max_lead", "The maximum lead to consider. See Notes for value used when None."], [271, 2, 2, 0, "method", "The method used to select lag length when lags or leads is None."], [271, 2, 2, 0, "trend", "Trend to include in the cointegrating regression. Trends are:"], [271, 2, 2, 0, "x", "The right-hand-side variables in the cointegrating regression."], [271, 2, 2, 0, "y", "The left-hand-side variable in the cointegrating regression."]], "arch.unitroot.cointegration.DynamicOLS": [[368, 3, 1, 0, "fit", "Estimate the Dynamic OLS regression"]], "arch.unitroot.cointegration.DynamicOLS.fit": [[368, 2, 2, 0, "bandwidth", "The bandwidth to use. If not provided, the optimal bandwidth is estimated from the data. Setting the bandwidth to 0 and using \"unadjusted\" produces the classic OLS covariance estimator. Setting the bandwidth to 0 and using \"robust\" produces White's covariance estimator."], [368, 2, 2, 0, "cov_type", "Either \"unadjusted\" (or is equivalent \"homoskedastic\") or \"robust\" (or its equivalent \"kernel\")."], [368, 2, 2, 0, "df_adjust", "Whether the adjust the parameter covariance to account for the number of parameters estimated in the regression. If true, the parameter covariance estimator is multiplied by T/(T-k) where k is the number of regressors in the model."], [368, 2, 2, 0, "force_int", "Whether the force the estimated optimal bandwidth to be an integer."], [368, 2, 2, 0, "kernel", "The string name of any of any known kernel-based long-run covariance estimators. Common choices are \"bartlett\" for the Bartlett kernel (Newey-West), \"parzen\" for the Parzen kernel and \"quadratic-spectral\" for the Quadratic Spectral kernel."]], "arch.unitroot.cointegration.DynamicOLSResults.__init__": [[272, 2, 2, 0, "cov", "The estimated parameter covariance."], [272, 2, 2, 0, "cov_type", "The type of the parameter covariance estimator used."], [272, 2, 2, 0, "df_adjust", "Whether to degree of freedom adjust the estimator."], [272, 2, 2, 0, "kernel_est", "The covariance estimator instance used to estimate the parameter covariance."], [272, 2, 2, 0, "lags", "The number of lags included in the model."], [272, 2, 2, 0, "leads", "The number of leads included in the model."], [272, 2, 2, 0, "params", "The estimated model parameters."], [272, 2, 2, 0, "reg_results", "Regression results from fitting statsmodels OLS."], [272, 2, 2, 0, "resid", "The model residuals."]], "arch.unitroot.cointegration.DynamicOLSResults": [[369, 5, 1, 0, "bandwidth", "The bandwidth used in the parameter covariance estimation"], [370, 5, 1, 0, "cov", "The estimated parameter covariance of the cointegrating vector"], [371, 5, 1, 0, "cov_type", "The type of parameter covariance estimator used"], [372, 5, 1, 0, "full_cov", "Parameter covariance of the all model parameters, incl. leads and lags"], [373, 5, 1, 0, "full_params", "The complete set of parameters, including leads and lags"], [374, 5, 1, 0, "kernel", "The kernel used to estimate the covariance"], [375, 5, 1, 0, "lags", "The number of lags included in the model"], [376, 5, 1, 0, "leads", "The number of leads included in the model"], [377, 5, 1, 0, "long_run_variance", "The long-run variance of the regression residual."], [378, 5, 1, 0, "params", "The estimated parameters of the cointegrating vector"], [379, 5, 1, 0, "pvalues", "P-value of the parameters in the cointegrating vector"], [380, 5, 1, 0, "resid", "The model residuals"], [381, 5, 1, 0, "residual_variance", "The variance of the regression residual."], [382, 5, 1, 0, "rsquared", "The model R\u00b2"], [383, 5, 1, 0, "rsquared_adj", "The degree-of-freedom adjusted R\u00b2"], [384, 5, 1, 0, "std_errors", "Standard errors  of the parameters in the cointegrating vector"], [385, 3, 1, 0, "summary", "Summary of the model, containing estimated parameters and std. errors"], [386, 5, 1, 0, "tvalues", "T-statistics of the parameters in the cointegrating vector"]], "arch.unitroot.cointegration.DynamicOLSResults.summary": [[385, 2, 2, 0, "full", "Flag indicating whether to include all estimated parameters (True) or only the parameters of the cointegrating vector"]], "arch.unitroot.cointegration.EngleGrangerTestResults.__init__": [[273, 2, 2, 0, "adf", "The ADF instance used to perform the test and lag selection."], [273, 2, 2, 0, "alternative", "The alternative hypothesis."], [273, 2, 2, 0, "crit_vals", "The critical values of the Engle-Granger specific to the sample size and model dimension."], [273, 2, 2, 0, "null", "The null hypothesis."], [273, 2, 2, 0, "order", "The number of stochastic trends in the null distribution."], [273, 2, 2, 0, "pvalue", "The pvalue of the Engle-Granger test statistic."], [273, 2, 2, 0, "stat", "The Engle-Granger test statistic."], [273, 2, 2, 0, "trend", "The model's trend description."], [273, 2, 2, 0, "xsection", "The OLS results used in the cross-sectional regression."]], "arch.unitroot.cointegration.EngleGrangerTestResults": [[387, 5, 1, 0, "alternative_hypothesis", "The alternative hypothesis"], [388, 5, 1, 0, "cointegrating_vector", "The estimated cointegrating vector."], [389, 5, 1, 0, "critical_values", "Critical Values"], [390, 5, 1, 0, "distribution_order", "The number of stochastic trends under the null hypothesis."], [391, 5, 1, 0, "lags", "The number of lags used in the Augmented Dickey-Fuller regression."], [392, 5, 1, 0, "max_lags", "The maximum number of lags used in the lag-length selection."], [393, 5, 1, 0, "name", "Sets or gets the name of the cointegration test"], [394, 5, 1, 0, "null_hypothesis", "The null hypothesis"], [395, 3, 1, 0, "plot", "Plot the cointegration residuals."], [396, 5, 1, 0, "pvalue", "The p-value of the test statistic."], [397, 5, 1, 0, "resid", "The residual from the cointegrating regression."], [398, 5, 1, 0, "rho", "The estimated coefficient in the Dickey-Fuller Test"], [399, 5, 1, 0, "stat", "The test statistic."], [400, 3, 1, 0, "summary", "Summary of test, containing statistic, p-value and critical values"], [401, 5, 1, 0, "trend", "The trend used in the cointegrating regression"]], "arch.unitroot.cointegration.EngleGrangerTestResults.plot": [[395, 2, 2, 0, "axes", "matplotlib axes instance to hold the figure."], [395, 2, 2, 0, "title", "Title for the figure."]], "arch.unitroot.cointegration.FullyModifiedOLS.__init__": [[274, 2, 2, 0, "trend", "Trend to include in the cointegrating regression. Trends are:"], [274, 2, 2, 0, "x", "The right-hand-side variables in the cointegrating regression."], [274, 2, 2, 0, "x_trend", "Trends that affects affect the x-data but do not appear in the cointegrating regression. x_trend must be at least as large as trend, so that if trend is \"ct\", x_trend must be either \"ct\" or \"ctt\"."], [274, 2, 2, 0, "y", "The left-hand-side variable in the cointegrating regression."]], "arch.unitroot.cointegration.FullyModifiedOLS": [[402, 3, 1, 0, "fit", "Estimate the cointegrating vector."]], "arch.unitroot.cointegration.FullyModifiedOLS.fit": [[402, 2, 2, 0, "bandwidth", "The bandwidth to use. If not provided, the optimal bandwidth is estimated from the data. Setting the bandwidth to 0 and using \"unadjusted\" produces the classic OLS covariance estimator. Setting the bandwidth to 0 and using \"robust\" produces White's covariance estimator."], [402, 2, 2, 0, "df_adjust", "Whether the adjust the parameter covariance to account for the number of parameters estimated in the regression. If true, the parameter covariance estimator is multiplied by T/(T-k) where k is the number of regressors in the model."], [402, 2, 2, 0, "diff", "Use differenced data to estimate the residuals."], [402, 2, 2, 0, "force_int", "Whether the force the estimated optimal bandwidth to be an integer."], [402, 2, 2, 0, "kernel", "The string name of any of any known kernel-based long-run covariance estimators. Common choices are \"bartlett\" for the Bartlett kernel (Newey-West), \"parzen\" for the Parzen kernel and \"quadratic-spectral\" for the Quadratic Spectral kernel."]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults": [[403, 5, 1, 0, "alternative_hypothesis", "The alternative hypothesis"], [404, 5, 1, 0, "bandwidth", "Bandwidth used by the long-run covariance estimator"], [405, 5, 1, 0, "cointegrating_vector", "The estimated cointegrating vector."], [406, 5, 1, 0, "critical_values", "Critical Values"], [407, 5, 1, 0, "distribution_order", "The number of stochastic trends under the null hypothesis."], [408, 5, 1, 0, "kernel", "Name of the long-run covariance estimator"], [409, 5, 1, 0, "name", "Sets or gets the name of the cointegration test"], [410, 5, 1, 0, "null_hypothesis", "The null hypothesis"], [411, 3, 1, 0, "plot", "Plot the cointegration residuals."], [412, 5, 1, 0, "pvalue", "The p-value of the test statistic."], [413, 5, 1, 0, "resid", "The residual from the cointegrating regression."], [414, 5, 1, 0, "stat", "The test statistic."], [415, 3, 1, 0, "summary", "Summary of test, containing statistic, p-value and critical values"], [416, 5, 1, 0, "trend", "The trend used in the cointegrating regression"]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.plot": [[411, 2, 2, 0, "axes", "matplotlib axes instance to hold the figure."], [411, 2, 2, 0, "title", "Title for the figure."]], "arch.unitroot.cointegration.engle_granger": [[276, 2, 2, 0, "lags", "The number of lagged differences to include in the Augmented Dickey-Fuller test used on the residuals of the"], [276, 2, 2, 0, "max_lags", "The maximum number of lags to consider when using automatic lag-length in the Augmented Dickey-Fuller regression."], [276, 2, 2, 0, "method", "The method used to select the number of lags included in the Augmented Dickey-Fuller regression."], [276, 2, 2, 0, "trend", "Trend to include in the cointegrating regression. Trends are:"], [276, 2, 2, 0, "x", "The right-hand-side variables in the cointegrating regression."], [276, 2, 2, 0, "y", "The left-hand-side variable in the cointegrating regression."]], "arch.unitroot.cointegration.phillips_ouliaris": [[277, 2, 2, 0, "bandwidth", "The bandwidth to use. If not provided, the optimal bandwidth is estimated from the data. Setting the bandwidth to 0 and using \"unadjusted\" produces the classic OLS covariance estimator. Setting the bandwidth to 0 and using \"robust\" produces White's covariance estimator."], [277, 2, 2, 0, "force_int", "Whether the force the estimated optimal bandwidth to be an integer."], [277, 2, 2, 0, "kernel", "The string name of any of any known kernel-based long-run covariance estimators. Common choices are \"bartlett\" for the Bartlett kernel (Newey-West), \"parzen\" for the Parzen kernel and \"quadratic-spectral\" for the Quadratic Spectral kernel."], [277, 2, 2, 0, "test_type", "The test statistic to compute. Supported options are:"], [277, 2, 2, 0, "trend", "Trend to include in the cointegrating regression. Trends are:"], [277, 2, 2, 0, "x", "The right-hand-side variables in the cointegrating regression."], [277, 2, 2, 0, "y", "The left-hand-side variable in the cointegrating regression."]], "arch.univariate": [[425, 1, 1, 0, "APARCH", "Asymmetric Power ARCH (APARCH) volatility process"], [426, 1, 1, 0, "ARCH", "ARCH process"], [427, 1, 1, 0, "ARCHInMean", "(G)ARCH-in-mean model and simulation"], [428, 1, 1, 0, "ARX", "Autoregressive model with optional exogenous regressors estimation and simulation"], [429, 1, 1, 0, "ConstantMean", "Constant mean model estimation and simulation."], [430, 1, 1, 0, "ConstantVariance", "Constant volatility process"], [431, 1, 1, 0, "EGARCH", "EGARCH model estimation"], [432, 1, 1, 0, "EWMAVariance", "Exponentially Weighted Moving-Average (RiskMetrics) Variance process"], [433, 1, 1, 0, "FIGARCH", "FIGARCH model"], [434, 1, 1, 0, "FixedVariance", "Fixed volatility process"], [435, 1, 1, 0, "GARCH", "GARCH and related model estimation"], [436, 1, 1, 0, "GeneralizedError", "Generalized Error distribution for use with ARCH models"], [437, 1, 1, 0, "HARCH", "Heterogeneous ARCH process"], [438, 1, 1, 0, "HARX", "Heterogeneous Autoregression (HAR), with optional exogenous regressors, model estimation and simulation"], [439, 1, 1, 0, "LS", "Least squares model estimation and simulation"], [440, 1, 1, 0, "MIDASHyperbolic", "MIDAS Hyperbolic ARCH process"], [441, 1, 1, 0, "Normal", "Standard normal distribution for use with ARCH models"], [442, 1, 1, 0, "RiskMetrics2006", "RiskMetrics 2006 Variance process"], [443, 1, 1, 0, "SkewStudent", "Standardized Skewed Student's distribution for use with ARCH models"], [444, 1, 1, 0, "StudentsT", "Standardized Student's distribution for use with ARCH models"], [445, 1, 1, 0, "ZeroMean", "Model with zero conditional mean estimation and simulation"], [891, 6, 1, 0, "arch_model", "Initialization of common ARCH model specifications"]], "arch.univariate.APARCH.__init__": [[425, 2, 2, 0, "common_asym", "Restrict all asymmetry terms to share the same asymmetry parameter. If False (default), then there are no restrictions on the o asymmetry parameters."], [425, 2, 2, 0, "delta", "Value to use for a fixed delta in the APARCH model. If not provided, the value of delta is jointly estimated with other model parameters. User provided delta is restricted to lie in (0.05, 4.0)."], [425, 2, 2, 0, "o", "Order of the asymmetric innovation. Must satisfy o<=p."], [425, 2, 2, 0, "p", "Order of the symmetric innovation. Must satisfy p>=o."], [425, 2, 2, 0, "q", "Order of the lagged (transformed) conditional variance"]], "arch.univariate.APARCH": [[454, 3, 1, 0, "backcast", "Construct values for backcasting to start the recursion"], [455, 3, 1, 0, "backcast_transform", "Transformation to apply to user-provided backcast values"], [456, 3, 1, 0, "bounds", "Returns bounds for parameters"], [457, 5, 1, 0, "common_asym", "The value of delta in the model. NaN is delta is estimated."], [458, 3, 1, 0, "compute_variance", "Compute the variance for the ARCH model"], [459, 3, 1, 0, "constraints", "Construct parameter constraints arrays for parameter estimation"], [460, 5, 1, 0, "delta", "The value of delta in the model. NaN is delta is estimated."], [461, 3, 1, 0, "forecast", "Forecast volatility from the model"], [462, 5, 1, 0, "name", "The name of the volatility process"], [463, 5, 1, 0, "num_params", "The number of parameters in the model"], [464, 3, 1, 0, "parameter_names", "Names of model parameters"], [465, 3, 1, 0, "simulate", "Simulate data from the model"], [466, 5, 1, 0, "start", "Index to use to start variance subarray selection"], [467, 3, 1, 0, "starting_values", "Returns starting values for the ARCH model"], [468, 5, 1, 0, "stop", "Index to use to stop variance subarray selection"], [469, 3, 1, 0, "update", "Compute the variance for a single observation"], [470, 5, 1, 0, "updateable", "Flag indicating that the volatility process supports update"], [471, 3, 1, 0, "variance_bounds", "Construct loose bounds for conditional variances."], [472, 5, 1, 0, "volatility_updater", "Get the volatility updater associated with the volatility process"]], "arch.univariate.APARCH.backcast": [[454, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.APARCH.backcast_transform": [[455, 2, 2, 0, "backcast", "User-provided backcast that approximates sigma2[0]."]], "arch.univariate.APARCH.bounds": [[456, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.APARCH.compute_variance": [[458, 2, 2, 0, "backcast", "Value to use when initializing ARCH recursion. Can be an ndarray when the model contains multiple components."], [458, 2, 2, 0, "parameters", "Model parameters"], [458, 2, 2, 0, "resids", "Vector of mean zero residuals"], [458, 2, 2, 0, "sigma2", "Array with same size as resids to store the conditional variance"], [458, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.APARCH.forecast": [[461, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [461, 2, 2, 0, "horizon", "Forecast horizon.  Must be 1 or larger.  Forecasts are produced for horizons in [1, horizon]."], [461, 2, 2, 0, "method", "Method to use when producing the forecast. The default is analytic."], [461, 2, 2, 0, "parameters", "Parameters required to forecast the volatility model"], [461, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [461, 2, 2, 0, "resids", "Residuals to use in the recursion"], [461, 2, 2, 0, "rng", "Callable random number generator required if method is 'simulation'. Must take a single shape input and return random samples numbers with that shape."], [461, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [461, 2, 2, 0, "start", "Index of the first observation to use as the starting point for the forecast.  Default is len(resids)."], [461, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.APARCH.simulate": [[465, 2, 2, 0, "burn", "Number of additional observations to generate when initializing the simulation"], [465, 2, 2, 0, "initial_value", "Scalar or array of initial values to use when initializing the simulation"], [465, 2, 2, 0, "nobs", "Number of data points to simulate"], [465, 2, 2, 0, "parameters", "Parameters required to simulate the volatility model"], [465, 2, 2, 0, "rng", "Callable function that takes a single integer input and returns a vector of random numbers"]], "arch.univariate.APARCH.starting_values": [[467, 2, 2, 0, "resids", "Array of (approximate) residuals to use when computing starting values"]], "arch.univariate.APARCH.update": [[469, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [469, 2, 2, 0, "index", "The numerical index of the variance to compute"], [469, 2, 2, 0, "parameters", "The variance model parameters"], [469, 2, 2, 0, "resids", "The residual array. Only uses resids[:index] when computing sigma2[index]"], [469, 2, 2, 0, "sigma2", "The array containing the variances. Only uses sigma2[:index] when computing sigma2[index]. The computed value is stored in sigma2[index]."], [469, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.APARCH.variance_bounds": [[471, 2, 2, 0, "power", "Power used in the model. 2.0, the default corresponds to standard ARCH models that evolve in squares."], [471, 2, 2, 0, "resids", "Approximate residuals to use to compute the lower and upper bounds on the conditional variance"]], "arch.univariate.ARCH.__init__": [[426, 2, 2, 0, "p", "Order of the symmetric innovation"]], "arch.univariate.ARCH": [[473, 3, 1, 0, "backcast", "Construct values for backcasting to start the recursion"], [474, 3, 1, 0, "backcast_transform", "Transformation to apply to user-provided backcast values"], [475, 3, 1, 0, "bounds", "Returns bounds for parameters"], [476, 3, 1, 0, "compute_variance", "Compute the variance for the ARCH model"], [477, 3, 1, 0, "constraints", "Construct parameter constraints arrays for parameter estimation"], [478, 3, 1, 0, "forecast", "Forecast volatility from the model"], [479, 5, 1, 0, "name", "The name of the volatility process"], [480, 5, 1, 0, "num_params", "The number of parameters in the model"], [481, 3, 1, 0, "parameter_names", "Names of model parameters"], [482, 3, 1, 0, "simulate", "Simulate data from the model"], [483, 5, 1, 0, "start", "Index to use to start variance subarray selection"], [484, 3, 1, 0, "starting_values", "Returns starting values for the ARCH model"], [485, 5, 1, 0, "stop", "Index to use to stop variance subarray selection"], [486, 3, 1, 0, "update", "Compute the variance for a single observation"], [487, 5, 1, 0, "updateable", "Flag indicating that the volatility process supports update"], [488, 3, 1, 0, "variance_bounds", "Construct loose bounds for conditional variances."], [489, 5, 1, 0, "volatility_updater", "Get the volatility updater associated with the volatility process"]], "arch.univariate.ARCH.backcast": [[473, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.ARCH.backcast_transform": [[474, 2, 2, 0, "backcast", "User-provided backcast that approximates sigma2[0]."]], "arch.univariate.ARCH.bounds": [[475, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.ARCH.compute_variance": [[476, 2, 2, 0, "backcast", "Value to use when initializing ARCH recursion. Can be an ndarray when the model contains multiple components."], [476, 2, 2, 0, "parameters", "Model parameters"], [476, 2, 2, 0, "resids", "Vector of mean zero residuals"], [476, 2, 2, 0, "sigma2", "Array with same size as resids to store the conditional variance"], [476, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.ARCH.forecast": [[478, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [478, 2, 2, 0, "horizon", "Forecast horizon.  Must be 1 or larger.  Forecasts are produced for horizons in [1, horizon]."], [478, 2, 2, 0, "method", "Method to use when producing the forecast. The default is analytic."], [478, 2, 2, 0, "parameters", "Parameters required to forecast the volatility model"], [478, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [478, 2, 2, 0, "resids", "Residuals to use in the recursion"], [478, 2, 2, 0, "rng", "Callable random number generator required if method is 'simulation'. Must take a single shape input and return random samples numbers with that shape."], [478, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [478, 2, 2, 0, "start", "Index of the first observation to use as the starting point for the forecast.  Default is len(resids)."], [478, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.ARCH.simulate": [[482, 2, 2, 0, "burn", "Number of additional observations to generate when initializing the simulation"], [482, 2, 2, 0, "initial_value", "Scalar or array of initial values to use when initializing the simulation"], [482, 2, 2, 0, "nobs", "Number of data points to simulate"], [482, 2, 2, 0, "parameters", "Parameters required to simulate the volatility model"], [482, 2, 2, 0, "rng", "Callable function that takes a single integer input and returns a vector of random numbers"]], "arch.univariate.ARCH.starting_values": [[484, 2, 2, 0, "resids", "Array of (approximate) residuals to use when computing starting values"]], "arch.univariate.ARCH.update": [[486, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [486, 2, 2, 0, "index", "The numerical index of the variance to compute"], [486, 2, 2, 0, "parameters", "The variance model parameters"], [486, 2, 2, 0, "resids", "The residual array. Only uses resids[:index] when computing sigma2[index]"], [486, 2, 2, 0, "sigma2", "The array containing the variances. Only uses sigma2[:index] when computing sigma2[index]. The computed value is stored in sigma2[index]."], [486, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.ARCH.variance_bounds": [[488, 2, 2, 0, "power", "Power used in the model. 2.0, the default corresponds to standard ARCH models that evolve in squares."], [488, 2, 2, 0, "resids", "Approximate residuals to use to compute the lower and upper bounds on the conditional variance"]], "arch.univariate.ARCHInMean.__init__": [[427, 2, 2, 0, "constant", "Flag whether the model should include a constant"], [427, 2, 2, 0, "distribution", "Error distribution to use in the model"], [427, 2, 2, 0, "form", "The form of the conditional variance that appears in the mean equation. The string names use the log of the conditional variance (\"log\"), the square-root of the conditional variance (\"vol\") or the conditional variance. When specified using a float, interpreted as \\sigma_t^{form} so that 1 is equivalent to \"vol\" and 2 is equivalent to \"var\". When using a number, must be different from 0."], [427, 2, 2, 0, "hold_back", "Number of observations at the start of the sample to exclude when estimating model parameters.  Used when comparing models with different lag lengths to estimate on the common sample."], [427, 2, 2, 0, "lags", "Description of lag structure of the HAR.  Scalar included all lags between 1 and the value.  A 1-d array includes the AR lags lags[0], lags[1], ..."], [427, 2, 2, 0, "rescale", "Flag indicating whether to automatically rescale data if the scale of the data is likely to produce convergence issues when estimating model parameters. If False, the model is estimated on the data without transformation.  If True, than y is rescaled and the new scale is reported in the estimation results."], [427, 2, 2, 0, "volatility", "Volatility process to use in the model. volatility.updateable must return True."], [427, 2, 2, 0, "x", "nobs by k element array containing exogenous regressors"], [427, 2, 2, 0, "y", "nobs element vector containing the dependent variable"]], "arch.univariate.ARCHInMean": [[490, 3, 1, 0, "bounds", "Construct bounds for parameters to use in non-linear optimization"], [491, 3, 1, 0, "compute_param_cov", "Computes parameter covariances using numerical derivatives."], [492, 3, 1, 0, "constraints", "Construct linear constraint arrays  for use in non-linear optimization"], [493, 5, 1, 0, "distribution", "Set or gets the error distribution"], [494, 3, 1, 0, "fit", "Estimate model parameters"], [495, 3, 1, 0, "fix", "Allows an ARCHModelFixedResult to be constructed from fixed parameters."], [496, 3, 1, 0, "forecast", "Construct forecasts from estimated model"], [497, 5, 1, 0, "form", "The form of the conditional variance in the mean"], [498, 5, 1, 0, "name", "The name of the model."], [499, 5, 1, 0, "num_params", "Returns the number of parameters"], [500, 3, 1, 0, "parameter_names", "List of parameters names"], [501, 3, 1, 0, "resids", "Compute model residuals"], [502, 3, 1, 0, "simulate", "Simulates data from a linear regression, AR or HAR models"], [503, 3, 1, 0, "starting_values", "Returns starting values for the mean model, often the same as the values returned from fit"], [504, 5, 1, 0, "volatility", "Set or gets the volatility process"], [505, 5, 1, 0, "x", "Gets the value of the exogenous regressors in the model"], [506, 5, 1, 0, "y", "Returns the dependent variable"]], "arch.univariate.ARCHInMean.compute_param_cov": [[491, 2, 2, 0, "backcast", "Value to use for pre-sample observations"], [491, 2, 2, 0, "params", "Model parameters"], [491, 2, 2, 0, "robust", "Flag indicating whether to use robust standard errors (True) or classic MLE (False)"]], "arch.univariate.ARCHInMean.fit": [[494, 2, 2, 0, "backcast", "Value to use as backcast. Should be measure \\sigma^2_0 since model-specific non-linear transformations are applied to value before computing the variance recursions."], [494, 2, 2, 0, "cov_type", "Estimation method of parameter covariance.  Supported options are 'robust', which does not assume the Information Matrix Equality holds and 'classic' which does.  In the ARCH literature, 'robust' corresponds to Bollerslev-Wooldridge covariance estimator."], [494, 2, 2, 0, "disp", "Either 'final' to print optimization result or 'off' to display nothing. If using a boolean, False is \"off\" and True is \"final\""], [494, 2, 2, 0, "first_obs", "First observation to use when estimating model"], [494, 2, 2, 0, "last_obs", "Last observation to use when estimating model"], [494, 2, 2, 0, "options", "Options to pass to scipy.optimize.minimize.  Valid entries include 'ftol', 'eps', 'disp', and 'maxiter'."], [494, 2, 2, 0, "show_warning", "Flag indicating whether convergence warnings should be shown."], [494, 2, 2, 0, "starting_values", "Array of starting values to use.  If not provided, starting values are constructed by the model components."], [494, 2, 2, 0, "tol", "Tolerance for termination."], [494, 2, 2, 0, "update_freq", "Frequency of iteration updates.  Output is generated every update_freq iterations. Set to 0 to disable iterative output."]], "arch.univariate.ARCHInMean.fix": [[495, 2, 2, 0, "first_obs", "First observation to use when fixing model"], [495, 2, 2, 0, "last_obs", "Last observation to use when fixing model"], [495, 2, 2, 0, "params", "User specified parameters to use when generating the result. Must have the correct number of parameters for a given choice of mean model, volatility model and distribution."]], "arch.univariate.ARCHInMean.forecast": [[496, 2, 2, 0, "align", "Either 'origin' or 'target'.  When set of 'origin', the t-th row of forecasts contains the forecasts for t+1, t+2, ..., t+h. When set to 'target', the t-th row contains the 1-step ahead forecast from time t-1, the 2 step from time t-2, ..., and the h-step from time t-h.  'target' simplified computing forecast errors since the realization and h-step forecast are aligned."], [496, 2, 2, 0, "horizon", "Number of steps to forecast"], [496, 2, 2, 0, "method", "Method to use when producing the forecast. The default is analytic. The method only affects the variance forecast generation.  Not all volatility models support all methods. In particular, volatility models that do not evolve in squares such as EGARCH or TARCH do not support the 'analytic' method for horizons > 1."], [496, 2, 2, 0, "params", "Parameters required to forecast. Must be identical in shape to the parameters computed by fitting the model."], [496, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [496, 2, 2, 0, "reindex", "Whether to reindex the forecasts to have the same dimension as the series being forecast. Prior to 4.18 this was the default. As of 4.19 this is now optional. If not provided, a warning is raised about the future change in the default which will occur after September 2021."], [496, 2, 2, 0, "rng", "Custom random number generator to use in simulation-based forecasts. Must produce random samples using the syntax rng(size) where size the 2-element tuple (simulations, horizon)."], [496, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [496, 2, 2, 0, "start", "An integer, datetime or str indicating the first observation to produce the forecast for.  Datetimes can only be used with pandas inputs that have a datetime index. Strings must be convertible to a date time, such as in '1945-01-01'."], [496, 2, 2, 0, "x", "Values to use for exogenous regressors if any are included in the model. Three formats are accepted:"]], "arch.univariate.ARCHInMean.resids": [[501, 2, 2, 0, "params", "Model parameters"], [501, 2, 2, 0, "regressors", "Alternative regressor values to use when computing model residuals"], [501, 2, 2, 0, "y", "Alternative values to use when computing model residuals"]], "arch.univariate.ARCHInMean.simulate": [[502, 2, 2, 0, "burn", "Number of values to simulate to initialize the model and remove dependence on initial values."], [502, 2, 2, 0, "initial_value", "Either a scalar value or max(lags) array set of initial values to use when initializing the model.  If omitted, 0.0 is used."], [502, 2, 2, 0, "initial_value_vol", "An array or scalar to use when initializing the volatility process."], [502, 2, 2, 0, "nobs", "Length of series to simulate"], [502, 2, 2, 0, "params", "Parameters to use when simulating the model.  Parameter order is [mean volatility distribution] where the parameters of the mean model are ordered [constant lag[0] lag[1] ... lag[p] ex[0] ... ex[k-1]] where lag[j] indicates the coefficient on the jth lag in the model and ex[j] is the coefficient on the jth exogenous variable."], [502, 2, 2, 0, "x", "nobs + burn by k array of exogenous variables to include in the simulation."]], "arch.univariate.ARX.__init__": [[428, 2, 2, 0, "constant", "Flag whether the model should include a constant"], [428, 2, 2, 0, "distribution", "Error distribution to use in the model"], [428, 2, 2, 0, "hold_back", "Number of observations at the start of the sample to exclude when estimating model parameters.  Used when comparing models with different lag lengths to estimate on the common sample."], [428, 2, 2, 0, "lags", "Description of lag structure of the HAR.  Scalar included all lags between 1 and the value.  A 1-d array includes the AR lags lags[0], lags[1], ..."], [428, 2, 2, 0, "rescale", "Flag indicating whether to automatically rescale data if the scale of the data is likely to produce convergence issues when estimating model parameters. If False, the model is estimated on the data without transformation.  If True, than y is rescaled and the new scale is reported in the estimation results."], [428, 2, 2, 0, "volatility", "Volatility process to use in the model"], [428, 2, 2, 0, "x", "nobs by k element array containing exogenous regressors"], [428, 2, 2, 0, "y", "nobs element vector containing the dependent variable"]], "arch.univariate.ARX": [[507, 3, 1, 0, "bounds", "Construct bounds for parameters to use in non-linear optimization"], [508, 3, 1, 0, "compute_param_cov", "Computes parameter covariances using numerical derivatives."], [509, 3, 1, 0, "constraints", "Construct linear constraint arrays  for use in non-linear optimization"], [510, 5, 1, 0, "distribution", "Set or gets the error distribution"], [511, 3, 1, 0, "fit", "Estimate model parameters"], [512, 3, 1, 0, "fix", "Allows an ARCHModelFixedResult to be constructed from fixed parameters."], [513, 3, 1, 0, "forecast", "Construct forecasts from estimated model"], [514, 5, 1, 0, "name", "The name of the model."], [515, 5, 1, 0, "num_params", "Returns the number of parameters"], [516, 3, 1, 0, "parameter_names", "List of parameters names"], [517, 3, 1, 0, "resids", "Compute model residuals"], [518, 3, 1, 0, "simulate", "Simulates data from a linear regression, AR or HAR models"], [519, 3, 1, 0, "starting_values", "Returns starting values for the mean model, often the same as the values returned from fit"], [520, 5, 1, 0, "volatility", "Set or gets the volatility process"], [521, 5, 1, 0, "x", "Gets the value of the exogenous regressors in the model"], [522, 5, 1, 0, "y", "Returns the dependent variable"]], "arch.univariate.ARX.compute_param_cov": [[508, 2, 2, 0, "backcast", "Value to use for pre-sample observations"], [508, 2, 2, 0, "params", "Model parameters"], [508, 2, 2, 0, "robust", "Flag indicating whether to use robust standard errors (True) or classic MLE (False)"]], "arch.univariate.ARX.fit": [[511, 2, 2, 0, "backcast", "Value to use as backcast. Should be measure \\sigma^2_0 since model-specific non-linear transformations are applied to value before computing the variance recursions."], [511, 2, 2, 0, "cov_type", "Estimation method of parameter covariance.  Supported options are 'robust', which does not assume the Information Matrix Equality holds and 'classic' which does.  In the ARCH literature, 'robust' corresponds to Bollerslev-Wooldridge covariance estimator."], [511, 2, 2, 0, "disp", "Either 'final' to print optimization result or 'off' to display nothing. If using a boolean, False is \"off\" and True is \"final\""], [511, 2, 2, 0, "first_obs", "First observation to use when estimating model"], [511, 2, 2, 0, "last_obs", "Last observation to use when estimating model"], [511, 2, 2, 0, "options", "Options to pass to scipy.optimize.minimize.  Valid entries include 'ftol', 'eps', 'disp', and 'maxiter'."], [511, 2, 2, 0, "show_warning", "Flag indicating whether convergence warnings should be shown."], [511, 2, 2, 0, "starting_values", "Array of starting values to use.  If not provided, starting values are constructed by the model components."], [511, 2, 2, 0, "tol", "Tolerance for termination."], [511, 2, 2, 0, "update_freq", "Frequency of iteration updates.  Output is generated every update_freq iterations. Set to 0 to disable iterative output."]], "arch.univariate.ARX.fix": [[512, 2, 2, 0, "first_obs", "First observation to use when fixing model"], [512, 2, 2, 0, "last_obs", "Last observation to use when fixing model"], [512, 2, 2, 0, "params", "User specified parameters to use when generating the result. Must have the correct number of parameters for a given choice of mean model, volatility model and distribution."]], "arch.univariate.ARX.forecast": [[513, 2, 2, 0, "align", "Either 'origin' or 'target'.  When set of 'origin', the t-th row of forecasts contains the forecasts for t+1, t+2, ..., t+h. When set to 'target', the t-th row contains the 1-step ahead forecast from time t-1, the 2 step from time t-2, ..., and the h-step from time t-h.  'target' simplified computing forecast errors since the realization and h-step forecast are aligned."], [513, 2, 2, 0, "horizon", "Number of steps to forecast"], [513, 2, 2, 0, "method", "Method to use when producing the forecast. The default is analytic. The method only affects the variance forecast generation.  Not all volatility models support all methods. In particular, volatility models that do not evolve in squares such as EGARCH or TARCH do not support the 'analytic' method for horizons > 1."], [513, 2, 2, 0, "params", "Parameters required to forecast. Must be identical in shape to the parameters computed by fitting the model."], [513, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [513, 2, 2, 0, "reindex", "Whether to reindex the forecasts to have the same dimension as the series being forecast. Prior to 4.18 this was the default. As of 4.19 this is now optional. If not provided, a warning is raised about the future change in the default which will occur after September 2021."], [513, 2, 2, 0, "rng", "Custom random number generator to use in simulation-based forecasts. Must produce random samples using the syntax rng(size) where size the 2-element tuple (simulations, horizon)."], [513, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [513, 2, 2, 0, "start", "An integer, datetime or str indicating the first observation to produce the forecast for.  Datetimes can only be used with pandas inputs that have a datetime index. Strings must be convertible to a date time, such as in '1945-01-01'."], [513, 2, 2, 0, "x", "Values to use for exogenous regressors if any are included in the model. Three formats are accepted:"]], "arch.univariate.ARX.resids": [[517, 2, 2, 0, "params", "Model parameters"], [517, 2, 2, 0, "regressors", "Alternative regressor values to use when computing model residuals"], [517, 2, 2, 0, "y", "Alternative values to use when computing model residuals"]], "arch.univariate.ARX.simulate": [[518, 2, 2, 0, "burn", "Number of values to simulate to initialize the model and remove dependence on initial values."], [518, 2, 2, 0, "initial_value", "Either a scalar value or max(lags) array set of initial values to use when initializing the model.  If omitted, 0.0 is used."], [518, 2, 2, 0, "initial_value_vol", "An array or scalar to use when initializing the volatility process."], [518, 2, 2, 0, "nobs", "Length of series to simulate"], [518, 2, 2, 0, "params", "Parameters to use when simulating the model.  Parameter order is [mean volatility distribution] where the parameters of the mean model are ordered [constant lag[0] lag[1] ... lag[p] ex[0] ... ex[k-1]] where lag[j] indicates the coefficient on the jth lag in the model and ex[j] is the coefficient on the jth exogenous variable."], [518, 2, 2, 0, "x", "nobs + burn by k array of exogenous variables to include in the simulation."]], "arch.univariate.ConstantMean.__init__": [[429, 2, 2, 0, "distribution", "Error distribution to use in the model"], [429, 2, 2, 0, "hold_back", "Number of observations at the start of the sample to exclude when estimating model parameters.  Used when comparing models with different lag lengths to estimate on the common sample."], [429, 2, 2, 0, "rescale", "Flag indicating whether to automatically rescale data if the scale of the data is likely to produce convergence issues when estimating model parameters. If False, the model is estimated on the data without transformation.  If True, than y is rescaled and the new scale is reported in the estimation results."], [429, 2, 2, 0, "volatility", "Volatility process to use in the model"], [429, 2, 2, 0, "y", "nobs element vector containing the dependent variable"]], "arch.univariate.ConstantMean": [[523, 3, 1, 0, "bounds", "Construct bounds for parameters to use in non-linear optimization"], [524, 3, 1, 0, "compute_param_cov", "Computes parameter covariances using numerical derivatives."], [525, 3, 1, 0, "constraints", "Construct linear constraint arrays  for use in non-linear optimization"], [526, 5, 1, 0, "distribution", "Set or gets the error distribution"], [527, 3, 1, 0, "fit", "Estimate model parameters"], [528, 3, 1, 0, "fix", "Allows an ARCHModelFixedResult to be constructed from fixed parameters."], [529, 3, 1, 0, "forecast", "Construct forecasts from estimated model"], [530, 5, 1, 0, "name", "The name of the model."], [531, 5, 1, 0, "num_params", "Returns the number of parameters"], [532, 3, 1, 0, "parameter_names", "List of parameters names"], [533, 3, 1, 0, "resids", "Compute model residuals"], [534, 3, 1, 0, "simulate", "Simulated data from a constant mean model"], [535, 3, 1, 0, "starting_values", "Returns starting values for the mean model, often the same as the values returned from fit"], [536, 5, 1, 0, "volatility", "Set or gets the volatility process"], [537, 5, 1, 0, "x", "Gets the value of the exogenous regressors in the model"], [538, 5, 1, 0, "y", "Returns the dependent variable"]], "arch.univariate.ConstantMean.compute_param_cov": [[524, 2, 2, 0, "backcast", "Value to use for pre-sample observations"], [524, 2, 2, 0, "params", "Model parameters"], [524, 2, 2, 0, "robust", "Flag indicating whether to use robust standard errors (True) or classic MLE (False)"]], "arch.univariate.ConstantMean.fit": [[527, 2, 2, 0, "backcast", "Value to use as backcast. Should be measure \\sigma^2_0 since model-specific non-linear transformations are applied to value before computing the variance recursions."], [527, 2, 2, 0, "cov_type", "Estimation method of parameter covariance.  Supported options are 'robust', which does not assume the Information Matrix Equality holds and 'classic' which does.  In the ARCH literature, 'robust' corresponds to Bollerslev-Wooldridge covariance estimator."], [527, 2, 2, 0, "disp", "Either 'final' to print optimization result or 'off' to display nothing. If using a boolean, False is \"off\" and True is \"final\""], [527, 2, 2, 0, "first_obs", "First observation to use when estimating model"], [527, 2, 2, 0, "last_obs", "Last observation to use when estimating model"], [527, 2, 2, 0, "options", "Options to pass to scipy.optimize.minimize.  Valid entries include 'ftol', 'eps', 'disp', and 'maxiter'."], [527, 2, 2, 0, "show_warning", "Flag indicating whether convergence warnings should be shown."], [527, 2, 2, 0, "starting_values", "Array of starting values to use.  If not provided, starting values are constructed by the model components."], [527, 2, 2, 0, "tol", "Tolerance for termination."], [527, 2, 2, 0, "update_freq", "Frequency of iteration updates.  Output is generated every update_freq iterations. Set to 0 to disable iterative output."]], "arch.univariate.ConstantMean.fix": [[528, 2, 2, 0, "first_obs", "First observation to use when fixing model"], [528, 2, 2, 0, "last_obs", "Last observation to use when fixing model"], [528, 2, 2, 0, "params", "User specified parameters to use when generating the result. Must have the correct number of parameters for a given choice of mean model, volatility model and distribution."]], "arch.univariate.ConstantMean.forecast": [[529, 2, 2, 0, "align", "Either 'origin' or 'target'.  When set of 'origin', the t-th row of forecasts contains the forecasts for t+1, t+2, ..., t+h. When set to 'target', the t-th row contains the 1-step ahead forecast from time t-1, the 2 step from time t-2, ..., and the h-step from time t-h.  'target' simplified computing forecast errors since the realization and h-step forecast are aligned."], [529, 2, 2, 0, "horizon", "Number of steps to forecast"], [529, 2, 2, 0, "method", "Method to use when producing the forecast. The default is analytic. The method only affects the variance forecast generation.  Not all volatility models support all methods. In particular, volatility models that do not evolve in squares such as EGARCH or TARCH do not support the 'analytic' method for horizons > 1."], [529, 2, 2, 0, "params", "Parameters required to forecast. Must be identical in shape to the parameters computed by fitting the model."], [529, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [529, 2, 2, 0, "reindex", "Whether to reindex the forecasts to have the same dimension as the series being forecast. Prior to 4.18 this was the default. As of 4.19 this is now optional. If not provided, a warning is raised about the future change in the default which will occur after September 2021."], [529, 2, 2, 0, "rng", "Custom random number generator to use in simulation-based forecasts. Must produce random samples using the syntax rng(size) where size the 2-element tuple (simulations, horizon)."], [529, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [529, 2, 2, 0, "start", "An integer, datetime or str indicating the first observation to produce the forecast for.  Datetimes can only be used with pandas inputs that have a datetime index. Strings must be convertible to a date time, such as in '1945-01-01'."], [529, 2, 2, 0, "x", "Values to use for exogenous regressors if any are included in the model. Three formats are accepted:"]], "arch.univariate.ConstantMean.resids": [[533, 2, 2, 0, "params", "Model parameters"], [533, 2, 2, 0, "regressors", "Alternative regressor values to use when computing model residuals"], [533, 2, 2, 0, "y", "Alternative values to use when computing model residuals"]], "arch.univariate.ConstantMean.simulate": [[534, 2, 2, 0, "burn", "Number of values to simulate to initialize the model and remove dependence on initial values."], [534, 2, 2, 0, "initial_value", "This value is not used."], [534, 2, 2, 0, "initial_value_vol", "An array or scalar to use when initializing the volatility process."], [534, 2, 2, 0, "nobs", "Length of series to simulate"], [534, 2, 2, 0, "params", "Parameters to use when simulating the model.  Parameter order is [mean volatility distribution]. There is one parameter in the mean model, mu."], [534, 2, 2, 0, "x", "This value is not used."]], "arch.univariate.ConstantVariance": [[539, 3, 1, 0, "backcast", "Construct values for backcasting to start the recursion"], [540, 3, 1, 0, "backcast_transform", "Transformation to apply to user-provided backcast values"], [541, 3, 1, 0, "bounds", "Returns bounds for parameters"], [542, 3, 1, 0, "compute_variance", "Compute the variance for the ARCH model"], [543, 3, 1, 0, "constraints", "Construct parameter constraints arrays for parameter estimation"], [544, 3, 1, 0, "forecast", "Forecast volatility from the model"], [545, 5, 1, 0, "name", "The name of the volatility process"], [546, 5, 1, 0, "num_params", "The number of parameters in the model"], [547, 3, 1, 0, "parameter_names", "Names of model parameters"], [548, 3, 1, 0, "simulate", "Simulate data from the model"], [549, 5, 1, 0, "start", "Index to use to start variance subarray selection"], [550, 3, 1, 0, "starting_values", "Returns starting values for the ARCH model"], [551, 5, 1, 0, "stop", "Index to use to stop variance subarray selection"], [552, 3, 1, 0, "update", "Compute the variance for a single observation"], [553, 5, 1, 0, "updateable", "Flag indicating that the volatility process supports update"], [554, 3, 1, 0, "variance_bounds", "Construct loose bounds for conditional variances."], [555, 5, 1, 0, "volatility_updater", "Get the volatility updater associated with the volatility process"]], "arch.univariate.ConstantVariance.backcast": [[539, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.ConstantVariance.backcast_transform": [[540, 2, 2, 0, "backcast", "User-provided backcast that approximates sigma2[0]."]], "arch.univariate.ConstantVariance.bounds": [[541, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.ConstantVariance.compute_variance": [[542, 2, 2, 0, "backcast", "Value to use when initializing ARCH recursion. Can be an ndarray when the model contains multiple components."], [542, 2, 2, 0, "parameters", "Model parameters"], [542, 2, 2, 0, "resids", "Vector of mean zero residuals"], [542, 2, 2, 0, "sigma2", "Array with same size as resids to store the conditional variance"], [542, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.ConstantVariance.forecast": [[544, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [544, 2, 2, 0, "horizon", "Forecast horizon.  Must be 1 or larger.  Forecasts are produced for horizons in [1, horizon]."], [544, 2, 2, 0, "method", "Method to use when producing the forecast. The default is analytic."], [544, 2, 2, 0, "parameters", "Parameters required to forecast the volatility model"], [544, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [544, 2, 2, 0, "resids", "Residuals to use in the recursion"], [544, 2, 2, 0, "rng", "Callable random number generator required if method is 'simulation'. Must take a single shape input and return random samples numbers with that shape."], [544, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [544, 2, 2, 0, "start", "Index of the first observation to use as the starting point for the forecast.  Default is len(resids)."], [544, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.ConstantVariance.simulate": [[548, 2, 2, 0, "burn", "Number of additional observations to generate when initializing the simulation"], [548, 2, 2, 0, "initial_value", "Scalar or array of initial values to use when initializing the simulation"], [548, 2, 2, 0, "nobs", "Number of data points to simulate"], [548, 2, 2, 0, "parameters", "Parameters required to simulate the volatility model"], [548, 2, 2, 0, "rng", "Callable function that takes a single integer input and returns a vector of random numbers"]], "arch.univariate.ConstantVariance.starting_values": [[550, 2, 2, 0, "resids", "Array of (approximate) residuals to use when computing starting values"]], "arch.univariate.ConstantVariance.update": [[552, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [552, 2, 2, 0, "index", "The numerical index of the variance to compute"], [552, 2, 2, 0, "parameters", "The variance model parameters"], [552, 2, 2, 0, "resids", "The residual array. Only uses resids[:index] when computing sigma2[index]"], [552, 2, 2, 0, "sigma2", "The array containing the variances. Only uses sigma2[:index] when computing sigma2[index]. The computed value is stored in sigma2[index]."], [552, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.ConstantVariance.variance_bounds": [[554, 2, 2, 0, "power", "Power used in the model. 2.0, the default corresponds to standard ARCH models that evolve in squares."], [554, 2, 2, 0, "resids", "Approximate residuals to use to compute the lower and upper bounds on the conditional variance"]], "arch.univariate.EGARCH.__init__": [[431, 2, 2, 0, "o", "Order of the asymmetric innovation"], [431, 2, 2, 0, "p", "Order of the symmetric innovation"], [431, 2, 2, 0, "q", "Order of the lagged (transformed) conditional variance"]], "arch.univariate.EGARCH": [[556, 3, 1, 0, "backcast", "Construct values for backcasting to start the recursion"], [557, 3, 1, 0, "backcast_transform", "Transformation to apply to user-provided backcast values"], [558, 3, 1, 0, "bounds", "Returns bounds for parameters"], [559, 3, 1, 0, "compute_variance", "Compute the variance for the ARCH model"], [560, 3, 1, 0, "constraints", "Construct parameter constraints arrays for parameter estimation"], [561, 3, 1, 0, "forecast", "Forecast volatility from the model"], [562, 5, 1, 0, "name", "The name of the volatility process"], [563, 5, 1, 0, "num_params", "The number of parameters in the model"], [564, 3, 1, 0, "parameter_names", "Names of model parameters"], [565, 3, 1, 0, "simulate", "Simulate data from the model"], [566, 5, 1, 0, "start", "Index to use to start variance subarray selection"], [567, 3, 1, 0, "starting_values", "Returns starting values for the ARCH model"], [568, 5, 1, 0, "stop", "Index to use to stop variance subarray selection"], [569, 3, 1, 0, "update", "Compute the variance for a single observation"], [570, 5, 1, 0, "updateable", "Flag indicating that the volatility process supports update"], [571, 3, 1, 0, "variance_bounds", "Construct loose bounds for conditional variances."], [572, 5, 1, 0, "volatility_updater", "Get the volatility updater associated with the volatility process"]], "arch.univariate.EGARCH.backcast": [[556, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.EGARCH.backcast_transform": [[557, 2, 2, 0, "backcast", "User-provided backcast that approximates sigma2[0]."]], "arch.univariate.EGARCH.bounds": [[558, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.EGARCH.compute_variance": [[559, 2, 2, 0, "backcast", "Value to use when initializing ARCH recursion. Can be an ndarray when the model contains multiple components."], [559, 2, 2, 0, "parameters", "Model parameters"], [559, 2, 2, 0, "resids", "Vector of mean zero residuals"], [559, 2, 2, 0, "sigma2", "Array with same size as resids to store the conditional variance"], [559, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.EGARCH.forecast": [[561, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [561, 2, 2, 0, "horizon", "Forecast horizon.  Must be 1 or larger.  Forecasts are produced for horizons in [1, horizon]."], [561, 2, 2, 0, "method", "Method to use when producing the forecast. The default is analytic."], [561, 2, 2, 0, "parameters", "Parameters required to forecast the volatility model"], [561, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [561, 2, 2, 0, "resids", "Residuals to use in the recursion"], [561, 2, 2, 0, "rng", "Callable random number generator required if method is 'simulation'. Must take a single shape input and return random samples numbers with that shape."], [561, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [561, 2, 2, 0, "start", "Index of the first observation to use as the starting point for the forecast.  Default is len(resids)."], [561, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.EGARCH.simulate": [[565, 2, 2, 0, "burn", "Number of additional observations to generate when initializing the simulation"], [565, 2, 2, 0, "initial_value", "Scalar or array of initial values to use when initializing the simulation"], [565, 2, 2, 0, "nobs", "Number of data points to simulate"], [565, 2, 2, 0, "parameters", "Parameters required to simulate the volatility model"], [565, 2, 2, 0, "rng", "Callable function that takes a single integer input and returns a vector of random numbers"]], "arch.univariate.EGARCH.starting_values": [[567, 2, 2, 0, "resids", "Array of (approximate) residuals to use when computing starting values"]], "arch.univariate.EGARCH.update": [[569, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [569, 2, 2, 0, "index", "The numerical index of the variance to compute"], [569, 2, 2, 0, "parameters", "The variance model parameters"], [569, 2, 2, 0, "resids", "The residual array. Only uses resids[:index] when computing sigma2[index]"], [569, 2, 2, 0, "sigma2", "The array containing the variances. Only uses sigma2[:index] when computing sigma2[index]. The computed value is stored in sigma2[index]."], [569, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.EGARCH.variance_bounds": [[571, 2, 2, 0, "power", "Power used in the model. 2.0, the default corresponds to standard ARCH models that evolve in squares."], [571, 2, 2, 0, "resids", "Approximate residuals to use to compute the lower and upper bounds on the conditional variance"]], "arch.univariate.EWMAVariance.__init__": [[432, 2, 2, 0, "lam", "Smoothing parameter. Default is 0.94. Set to None to estimate lam jointly with other model parameters"]], "arch.univariate.EWMAVariance": [[573, 3, 1, 0, "backcast", "Construct values for backcasting to start the recursion"], [574, 3, 1, 0, "backcast_transform", "Transformation to apply to user-provided backcast values"], [575, 3, 1, 0, "bounds", "Returns bounds for parameters"], [576, 3, 1, 0, "compute_variance", "Compute the variance for the ARCH model"], [577, 3, 1, 0, "constraints", "Construct parameter constraints arrays for parameter estimation"], [578, 3, 1, 0, "forecast", "Forecast volatility from the model"], [579, 5, 1, 0, "name", "The name of the volatility process"], [580, 5, 1, 0, "num_params", "The number of parameters in the model"], [581, 3, 1, 0, "parameter_names", "Names of model parameters"], [582, 3, 1, 0, "simulate", "Simulate data from the model"], [583, 5, 1, 0, "start", "Index to use to start variance subarray selection"], [584, 3, 1, 0, "starting_values", "Returns starting values for the ARCH model"], [585, 5, 1, 0, "stop", "Index to use to stop variance subarray selection"], [586, 3, 1, 0, "update", "Compute the variance for a single observation"], [587, 5, 1, 0, "updateable", "Flag indicating that the volatility process supports update"], [588, 3, 1, 0, "variance_bounds", "Construct loose bounds for conditional variances."], [589, 5, 1, 0, "volatility_updater", "Get the volatility updater associated with the volatility process"]], "arch.univariate.EWMAVariance.backcast": [[573, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.EWMAVariance.backcast_transform": [[574, 2, 2, 0, "backcast", "User-provided backcast that approximates sigma2[0]."]], "arch.univariate.EWMAVariance.bounds": [[575, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.EWMAVariance.compute_variance": [[576, 2, 2, 0, "backcast", "Value to use when initializing ARCH recursion. Can be an ndarray when the model contains multiple components."], [576, 2, 2, 0, "parameters", "Model parameters"], [576, 2, 2, 0, "resids", "Vector of mean zero residuals"], [576, 2, 2, 0, "sigma2", "Array with same size as resids to store the conditional variance"], [576, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.EWMAVariance.forecast": [[578, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [578, 2, 2, 0, "horizon", "Forecast horizon.  Must be 1 or larger.  Forecasts are produced for horizons in [1, horizon]."], [578, 2, 2, 0, "method", "Method to use when producing the forecast. The default is analytic."], [578, 2, 2, 0, "parameters", "Parameters required to forecast the volatility model"], [578, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [578, 2, 2, 0, "resids", "Residuals to use in the recursion"], [578, 2, 2, 0, "rng", "Callable random number generator required if method is 'simulation'. Must take a single shape input and return random samples numbers with that shape."], [578, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [578, 2, 2, 0, "start", "Index of the first observation to use as the starting point for the forecast.  Default is len(resids)."], [578, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.EWMAVariance.simulate": [[582, 2, 2, 0, "burn", "Number of additional observations to generate when initializing the simulation"], [582, 2, 2, 0, "initial_value", "Scalar or array of initial values to use when initializing the simulation"], [582, 2, 2, 0, "nobs", "Number of data points to simulate"], [582, 2, 2, 0, "parameters", "Parameters required to simulate the volatility model"], [582, 2, 2, 0, "rng", "Callable function that takes a single integer input and returns a vector of random numbers"]], "arch.univariate.EWMAVariance.starting_values": [[584, 2, 2, 0, "resids", "Array of (approximate) residuals to use when computing starting values"]], "arch.univariate.EWMAVariance.update": [[586, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [586, 2, 2, 0, "index", "The numerical index of the variance to compute"], [586, 2, 2, 0, "parameters", "The variance model parameters"], [586, 2, 2, 0, "resids", "The residual array. Only uses resids[:index] when computing sigma2[index]"], [586, 2, 2, 0, "sigma2", "The array containing the variances. Only uses sigma2[:index] when computing sigma2[index]. The computed value is stored in sigma2[index]."], [586, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.EWMAVariance.variance_bounds": [[588, 2, 2, 0, "power", "Power used in the model. 2.0, the default corresponds to standard ARCH models that evolve in squares."], [588, 2, 2, 0, "resids", "Approximate residuals to use to compute the lower and upper bounds on the conditional variance"]], "arch.univariate.FIGARCH.__init__": [[433, 2, 2, 0, "p", "Order of the symmetric innovation"], [433, 2, 2, 0, "power", "Power to use with the innovations, abs(e) ** power.  Default is 2.0, which produces FIGARCH and related models. Using 1.0 produces FIAVARCH and related models.  Other powers can be specified, although these should be strictly positive, and usually larger than 0.25."], [433, 2, 2, 0, "q", "Order of the lagged (transformed) conditional variance"], [433, 2, 2, 0, "truncation", "Truncation point to use in ARCH(\\infty) representation. Default is 1000."]], "arch.univariate.FIGARCH": [[590, 3, 1, 0, "backcast", "Construct values for backcasting to start the recursion"], [591, 3, 1, 0, "backcast_transform", "Transformation to apply to user-provided backcast values"], [592, 3, 1, 0, "bounds", "Returns bounds for parameters"], [593, 3, 1, 0, "compute_variance", "Compute the variance for the ARCH model"], [594, 3, 1, 0, "constraints", "Construct parameter constraints arrays for parameter estimation"], [595, 3, 1, 0, "forecast", "Forecast volatility from the model"], [596, 5, 1, 0, "name", "The name of the volatility process"], [597, 5, 1, 0, "num_params", "The number of parameters in the model"], [598, 3, 1, 0, "parameter_names", "Names of model parameters"], [599, 3, 1, 0, "simulate", "Simulate data from the model"], [600, 5, 1, 0, "start", "Index to use to start variance subarray selection"], [601, 3, 1, 0, "starting_values", "Returns starting values for the ARCH model"], [602, 5, 1, 0, "stop", "Index to use to stop variance subarray selection"], [603, 5, 1, 0, "truncation", "Truncation lag for the ARCH-infinity approximation"], [604, 3, 1, 0, "update", "Compute the variance for a single observation"], [605, 5, 1, 0, "updateable", "Flag indicating that the volatility process supports update"], [606, 3, 1, 0, "variance_bounds", "Construct loose bounds for conditional variances."], [607, 5, 1, 0, "volatility_updater", "Get the volatility updater associated with the volatility process"]], "arch.univariate.FIGARCH.backcast": [[590, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.FIGARCH.backcast_transform": [[591, 2, 2, 0, "backcast", "User-provided backcast that approximates sigma2[0]."]], "arch.univariate.FIGARCH.bounds": [[592, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.FIGARCH.compute_variance": [[593, 2, 2, 0, "backcast", "Value to use when initializing ARCH recursion. Can be an ndarray when the model contains multiple components."], [593, 2, 2, 0, "parameters", "Model parameters"], [593, 2, 2, 0, "resids", "Vector of mean zero residuals"], [593, 2, 2, 0, "sigma2", "Array with same size as resids to store the conditional variance"], [593, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.FIGARCH.forecast": [[595, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [595, 2, 2, 0, "horizon", "Forecast horizon.  Must be 1 or larger.  Forecasts are produced for horizons in [1, horizon]."], [595, 2, 2, 0, "method", "Method to use when producing the forecast. The default is analytic."], [595, 2, 2, 0, "parameters", "Parameters required to forecast the volatility model"], [595, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [595, 2, 2, 0, "resids", "Residuals to use in the recursion"], [595, 2, 2, 0, "rng", "Callable random number generator required if method is 'simulation'. Must take a single shape input and return random samples numbers with that shape."], [595, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [595, 2, 2, 0, "start", "Index of the first observation to use as the starting point for the forecast.  Default is len(resids)."], [595, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.FIGARCH.simulate": [[599, 2, 2, 0, "burn", "Number of additional observations to generate when initializing the simulation"], [599, 2, 2, 0, "initial_value", "Scalar or array of initial values to use when initializing the simulation"], [599, 2, 2, 0, "nobs", "Number of data points to simulate"], [599, 2, 2, 0, "parameters", "Parameters required to simulate the volatility model"], [599, 2, 2, 0, "rng", "Callable function that takes a single integer input and returns a vector of random numbers"]], "arch.univariate.FIGARCH.starting_values": [[601, 2, 2, 0, "resids", "Array of (approximate) residuals to use when computing starting values"]], "arch.univariate.FIGARCH.update": [[604, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [604, 2, 2, 0, "index", "The numerical index of the variance to compute"], [604, 2, 2, 0, "parameters", "The variance model parameters"], [604, 2, 2, 0, "resids", "The residual array. Only uses resids[:index] when computing sigma2[index]"], [604, 2, 2, 0, "sigma2", "The array containing the variances. Only uses sigma2[:index] when computing sigma2[index]. The computed value is stored in sigma2[index]."], [604, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.FIGARCH.variance_bounds": [[606, 2, 2, 0, "power", "Power used in the model. 2.0, the default corresponds to standard ARCH models that evolve in squares."], [606, 2, 2, 0, "resids", "Approximate residuals to use to compute the lower and upper bounds on the conditional variance"]], "arch.univariate.FixedVariance.__init__": [[434, 2, 2, 0, "unit_scale", "Flag whether to enforce a unit scale.  If False, a scale parameter will be estimated so that the model variance will be proportional to variance. If True, the model variance is set of variance"], [434, 2, 2, 0, "variance", "Array containing the variances to use.  Should have the same shape as the data used in the model."]], "arch.univariate.FixedVariance": [[608, 3, 1, 0, "backcast", "Construct values for backcasting to start the recursion"], [609, 3, 1, 0, "backcast_transform", "Transformation to apply to user-provided backcast values"], [610, 3, 1, 0, "bounds", "Returns bounds for parameters"], [611, 3, 1, 0, "compute_variance", "Compute the variance for the ARCH model"], [612, 3, 1, 0, "constraints", "Construct parameter constraints arrays for parameter estimation"], [613, 3, 1, 0, "forecast", "Forecast volatility from the model"], [614, 5, 1, 0, "name", "The name of the volatility process"], [615, 5, 1, 0, "num_params", "The number of parameters in the model"], [616, 3, 1, 0, "parameter_names", "Names of model parameters"], [617, 3, 1, 0, "simulate", "Simulate data from the model"], [618, 5, 1, 0, "start", "Index to use to start variance subarray selection"], [619, 3, 1, 0, "starting_values", "Returns starting values for the ARCH model"], [620, 5, 1, 0, "stop", "Index to use to stop variance subarray selection"], [621, 3, 1, 0, "update", "Compute the variance for a single observation"], [622, 5, 1, 0, "updateable", "Flag indicating that the volatility process supports update"], [623, 3, 1, 0, "variance_bounds", "Construct loose bounds for conditional variances."], [624, 5, 1, 0, "volatility_updater", "Get the volatility updater associated with the volatility process"]], "arch.univariate.FixedVariance.backcast": [[608, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.FixedVariance.backcast_transform": [[609, 2, 2, 0, "backcast", "User-provided backcast that approximates sigma2[0]."]], "arch.univariate.FixedVariance.bounds": [[610, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.FixedVariance.compute_variance": [[611, 2, 2, 0, "backcast", "Value to use when initializing ARCH recursion. Can be an ndarray when the model contains multiple components."], [611, 2, 2, 0, "parameters", "Model parameters"], [611, 2, 2, 0, "resids", "Vector of mean zero residuals"], [611, 2, 2, 0, "sigma2", "Array with same size as resids to store the conditional variance"], [611, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.FixedVariance.forecast": [[613, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [613, 2, 2, 0, "horizon", "Forecast horizon.  Must be 1 or larger.  Forecasts are produced for horizons in [1, horizon]."], [613, 2, 2, 0, "method", "Method to use when producing the forecast. The default is analytic."], [613, 2, 2, 0, "parameters", "Parameters required to forecast the volatility model"], [613, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [613, 2, 2, 0, "resids", "Residuals to use in the recursion"], [613, 2, 2, 0, "rng", "Callable random number generator required if method is 'simulation'. Must take a single shape input and return random samples numbers with that shape."], [613, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [613, 2, 2, 0, "start", "Index of the first observation to use as the starting point for the forecast.  Default is len(resids)."], [613, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.FixedVariance.simulate": [[617, 2, 2, 0, "burn", "Number of additional observations to generate when initializing the simulation"], [617, 2, 2, 0, "initial_value", "Scalar or array of initial values to use when initializing the simulation"], [617, 2, 2, 0, "nobs", "Number of data points to simulate"], [617, 2, 2, 0, "parameters", "Parameters required to simulate the volatility model"], [617, 2, 2, 0, "rng", "Callable function that takes a single integer input and returns a vector of random numbers"]], "arch.univariate.FixedVariance.starting_values": [[619, 2, 2, 0, "resids", "Array of (approximate) residuals to use when computing starting values"]], "arch.univariate.FixedVariance.update": [[621, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [621, 2, 2, 0, "index", "The numerical index of the variance to compute"], [621, 2, 2, 0, "parameters", "The variance model parameters"], [621, 2, 2, 0, "resids", "The residual array. Only uses resids[:index] when computing sigma2[index]"], [621, 2, 2, 0, "sigma2", "The array containing the variances. Only uses sigma2[:index] when computing sigma2[index]. The computed value is stored in sigma2[index]."], [621, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.FixedVariance.variance_bounds": [[623, 2, 2, 0, "power", "Power used in the model. 2.0, the default corresponds to standard ARCH models that evolve in squares."], [623, 2, 2, 0, "resids", "Approximate residuals to use to compute the lower and upper bounds on the conditional variance"]], "arch.univariate.GARCH.__init__": [[435, 2, 2, 0, "o", "Order of the asymmetric innovation"], [435, 2, 2, 0, "p", "Order of the symmetric innovation"], [435, 2, 2, 0, "power", "Power to use with the innovations, abs(e) ** power.  Default is 2.0, which produces ARCH and related models. Using 1.0 produces AVARCH and related models.  Other powers can be specified, although these should be strictly positive, and usually larger than 0.25."], [435, 2, 2, 0, "q", "Order of the lagged (transformed) conditional variance"]], "arch.univariate.GARCH": [[625, 3, 1, 0, "backcast", "Construct values for backcasting to start the recursion"], [626, 3, 1, 0, "backcast_transform", "Transformation to apply to user-provided backcast values"], [627, 3, 1, 0, "bounds", "Returns bounds for parameters"], [628, 3, 1, 0, "compute_variance", "Compute the variance for the ARCH model"], [629, 3, 1, 0, "constraints", "Construct parameter constraints arrays for parameter estimation"], [630, 3, 1, 0, "forecast", "Forecast volatility from the model"], [631, 5, 1, 0, "name", "The name of the volatility process"], [632, 5, 1, 0, "num_params", "The number of parameters in the model"], [633, 3, 1, 0, "parameter_names", "Names of model parameters"], [634, 3, 1, 0, "simulate", "Simulate data from the model"], [635, 5, 1, 0, "start", "Index to use to start variance subarray selection"], [636, 3, 1, 0, "starting_values", "Returns starting values for the ARCH model"], [637, 5, 1, 0, "stop", "Index to use to stop variance subarray selection"], [638, 3, 1, 0, "update", "Compute the variance for a single observation"], [639, 5, 1, 0, "updateable", "Flag indicating that the volatility process supports update"], [640, 3, 1, 0, "variance_bounds", "Construct loose bounds for conditional variances."], [641, 5, 1, 0, "volatility_updater", "Get the volatility updater associated with the volatility process"]], "arch.univariate.GARCH.backcast": [[625, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.GARCH.backcast_transform": [[626, 2, 2, 0, "backcast", "User-provided backcast that approximates sigma2[0]."]], "arch.univariate.GARCH.bounds": [[627, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.GARCH.compute_variance": [[628, 2, 2, 0, "backcast", "Value to use when initializing ARCH recursion. Can be an ndarray when the model contains multiple components."], [628, 2, 2, 0, "parameters", "Model parameters"], [628, 2, 2, 0, "resids", "Vector of mean zero residuals"], [628, 2, 2, 0, "sigma2", "Array with same size as resids to store the conditional variance"], [628, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.GARCH.forecast": [[630, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [630, 2, 2, 0, "horizon", "Forecast horizon.  Must be 1 or larger.  Forecasts are produced for horizons in [1, horizon]."], [630, 2, 2, 0, "method", "Method to use when producing the forecast. The default is analytic."], [630, 2, 2, 0, "parameters", "Parameters required to forecast the volatility model"], [630, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [630, 2, 2, 0, "resids", "Residuals to use in the recursion"], [630, 2, 2, 0, "rng", "Callable random number generator required if method is 'simulation'. Must take a single shape input and return random samples numbers with that shape."], [630, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [630, 2, 2, 0, "start", "Index of the first observation to use as the starting point for the forecast.  Default is len(resids)."], [630, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.GARCH.simulate": [[634, 2, 2, 0, "burn", "Number of additional observations to generate when initializing the simulation"], [634, 2, 2, 0, "initial_value", "Scalar or array of initial values to use when initializing the simulation"], [634, 2, 2, 0, "nobs", "Number of data points to simulate"], [634, 2, 2, 0, "parameters", "Parameters required to simulate the volatility model"], [634, 2, 2, 0, "rng", "Callable function that takes a single integer input and returns a vector of random numbers"]], "arch.univariate.GARCH.starting_values": [[636, 2, 2, 0, "resids", "Array of (approximate) residuals to use when computing starting values"]], "arch.univariate.GARCH.update": [[638, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [638, 2, 2, 0, "index", "The numerical index of the variance to compute"], [638, 2, 2, 0, "parameters", "The variance model parameters"], [638, 2, 2, 0, "resids", "The residual array. Only uses resids[:index] when computing sigma2[index]"], [638, 2, 2, 0, "sigma2", "The array containing the variances. Only uses sigma2[:index] when computing sigma2[index]. The computed value is stored in sigma2[index]."], [638, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.GARCH.variance_bounds": [[640, 2, 2, 0, "power", "Power used in the model. 2.0, the default corresponds to standard ARCH models that evolve in squares."], [640, 2, 2, 0, "resids", "Approximate residuals to use to compute the lower and upper bounds on the conditional variance"]], "arch.univariate.GeneralizedError.__init__": [[436, 2, 2, 0, "random_state", "Deprecated since version 5.0: random_state is deprecated. Use seed instead."], [436, 2, 2, 0, "seed", "Random number generator instance or int to use. Set to ensure reproducibility. If using an int, the argument is passed to np.random.default_rng.  If not provided, default_rng is used with system-provided entropy."]], "arch.univariate.GeneralizedError": [[642, 3, 1, 0, "bounds", "Parameter bounds for use in optimization."], [643, 3, 1, 0, "cdf", "Cumulative distribution function"], [644, 3, 1, 0, "constraints", "Construct arrays to use in constrained optimization."], [645, 5, 1, 0, "generator", "The NumPy Generator or RandomState attached to the distribution"], [646, 3, 1, 0, "loglikelihood", "Computes the log-likelihood of assuming residuals are have a Generalized Error Distribution, conditional on the variance."], [647, 3, 1, 0, "moment", "Moment of order n"], [648, 5, 1, 0, "name", "The name of the distribution"], [649, 3, 1, 0, "parameter_names", "Names of distribution shape parameters"], [650, 3, 1, 0, "partial_moment", "Order n lower partial moment from -inf to z"], [651, 3, 1, 0, "ppf", "Inverse cumulative density function (ICDF)"], [652, 5, 1, 0, "random_state", "The NumPy RandomState attached to the distribution"], [653, 3, 1, 0, "simulate", "Simulates i.i.d. draws from the distribution"], [654, 3, 1, 0, "starting_values", "Construct starting values for use in optimization."]], "arch.univariate.GeneralizedError.bounds": [[642, 2, 2, 0, "resids", "Residuals to use when computing the bounds"]], "arch.univariate.GeneralizedError.cdf": [[643, 2, 2, 0, "parameters", "Distribution parameters. Use None for parameterless distributions."], [643, 2, 2, 0, "resids", "Values at which to evaluate the cdf"]], "arch.univariate.GeneralizedError.loglikelihood": [[646, 2, 2, 0, "individual", "Flag indicating whether to return the vector of individual log likelihoods (True) or the sum (False)"], [646, 2, 2, 0, "parameters", "Shape parameter of the GED distribution"], [646, 2, 2, 0, "resids", "The residuals to use in the log-likelihood calculation"], [646, 2, 2, 0, "sigma2", "Conditional variances of resids"]], "arch.univariate.GeneralizedError.moment": [[647, 2, 2, 0, "n", "Order of moment"], [647, 2, 2, 0, "parameters", "Distribution parameters. Use None for parameterless distributions."]], "arch.univariate.GeneralizedError.partial_moment": [[650, 2, 2, 0, "n", "Order of partial moment"], [650, 2, 2, 0, "parameters", "Distribution parameters.  Use None for parameterless distributions."], [650, 2, 2, 0, "z", "Upper bound for partial moment integral"]], "arch.univariate.GeneralizedError.ppf": [[651, 2, 2, 0, "parameters", "Distribution parameters. Use None for parameterless distributions."], [651, 2, 2, 0, "pits", "Probability-integral-transformed values in the interval (0, 1)."]], "arch.univariate.GeneralizedError.simulate": [[653, 2, 2, 0, "parameters", "Distribution parameters"]], "arch.univariate.GeneralizedError.starting_values": [[654, 2, 2, 0, "std_resid", "Estimated standardized residuals to use in computing starting values for the shape parameter"]], "arch.univariate.HARCH.__init__": [[437, 2, 2, 0, "lags", "List of lags to include in the model, or if scalar, includes all lags up the value"]], "arch.univariate.HARCH": [[655, 3, 1, 0, "backcast", "Construct values for backcasting to start the recursion"], [656, 3, 1, 0, "backcast_transform", "Transformation to apply to user-provided backcast values"], [657, 3, 1, 0, "bounds", "Returns bounds for parameters"], [658, 3, 1, 0, "compute_variance", "Compute the variance for the ARCH model"], [659, 3, 1, 0, "constraints", "Construct parameter constraints arrays for parameter estimation"], [660, 3, 1, 0, "forecast", "Forecast volatility from the model"], [661, 5, 1, 0, "name", "The name of the volatility process"], [662, 5, 1, 0, "num_params", "The number of parameters in the model"], [663, 3, 1, 0, "parameter_names", "Names of model parameters"], [664, 3, 1, 0, "simulate", "Simulate data from the model"], [665, 5, 1, 0, "start", "Index to use to start variance subarray selection"], [666, 3, 1, 0, "starting_values", "Returns starting values for the ARCH model"], [667, 5, 1, 0, "stop", "Index to use to stop variance subarray selection"], [668, 3, 1, 0, "update", "Compute the variance for a single observation"], [669, 5, 1, 0, "updateable", "Flag indicating that the volatility process supports update"], [670, 3, 1, 0, "variance_bounds", "Construct loose bounds for conditional variances."], [671, 5, 1, 0, "volatility_updater", "Get the volatility updater associated with the volatility process"]], "arch.univariate.HARCH.backcast": [[655, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.HARCH.backcast_transform": [[656, 2, 2, 0, "backcast", "User-provided backcast that approximates sigma2[0]."]], "arch.univariate.HARCH.bounds": [[657, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.HARCH.compute_variance": [[658, 2, 2, 0, "backcast", "Value to use when initializing ARCH recursion. Can be an ndarray when the model contains multiple components."], [658, 2, 2, 0, "parameters", "Model parameters"], [658, 2, 2, 0, "resids", "Vector of mean zero residuals"], [658, 2, 2, 0, "sigma2", "Array with same size as resids to store the conditional variance"], [658, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.HARCH.forecast": [[660, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [660, 2, 2, 0, "horizon", "Forecast horizon.  Must be 1 or larger.  Forecasts are produced for horizons in [1, horizon]."], [660, 2, 2, 0, "method", "Method to use when producing the forecast. The default is analytic."], [660, 2, 2, 0, "parameters", "Parameters required to forecast the volatility model"], [660, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [660, 2, 2, 0, "resids", "Residuals to use in the recursion"], [660, 2, 2, 0, "rng", "Callable random number generator required if method is 'simulation'. Must take a single shape input and return random samples numbers with that shape."], [660, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [660, 2, 2, 0, "start", "Index of the first observation to use as the starting point for the forecast.  Default is len(resids)."], [660, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.HARCH.simulate": [[664, 2, 2, 0, "burn", "Number of additional observations to generate when initializing the simulation"], [664, 2, 2, 0, "initial_value", "Scalar or array of initial values to use when initializing the simulation"], [664, 2, 2, 0, "nobs", "Number of data points to simulate"], [664, 2, 2, 0, "parameters", "Parameters required to simulate the volatility model"], [664, 2, 2, 0, "rng", "Callable function that takes a single integer input and returns a vector of random numbers"]], "arch.univariate.HARCH.starting_values": [[666, 2, 2, 0, "resids", "Array of (approximate) residuals to use when computing starting values"]], "arch.univariate.HARCH.update": [[668, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [668, 2, 2, 0, "index", "The numerical index of the variance to compute"], [668, 2, 2, 0, "parameters", "The variance model parameters"], [668, 2, 2, 0, "resids", "The residual array. Only uses resids[:index] when computing sigma2[index]"], [668, 2, 2, 0, "sigma2", "The array containing the variances. Only uses sigma2[:index] when computing sigma2[index]. The computed value is stored in sigma2[index]."], [668, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.HARCH.variance_bounds": [[670, 2, 2, 0, "power", "Power used in the model. 2.0, the default corresponds to standard ARCH models that evolve in squares."], [670, 2, 2, 0, "resids", "Approximate residuals to use to compute the lower and upper bounds on the conditional variance"]], "arch.univariate.HARX.__init__": [[438, 2, 2, 0, "constant", "Flag whether the model should include a constant"], [438, 2, 2, 0, "distribution", "Error distribution to use in the model"], [438, 2, 2, 0, "hold_back", "Number of observations at the start of the sample to exclude when estimating model parameters.  Used when comparing models with different lag lengths to estimate on the common sample."], [438, 2, 2, 0, "lags", "Description of lag structure of the HAR."], [438, 2, 2, 0, "rescale", "Flag indicating whether to automatically rescale data if the scale of the data is likely to produce convergence issues when estimating model parameters. If False, the model is estimated on the data without transformation.  If True, than y is rescaled and the new scale is reported in the estimation results."], [438, 2, 2, 0, "use_rotated", "Flag indicating to use the alternative rotated form of the HAR where HAR lags do not overlap"], [438, 2, 2, 0, "volatility", "Volatility process to use in the model"], [438, 2, 2, 0, "x", "nobs by k element array containing exogenous regressors"], [438, 2, 2, 0, "y", "nobs element vector containing the dependent variable"]], "arch.univariate.HARX": [[672, 3, 1, 0, "bounds", "Construct bounds for parameters to use in non-linear optimization"], [673, 3, 1, 0, "compute_param_cov", "Computes parameter covariances using numerical derivatives."], [674, 3, 1, 0, "constraints", "Construct linear constraint arrays  for use in non-linear optimization"], [675, 5, 1, 0, "distribution", "Set or gets the error distribution"], [676, 3, 1, 0, "fit", "Estimate model parameters"], [677, 3, 1, 0, "fix", "Allows an ARCHModelFixedResult to be constructed from fixed parameters."], [678, 3, 1, 0, "forecast", "Construct forecasts from estimated model"], [679, 5, 1, 0, "name", "The name of the model."], [680, 5, 1, 0, "num_params", "Returns the number of parameters"], [681, 3, 1, 0, "parameter_names", "List of parameters names"], [682, 3, 1, 0, "resids", "Compute model residuals"], [683, 3, 1, 0, "simulate", "Simulates data from a linear regression, AR or HAR models"], [684, 3, 1, 0, "starting_values", "Returns starting values for the mean model, often the same as the values returned from fit"], [685, 5, 1, 0, "volatility", "Set or gets the volatility process"], [686, 5, 1, 0, "x", "Gets the value of the exogenous regressors in the model"], [687, 5, 1, 0, "y", "Returns the dependent variable"]], "arch.univariate.HARX.compute_param_cov": [[673, 2, 2, 0, "backcast", "Value to use for pre-sample observations"], [673, 2, 2, 0, "params", "Model parameters"], [673, 2, 2, 0, "robust", "Flag indicating whether to use robust standard errors (True) or classic MLE (False)"]], "arch.univariate.HARX.fit": [[676, 2, 2, 0, "backcast", "Value to use as backcast. Should be measure \\sigma^2_0 since model-specific non-linear transformations are applied to value before computing the variance recursions."], [676, 2, 2, 0, "cov_type", "Estimation method of parameter covariance.  Supported options are 'robust', which does not assume the Information Matrix Equality holds and 'classic' which does.  In the ARCH literature, 'robust' corresponds to Bollerslev-Wooldridge covariance estimator."], [676, 2, 2, 0, "disp", "Either 'final' to print optimization result or 'off' to display nothing. If using a boolean, False is \"off\" and True is \"final\""], [676, 2, 2, 0, "first_obs", "First observation to use when estimating model"], [676, 2, 2, 0, "last_obs", "Last observation to use when estimating model"], [676, 2, 2, 0, "options", "Options to pass to scipy.optimize.minimize.  Valid entries include 'ftol', 'eps', 'disp', and 'maxiter'."], [676, 2, 2, 0, "show_warning", "Flag indicating whether convergence warnings should be shown."], [676, 2, 2, 0, "starting_values", "Array of starting values to use.  If not provided, starting values are constructed by the model components."], [676, 2, 2, 0, "tol", "Tolerance for termination."], [676, 2, 2, 0, "update_freq", "Frequency of iteration updates.  Output is generated every update_freq iterations. Set to 0 to disable iterative output."]], "arch.univariate.HARX.fix": [[677, 2, 2, 0, "first_obs", "First observation to use when fixing model"], [677, 2, 2, 0, "last_obs", "Last observation to use when fixing model"], [677, 2, 2, 0, "params", "User specified parameters to use when generating the result. Must have the correct number of parameters for a given choice of mean model, volatility model and distribution."]], "arch.univariate.HARX.forecast": [[678, 2, 2, 0, "align", "Either 'origin' or 'target'.  When set of 'origin', the t-th row of forecasts contains the forecasts for t+1, t+2, ..., t+h. When set to 'target', the t-th row contains the 1-step ahead forecast from time t-1, the 2 step from time t-2, ..., and the h-step from time t-h.  'target' simplified computing forecast errors since the realization and h-step forecast are aligned."], [678, 2, 2, 0, "horizon", "Number of steps to forecast"], [678, 2, 2, 0, "method", "Method to use when producing the forecast. The default is analytic. The method only affects the variance forecast generation.  Not all volatility models support all methods. In particular, volatility models that do not evolve in squares such as EGARCH or TARCH do not support the 'analytic' method for horizons > 1."], [678, 2, 2, 0, "params", "Parameters required to forecast. Must be identical in shape to the parameters computed by fitting the model."], [678, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [678, 2, 2, 0, "reindex", "Whether to reindex the forecasts to have the same dimension as the series being forecast. Prior to 4.18 this was the default. As of 4.19 this is now optional. If not provided, a warning is raised about the future change in the default which will occur after September 2021."], [678, 2, 2, 0, "rng", "Custom random number generator to use in simulation-based forecasts. Must produce random samples using the syntax rng(size) where size the 2-element tuple (simulations, horizon)."], [678, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [678, 2, 2, 0, "start", "An integer, datetime or str indicating the first observation to produce the forecast for.  Datetimes can only be used with pandas inputs that have a datetime index. Strings must be convertible to a date time, such as in '1945-01-01'."], [678, 2, 2, 0, "x", "Values to use for exogenous regressors if any are included in the model. Three formats are accepted:"]], "arch.univariate.HARX.resids": [[682, 2, 2, 0, "params", "Model parameters"], [682, 2, 2, 0, "regressors", "Alternative regressor values to use when computing model residuals"], [682, 2, 2, 0, "y", "Alternative values to use when computing model residuals"]], "arch.univariate.HARX.simulate": [[683, 2, 2, 0, "burn", "Number of values to simulate to initialize the model and remove dependence on initial values."], [683, 2, 2, 0, "initial_value", "Either a scalar value or max(lags) array set of initial values to use when initializing the model.  If omitted, 0.0 is used."], [683, 2, 2, 0, "initial_value_vol", "An array or scalar to use when initializing the volatility process."], [683, 2, 2, 0, "nobs", "Length of series to simulate"], [683, 2, 2, 0, "params", "Parameters to use when simulating the model.  Parameter order is [mean volatility distribution] where the parameters of the mean model are ordered [constant lag[0] lag[1] ... lag[p] ex[0] ... ex[k-1]] where lag[j] indicates the coefficient on the jth lag in the model and ex[j] is the coefficient on the jth exogenous variable."], [683, 2, 2, 0, "x", "nobs + burn by k array of exogenous variables to include in the simulation."]], "arch.univariate.LS.__init__": [[439, 2, 2, 0, "constant", "Flag whether the model should include a constant"], [439, 2, 2, 0, "distribution", "Error distribution to use in the model"], [439, 2, 2, 0, "hold_back", "Number of observations at the start of the sample to exclude when estimating model parameters.  Used when comparing models with different lag lengths to estimate on the common sample."], [439, 2, 2, 0, "rescale", "Flag indicating whether to automatically rescale data if the scale of the data is likely to produce convergence issues when estimating model parameters. If False, the model is estimated on the data without transformation.  If True, than y is rescaled and the new scale is reported in the estimation results."], [439, 2, 2, 0, "volatility", "Volatility process to use in the model"], [439, 2, 2, 0, "y", "nobs by k element array containing exogenous regressors"]], "arch.univariate.LS": [[688, 3, 1, 0, "bounds", "Construct bounds for parameters to use in non-linear optimization"], [689, 3, 1, 0, "compute_param_cov", "Computes parameter covariances using numerical derivatives."], [690, 3, 1, 0, "constraints", "Construct linear constraint arrays  for use in non-linear optimization"], [691, 5, 1, 0, "distribution", "Set or gets the error distribution"], [692, 3, 1, 0, "fit", "Estimate model parameters"], [693, 3, 1, 0, "fix", "Allows an ARCHModelFixedResult to be constructed from fixed parameters."], [694, 3, 1, 0, "forecast", "Construct forecasts from estimated model"], [695, 5, 1, 0, "name", "The name of the model."], [696, 5, 1, 0, "num_params", "Returns the number of parameters"], [697, 3, 1, 0, "parameter_names", "List of parameters names"], [698, 3, 1, 0, "resids", "Compute model residuals"], [699, 3, 1, 0, "simulate", "Simulates data from a linear regression, AR or HAR models"], [700, 3, 1, 0, "starting_values", "Returns starting values for the mean model, often the same as the values returned from fit"], [701, 5, 1, 0, "volatility", "Set or gets the volatility process"], [702, 5, 1, 0, "x", "Gets the value of the exogenous regressors in the model"], [703, 5, 1, 0, "y", "Returns the dependent variable"]], "arch.univariate.LS.compute_param_cov": [[689, 2, 2, 0, "backcast", "Value to use for pre-sample observations"], [689, 2, 2, 0, "params", "Model parameters"], [689, 2, 2, 0, "robust", "Flag indicating whether to use robust standard errors (True) or classic MLE (False)"]], "arch.univariate.LS.fit": [[692, 2, 2, 0, "backcast", "Value to use as backcast. Should be measure \\sigma^2_0 since model-specific non-linear transformations are applied to value before computing the variance recursions."], [692, 2, 2, 0, "cov_type", "Estimation method of parameter covariance.  Supported options are 'robust', which does not assume the Information Matrix Equality holds and 'classic' which does.  In the ARCH literature, 'robust' corresponds to Bollerslev-Wooldridge covariance estimator."], [692, 2, 2, 0, "disp", "Either 'final' to print optimization result or 'off' to display nothing. If using a boolean, False is \"off\" and True is \"final\""], [692, 2, 2, 0, "first_obs", "First observation to use when estimating model"], [692, 2, 2, 0, "last_obs", "Last observation to use when estimating model"], [692, 2, 2, 0, "options", "Options to pass to scipy.optimize.minimize.  Valid entries include 'ftol', 'eps', 'disp', and 'maxiter'."], [692, 2, 2, 0, "show_warning", "Flag indicating whether convergence warnings should be shown."], [692, 2, 2, 0, "starting_values", "Array of starting values to use.  If not provided, starting values are constructed by the model components."], [692, 2, 2, 0, "tol", "Tolerance for termination."], [692, 2, 2, 0, "update_freq", "Frequency of iteration updates.  Output is generated every update_freq iterations. Set to 0 to disable iterative output."]], "arch.univariate.LS.fix": [[693, 2, 2, 0, "first_obs", "First observation to use when fixing model"], [693, 2, 2, 0, "last_obs", "Last observation to use when fixing model"], [693, 2, 2, 0, "params", "User specified parameters to use when generating the result. Must have the correct number of parameters for a given choice of mean model, volatility model and distribution."]], "arch.univariate.LS.forecast": [[694, 2, 2, 0, "align", "Either 'origin' or 'target'.  When set of 'origin', the t-th row of forecasts contains the forecasts for t+1, t+2, ..., t+h. When set to 'target', the t-th row contains the 1-step ahead forecast from time t-1, the 2 step from time t-2, ..., and the h-step from time t-h.  'target' simplified computing forecast errors since the realization and h-step forecast are aligned."], [694, 2, 2, 0, "horizon", "Number of steps to forecast"], [694, 2, 2, 0, "method", "Method to use when producing the forecast. The default is analytic. The method only affects the variance forecast generation.  Not all volatility models support all methods. In particular, volatility models that do not evolve in squares such as EGARCH or TARCH do not support the 'analytic' method for horizons > 1."], [694, 2, 2, 0, "params", "Parameters required to forecast. Must be identical in shape to the parameters computed by fitting the model."], [694, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [694, 2, 2, 0, "reindex", "Whether to reindex the forecasts to have the same dimension as the series being forecast. Prior to 4.18 this was the default. As of 4.19 this is now optional. If not provided, a warning is raised about the future change in the default which will occur after September 2021."], [694, 2, 2, 0, "rng", "Custom random number generator to use in simulation-based forecasts. Must produce random samples using the syntax rng(size) where size the 2-element tuple (simulations, horizon)."], [694, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [694, 2, 2, 0, "start", "An integer, datetime or str indicating the first observation to produce the forecast for.  Datetimes can only be used with pandas inputs that have a datetime index. Strings must be convertible to a date time, such as in '1945-01-01'."], [694, 2, 2, 0, "x", "Values to use for exogenous regressors if any are included in the model. Three formats are accepted:"]], "arch.univariate.LS.resids": [[698, 2, 2, 0, "params", "Model parameters"], [698, 2, 2, 0, "regressors", "Alternative regressor values to use when computing model residuals"], [698, 2, 2, 0, "y", "Alternative values to use when computing model residuals"]], "arch.univariate.LS.simulate": [[699, 2, 2, 0, "burn", "Number of values to simulate to initialize the model and remove dependence on initial values."], [699, 2, 2, 0, "initial_value", "Either a scalar value or max(lags) array set of initial values to use when initializing the model.  If omitted, 0.0 is used."], [699, 2, 2, 0, "initial_value_vol", "An array or scalar to use when initializing the volatility process."], [699, 2, 2, 0, "nobs", "Length of series to simulate"], [699, 2, 2, 0, "params", "Parameters to use when simulating the model.  Parameter order is [mean volatility distribution] where the parameters of the mean model are ordered [constant lag[0] lag[1] ... lag[p] ex[0] ... ex[k-1]] where lag[j] indicates the coefficient on the jth lag in the model and ex[j] is the coefficient on the jth exogenous variable."], [699, 2, 2, 0, "x", "nobs + burn by k array of exogenous variables to include in the simulation."]], "arch.univariate.MIDASHyperbolic.__init__": [[440, 2, 2, 0, "asym", "Flag indicating whether to include an asymmetric term"], [440, 2, 2, 0, "m", "Length of maximum lag to include in the model"]], "arch.univariate.MIDASHyperbolic": [[704, 3, 1, 0, "backcast", "Construct values for backcasting to start the recursion"], [705, 3, 1, 0, "backcast_transform", "Transformation to apply to user-provided backcast values"], [706, 3, 1, 0, "bounds", "Returns bounds for parameters"], [707, 3, 1, 0, "compute_variance", "Compute the variance for the ARCH model"], [708, 3, 1, 0, "constraints", "Constraints"], [709, 3, 1, 0, "forecast", "Forecast volatility from the model"], [710, 5, 1, 0, "name", "The name of the volatility process"], [711, 5, 1, 0, "num_params", "The number of parameters in the model"], [712, 3, 1, 0, "parameter_names", "Names of model parameters"], [713, 3, 1, 0, "simulate", "Simulate data from the model"], [714, 5, 1, 0, "start", "Index to use to start variance subarray selection"], [715, 3, 1, 0, "starting_values", "Returns starting values for the ARCH model"], [716, 5, 1, 0, "stop", "Index to use to stop variance subarray selection"], [717, 3, 1, 0, "update", "Compute the variance for a single observation"], [718, 5, 1, 0, "updateable", "Flag indicating that the volatility process supports update"], [719, 3, 1, 0, "variance_bounds", "Construct loose bounds for conditional variances."], [720, 5, 1, 0, "volatility_updater", "Get the volatility updater associated with the volatility process"]], "arch.univariate.MIDASHyperbolic.backcast": [[704, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.MIDASHyperbolic.backcast_transform": [[705, 2, 2, 0, "backcast", "User-provided backcast that approximates sigma2[0]."]], "arch.univariate.MIDASHyperbolic.bounds": [[706, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.MIDASHyperbolic.compute_variance": [[707, 2, 2, 0, "backcast", "Value to use when initializing ARCH recursion. Can be an ndarray when the model contains multiple components."], [707, 2, 2, 0, "parameters", "Model parameters"], [707, 2, 2, 0, "resids", "Vector of mean zero residuals"], [707, 2, 2, 0, "sigma2", "Array with same size as resids to store the conditional variance"], [707, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.MIDASHyperbolic.forecast": [[709, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [709, 2, 2, 0, "horizon", "Forecast horizon.  Must be 1 or larger.  Forecasts are produced for horizons in [1, horizon]."], [709, 2, 2, 0, "method", "Method to use when producing the forecast. The default is analytic."], [709, 2, 2, 0, "parameters", "Parameters required to forecast the volatility model"], [709, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [709, 2, 2, 0, "resids", "Residuals to use in the recursion"], [709, 2, 2, 0, "rng", "Callable random number generator required if method is 'simulation'. Must take a single shape input and return random samples numbers with that shape."], [709, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [709, 2, 2, 0, "start", "Index of the first observation to use as the starting point for the forecast.  Default is len(resids)."], [709, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.MIDASHyperbolic.simulate": [[713, 2, 2, 0, "burn", "Number of additional observations to generate when initializing the simulation"], [713, 2, 2, 0, "initial_value", "Scalar or array of initial values to use when initializing the simulation"], [713, 2, 2, 0, "nobs", "Number of data points to simulate"], [713, 2, 2, 0, "parameters", "Parameters required to simulate the volatility model"], [713, 2, 2, 0, "rng", "Callable function that takes a single integer input and returns a vector of random numbers"]], "arch.univariate.MIDASHyperbolic.starting_values": [[715, 2, 2, 0, "resids", "Array of (approximate) residuals to use when computing starting values"]], "arch.univariate.MIDASHyperbolic.update": [[717, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [717, 2, 2, 0, "index", "The numerical index of the variance to compute"], [717, 2, 2, 0, "parameters", "The variance model parameters"], [717, 2, 2, 0, "resids", "The residual array. Only uses resids[:index] when computing sigma2[index]"], [717, 2, 2, 0, "sigma2", "The array containing the variances. Only uses sigma2[:index] when computing sigma2[index]. The computed value is stored in sigma2[index]."], [717, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.MIDASHyperbolic.variance_bounds": [[719, 2, 2, 0, "power", "Power used in the model. 2.0, the default corresponds to standard ARCH models that evolve in squares."], [719, 2, 2, 0, "resids", "Approximate residuals to use to compute the lower and upper bounds on the conditional variance"]], "arch.univariate.Normal.__init__": [[441, 2, 2, 0, "random_state", "Deprecated since version 5.0: random_state is deprecated. Use seed instead."], [441, 2, 2, 0, "seed", "Random number generator instance or int to use. Set to ensure reproducibility. If using an int, the argument is passed to np.random.default_rng.  If not provided, default_rng is used with system-provided entropy."]], "arch.univariate.Normal": [[721, 3, 1, 0, "bounds", "Parameter bounds for use in optimization."], [722, 3, 1, 0, "cdf", "Cumulative distribution function"], [723, 3, 1, 0, "constraints", "Construct arrays to use in constrained optimization."], [724, 5, 1, 0, "generator", "The NumPy Generator or RandomState attached to the distribution"], [725, 3, 1, 0, "loglikelihood", "Computes the log-likelihood of assuming residuals are normally distributed, conditional on the variance"], [726, 3, 1, 0, "moment", "Moment of order n"], [727, 5, 1, 0, "name", "The name of the distribution"], [728, 3, 1, 0, "parameter_names", "Names of distribution shape parameters"], [729, 3, 1, 0, "partial_moment", "Order n lower partial moment from -inf to z"], [730, 3, 1, 0, "ppf", "Inverse cumulative density function (ICDF)"], [731, 5, 1, 0, "random_state", "The NumPy RandomState attached to the distribution"], [732, 3, 1, 0, "simulate", "Simulates i.i.d. draws from the distribution"], [733, 3, 1, 0, "starting_values", "Construct starting values for use in optimization."]], "arch.univariate.Normal.bounds": [[721, 2, 2, 0, "resids", "Residuals to use when computing the bounds"]], "arch.univariate.Normal.cdf": [[722, 2, 2, 0, "parameters", "Distribution parameters. Use None for parameterless distributions."], [722, 2, 2, 0, "resids", "Values at which to evaluate the cdf"]], "arch.univariate.Normal.loglikelihood": [[725, 2, 2, 0, "individual", "Flag indicating whether to return the vector of individual log likelihoods (True) or the sum (False)"], [725, 2, 2, 0, "parameters", "The normal likelihood has no shape parameters. Empty since the standard normal has no shape parameters."], [725, 2, 2, 0, "resids", "The residuals to use in the log-likelihood calculation"], [725, 2, 2, 0, "sigma2", "Conditional variances of resids"]], "arch.univariate.Normal.moment": [[726, 2, 2, 0, "n", "Order of moment"], [726, 2, 2, 0, "parameters", "Distribution parameters. Use None for parameterless distributions."]], "arch.univariate.Normal.partial_moment": [[729, 2, 2, 0, "n", "Order of partial moment"], [729, 2, 2, 0, "parameters", "Distribution parameters.  Use None for parameterless distributions."], [729, 2, 2, 0, "z", "Upper bound for partial moment integral"]], "arch.univariate.Normal.ppf": [[730, 2, 2, 0, "parameters", "Distribution parameters. Use None for parameterless distributions."], [730, 2, 2, 0, "pits", "Probability-integral-transformed values in the interval (0, 1)."]], "arch.univariate.Normal.simulate": [[732, 2, 2, 0, "parameters", "Distribution parameters"]], "arch.univariate.Normal.starting_values": [[733, 2, 2, 0, "std_resid", "Estimated standardized residuals to use in computing starting values for the shape parameter"]], "arch.univariate.RiskMetrics2006.__init__": [[442, 2, 2, 0, "kmax", "Number of components. Default is 14."], [442, 2, 2, 0, "rho", "Relative scale of adjacent cycles. Default is sqrt(2)"], [442, 2, 2, 0, "tau0", "Length of long cycle. Default is 1560."], [442, 2, 2, 0, "tau1", "Length of short cycle. Default is 4."]], "arch.univariate.RiskMetrics2006": [[734, 3, 1, 0, "backcast", "Construct values for backcasting to start the recursion"], [735, 3, 1, 0, "backcast_transform", "Transformation to apply to user-provided backcast values"], [736, 3, 1, 0, "bounds", "Returns bounds for parameters"], [737, 3, 1, 0, "compute_variance", "Compute the variance for the ARCH model"], [738, 3, 1, 0, "constraints", "Construct parameter constraints arrays for parameter estimation"], [739, 3, 1, 0, "forecast", "Forecast volatility from the model"], [740, 5, 1, 0, "name", "The name of the volatility process"], [741, 5, 1, 0, "num_params", "The number of parameters in the model"], [742, 3, 1, 0, "parameter_names", "Names of model parameters"], [743, 3, 1, 0, "simulate", "Simulate data from the model"], [744, 5, 1, 0, "start", "Index to use to start variance subarray selection"], [745, 3, 1, 0, "starting_values", "Returns starting values for the ARCH model"], [746, 5, 1, 0, "stop", "Index to use to stop variance subarray selection"], [747, 3, 1, 0, "update", "Compute the variance for a single observation"], [748, 5, 1, 0, "updateable", "Flag indicating that the volatility process supports update"], [749, 3, 1, 0, "variance_bounds", "Construct loose bounds for conditional variances."], [750, 5, 1, 0, "volatility_updater", "Get the volatility updater associated with the volatility process"]], "arch.univariate.RiskMetrics2006.backcast": [[734, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.RiskMetrics2006.backcast_transform": [[735, 2, 2, 0, "backcast", "User-provided backcast that approximates sigma2[0]."]], "arch.univariate.RiskMetrics2006.bounds": [[736, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.RiskMetrics2006.compute_variance": [[737, 2, 2, 0, "backcast", "Value to use when initializing ARCH recursion. Can be an ndarray when the model contains multiple components."], [737, 2, 2, 0, "parameters", "Model parameters"], [737, 2, 2, 0, "resids", "Vector of mean zero residuals"], [737, 2, 2, 0, "sigma2", "Array with same size as resids to store the conditional variance"], [737, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.RiskMetrics2006.forecast": [[739, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [739, 2, 2, 0, "horizon", "Forecast horizon.  Must be 1 or larger.  Forecasts are produced for horizons in [1, horizon]."], [739, 2, 2, 0, "method", "Method to use when producing the forecast. The default is analytic."], [739, 2, 2, 0, "parameters", "Parameters required to forecast the volatility model"], [739, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [739, 2, 2, 0, "resids", "Residuals to use in the recursion"], [739, 2, 2, 0, "rng", "Callable random number generator required if method is 'simulation'. Must take a single shape input and return random samples numbers with that shape."], [739, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [739, 2, 2, 0, "start", "Index of the first observation to use as the starting point for the forecast.  Default is len(resids)."], [739, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.RiskMetrics2006.simulate": [[743, 2, 2, 0, "burn", "Number of additional observations to generate when initializing the simulation"], [743, 2, 2, 0, "initial_value", "Scalar or array of initial values to use when initializing the simulation"], [743, 2, 2, 0, "nobs", "Number of data points to simulate"], [743, 2, 2, 0, "parameters", "Parameters required to simulate the volatility model"], [743, 2, 2, 0, "rng", "Callable function that takes a single integer input and returns a vector of random numbers"]], "arch.univariate.RiskMetrics2006.starting_values": [[745, 2, 2, 0, "resids", "Array of (approximate) residuals to use when computing starting values"]], "arch.univariate.RiskMetrics2006.update": [[747, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [747, 2, 2, 0, "index", "The numerical index of the variance to compute"], [747, 2, 2, 0, "parameters", "The variance model parameters"], [747, 2, 2, 0, "resids", "The residual array. Only uses resids[:index] when computing sigma2[index]"], [747, 2, 2, 0, "sigma2", "The array containing the variances. Only uses sigma2[:index] when computing sigma2[index]. The computed value is stored in sigma2[index]."], [747, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.RiskMetrics2006.variance_bounds": [[749, 2, 2, 0, "power", "Power used in the model. 2.0, the default corresponds to standard ARCH models that evolve in squares."], [749, 2, 2, 0, "resids", "Approximate residuals to use to compute the lower and upper bounds on the conditional variance"]], "arch.univariate.SkewStudent.__init__": [[443, 2, 2, 0, "random_state", "Deprecated since version 5.0: random_state is deprecated. Use seed instead."], [443, 2, 2, 0, "seed", "Random number generator instance or int to use. Set to ensure reproducibility. If using an int, the argument is passed to np.random.default_rng.  If not provided, default_rng is used with system-provided entropy."]], "arch.univariate.SkewStudent": [[751, 3, 1, 0, "bounds", "Parameter bounds for use in optimization."], [752, 3, 1, 0, "cdf", "Cumulative distribution function"], [753, 3, 1, 0, "constraints", "Construct arrays to use in constrained optimization."], [754, 5, 1, 0, "generator", "The NumPy Generator or RandomState attached to the distribution"], [755, 3, 1, 0, "loglikelihood", "Computes the log-likelihood of assuming residuals are have a standardized (to have unit variance) Skew Student's t distribution, conditional on the variance."], [756, 3, 1, 0, "moment", "Moment of order n"], [757, 5, 1, 0, "name", "The name of the distribution"], [758, 3, 1, 0, "parameter_names", "Names of distribution shape parameters"], [759, 3, 1, 0, "partial_moment", "Order n lower partial moment from -inf to z"], [760, 3, 1, 0, "ppf", "Inverse cumulative density function (ICDF)"], [761, 5, 1, 0, "random_state", "The NumPy RandomState attached to the distribution"], [762, 3, 1, 0, "simulate", "Simulates i.i.d. draws from the distribution"], [763, 3, 1, 0, "starting_values", "Construct starting values for use in optimization."]], "arch.univariate.SkewStudent.bounds": [[751, 2, 2, 0, "resids", "Residuals to use when computing the bounds"]], "arch.univariate.SkewStudent.cdf": [[752, 2, 2, 0, "parameters", "Distribution parameters. Use None for parameterless distributions."], [752, 2, 2, 0, "resids", "Values at which to evaluate the cdf"]], "arch.univariate.SkewStudent.loglikelihood": [[755, 2, 2, 0, "individual", "Flag indicating whether to return the vector of individual log likelihoods (True) or the sum (False)"], [755, 2, 2, 0, "parameters", "Shape parameter of the skew-t distribution"], [755, 2, 2, 0, "resids", "The residuals to use in the log-likelihood calculation"], [755, 2, 2, 0, "sigma2", "Conditional variances of resids"]], "arch.univariate.SkewStudent.moment": [[756, 2, 2, 0, "n", "Order of moment"], [756, 2, 2, 0, "parameters", "Distribution parameters. Use None for parameterless distributions."]], "arch.univariate.SkewStudent.partial_moment": [[759, 2, 2, 0, "n", "Order of partial moment"], [759, 2, 2, 0, "parameters", "Distribution parameters.  Use None for parameterless distributions."], [759, 2, 2, 0, "z", "Upper bound for partial moment integral"]], "arch.univariate.SkewStudent.ppf": [[760, 2, 2, 0, "parameters", "Distribution parameters. Use None for parameterless distributions."], [760, 2, 2, 0, "pits", "Probability-integral-transformed values in the interval (0, 1)."]], "arch.univariate.SkewStudent.simulate": [[762, 2, 2, 0, "parameters", "Distribution parameters"]], "arch.univariate.SkewStudent.starting_values": [[763, 2, 2, 0, "std_resid", "Estimated standardized residuals to use in computing starting values for the shape parameter"]], "arch.univariate.StudentsT.__init__": [[444, 2, 2, 0, "random_state", "Deprecated since version 5.0: random_state is deprecated. Use seed instead."], [444, 2, 2, 0, "seed", "Random number generator instance or int to use. Set to ensure reproducibility. If using an int, the argument is passed to np.random.default_rng.  If not provided, default_rng is used with system-provided entropy."]], "arch.univariate.StudentsT": [[764, 3, 1, 0, "bounds", "Parameter bounds for use in optimization."], [765, 3, 1, 0, "cdf", "Cumulative distribution function"], [766, 3, 1, 0, "constraints", "Construct arrays to use in constrained optimization."], [767, 5, 1, 0, "generator", "The NumPy Generator or RandomState attached to the distribution"], [768, 3, 1, 0, "loglikelihood", "Computes the log-likelihood of assuming residuals are have a standardized (to have unit variance) Student's t distribution, conditional on the variance."], [769, 3, 1, 0, "moment", "Moment of order n"], [770, 5, 1, 0, "name", "The name of the distribution"], [771, 3, 1, 0, "parameter_names", "Names of distribution shape parameters"], [772, 3, 1, 0, "partial_moment", "Order n lower partial moment from -inf to z"], [773, 3, 1, 0, "ppf", "Inverse cumulative density function (ICDF)"], [774, 5, 1, 0, "random_state", "The NumPy RandomState attached to the distribution"], [775, 3, 1, 0, "simulate", "Simulates i.i.d. draws from the distribution"], [776, 3, 1, 0, "starting_values", "Construct starting values for use in optimization."]], "arch.univariate.StudentsT.bounds": [[764, 2, 2, 0, "resids", "Residuals to use when computing the bounds"]], "arch.univariate.StudentsT.cdf": [[765, 2, 2, 0, "parameters", "Distribution parameters. Use None for parameterless distributions."], [765, 2, 2, 0, "resids", "Values at which to evaluate the cdf"]], "arch.univariate.StudentsT.loglikelihood": [[768, 2, 2, 0, "individual", "Flag indicating whether to return the vector of individual log likelihoods (True) or the sum (False)"], [768, 2, 2, 0, "parameters", "Shape parameter of the t distribution"], [768, 2, 2, 0, "resids", "The residuals to use in the log-likelihood calculation"], [768, 2, 2, 0, "sigma2", "Conditional variances of resids"]], "arch.univariate.StudentsT.moment": [[769, 2, 2, 0, "n", "Order of moment"], [769, 2, 2, 0, "parameters", "Distribution parameters. Use None for parameterless distributions."]], "arch.univariate.StudentsT.partial_moment": [[772, 2, 2, 0, "n", "Order of partial moment"], [772, 2, 2, 0, "parameters", "Distribution parameters.  Use None for parameterless distributions."], [772, 2, 2, 0, "z", "Upper bound for partial moment integral"]], "arch.univariate.StudentsT.ppf": [[773, 2, 2, 0, "parameters", "Distribution parameters. Use None for parameterless distributions."], [773, 2, 2, 0, "pits", "Probability-integral-transformed values in the interval (0, 1)."]], "arch.univariate.StudentsT.simulate": [[775, 2, 2, 0, "parameters", "Distribution parameters"]], "arch.univariate.StudentsT.starting_values": [[776, 2, 2, 0, "std_resid", "Estimated standardized residuals to use in computing starting values for the shape parameter"]], "arch.univariate.ZeroMean.__init__": [[445, 2, 2, 0, "distribution", "Error distribution to use in the model"], [445, 2, 2, 0, "hold_back", "Number of observations at the start of the sample to exclude when estimating model parameters.  Used when comparing models with different lag lengths to estimate on the common sample."], [445, 2, 2, 0, "rescale", "Flag indicating whether to automatically rescale data if the scale of the data is likely to produce convergence issues when estimating model parameters. If False, the model is estimated on the data without transformation.  If True, than y is rescaled and the new scale is reported in the estimation results."], [445, 2, 2, 0, "volatility", "Volatility process to use in the model"], [445, 2, 2, 0, "y", "nobs element vector containing the dependent variable"]], "arch.univariate.ZeroMean": [[777, 3, 1, 0, "bounds", "Construct bounds for parameters to use in non-linear optimization"], [778, 3, 1, 0, "compute_param_cov", "Computes parameter covariances using numerical derivatives."], [779, 3, 1, 0, "constraints", "Construct linear constraint arrays  for use in non-linear optimization"], [780, 5, 1, 0, "distribution", "Set or gets the error distribution"], [781, 3, 1, 0, "fit", "Estimate model parameters"], [782, 3, 1, 0, "fix", "Allows an ARCHModelFixedResult to be constructed from fixed parameters."], [783, 3, 1, 0, "forecast", "Construct forecasts from estimated model"], [784, 5, 1, 0, "name", "The name of the model."], [785, 5, 1, 0, "num_params", "Returns the number of parameters"], [786, 3, 1, 0, "parameter_names", "List of parameters names"], [787, 3, 1, 0, "resids", "Compute model residuals"], [788, 3, 1, 0, "simulate", "Simulated data from a zero mean model"], [789, 3, 1, 0, "starting_values", "Returns starting values for the mean model, often the same as the values returned from fit"], [790, 5, 1, 0, "volatility", "Set or gets the volatility process"], [791, 5, 1, 0, "x", "Gets the value of the exogenous regressors in the model"], [792, 5, 1, 0, "y", "Returns the dependent variable"]], "arch.univariate.ZeroMean.compute_param_cov": [[778, 2, 2, 0, "backcast", "Value to use for pre-sample observations"], [778, 2, 2, 0, "params", "Model parameters"], [778, 2, 2, 0, "robust", "Flag indicating whether to use robust standard errors (True) or classic MLE (False)"]], "arch.univariate.ZeroMean.fit": [[781, 2, 2, 0, "backcast", "Value to use as backcast. Should be measure \\sigma^2_0 since model-specific non-linear transformations are applied to value before computing the variance recursions."], [781, 2, 2, 0, "cov_type", "Estimation method of parameter covariance.  Supported options are 'robust', which does not assume the Information Matrix Equality holds and 'classic' which does.  In the ARCH literature, 'robust' corresponds to Bollerslev-Wooldridge covariance estimator."], [781, 2, 2, 0, "disp", "Either 'final' to print optimization result or 'off' to display nothing. If using a boolean, False is \"off\" and True is \"final\""], [781, 2, 2, 0, "first_obs", "First observation to use when estimating model"], [781, 2, 2, 0, "last_obs", "Last observation to use when estimating model"], [781, 2, 2, 0, "options", "Options to pass to scipy.optimize.minimize.  Valid entries include 'ftol', 'eps', 'disp', and 'maxiter'."], [781, 2, 2, 0, "show_warning", "Flag indicating whether convergence warnings should be shown."], [781, 2, 2, 0, "starting_values", "Array of starting values to use.  If not provided, starting values are constructed by the model components."], [781, 2, 2, 0, "tol", "Tolerance for termination."], [781, 2, 2, 0, "update_freq", "Frequency of iteration updates.  Output is generated every update_freq iterations. Set to 0 to disable iterative output."]], "arch.univariate.ZeroMean.fix": [[782, 2, 2, 0, "first_obs", "First observation to use when fixing model"], [782, 2, 2, 0, "last_obs", "Last observation to use when fixing model"], [782, 2, 2, 0, "params", "User specified parameters to use when generating the result. Must have the correct number of parameters for a given choice of mean model, volatility model and distribution."]], "arch.univariate.ZeroMean.forecast": [[783, 2, 2, 0, "align", "Either 'origin' or 'target'.  When set of 'origin', the t-th row of forecasts contains the forecasts for t+1, t+2, ..., t+h. When set to 'target', the t-th row contains the 1-step ahead forecast from time t-1, the 2 step from time t-2, ..., and the h-step from time t-h.  'target' simplified computing forecast errors since the realization and h-step forecast are aligned."], [783, 2, 2, 0, "horizon", "Number of steps to forecast"], [783, 2, 2, 0, "method", "Method to use when producing the forecast. The default is analytic. The method only affects the variance forecast generation.  Not all volatility models support all methods. In particular, volatility models that do not evolve in squares such as EGARCH or TARCH do not support the 'analytic' method for horizons > 1."], [783, 2, 2, 0, "params", "Parameters required to forecast. Must be identical in shape to the parameters computed by fitting the model."], [783, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [783, 2, 2, 0, "reindex", "Whether to reindex the forecasts to have the same dimension as the series being forecast. Prior to 4.18 this was the default. As of 4.19 this is now optional. If not provided, a warning is raised about the future change in the default which will occur after September 2021."], [783, 2, 2, 0, "rng", "Custom random number generator to use in simulation-based forecasts. Must produce random samples using the syntax rng(size) where size the 2-element tuple (simulations, horizon)."], [783, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [783, 2, 2, 0, "start", "An integer, datetime or str indicating the first observation to produce the forecast for.  Datetimes can only be used with pandas inputs that have a datetime index. Strings must be convertible to a date time, such as in '1945-01-01'."], [783, 2, 2, 0, "x", "Values to use for exogenous regressors if any are included in the model. Three formats are accepted:"]], "arch.univariate.ZeroMean.resids": [[787, 2, 2, 0, "params", "Model parameters"], [787, 2, 2, 0, "regressors", "Alternative regressor values to use when computing model residuals"], [787, 2, 2, 0, "y", "Alternative values to use when computing model residuals"]], "arch.univariate.ZeroMean.simulate": [[788, 2, 2, 0, "burn", "Number of values to simulate to initialize the model and remove dependence on initial values."], [788, 2, 2, 0, "initial_value", "This value is not used."], [788, 2, 2, 0, "initial_value_vol", "An array or scalar to use when initializing the volatility process."], [788, 2, 2, 0, "nobs", "Length of series to simulate"], [788, 2, 2, 0, "params", "Parameters to use when simulating the model.  Parameter order is [volatility distribution]. There are no mean parameters."], [788, 2, 2, 0, "x", "This value is not used."]], "arch.univariate.arch_model": [[891, 2, 2, 0, "dist", "Name of the error distribution.  Currently supported options are:"], [891, 2, 2, 0, "hold_back", "Number of observations at the start of the sample to exclude when estimating model parameters.  Used when comparing models with different lag lengths to estimate on the common sample."], [891, 2, 2, 0, "lags", "Either a scalar integer value indicating lag length or a list of integers specifying lag locations."], [891, 2, 2, 0, "mean", "Name of the mean model.  Currently supported options are: 'Constant', 'Zero', 'LS', 'AR', 'ARX', 'HAR' and  'HARX'"], [891, 2, 2, 0, "o", "Lag order of the asymmetric innovation"], [891, 2, 2, 0, "p", "Lag order of the symmetric innovation"], [891, 2, 2, 0, "power", "Power to use with GARCH and related models"], [891, 2, 2, 0, "q", "Lag order of lagged volatility or equivalent"], [891, 2, 2, 0, "rescale", "Flag indicating whether to automatically rescale data if the scale of the data is likely to produce convergence issues when estimating model parameters. If False, the model is estimated on the data without transformation.  If True, than y is rescaled and the new scale is reported in the estimation results."], [891, 2, 2, 0, "vol", "Name of the volatility model.  Currently supported options are: 'GARCH' (default), 'ARCH', 'EGARCH', 'FIGARCH', 'APARCH' and 'HARCH'"], [891, 2, 2, 0, "x", "Exogenous regressors.  Ignored if model does not permit exogenous regressors."], [891, 2, 2, 0, "y", "The dependent variable"]], "arch.univariate.base": [[446, 1, 1, 0, "ARCHModel", "Abstract base class for mean models in ARCH processes.  Specifies the conditional mean process."], [447, 1, 1, 0, "ARCHModelFixedResult", "Results for fixed parameters for an ARCHModel model"], [448, 1, 1, 0, "ARCHModelForecast", "Container for forecasts from an ARCH Model"], [449, 1, 1, 0, "ARCHModelForecastSimulation", "Container for a simulation or bootstrap-based forecasts from an ARCH Model"], [450, 1, 1, 0, "ARCHModelResult", "Results from estimation of an ARCHModel model"]], "arch.univariate.base.ARCHModel": [[793, 3, 1, 0, "bounds", "Construct bounds for parameters to use in non-linear optimization"], [794, 3, 1, 0, "compute_param_cov", "Computes parameter covariances using numerical derivatives."], [795, 3, 1, 0, "constraints", "Construct linear constraint arrays  for use in non-linear optimization"], [796, 5, 1, 0, "distribution", "Set or gets the error distribution"], [797, 3, 1, 0, "fit", "Estimate model parameters"], [798, 3, 1, 0, "fix", "Allows an ARCHModelFixedResult to be constructed from fixed parameters."], [799, 3, 1, 0, "forecast", "Construct forecasts from estimated model"], [800, 5, 1, 0, "name", "The name of the model."], [801, 5, 1, 0, "num_params", "Number of parameters in the model"], [802, 3, 1, 0, "parameter_names", "List of parameters names"], [803, 3, 1, 0, "resids", "Compute model residuals"], [804, 3, 1, 0, "simulate", ""], [805, 3, 1, 0, "starting_values", "Returns starting values for the mean model, often the same as the values returned from fit"], [806, 5, 1, 0, "volatility", "Set or gets the volatility process"], [807, 5, 1, 0, "y", "Returns the dependent variable"]], "arch.univariate.base.ARCHModel.compute_param_cov": [[794, 2, 2, 0, "backcast", "Value to use for pre-sample observations"], [794, 2, 2, 0, "params", "Model parameters"], [794, 2, 2, 0, "robust", "Flag indicating whether to use robust standard errors (True) or classic MLE (False)"]], "arch.univariate.base.ARCHModel.fit": [[797, 2, 2, 0, "backcast", "Value to use as backcast. Should be measure \\sigma^2_0 since model-specific non-linear transformations are applied to value before computing the variance recursions."], [797, 2, 2, 0, "cov_type", "Estimation method of parameter covariance.  Supported options are 'robust', which does not assume the Information Matrix Equality holds and 'classic' which does.  In the ARCH literature, 'robust' corresponds to Bollerslev-Wooldridge covariance estimator."], [797, 2, 2, 0, "disp", "Either 'final' to print optimization result or 'off' to display nothing. If using a boolean, False is \"off\" and True is \"final\""], [797, 2, 2, 0, "first_obs", "First observation to use when estimating model"], [797, 2, 2, 0, "last_obs", "Last observation to use when estimating model"], [797, 2, 2, 0, "options", "Options to pass to scipy.optimize.minimize.  Valid entries include 'ftol', 'eps', 'disp', and 'maxiter'."], [797, 2, 2, 0, "show_warning", "Flag indicating whether convergence warnings should be shown."], [797, 2, 2, 0, "starting_values", "Array of starting values to use.  If not provided, starting values are constructed by the model components."], [797, 2, 2, 0, "tol", "Tolerance for termination."], [797, 2, 2, 0, "update_freq", "Frequency of iteration updates.  Output is generated every update_freq iterations. Set to 0 to disable iterative output."]], "arch.univariate.base.ARCHModel.fix": [[798, 2, 2, 0, "first_obs", "First observation to use when fixing model"], [798, 2, 2, 0, "last_obs", "Last observation to use when fixing model"], [798, 2, 2, 0, "params", "User specified parameters to use when generating the result. Must have the correct number of parameters for a given choice of mean model, volatility model and distribution."]], "arch.univariate.base.ARCHModel.forecast": [[799, 2, 2, 0, "align", "Either 'origin' or 'target'.  When set of 'origin', the t-th row of forecasts contains the forecasts for t+1, t+2, ..., t+h. When set to 'target', the t-th row contains the 1-step ahead forecast from time t-1, the 2 step from time t-2, ..., and the h-step from time t-h.  'target' simplified computing forecast errors since the realization and h-step forecast are aligned."], [799, 2, 2, 0, "horizon", "Number of steps to forecast"], [799, 2, 2, 0, "method", "Method to use when producing the forecast. The default is analytic. The method only affects the variance forecast generation.  Not all volatility models support all methods. In particular, volatility models that do not evolve in squares such as EGARCH or TARCH do not support the 'analytic' method for horizons > 1."], [799, 2, 2, 0, "params", "Parameters required to forecast. Must be identical in shape to the parameters computed by fitting the model."], [799, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [799, 2, 2, 0, "reindex", "Whether to reindex the forecasts to have the same dimension as the series being forecast. Prior to 4.18 this was the default. As of 4.19 this is now optional. If not provided, a warning is raised about the future change in the default which will occur after September 2021."], [799, 2, 2, 0, "rng", "Custom random number generator to use in simulation-based forecasts. Must produce random samples using the syntax rng(size) where size the 2-element tuple (simulations, horizon)."], [799, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [799, 2, 2, 0, "start", "An integer, datetime or str indicating the first observation to produce the forecast for.  Datetimes can only be used with pandas inputs that have a datetime index. Strings must be convertible to a date time, such as in '1945-01-01'."], [799, 2, 2, 0, "x", "Values to use for exogenous regressors if any are included in the model. Three formats are accepted:"]], "arch.univariate.base.ARCHModel.resids": [[803, 2, 2, 0, "params", "Model parameters"], [803, 2, 2, 0, "regressors", "Alternative regressor values to use when computing model residuals"], [803, 2, 2, 0, "y", "Alternative values to use when computing model residuals"]], "arch.univariate.base.ARCHModelFixedResult.__init__": [[447, 2, 2, 0, "dep_var", "Dependent variable"], [447, 2, 2, 0, "is_pandas", "Whether the original input was pandas"], [447, 2, 2, 0, "loglikelihood", "Loglikelihood at specified parameters"], [447, 2, 2, 0, "model", "The model object used to estimate the parameters"], [447, 2, 2, 0, "names", "Model parameter names"], [447, 2, 2, 0, "params", "Estimated parameters"], [447, 2, 2, 0, "resid", "Residuals from model.  Residuals have same shape as original data and contain nan-values in locations not used in estimation"], [447, 2, 2, 0, "volatility", "Conditional volatility from model"]], "arch.univariate.base.ARCHModelFixedResult": [[808, 5, 1, 0, "aic", "Akaike Information Criteria"], [809, 3, 1, 0, "arch_lm_test", "ARCH LM test for conditional heteroskedasticity"], [810, 5, 1, 0, "bic", "Schwarz/Bayesian Information Criteria"], [811, 5, 1, 0, "conditional_volatility", "Estimated conditional volatility"], [812, 3, 1, 0, "forecast", "Construct forecasts from estimated model"], [813, 3, 1, 0, "hedgehog_plot", "Plot forecasts from estimated model"], [814, 5, 1, 0, "loglikelihood", "Model loglikelihood"], [815, 5, 1, 0, "model", "Model instance used to produce the fit"], [816, 5, 1, 0, "nobs", "Number of data points used to estimate model"], [817, 5, 1, 0, "num_params", "Number of parameters in model"], [818, 5, 1, 0, "params", "Model Parameters"], [819, 3, 1, 0, "plot", "Plot standardized residuals and conditional volatility"], [820, 5, 1, 0, "resid", "Model residuals"], [821, 5, 1, 0, "std_resid", "Residuals standardized by conditional volatility"], [822, 3, 1, 0, "summary", "Constructs a summary of the results from a fit model."]], "arch.univariate.base.ARCHModelFixedResult.arch_lm_test": [[809, 2, 2, 0, "lags", "Number of lags to include in the model.  If not specified,"], [809, 2, 2, 0, "standardized", "Flag indicating to test the model residuals divided by their conditional standard deviations.  If False, directly tests the estimated residuals."]], "arch.univariate.base.ARCHModelFixedResult.forecast": [[812, 2, 2, 0, "align", "Either 'origin' or 'target'.  When set of 'origin', the t-th row of forecasts contains the forecasts for t+1, t+2, ..., t+h. When set to 'target', the t-th row contains the 1-step ahead forecast from time t-1, the 2 step from time t-2, ..., and the h-step from time t-h.  'target' simplified computing forecast errors since the realization and h-step forecast are aligned."], [812, 2, 2, 0, "horizon", "Number of steps to forecast"], [812, 2, 2, 0, "method", "Method to use when producing the forecast. The default is analytic. The method only affects the variance forecast generation.  Not all volatility models support all methods. In particular, volatility models that do not evolve in squares such as EGARCH or TARCH do not support the 'analytic' method for horizons > 1."], [812, 2, 2, 0, "params", "Alternative parameters to use.  If not provided, the parameters estimated when fitting the model are used.  Must be identical in shape to the parameters computed by fitting the model."], [812, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [812, 2, 2, 0, "reindex", "Whether to reindex the forecasts to have the same dimension as the series being forecast."], [812, 2, 2, 0, "rng", "Custom random number generator to use in simulation-based forecasts. Must produce random samples using the syntax rng(size) where size the 2-element tuple (simulations, horizon)."], [812, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [812, 2, 2, 0, "start", "An integer, datetime or str indicating the first observation to produce the forecast for.  Datetimes can only be used with pandas inputs that have a datetime index. Strings must be convertible to a date time, such as in '1945-01-01'."], [812, 2, 2, 0, "x", "Values to use for exogenous regressors if any are included in the model. Three formats are accepted:"]], "arch.univariate.base.ARCHModelFixedResult.hedgehog_plot": [[813, 2, 2, 0, "horizon", "Number of steps to forecast"], [813, 2, 2, 0, "method", "Method to use when producing the forecast. The default is analytic. The method only affects the variance forecast generation.  Not all volatility models support all methods. In particular, volatility models that do not evolve in squares such as EGARCH or TARCH do not support the 'analytic' method for horizons > 1."], [813, 2, 2, 0, "params", "Alternative parameters to use.  If not provided, the parameters computed by fitting the model are used.  Must be 1-d and identical in shape to the parameters computed by fitting the model."], [813, 2, 2, 0, "plot_type", "Quantity to plot, the forecast volatility or the forecast mean"], [813, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [813, 2, 2, 0, "start", "An integer, datetime or str indicating the first observation to produce the forecast for.  Datetimes can only be used with pandas inputs that have a datetime index.  Strings must be convertible to a date time, such as in '1945-01-01'.  If not provided, the start is set to the earliest forecastable date."], [813, 2, 2, 0, "step", "Non-negative number of forecasts to skip between spines"]], "arch.univariate.base.ARCHModelFixedResult.plot": [[819, 2, 2, 0, "annualize", "String containing frequency of data that indicates plot should contain annualized volatility.  Supported values are 'D' (daily), 'W' (weekly) and 'M' (monthly), which scale variance by 252, 52, and 12, respectively."], [819, 2, 2, 0, "scale", "Value to use when scaling returns to annualize.  If scale is provided, annualize is ignored and the value in scale is used."]], "arch.univariate.base.ARCHModelForecast.__init__": [[448, 2, 2, 0, "align", ""], [448, 2, 2, 0, "index", ""], [448, 2, 2, 0, "mean", ""], [448, 2, 2, 0, "residual_variance", ""], [448, 2, 2, 0, "simulated_paths", ""], [448, 2, 2, 0, "simulated_residual_variances", ""], [448, 2, 2, 0, "simulated_residuals", ""], [448, 2, 2, 0, "simulated_variances", ""], [448, 2, 2, 0, "variance", ""]], "arch.univariate.base.ARCHModelForecast": [[823, 5, 1, 0, "mean", "Forecast values for the conditional mean of the process"], [824, 5, 1, 0, "residual_variance", "Forecast values for the conditional variance of the residuals"], [825, 5, 1, 0, "simulations", "Detailed simulation results if using a simulation-based method"], [826, 5, 1, 0, "variance", "Forecast values for the conditional variance of the process"]], "arch.univariate.base.ARCHModelForecastSimulation.__init__": [[449, 2, 2, 0, "index", ""], [449, 2, 2, 0, "residual_variances", ""], [449, 2, 2, 0, "residuals", ""], [449, 2, 2, 0, "values", ""], [449, 2, 2, 0, "variances", ""]], "arch.univariate.base.ARCHModelForecastSimulation": [[827, 5, 1, 0, "index", "The index aligned to dimension 0 of the simulation paths"], [828, 5, 1, 0, "residual_variances", "Simulated variance of the residuals"], [829, 5, 1, 0, "residuals", "Simulated residuals used to produce the values"], [830, 5, 1, 0, "values", "The values of the process"], [831, 5, 1, 0, "variances", "Simulated variances of the values"]], "arch.univariate.base.ARCHModelResult.__init__": [[450, 2, 2, 0, "cov_type", "String describing the covariance estimator used"], [450, 2, 2, 0, "dep_var", "Dependent variable"], [450, 2, 2, 0, "fit_start", "Integer index of the first observation used to fit the model"], [450, 2, 2, 0, "fit_stop", "Integer index of the last observation used to fit the model using slice notation fit_start:fit_stop"], [450, 2, 2, 0, "is_pandas", "Whether the original input was pandas"], [450, 2, 2, 0, "loglikelihood", "Loglikelihood at estimated parameters"], [450, 2, 2, 0, "model", "The model object used to estimate the parameters"], [450, 2, 2, 0, "names", "Model parameter names"], [450, 2, 2, 0, "optim_output", "Result of log-likelihood optimization"], [450, 2, 2, 0, "param_cov", "Estimated variance-covariance matrix of params.  If none, calls method to compute variance from model when parameter covariance is first used from result"], [450, 2, 2, 0, "params", "Estimated parameters"], [450, 2, 2, 0, "r2", "Model R-squared"], [450, 2, 2, 0, "resid", "Residuals from model.  Residuals have same shape as original data and contain nan-values in locations not used in estimation"], [450, 2, 2, 0, "volatility", "Conditional volatility from model"]], "arch.univariate.base.ARCHModelResult": [[832, 5, 1, 0, "aic", "Akaike Information Criteria"], [833, 3, 1, 0, "arch_lm_test", "ARCH LM test for conditional heteroskedasticity"], [834, 5, 1, 0, "bic", "Schwarz/Bayesian Information Criteria"], [835, 5, 1, 0, "conditional_volatility", "Estimated conditional volatility"], [836, 3, 1, 0, "conf_int", "Parameter confidence intervals"], [837, 5, 1, 0, "convergence_flag", "scipy.optimize.minimize result flag"], [838, 5, 1, 0, "fit_start", "Start of sample used to estimate parameters"], [839, 5, 1, 0, "fit_stop", "End of sample used to estimate parameters"], [840, 3, 1, 0, "forecast", "Construct forecasts from estimated model"], [841, 3, 1, 0, "hedgehog_plot", "Plot forecasts from estimated model"], [842, 5, 1, 0, "loglikelihood", "Model loglikelihood"], [843, 5, 1, 0, "model", "Model instance used to produce the fit"], [844, 5, 1, 0, "nobs", "Number of data points used to estimate model"], [845, 5, 1, 0, "num_params", "Number of parameters in model"], [846, 5, 1, 0, "optimization_result", "Information about the convergence of the loglikelihood optimization"], [847, 5, 1, 0, "param_cov", "Parameter covariance"], [848, 5, 1, 0, "params", "Model Parameters"], [849, 3, 1, 0, "plot", "Plot standardized residuals and conditional volatility"], [850, 5, 1, 0, "pvalues", "Array of p-values for the t-statistics"], [851, 5, 1, 0, "resid", "Model residuals"], [852, 5, 1, 0, "rsquared", "R-squared"], [853, 5, 1, 0, "rsquared_adj", "Degree of freedom adjusted R-squared"], [854, 5, 1, 0, "scale", "The scale applied to the original data before estimating the model."], [855, 5, 1, 0, "std_err", "Array of parameter standard errors"], [856, 5, 1, 0, "std_resid", "Residuals standardized by conditional volatility"], [857, 3, 1, 0, "summary", "Constructs a summary of the results from a fit model."], [858, 5, 1, 0, "tvalues", "Array of t-statistics testing the null that the coefficient are 0"]], "arch.univariate.base.ARCHModelResult.arch_lm_test": [[833, 2, 2, 0, "lags", "Number of lags to include in the model.  If not specified,"], [833, 2, 2, 0, "standardized", "Flag indicating to test the model residuals divided by their conditional standard deviations.  If False, directly tests the estimated residuals."]], "arch.univariate.base.ARCHModelResult.conf_int": [[836, 2, 2, 0, "alpha", "Size (prob.) to use when constructing the confidence interval."]], "arch.univariate.base.ARCHModelResult.forecast": [[840, 2, 2, 0, "align", "Either 'origin' or 'target'.  When set of 'origin', the t-th row of forecasts contains the forecasts for t+1, t+2, ..., t+h. When set to 'target', the t-th row contains the 1-step ahead forecast from time t-1, the 2 step from time t-2, ..., and the h-step from time t-h.  'target' simplified computing forecast errors since the realization and h-step forecast are aligned."], [840, 2, 2, 0, "horizon", "Number of steps to forecast"], [840, 2, 2, 0, "method", "Method to use when producing the forecast. The default is analytic. The method only affects the variance forecast generation.  Not all volatility models support all methods. In particular, volatility models that do not evolve in squares such as EGARCH or TARCH do not support the 'analytic' method for horizons > 1."], [840, 2, 2, 0, "params", "Alternative parameters to use.  If not provided, the parameters estimated when fitting the model are used.  Must be identical in shape to the parameters computed by fitting the model."], [840, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [840, 2, 2, 0, "reindex", "Whether to reindex the forecasts to have the same dimension as the series being forecast."], [840, 2, 2, 0, "rng", "Custom random number generator to use in simulation-based forecasts. Must produce random samples using the syntax rng(size) where size the 2-element tuple (simulations, horizon)."], [840, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [840, 2, 2, 0, "start", "An integer, datetime or str indicating the first observation to produce the forecast for.  Datetimes can only be used with pandas inputs that have a datetime index. Strings must be convertible to a date time, such as in '1945-01-01'."], [840, 2, 2, 0, "x", "Values to use for exogenous regressors if any are included in the model. Three formats are accepted:"]], "arch.univariate.base.ARCHModelResult.hedgehog_plot": [[841, 2, 2, 0, "horizon", "Number of steps to forecast"], [841, 2, 2, 0, "method", "Method to use when producing the forecast. The default is analytic. The method only affects the variance forecast generation.  Not all volatility models support all methods. In particular, volatility models that do not evolve in squares such as EGARCH or TARCH do not support the 'analytic' method for horizons > 1."], [841, 2, 2, 0, "params", "Alternative parameters to use.  If not provided, the parameters computed by fitting the model are used.  Must be 1-d and identical in shape to the parameters computed by fitting the model."], [841, 2, 2, 0, "plot_type", "Quantity to plot, the forecast volatility or the forecast mean"], [841, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [841, 2, 2, 0, "start", "An integer, datetime or str indicating the first observation to produce the forecast for.  Datetimes can only be used with pandas inputs that have a datetime index.  Strings must be convertible to a date time, such as in '1945-01-01'.  If not provided, the start is set to the earliest forecastable date."], [841, 2, 2, 0, "step", "Non-negative number of forecasts to skip between spines"]], "arch.univariate.base.ARCHModelResult.plot": [[849, 2, 2, 0, "annualize", "String containing frequency of data that indicates plot should contain annualized volatility.  Supported values are 'D' (daily), 'W' (weekly) and 'M' (monthly), which scale variance by 252, 52, and 12, respectively."], [849, 2, 2, 0, "scale", "Value to use when scaling returns to annualize.  If scale is provided, annualize is ignored and the value in scale is used."]], "arch.univariate.distribution": [[451, 1, 1, 0, "Distribution", "Template for subclassing only"]], "arch.univariate.distribution.Distribution": [[859, 3, 1, 0, "bounds", "Parameter bounds for use in optimization."], [860, 3, 1, 0, "cdf", "Cumulative distribution function"], [861, 3, 1, 0, "constraints", "Construct arrays to use in constrained optimization."], [862, 5, 1, 0, "generator", "The NumPy Generator or RandomState attached to the distribution"], [863, 3, 1, 0, "loglikelihood", "Loglikelihood evaluation."], [864, 3, 1, 0, "moment", "Moment of order n"], [865, 5, 1, 0, "name", "The name of the distribution"], [866, 3, 1, 0, "parameter_names", "Names of distribution shape parameters"], [867, 3, 1, 0, "partial_moment", "Order n lower partial moment from -inf to z"], [868, 3, 1, 0, "ppf", "Inverse cumulative density function (ICDF)"], [869, 5, 1, 0, "random_state", "The NumPy RandomState attached to the distribution"], [870, 3, 1, 0, "simulate", "Simulates i.i.d. draws from the distribution"], [871, 3, 1, 0, "starting_values", "Construct starting values for use in optimization."]], "arch.univariate.distribution.Distribution.bounds": [[859, 2, 2, 0, "resids", "Residuals to use when computing the bounds"]], "arch.univariate.distribution.Distribution.cdf": [[860, 2, 2, 0, "parameters", "Distribution parameters. Use None for parameterless distributions."], [860, 2, 2, 0, "resids", "Values at which to evaluate the cdf"]], "arch.univariate.distribution.Distribution.loglikelihood": [[863, 2, 2, 0, "individual", "Flag indicating whether to return the vector of individual log likelihoods (True) or the sum (False)"], [863, 2, 2, 0, "parameters", "Distribution shape parameters"], [863, 2, 2, 0, "resids", "nobs array of model residuals"], [863, 2, 2, 0, "sigma2", "nobs array of conditional variances"]], "arch.univariate.distribution.Distribution.moment": [[864, 2, 2, 0, "n", "Order of moment"], [864, 2, 2, 0, "parameters", "Distribution parameters. Use None for parameterless distributions."]], "arch.univariate.distribution.Distribution.partial_moment": [[867, 2, 2, 0, "n", "Order of partial moment"], [867, 2, 2, 0, "parameters", "Distribution parameters.  Use None for parameterless distributions."], [867, 2, 2, 0, "z", "Upper bound for partial moment integral"]], "arch.univariate.distribution.Distribution.ppf": [[868, 2, 2, 0, "parameters", "Distribution parameters. Use None for parameterless distributions."], [868, 2, 2, 0, "pits", "Probability-integral-transformed values in the interval (0, 1)."]], "arch.univariate.distribution.Distribution.simulate": [[870, 2, 2, 0, "parameters", "Distribution parameters"]], "arch.univariate.distribution.Distribution.starting_values": [[871, 2, 2, 0, "std_resid", "Estimated standardized residuals to use in computing starting values for the shape parameter"]], "arch.univariate.recursions_python": [[452, 1, 1, 0, "VolatilityUpdater", "Base class that all volatility updaters must inherit from."]], "arch.univariate.recursions_python.VolatilityUpdater": [[872, 3, 1, 0, "initialize_update", "Initialize the recursion prior to calling update"], [873, 3, 1, 0, "update", "Update the current variance at location t"]], "arch.univariate.recursions_python.VolatilityUpdater.initialize_update": [[872, 2, 2, 0, "backcast", "The backcast value(s)."], [872, 2, 2, 0, "nobs", "The number of observations in the sample."], [872, 2, 2, 0, "parameters", "The model parameters."]], "arch.univariate.recursions_python.VolatilityUpdater.update": [[873, 2, 2, 0, "parameters", "Model parameters"], [873, 2, 2, 0, "resids", "Residuals to use in the recursion"], [873, 2, 2, 0, "sigma2", "Conditional variances with same shape as resids"], [873, 2, 2, 0, "t", "The index of the value of sigma2 to update. Assumes but does not check that update has been called recursively for 0,1,...,t-1."], [873, 2, 2, 0, "var_bounds", "nobs by 2-element array of upper and lower bounds for conditional variances for each time period"]], "arch.univariate.volatility": [[453, 1, 1, 0, "VolatilityProcess", "Abstract base class for ARCH models.  Allows the conditional mean model to be specified separately from the conditional variance, even though parameters are estimated jointly."]], "arch.univariate.volatility.VolatilityProcess": [[874, 3, 1, 0, "backcast", "Construct values for backcasting to start the recursion"], [875, 3, 1, 0, "backcast_transform", "Transformation to apply to user-provided backcast values"], [876, 3, 1, 0, "bounds", "Returns bounds for parameters"], [877, 3, 1, 0, "compute_variance", "Compute the variance for the ARCH model"], [878, 3, 1, 0, "constraints", "Construct parameter constraints arrays for parameter estimation"], [879, 3, 1, 0, "forecast", "Forecast volatility from the model"], [880, 5, 1, 0, "name", "The name of the volatility process"], [881, 5, 1, 0, "num_params", "The number of parameters in the model"], [882, 3, 1, 0, "parameter_names", "Names of model parameters"], [883, 3, 1, 0, "simulate", "Simulate data from the model"], [884, 5, 1, 0, "start", "Index to use to start variance subarray selection"], [885, 3, 1, 0, "starting_values", "Returns starting values for the ARCH model"], [886, 5, 1, 0, "stop", "Index to use to stop variance subarray selection"], [887, 3, 1, 0, "update", "Compute the variance for a single observation"], [888, 5, 1, 0, "updateable", "Flag indicating that the volatility process supports update"], [889, 3, 1, 0, "variance_bounds", "Construct loose bounds for conditional variances."], [890, 5, 1, 0, "volatility_updater", "Get the volatility updater associated with the volatility process"]], "arch.univariate.volatility.VolatilityProcess.backcast": [[874, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.volatility.VolatilityProcess.backcast_transform": [[875, 2, 2, 0, "backcast", "User-provided backcast that approximates sigma2[0]."]], "arch.univariate.volatility.VolatilityProcess.bounds": [[876, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.volatility.VolatilityProcess.compute_variance": [[877, 2, 2, 0, "backcast", "Value to use when initializing ARCH recursion. Can be an ndarray when the model contains multiple components."], [877, 2, 2, 0, "parameters", "Model parameters"], [877, 2, 2, 0, "resids", "Vector of mean zero residuals"], [877, 2, 2, 0, "sigma2", "Array with same size as resids to store the conditional variance"], [877, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.volatility.VolatilityProcess.forecast": [[879, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [879, 2, 2, 0, "horizon", "Forecast horizon.  Must be 1 or larger.  Forecasts are produced for horizons in [1, horizon]."], [879, 2, 2, 0, "method", "Method to use when producing the forecast. The default is analytic."], [879, 2, 2, 0, "parameters", "Parameters required to forecast the volatility model"], [879, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [879, 2, 2, 0, "resids", "Residuals to use in the recursion"], [879, 2, 2, 0, "rng", "Callable random number generator required if method is 'simulation'. Must take a single shape input and return random samples numbers with that shape."], [879, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [879, 2, 2, 0, "start", "Index of the first observation to use as the starting point for the forecast.  Default is len(resids)."], [879, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.volatility.VolatilityProcess.simulate": [[883, 2, 2, 0, "burn", "Number of additional observations to generate when initializing the simulation"], [883, 2, 2, 0, "initial_value", "Scalar or array of initial values to use when initializing the simulation"], [883, 2, 2, 0, "nobs", "Number of data points to simulate"], [883, 2, 2, 0, "parameters", "Parameters required to simulate the volatility model"], [883, 2, 2, 0, "rng", "Callable function that takes a single integer input and returns a vector of random numbers"]], "arch.univariate.volatility.VolatilityProcess.starting_values": [[885, 2, 2, 0, "resids", "Array of (approximate) residuals to use when computing starting values"]], "arch.univariate.volatility.VolatilityProcess.update": [[887, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [887, 2, 2, 0, "index", "The numerical index of the variance to compute"], [887, 2, 2, 0, "parameters", "The variance model parameters"], [887, 2, 2, 0, "resids", "The residual array. Only uses resids[:index] when computing sigma2[index]"], [887, 2, 2, 0, "sigma2", "The array containing the variances. Only uses sigma2[:index] when computing sigma2[index]. The computed value is stored in sigma2[index]."], [887, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.volatility.VolatilityProcess.variance_bounds": [[889, 2, 2, 0, "power", "Power used in the model. 2.0, the default corresponds to standard ARCH models that evolve in squares."], [889, 2, 2, 0, "resids", "Approximate residuals to use to compute the lower and upper bounds on the conditional variance"]], "arch.utility": [[900, 0, 0, 1, "testing", ""]], "arch.utility.testing": [[900, 1, 1, 0, "WaldTestStatistic", "Test statistic holder for Wald-type tests"]], "arch.utility.testing.WaldTestStatistic.__init__": [[900, 2, 2, 0, "alternative", "A statement of the test's alternative hypothesis"], [900, 2, 2, 0, "df", "Degree of freedom."], [900, 2, 2, 0, "name", "Name of test"], [900, 2, 2, 0, "null", "A statement of the test's null hypothesis"], [900, 2, 2, 0, "stat", "The test statistic"]], "arch.utility.testing.WaldTestStatistic": [[900, 5, 1, 0, "critical_values", "Critical values test for common test sizes"], [900, 5, 1, 0, "null", "Null hypothesis"], [900, 5, 1, 0, "pval", "P-value of test statistic"], [900, 5, 1, 0, "stat", "Test statistic"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:parameter", "3": "py:method", "4": "py:attribute", "5": "py:property", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "refer": [0, 1, 237, 258], "volatil": [0, 96, 453, 504, 520, 536, 685, 701, 790, 806, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 894, 896, 897, 898, 899, 901], "model": [0, 3, 96, 258, 259, 815, 843, 891, 892, 893, 894, 895, 896, 898], "high": 0, "level": [0, 87], "mean": [0, 823, 892, 896, 898], "specif": 0, "process": [0, 896, 898, 901], "shock": 0, "distribut": [0, 86, 423, 451, 493, 510, 526, 675, 691, 780, 796, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 898], "unit": [0, 96, 418, 419, 421], "root": [0, 96, 418, 419, 421], "test": [0, 258, 259, 261, 418, 419, 420, 421, 900], "cointegr": [0, 261, 269, 270, 271, 272, 273, 274, 275, 276, 277, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420], "relationship": 0, "estim": [0, 3, 87, 88, 98, 261, 896], "bootstrap": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 89, 90, 96, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 424, 897, 899], "block": [0, 3], "length": [0, 3], "select": [0, 418], "multipl": [0, 258, 259, 260, 895], "comparison": [0, 259, 260], "long": [0, 98], "run": [0, 98], "covari": [0, 88, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235], "hac": 0, "exampl": [3, 417], "sharp": 3, "ratio": [3, 421], "reproduc": 3, "warn": [3, 89, 277], "optim": 3, "probit": 3, "statsmodel": 3, "fit": [3, 354, 368, 402, 494, 511, 527, 676, 692, 781, 797, 895], "directli": 3, "The": [3, 87, 259, 418], "wrapper": 3, "function": 3, "speed": 3, "thing": 3, "up": 3, "uneven": 3, "sampl": [3, 86, 895], "confid": [4, 258, 259], "interv": 4, "setup": [4, 96, 421, 896, 898], "note": [4, 12, 15, 25, 27, 30, 40, 42, 45, 55, 57, 60, 70, 72, 75, 85, 88, 89, 236], "type": 4, "nonparametr": 4, "semi": 4, "parametr": [4, 89, 897], "method": [4, 89], "basic": [4, 417, 897], "percentil": 4, "asymptot": 4, "normal": [4, 441, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733], "approxim": 4, "norm": 4, "cov": [4, 15, 30, 45, 60, 75, 115, 125, 139, 149, 159, 169, 179, 189, 199, 209, 219, 229, 356, 370], "var": [4, 25, 40, 55, 70, 85, 897], "student": [4, 898], "bia": 4, "correct": 4, "bc": 4, "debias": [4, 330], "acceler": 4, "bca": 4, "arch": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 898], "circularblockbootstrap": [5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "see": [5, 6, 7, 8, 9, 10, 99, 102, 103, 115, 125, 139, 149, 159, 169, 179, 189, 199, 209, 219, 229, 239, 240, 276, 277, 368], "also": [5, 6, 7, 8, 9, 10, 99, 102, 103, 115, 125, 139, 149, 159, 169, 179, 189, 199, 209, 219, 229, 239, 240, 276, 277, 368], "iidbootstrap": [6, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "independentsamplesbootstrap": [7, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "movingblockbootstrap": [8, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], "stationarybootstrap": [9, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85], "optimal_block_length": 10, "appli": [11, 26, 41, 56, 71], "clone": [13, 28, 43, 58, 73], "conf_int": [14, 29, 44, 59, 74, 836], "gener": [16, 31, 46, 61, 76, 645, 724, 754, 767, 862, 897, 899], "get_stat": [17, 32, 47, 62, 77], "index": [18, 33, 48, 63, 78, 236, 827], "random_st": [19, 34, 49, 64, 79, 652, 731, 761, 774, 869], "reset": [20, 35, 50, 65, 80, 245, 251, 255], "seed": [21, 36, 51, 66, 81, 246, 252, 256], "set_stat": [22, 37, 52, 67, 82], "state": [23, 38, 53, 68, 83], "update_indic": [24, 39, 54, 69, 84], "independ": 86, "ident": 86, "data": [86, 895, 896, 897], "i": 86, "d": 86, "low": 87, "interfac": 87, "construct": 87, "paramet": [87, 898], "iter": 87, "semiparametr": 89, "us": [89, 895, 896], "partial": 89, "instead": 89, "extra_kwarg": 89, "altern": [89, 897], "time": 90, "seri": 90, "chang": [91, 96], "log": 91, "version": [91, 92, 93, 94, 95, 96, 97], "6": [91, 95, 97], "releas": [91, 95, 96, 97], "3": [91, 94, 95, 96, 97], "2": [91, 93, 95, 96, 97], "1": [91, 92, 93, 95, 96, 97], "0": [91, 96, 97], "past": 91, "4": [95, 96], "19": 95, "18": 95, "17": 95, "16": 95, "15": 95, "14": 95, "13": 95, "12": 95, "11": 95, "10": 95, "9": 95, "8": 95, "7": 95, "5": [95, 96], "sinc": 96, "result": [98, 261, 893, 900], "kernel": [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 357, 374, 408], "andrew": [99, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 421], "bartlett": [100, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131], "covarianceestim": [101, 132, 133, 134, 135], "gallant": [102, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145], "neweywest": [103, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "parzen": [104, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165], "parzencauchi": [105, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175], "parzengeometr": [106, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185], "parzenriesz": [107, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195], "quadraticspectr": [108, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205], "tukeyham": [109, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "tukeyhan": [110, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], "tukeyparzen": [111, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235], "bandwidth": [112, 122, 136, 146, 156, 166, 176, 186, 196, 206, 216, 226, 355, 369, 404, 418], "bandwidth_scal": [113, 123, 137, 147, 157, 167, 177, 187, 197, 207, 217, 227], "center": [114, 124, 138, 148, 158, 168, 178, 188, 198, 208, 218, 228], "force_int": [116, 126, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230], "kernel_const": [117, 127, 141, 151, 161, 171, 181, 191, 201, 211, 221, 231], "kernel_weight": [118, 128, 142, 152, 162, 172, 182, 192, 202, 212, 222, 232], "name": [119, 129, 143, 153, 163, 173, 183, 193, 203, 213, 223, 233, 393, 409, 462, 479, 498, 514, 530, 545, 562, 579, 596, 614, 631, 648, 661, 679, 695, 710, 727, 740, 757, 770, 784, 800, 865, 880], "opt_bandwidth": [120, 130, 144, 154, 164, 174, 184, 194, 204, 214, 224, 234], "rate": [121, 131, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235], "long_run": 132, "one_sid": 133, "one_sided_strict": 134, "short_run": 135, "introduct": [236, 417, 891], "citat": 236, "mc": [238, 241, 242, 243, 244, 245, 246, 258], "spa": [239, 247, 248, 249, 250, 251, 252, 253, 258, 259], "stepm": [240, 254, 255, 256, 257, 258, 259], "comput": [241, 248, 254], "exclud": 242, "includ": 243, "pvalu": [244, 250, 284, 297, 309, 320, 335, 348, 360, 379, 396, 412, 850], "better_model": 247, "critical_valu": [249, 279, 292, 305, 316, 329, 344, 389, 406], "subset": 253, "superior_model": 257, "modul": 258, "superior": [258, 259], "predict": [258, 259], "abil": [258, 259], "realiti": 258, "check": 258, "stepwis": [258, 259], "set": [258, 259, 421], "studi": 259, "design": 259, "power": 259, "procedur": 260, "vector": 261, "class": [261, 424], "unitroot": [262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416], "adf": [262, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290], "dfgl": [263, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303], "kpss": [264, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 421], "phillipsperron": [265, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327], "varianceratio": [266, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "zivotandrew": [267, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "auto_bandwidth": 268, "canonicalcointegratingreg": [269, 354], "cointegrationanalysisresult": [270, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367], "dynamicol": [271, 368], "dynamicolsresult": [272, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386], "englegrangertestresult": [273, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401], "fullymodifiedol": [274, 402], "phillipsouliaristestresult": [275, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416], "engle_grang": 276, "phillips_ouliari": 277, "alternative_hypothesi": [278, 291, 304, 315, 328, 343, 387, 403], "lag": [280, 293, 306, 317, 331, 345, 375, 391, 421], "max_lag": [281, 294, 392], "nob": [282, 295, 307, 318, 332, 346, 816, 844], "null_hypothesi": [283, 296, 308, 319, 333, 347, 394, 410], "regress": [285, 298, 321, 421], "stat": [286, 299, 310, 322, 337, 349, 399, 414], "summari": [287, 300, 311, 323, 338, 350, 366, 385, 400, 415, 822, 857], "trend": [288, 301, 312, 325, 339, 351, 401, 416], "valid_trend": [289, 302, 313, 326, 340, 352], "y": [290, 303, 314, 327, 342, 353, 506, 522, 538, 687, 703, 792, 807], "test_typ": 324, "overlap": 334, "robust": 336, "vr": 341, "long_run_vari": [358, 377], "param": [359, 378, 818, 848], "resid": [361, 380, 397, 413, 501, 517, 533, 682, 698, 787, 803, 820, 851], "residual_vari": [362, 381, 824, 828], "rsquar": [363, 382, 852], "rsquared_adj": [364, 383, 853], "std_error": [365, 384], "tvalu": [367, 386, 858], "cov_typ": 371, "full_cov": 372, "full_param": 373, "lead": 376, "cointegrating_vector": [388, 405], "distribution_ord": [390, 407], "plot": [395, 411, 819, 849, 895], "rho": 398, "automat": 418, "analysi": 419, "phillip": [420, 421], "ouliari": 420, "augment": 421, "dickei": 421, "fuller": 421, "number": 421, "determinist": 421, "term": 421, "output": [421, 424], "gl": 421, "perron": 421, "zivot": 421, "varianc": [421, 826, 831, 896, 901], "theoret": 422, "background": 422, "write": [423, 892, 901], "new": [423, 892, 901], "forecast": [424, 461, 478, 496, 513, 529, 544, 561, 578, 595, 613, 630, 660, 678, 694, 709, 739, 783, 799, 812, 840, 879, 895, 897], "analyt": [424, 897], "simul": [424, 465, 482, 502, 518, 534, 548, 565, 582, 599, 617, 634, 653, 664, 683, 699, 713, 732, 743, 762, 775, 788, 804, 825, 870, 883, 895, 897, 898], "option": 424, "understand": 424, "univari": [425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 894], "aparch": [425, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472], "archinmean": [427, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506], "arx": [428, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "constantmean": [429, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538], "constantvari": [430, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555], "egarch": [431, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572], "ewmavari": [432, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "figarch": [433, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607], "fixedvari": [434, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 896, 901], "garch": [435, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 898], "generalizederror": [436, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654], "harch": [437, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671], "harx": [438, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687], "l": [439, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703], "midashyperbol": [440, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720], "riskmetrics2006": [442, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750], "skewstud": [443, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763], "studentst": [444, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776], "zeromean": [445, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792], "base": [446, 447, 448, 449, 450, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858], "archmodel": [446, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807], "archmodelfixedresult": [447, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822], "archmodelforecast": [448, 823, 824, 825, 826], "archmodelforecastsimul": [449, 827, 828, 829, 830, 831], "archmodelresult": [450, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858], "recursions_python": [452, 872, 873], "volatilityupdat": [452, 872, 873], "volatilityprocess": [453, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890], "backcast": [454, 473, 539, 556, 573, 590, 608, 625, 655, 704, 734, 874], "backcast_transform": [455, 474, 540, 557, 574, 591, 609, 626, 656, 705, 735, 875], "bound": [456, 475, 490, 507, 523, 541, 558, 575, 592, 610, 627, 642, 657, 672, 688, 706, 721, 736, 751, 764, 777, 793, 859, 876], "common_asym": 457, "compute_vari": [458, 476, 542, 559, 576, 593, 611, 628, 658, 707, 737, 877], "constraint": [459, 477, 492, 509, 525, 543, 560, 577, 594, 612, 629, 644, 659, 674, 690, 708, 723, 738, 753, 766, 779, 795, 861, 878], "delta": 460, "num_param": [463, 480, 499, 515, 531, 546, 563, 580, 597, 615, 632, 662, 680, 696, 711, 741, 785, 801, 817, 845, 881], "parameter_nam": [464, 481, 500, 516, 532, 547, 564, 581, 598, 616, 633, 649, 663, 681, 697, 712, 728, 742, 758, 771, 786, 802, 866, 882], "start": [466, 483, 549, 566, 583, 600, 618, 635, 665, 714, 744, 884], "starting_valu": [467, 484, 503, 519, 535, 550, 567, 584, 601, 619, 636, 654, 666, 684, 700, 715, 733, 745, 763, 776, 789, 805, 871, 885], "stop": [468, 485, 551, 568, 585, 602, 620, 637, 667, 716, 746, 886], "updat": [469, 470, 486, 487, 552, 553, 569, 570, 586, 587, 604, 605, 621, 622, 638, 639, 668, 669, 717, 718, 747, 748, 873, 887, 888], "variance_bound": [471, 488, 554, 571, 588, 606, 623, 640, 670, 719, 749, 889], "volatility_updat": [472, 489, 555, 572, 589, 607, 624, 641, 671, 720, 750, 890], "compute_param_cov": [491, 508, 524, 673, 689, 778, 794], "fix": [495, 512, 528, 677, 693, 782, 798, 896, 897, 898], "form": 497, "x": [505, 521, 537, 686, 702, 791, 895], "truncat": 603, "cdf": [643, 722, 752, 765, 860], "loglikelihood": [646, 725, 755, 768, 814, 842, 863], "moment": [647, 726, 756, 769, 864], "partial_mo": [650, 729, 759, 772, 867], "ppf": [651, 730, 760, 773, 868], "aic": [808, 832], "arch_lm_test": [809, 833], "bic": [810, 834], "conditional_volatil": [811, 835], "hedgehog_plot": [813, 841], "std_resid": [821, 856], "residu": 829, "valu": [830, 895, 897], "convergence_flag": 837, "fit_start": 838, "fit_stop": 839, "optimization_result": 846, "param_cov": 847, "scale": 854, "std_err": 855, "initialize_upd": 872, "constructor": 891, "g": 892, "special": [892, 895], "requir": 892, "exogen": 895, "regressor": 895, "dict": 895, "datafram": 895, "an": 895, "arrai": 895, "produc": 895, "input": 895, "size": 895, "case": 895, "singl": 895, "variabl": 895, "static": 895, "out": 895, "initi": 896, "re": 896, "zig": 896, "zag": 896, "direct": 896, "scheme": 897, "window": 897, "roll": 897, "recurs": 897, "tarch": [897, 898], "risk": 897, "filter": 897, "histor": 897, "specifi": 898, "common": 898, "constant": 898, "gjr": 898, "zarch": 898, "": 898, "t": 898, "error": 898, "build": 898, "from": 898, "compon": 898, "wti": 898, "crude": 898, "scenario": 899, "custom": 899, "random": 899, "visual": 899, "differ": 899, "compar": 899, "path": 899, "across": 899, "year": 899, "util": 900, "parameterless": 901}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"arch.covariance.kernel.Gallant.opt_bandwidth": [[144, "arch-covariance-kernel-gallant-opt-bandwidth"]], "arch.covariance.kernel.ParzenCauchy.opt_bandwidth": [[174, "arch-covariance-kernel-parzencauchy-opt-bandwidth"]], "arch.covariance.kernel.NeweyWest.name": [[153, "arch-covariance-kernel-neweywest-name"]], "arch.covariance.kernel.Parzen.bandwidth": [[156, "arch-covariance-kernel-parzen-bandwidth"]], "arch.covariance.kernel.Gallant.kernel_weights": [[142, "arch-covariance-kernel-gallant-kernel-weights"]], "arch.covariance.kernel.Parzen.kernel_const": [[161, "arch-covariance-kernel-parzen-kernel-const"]], "arch.covariance.kernel.ParzenCauchy.kernel_weights": [[172, "arch-covariance-kernel-parzencauchy-kernel-weights"]], "arch.covariance.kernel.Parzen.centered": [[158, "arch-covariance-kernel-parzen-centered"]], "arch.covariance.kernel.Parzen.name": [[163, "arch-covariance-kernel-parzen-name"]], "arch.covariance.kernel.ParzenGeometric.kernel_weights": [[182, "arch-covariance-kernel-parzengeometric-kernel-weights"]], "arch.covariance.kernel.NeweyWest.centered": [[148, "arch-covariance-kernel-neweywest-centered"]], "arch.covariance.kernel.ParzenCauchy.force_int": [[170, "arch-covariance-kernel-parzencauchy-force-int"]], "arch.covariance.kernel.ParzenGeometric.bandwidth_scale": [[177, "arch-covariance-kernel-parzengeometric-bandwidth-scale"]], "arch.covariance.kernel.NeweyWest.opt_bandwidth": [[154, "arch-covariance-kernel-neweywest-opt-bandwidth"]], "arch.covariance.kernel.NeweyWest.bandwidth_scale": [[147, "arch-covariance-kernel-neweywest-bandwidth-scale"]], "arch.covariance.kernel.NeweyWest.cov": [[149, "arch-covariance-kernel-neweywest-cov"]], "See also": [[149, null], [169, null], [159, null], [179, null], [102, null], [99, null], [103, null], [125, null], [115, null], [139, null], [9, null], [10, null], [5, null], [8, null], [7, null], [6, null], [368, null], [189, null], [199, null], [229, null], [209, null], [219, null], [239, null], [276, null], [277, null], [240, null]], "arch.covariance.kernel.Gallant.rate": [[145, "arch-covariance-kernel-gallant-rate"]], "arch.covariance.kernel.NeweyWest.force_int": [[150, "arch-covariance-kernel-neweywest-force-int"]], "arch.covariance.kernel.NeweyWest.kernel_weights": [[152, "arch-covariance-kernel-neweywest-kernel-weights"]], "arch.covariance.kernel.ParzenCauchy.kernel_const": [[171, "arch-covariance-kernel-parzencauchy-kernel-const"]], "arch.covariance.kernel.Parzen.rate": [[165, "arch-covariance-kernel-parzen-rate"]], "arch.covariance.kernel.ParzenGeometric.kernel_const": [[181, "arch-covariance-kernel-parzengeometric-kernel-const"]], "arch.covariance.kernel.ParzenCauchy.bandwidth": [[166, "arch-covariance-kernel-parzencauchy-bandwidth"]], "arch.covariance.kernel.ParzenGeometric.force_int": [[180, "arch-covariance-kernel-parzengeometric-force-int"]], "arch.covariance.kernel.Parzen.bandwidth_scale": [[157, "arch-covariance-kernel-parzen-bandwidth-scale"]], "arch.covariance.kernel.ParzenCauchy.centered": [[168, "arch-covariance-kernel-parzencauchy-centered"]], "arch.covariance.kernel.Gallant.kernel_const": [[141, "arch-covariance-kernel-gallant-kernel-const"]], "arch.covariance.kernel.ParzenGeometric.bandwidth": [[176, "arch-covariance-kernel-parzengeometric-bandwidth"]], "arch.covariance.kernel.NeweyWest.rate": [[155, "arch-covariance-kernel-neweywest-rate"]], "arch.covariance.kernel.Parzen.force_int": [[160, "arch-covariance-kernel-parzen-force-int"]], "arch.covariance.kernel.ParzenGeometric.name": [[183, "arch-covariance-kernel-parzengeometric-name"]], "arch.covariance.kernel.ParzenCauchy.cov": [[169, "arch-covariance-kernel-parzencauchy-cov"]], "arch.covariance.kernel.Gallant.name": [[143, "arch-covariance-kernel-gallant-name"]], "arch.covariance.kernel.Parzen.opt_bandwidth": [[164, "arch-covariance-kernel-parzen-opt-bandwidth"]], "arch.covariance.kernel.ParzenGeometric.opt_bandwidth": [[184, "arch-covariance-kernel-parzengeometric-opt-bandwidth"]], "arch.covariance.kernel.Parzen.kernel_weights": [[162, "arch-covariance-kernel-parzen-kernel-weights"]], "arch.covariance.kernel.ParzenRiesz.bandwidth": [[186, "arch-covariance-kernel-parzenriesz-bandwidth"]], "arch.covariance.kernel.ParzenGeometric.centered": [[178, "arch-covariance-kernel-parzengeometric-centered"]], "arch.covariance.kernel.ParzenCauchy.rate": [[175, "arch-covariance-kernel-parzencauchy-rate"]], "arch.covariance.kernel.ParzenGeometric.rate": [[185, "arch-covariance-kernel-parzengeometric-rate"]], "arch.covariance.kernel.NeweyWest.bandwidth": [[146, "arch-covariance-kernel-neweywest-bandwidth"]], "arch.covariance.kernel.Parzen.cov": [[159, "arch-covariance-kernel-parzen-cov"]], "arch.covariance.kernel.NeweyWest.kernel_const": [[151, "arch-covariance-kernel-neweywest-kernel-const"]], "arch.covariance.kernel.ParzenCauchy.name": [[173, "arch-covariance-kernel-parzencauchy-name"]], "arch.covariance.kernel.ParzenCauchy.bandwidth_scale": [[167, "arch-covariance-kernel-parzencauchy-bandwidth-scale"]], "arch.covariance.kernel.ParzenRiesz.bandwidth_scale": [[187, "arch-covariance-kernel-parzenriesz-bandwidth-scale"]], "arch.covariance.kernel.ParzenGeometric.cov": [[179, "arch-covariance-kernel-parzengeometric-cov"]], "arch.bootstrap.IndependentSamplesBootstrap.index": [[48, "arch-bootstrap-independentsamplesbootstrap-index"]], "arch.bootstrap.MovingBlockBootstrap.set_state": [[67, "arch-bootstrap-movingblockbootstrap-set-state"]], "arch.bootstrap.StationaryBootstrap.generator": [[76, "arch-bootstrap-stationarybootstrap-generator"]], "arch.bootstrap.StationaryBootstrap.apply": [[71, "arch-bootstrap-stationarybootstrap-apply"]], "arch.bootstrap.StationaryBootstrap.cov": [[75, "arch-bootstrap-stationarybootstrap-cov"]], "Note": [[75, null], [85, null], [57, null], [72, null], [88, null], [60, null], [55, null], [89, null], [89, null], [89, null], [70, null], [27, null], [45, null], [40, null], [4, null], [4, null], [4, null], [4, null], [4, null], [12, null], [30, null], [42, null], [25, null], [15, null], [236, null]], "Version 2": [[93, "version-2"]], "Version 2.2": [[93, "version-2-2"]], "Version 2.1": [[93, "version-2-1"]], "arch.bootstrap.IndependentSamplesBootstrap.seed": [[51, "arch-bootstrap-independentsamplesbootstrap-seed"]], "arch.bootstrap.StationaryBootstrap.var": [[85, "arch-bootstrap-stationarybootstrap-var"]], "Change Logs": [[91, "change-logs"]], "Version 6": [[91, "version-6"], [97, "version-6"]], "Release 6.3": [[91, "release-6-3"], [97, "release-6-3"]], "Release 6.2": [[91, "release-6-2"], [97, "release-6-2"]], "Release 6.1": [[91, "release-6-1"], [97, "release-6-1"]], "Release 6.0": [[91, "release-6-0"], [97, "release-6-0"]], "Past Releases": [[91, "past-releases"]], "arch.bootstrap.IndependentSamplesBootstrap.reset": [[50, "arch-bootstrap-independentsamplesbootstrap-reset"]], "arch.bootstrap.MovingBlockBootstrap.get_state": [[62, "arch-bootstrap-movingblockbootstrap-get-state"]], "arch.bootstrap.MovingBlockBootstrap.seed": [[66, "arch-bootstrap-movingblockbootstrap-seed"]], "arch.bootstrap.MovingBlockBootstrap.bootstrap": [[57, "arch-bootstrap-movingblockbootstrap-bootstrap"]], "arch.bootstrap.StationaryBootstrap.seed": [[81, "arch-bootstrap-stationarybootstrap-seed"]], "arch.bootstrap.MovingBlockBootstrap.apply": [[56, "arch-bootstrap-movingblockbootstrap-apply"]], "Time-series Bootstraps": [[90, "time-series-bootstraps"]], "arch.bootstrap.StationaryBootstrap.bootstrap": [[72, "arch-bootstrap-stationarybootstrap-bootstrap"]], "arch.bootstrap.StationaryBootstrap.set_state": [[82, "arch-bootstrap-stationarybootstrap-set-state"]], "Covariance Estimation": [[88, "covariance-estimation"]], "arch.bootstrap.StationaryBootstrap.random_state": [[79, "arch-bootstrap-stationarybootstrap-random-state"]], "arch.bootstrap.MovingBlockBootstrap.clone": [[58, "arch-bootstrap-movingblockbootstrap-clone"]], "arch.bootstrap.MovingBlockBootstrap.cov": [[60, "arch-bootstrap-movingblockbootstrap-cov"]], "arch.bootstrap.StationaryBootstrap.state": [[83, "arch-bootstrap-stationarybootstrap-state"]], "Version 1": [[92, "version-1"]], "Version 1.1": [[92, "version-1-1"]], "arch.bootstrap.MovingBlockBootstrap.conf_int": [[59, "arch-bootstrap-movingblockbootstrap-conf-int"]], "arch.bootstrap.MovingBlockBootstrap.reset": [[65, "arch-bootstrap-movingblockbootstrap-reset"]], "arch.bootstrap.IndependentSamplesBootstrap.get_state": [[47, "arch-bootstrap-independentsamplesbootstrap-get-state"]], "arch.bootstrap.IndependentSamplesBootstrap.state": [[53, "arch-bootstrap-independentsamplesbootstrap-state"]], "arch.bootstrap.IndependentSamplesBootstrap.var": [[55, "arch-bootstrap-independentsamplesbootstrap-var"]], "Low-level Interfaces": [[87, "low-level-interfaces"]], "Constructing Parameter Estimates": [[87, "constructing-parameter-estimates"]], "The Bootstrap Iterator": [[87, "the-bootstrap-iterator"]], "arch.bootstrap.StationaryBootstrap.conf_int": [[74, "arch-bootstrap-stationarybootstrap-conf-int"]], "arch.bootstrap.MovingBlockBootstrap.random_state": [[64, "arch-bootstrap-movingblockbootstrap-random-state"]], "arch.bootstrap.IndependentSamplesBootstrap.update_indices": [[54, "arch-bootstrap-independentsamplesbootstrap-update-indices"]], "arch.bootstrap.StationaryBootstrap.index": [[78, "arch-bootstrap-stationarybootstrap-index"]], "arch.bootstrap.StationaryBootstrap.clone": [[73, "arch-bootstrap-stationarybootstrap-clone"]], "arch.bootstrap.StationaryBootstrap.reset": [[80, "arch-bootstrap-stationarybootstrap-reset"]], "Independent, Identical Distributed Data (i.i.d.)": [[86, "independent-identical-distributed-data-i-i-d"]], "Independent Samples": [[86, "independent-samples"]], "arch.bootstrap.MovingBlockBootstrap.index": [[63, "arch-bootstrap-movingblockbootstrap-index"]], "arch.bootstrap.StationaryBootstrap.get_state": [[77, "arch-bootstrap-stationarybootstrap-get-state"]], "Semiparametric Bootstraps": [[89, "semiparametric-bootstraps"]], "Using partial instead of extra_kwargs": [[89, "using-partial-instead-of-extra-kwargs"]], "Semiparametric Bootstrap (Alternative Method)": [[89, "semiparametric-bootstrap-alternative-method"]], "Parametric Bootstraps": [[89, "parametric-bootstraps"]], "Warning": [[89, null], [277, null], [3, "Warning"]], "arch.bootstrap.MovingBlockBootstrap.update_indices": [[69, "arch-bootstrap-movingblockbootstrap-update-indices"]], "arch.bootstrap.StationaryBootstrap.update_indices": [[84, "arch-bootstrap-stationarybootstrap-update-indices"]], "arch.bootstrap.MovingBlockBootstrap.var": [[70, "arch-bootstrap-movingblockbootstrap-var"]], "arch.bootstrap.MovingBlockBootstrap.generator": [[61, "arch-bootstrap-movingblockbootstrap-generator"]], "arch.bootstrap.IndependentSamplesBootstrap.random_state": [[49, "arch-bootstrap-independentsamplesbootstrap-random-state"]], "arch.bootstrap.MovingBlockBootstrap.state": [[68, "arch-bootstrap-movingblockbootstrap-state"]], "arch.bootstrap.IndependentSamplesBootstrap.set_state": [[52, "arch-bootstrap-independentsamplesbootstrap-set-state"]], "arch.covariance.kernel.Bartlett.force_int": [[126, "arch-covariance-kernel-bartlett-force-int"]], "arch.covariance.kernel.Bartlett.kernel_weights": [[128, "arch-covariance-kernel-bartlett-kernel-weights"]], "arch.covariance.kernel.Gallant": [[102, "arch-covariance-kernel-gallant"]], "arch.covariance.kernel.Bartlett.kernel_const": [[127, "arch-covariance-kernel-bartlett-kernel-const"]], "arch.covariance.kernel.ParzenRiesz": [[107, "arch-covariance-kernel-parzenriesz"]], "arch.covariance.kernel.TukeyHamming": [[109, "arch-covariance-kernel-tukeyhamming"]], "arch.covariance.kernel.Andrews.rate": [[121, "arch-covariance-kernel-andrews-rate"]], "arch.covariance.kernel.Andrews.name": [[119, "arch-covariance-kernel-andrews-name"]], "arch.covariance.kernel.Gallant.bandwidth": [[136, "arch-covariance-kernel-gallant-bandwidth"]], "arch.covariance.kernel.Bartlett.opt_bandwidth": [[130, "arch-covariance-kernel-bartlett-opt-bandwidth"]], "arch.covariance.kernel.Andrews": [[99, "arch-covariance-kernel-andrews"]], "Version 5": [[96, "version-5"]], "Changes Since 5.5": [[96, "changes-since-5-5"]], "Release 5.5": [[96, "release-5-5"]], "Release 5.4": [[96, "release-5-4"]], "Release 5.3": [[96, "release-5-3"]], "Release 5.2": [[96, "release-5-2"]], "Release 5.1": [[96, "release-5-1"]], "Unit Root": [[96, "unit-root"], [96, "id1"]], "Release 5.0": [[96, "release-5-0"]], "Bootstrap": [[96, "bootstrap"]], "Volatility Modeling": [[96, "volatility-modeling"], [0, "volatility-modeling"]], "Setup": [[96, "setup"], [4, "setup"], [421, "Setup"], [898, "Setup"], [896, "Setup"]], "arch.covariance.kernel.Bartlett.name": [[129, "arch-covariance-kernel-bartlett-name"]], "Version 4": [[95, "version-4"]], "Release 4.19": [[95, "release-4-19"]], "Release 4.18": [[95, "release-4-18"]], "Release 4.17": [[95, "release-4-17"]], "Release 4.16": [[95, "release-4-16"]], "Release 4.15": [[95, "release-4-15"]], "Release 4.14": [[95, "release-4-14"]], "Release 4.13": [[95, "release-4-13"]], "Release 4.12": [[95, "release-4-12"]], "Release 4.11": [[95, "release-4-11"]], "Release 4.10": [[95, "release-4-10"]], "Release 4.9": [[95, "release-4-9"]], "Release 4.8.1": [[95, "release-4-8-1"]], "Release 4.8": [[95, "release-4-8"]], "Release 4.7": [[95, "release-4-7"]], "Release 4.6": [[95, "release-4-6"]], "Release 4.5": [[95, "release-4-5"]], "Release 4.4": [[95, "release-4-4"]], "Release 4.3": [[95, "release-4-3"]], "Release 4.2": [[95, "release-4-2"]], "arch.covariance.kernel.Gallant.centered": [[138, "arch-covariance-kernel-gallant-centered"]], "arch.covariance.kernel.Andrews.force_int": [[116, "arch-covariance-kernel-andrews-force-int"]], "arch.covariance.kernel.Andrews.bandwidth": [[112, "arch-covariance-kernel-andrews-bandwidth"]], "arch.covariance.kernel.CovarianceEstimate.short_run": [[135, "arch-covariance-kernel-covarianceestimate-short-run"]], "arch.covariance.kernel.TukeyHanning": [[110, "arch-covariance-kernel-tukeyhanning"]], "arch.covariance.kernel.Bartlett": [[100, "arch-covariance-kernel-bartlett"]], "arch.covariance.kernel.NeweyWest": [[103, "arch-covariance-kernel-neweywest"]], "arch.covariance.kernel.Bartlett.bandwidth_scale": [[123, "arch-covariance-kernel-bartlett-bandwidth-scale"]], "arch.covariance.kernel.Parzen": [[104, "arch-covariance-kernel-parzen"]], "arch.covariance.kernel.CovarianceEstimate": [[101, "arch-covariance-kernel-covarianceestimate"]], "arch.covariance.kernel.Bartlett.bandwidth": [[122, "arch-covariance-kernel-bartlett-bandwidth"]], "arch.covariance.kernel.Andrews.centered": [[114, "arch-covariance-kernel-andrews-centered"]], "arch.covariance.kernel.Bartlett.cov": [[125, "arch-covariance-kernel-bartlett-cov"]], "arch.covariance.kernel.CovarianceEstimate.one_sided": [[133, "arch-covariance-kernel-covarianceestimate-one-sided"]], "arch.covariance.kernel.TukeyParzen": [[111, "arch-covariance-kernel-tukeyparzen"]], "arch.covariance.kernel.Gallant.bandwidth_scale": [[137, "arch-covariance-kernel-gallant-bandwidth-scale"]], "arch.covariance.kernel.ParzenCauchy": [[105, "arch-covariance-kernel-parzencauchy"]], "arch.covariance.kernel.Andrews.kernel_weights": [[118, "arch-covariance-kernel-andrews-kernel-weights"]], "arch.covariance.kernel.Andrews.kernel_const": [[117, "arch-covariance-kernel-andrews-kernel-const"]], "arch.covariance.kernel.CovarianceEstimate.long_run": [[132, "arch-covariance-kernel-covarianceestimate-long-run"]], "arch.covariance.kernel.Andrews.bandwidth_scale": [[113, "arch-covariance-kernel-andrews-bandwidth-scale"]], "arch.covariance.kernel.Andrews.opt_bandwidth": [[120, "arch-covariance-kernel-andrews-opt-bandwidth"]], "arch.covariance.kernel.Andrews.cov": [[115, "arch-covariance-kernel-andrews-cov"]], "arch.covariance.kernel.CovarianceEstimate.one_sided_strict": [[134, "arch-covariance-kernel-covarianceestimate-one-sided-strict"]], "Long-run Covariance Estimation": [[98, "long-run-covariance-estimation"]], "Long-run Covariance Estimators": [[98, "module-arch.covariance.kernel"]], "Results": [[98, "results"]], "arch.covariance.kernel.Gallant.cov": [[139, "arch-covariance-kernel-gallant-cov"]], "arch.covariance.kernel.ParzenGeometric": [[106, "arch-covariance-kernel-parzengeometric"]], "arch.covariance.kernel.Bartlett.centered": [[124, "arch-covariance-kernel-bartlett-centered"]], "arch.covariance.kernel.Bartlett.rate": [[131, "arch-covariance-kernel-bartlett-rate"]], "arch.covariance.kernel.Gallant.force_int": [[140, "arch-covariance-kernel-gallant-force-int"]], "Version 3": [[94, "version-3"]], "arch.covariance.kernel.QuadraticSpectral": [[108, "arch-covariance-kernel-quadraticspectral"]], "arch.univariate.volatility.VolatilityProcess.simulate": [[883, "arch-univariate-volatility-volatilityprocess-simulate"]], "arch.univariate.volatility.VolatilityProcess.constraints": [[878, "arch-univariate-volatility-volatilityprocess-constraints"]], "arch.univariate.volatility.VolatilityProcess.name": [[880, "arch-univariate-volatility-volatilityprocess-name"]], "arch.univariate.base.ARCHModelResult.std_err": [[855, "arch-univariate-base-archmodelresult-std-err"]], "arch.univariate.volatility.VolatilityProcess.backcast": [[874, "arch-univariate-volatility-volatilityprocess-backcast"]], "arch.univariate.distribution.Distribution.cdf": [[860, "arch-univariate-distribution-distribution-cdf"]], "arch.univariate.volatility.VolatilityProcess.backcast_transform": [[875, "arch-univariate-volatility-volatilityprocess-backcast-transform"]], "arch.univariate.volatility.VolatilityProcess.updateable": [[888, "arch-univariate-volatility-volatilityprocess-updateable"]], "arch.univariate.volatility.VolatilityProcess.num_params": [[881, "arch-univariate-volatility-volatilityprocess-num-params"]], "arch.univariate.distribution.Distribution.parameter_names": [[866, "arch-univariate-distribution-distribution-parameter-names"]], "arch.univariate.volatility.VolatilityProcess.volatility_updater": [[890, "arch-univariate-volatility-volatilityprocess-volatility-updater"]], "arch.univariate.volatility.VolatilityProcess.parameter_names": [[882, "arch-univariate-volatility-volatilityprocess-parameter-names"]], "arch.univariate.volatility.VolatilityProcess.compute_variance": [[877, "arch-univariate-volatility-volatilityprocess-compute-variance"]], "Introduction to ARCH Models": [[891, "introduction-to-arch-models"]], "Model Constructor": [[891, "model-constructor"]], "arch.univariate.volatility.VolatilityProcess.starting_values": [[885, "arch-univariate-volatility-volatilityprocess-starting-values"]], "arch.univariate.distribution.Distribution.ppf": [[868, "arch-univariate-distribution-distribution-ppf"]], "arch.univariate.recursions_python.VolatilityUpdater.update": [[873, "arch-univariate-recursions-python-volatilityupdater-update"]], "arch.univariate.distribution.Distribution.random_state": [[869, "arch-univariate-distribution-distribution-random-state"]], "arch.univariate.volatility.VolatilityProcess.variance_bounds": [[889, "arch-univariate-volatility-volatilityprocess-variance-bounds"]], "arch.univariate.base.ARCHModelResult.optimization_result": [[846, "arch-univariate-base-archmodelresult-optimization-result"]], "arch.univariate.distribution.Distribution.constraints": [[861, "arch-univariate-distribution-distribution-constraints"]], "arch.univariate.distribution.Distribution.moment": [[864, "arch-univariate-distribution-distribution-moment"]], "arch.univariate.distribution.Distribution.partial_moment": [[867, "arch-univariate-distribution-distribution-partial-moment"]], "arch.univariate.base.ARCHModelResult.rsquared_adj": [[853, "arch-univariate-base-archmodelresult-rsquared-adj"]], "arch.univariate.volatility.VolatilityProcess.update": [[887, "arch-univariate-volatility-volatilityprocess-update"]], "arch.univariate.base.ARCHModelResult.scale": [[854, "arch-univariate-base-archmodelresult-scale"]], "arch.univariate.distribution.Distribution.name": [[865, "arch-univariate-distribution-distribution-name"]], "arch.univariate.base.ARCHModelResult.resid": [[851, "arch-univariate-base-archmodelresult-resid"]], "arch.univariate.volatility.VolatilityProcess.bounds": [[876, "arch-univariate-volatility-volatilityprocess-bounds"]], "arch.univariate.base.ARCHModelResult.param_cov": [[847, "arch-univariate-base-archmodelresult-param-cov"]], "Mean Models": [[892, "mean-models"], [898, "Mean-Models"]], "(G)ARCH-in-mean Models": [[892, "g-arch-in-mean-models"]], "Special Requirements": [[892, "special-requirements"]], "Writing New Mean Models": [[892, "writing-new-mean-models"]], "arch.univariate.distribution.Distribution.generator": [[862, "arch-univariate-distribution-distribution-generator"]], "arch.univariate.recursions_python.VolatilityUpdater.initialize_update": [[872, "arch-univariate-recursions-python-volatilityupdater-initialize-update"]], "arch.univariate.base.ARCHModelResult.pvalues": [[850, "arch-univariate-base-archmodelresult-pvalues"]], "arch.univariate.volatility.VolatilityProcess.start": [[884, "arch-univariate-volatility-volatilityprocess-start"]], "arch.univariate.base.ARCHModelResult.params": [[848, "arch-univariate-base-archmodelresult-params"]], "arch.univariate.volatility.VolatilityProcess.forecast": [[879, "arch-univariate-volatility-volatilityprocess-forecast"]], "arch.univariate.base.ARCHModelResult.tvalues": [[858, "arch-univariate-base-archmodelresult-tvalues"]], "arch.univariate.base.ARCHModelResult.summary": [[857, "arch-univariate-base-archmodelresult-summary"]], "arch.univariate.distribution.Distribution.starting_values": [[871, "arch-univariate-distribution-distribution-starting-values"]], "arch.univariate.distribution.Distribution.loglikelihood": [[863, "arch-univariate-distribution-distribution-loglikelihood"]], "arch.univariate.distribution.Distribution.simulate": [[870, "arch-univariate-distribution-distribution-simulate"]], "arch.univariate.base.ARCHModelResult.rsquared": [[852, "arch-univariate-base-archmodelresult-rsquared"]], "arch.univariate.base.ARCHModelResult.plot": [[849, "arch-univariate-base-archmodelresult-plot"]], "arch.univariate.volatility.VolatilityProcess.stop": [[886, "arch-univariate-volatility-volatilityprocess-stop"]], "arch.univariate.distribution.Distribution.bounds": [[859, "arch-univariate-distribution-distribution-bounds"]], "arch.univariate.base.ARCHModelResult.std_resid": [[856, "arch-univariate-base-archmodelresult-std-resid"]], "arch.univariate.base.ARCHModelForecastSimulation.values": [[830, "arch-univariate-base-archmodelforecastsimulation-values"]], "arch.univariate.base.ARCHModelFixedResult.model": [[815, "arch-univariate-base-archmodelfixedresult-model"]], "arch.univariate.base.ARCHModelResult.model": [[843, "arch-univariate-base-archmodelresult-model"]], "arch.univariate.base.ARCHModelFixedResult.bic": [[810, "arch-univariate-base-archmodelfixedresult-bic"]], "arch.univariate.base.ARCHModelFixedResult.resid": [[820, "arch-univariate-base-archmodelfixedresult-resid"]], "arch.univariate.base.ARCHModelFixedResult.aic": [[808, "arch-univariate-base-archmodelfixedresult-aic"]], "arch.univariate.base.ARCHModelResult.loglikelihood": [[842, "arch-univariate-base-archmodelresult-loglikelihood"]], "arch.univariate.base.ARCHModelResult.forecast": [[840, "arch-univariate-base-archmodelresult-forecast"]], "arch.univariate.base.ARCHModel.volatility": [[806, "arch-univariate-base-archmodel-volatility"]], "arch.univariate.base.ARCHModelForecastSimulation.variances": [[831, "arch-univariate-base-archmodelforecastsimulation-variances"]], "arch.univariate.base.ARCHModelFixedResult.summary": [[822, "arch-univariate-base-archmodelfixedresult-summary"]], "arch.univariate.base.ARCHModelFixedResult.params": [[818, "arch-univariate-base-archmodelfixedresult-params"]], "arch.univariate.base.ARCHModelResult.fit_stop": [[839, "arch-univariate-base-archmodelresult-fit-stop"]], "arch.univariate.base.ARCHModelFixedResult.forecast": [[812, "arch-univariate-base-archmodelfixedresult-forecast"]], "arch.univariate.base.ARCHModel.resids": [[803, "arch-univariate-base-archmodel-resids"]], "arch.univariate.base.ARCHModelResult.fit_start": [[838, "arch-univariate-base-archmodelresult-fit-start"]], "arch.univariate.base.ARCHModel.name": [[800, "arch-univariate-base-archmodel-name"]], "arch.univariate.base.ARCHModel.simulate": [[804, "arch-univariate-base-archmodel-simulate"]], "arch.univariate.base.ARCHModelForecastSimulation.residual_variances": [[828, "arch-univariate-base-archmodelforecastsimulation-residual-variances"]], "arch.univariate.base.ARCHModelForecastSimulation.residuals": [[829, "arch-univariate-base-archmodelforecastsimulation-residuals"]], "arch.univariate.base.ARCHModelResult.aic": [[832, "arch-univariate-base-archmodelresult-aic"]], "arch.univariate.base.ARCHModel.starting_values": [[805, "arch-univariate-base-archmodel-starting-values"]], "arch.univariate.base.ARCHModelResult.num_params": [[845, "arch-univariate-base-archmodelresult-num-params"]], "arch.univariate.base.ARCHModelFixedResult.hedgehog_plot": [[813, "arch-univariate-base-archmodelfixedresult-hedgehog-plot"]], "arch.univariate.base.ARCHModelResult.arch_lm_test": [[833, "arch-univariate-base-archmodelresult-arch-lm-test"]], "arch.univariate.base.ARCHModel.num_params": [[801, "arch-univariate-base-archmodel-num-params"]], "arch.univariate.base.ARCHModel.y": [[807, "arch-univariate-base-archmodel-y"]], "arch.univariate.base.ARCHModelResult.conditional_volatility": [[835, "arch-univariate-base-archmodelresult-conditional-volatility"]], "arch.univariate.base.ARCHModelFixedResult.num_params": [[817, "arch-univariate-base-archmodelfixedresult-num-params"]], "arch.univariate.base.ARCHModelResult.hedgehog_plot": [[841, "arch-univariate-base-archmodelresult-hedgehog-plot"]], "arch.univariate.base.ARCHModelFixedResult.conditional_volatility": [[811, "arch-univariate-base-archmodelfixedresult-conditional-volatility"]], "arch.univariate.base.ARCHModelForecast.residual_variance": [[824, "arch-univariate-base-archmodelforecast-residual-variance"]], "arch.univariate.base.ARCHModelForecastSimulation.index": [[827, "arch-univariate-base-archmodelforecastsimulation-index"]], "arch.univariate.base.ARCHModelForecast.mean": [[823, "arch-univariate-base-archmodelforecast-mean"]], "arch.univariate.base.ARCHModelFixedResult.nobs": [[816, "arch-univariate-base-archmodelfixedresult-nobs"]], "arch.univariate.base.ARCHModelForecast.simulations": [[825, "arch-univariate-base-archmodelforecast-simulations"]], "arch.univariate.base.ARCHModelForecast.variance": [[826, "arch-univariate-base-archmodelforecast-variance"]], "arch.univariate.base.ARCHModelResult.convergence_flag": [[837, "arch-univariate-base-archmodelresult-convergence-flag"]], "arch.univariate.base.ARCHModelResult.conf_int": [[836, "arch-univariate-base-archmodelresult-conf-int"]], "arch.univariate.base.ARCHModelFixedResult.arch_lm_test": [[809, "arch-univariate-base-archmodelfixedresult-arch-lm-test"]], "arch.univariate.base.ARCHModelResult.bic": [[834, "arch-univariate-base-archmodelresult-bic"]], "arch.univariate.base.ARCHModelFixedResult.std_resid": [[821, "arch-univariate-base-archmodelfixedresult-std-resid"]], "arch.univariate.base.ARCHModelResult.nobs": [[844, "arch-univariate-base-archmodelresult-nobs"]], "arch.univariate.base.ARCHModelFixedResult.loglikelihood": [[814, "arch-univariate-base-archmodelfixedresult-loglikelihood"]], "arch.univariate.base.ARCHModel.forecast": [[799, "arch-univariate-base-archmodel-forecast"]], "arch.univariate.base.ARCHModelFixedResult.plot": [[819, "arch-univariate-base-archmodelfixedresult-plot"]], "arch.univariate.base.ARCHModel.parameter_names": [[802, "arch-univariate-base-archmodel-parameter-names"]], "arch.bootstrap.IndependentSamplesBootstrap.conf_int": [[44, "arch-bootstrap-independentsamplesbootstrap-conf-int"]], "arch.bootstrap.IIDBootstrap.seed": [[36, "arch-bootstrap-iidbootstrap-seed"]], "arch.bootstrap.CircularBlockBootstrap.update_indices": [[24, "arch-bootstrap-circularblockbootstrap-update-indices"]], "arch.bootstrap.CircularBlockBootstrap.generator": [[16, "arch-bootstrap-circularblockbootstrap-generator"]], "Bootstrapping": [[2, "module-arch.bootstrap"]], "arch.bootstrap.IIDBootstrap.apply": [[26, "arch-bootstrap-iidbootstrap-apply"]], "arch.bootstrap.IIDBootstrap.bootstrap": [[27, "arch-bootstrap-iidbootstrap-bootstrap"]], "arch.bootstrap.IndependentSamplesBootstrap.cov": [[45, "arch-bootstrap-independentsamplesbootstrap-cov"]], "arch.bootstrap.CircularBlockBootstrap.random_state": [[19, "arch-bootstrap-circularblockbootstrap-random-state"]], "arch.bootstrap.CircularBlockBootstrap.set_state": [[22, "arch-bootstrap-circularblockbootstrap-set-state"]], "arch.bootstrap.CircularBlockBootstrap.seed": [[21, "arch-bootstrap-circularblockbootstrap-seed"]], "arch.bootstrap.CircularBlockBootstrap.state": [[23, "arch-bootstrap-circularblockbootstrap-state"]], "arch.bootstrap.IIDBootstrap.state": [[38, "arch-bootstrap-iidbootstrap-state"]], "arch.bootstrap.IIDBootstrap.var": [[40, "arch-bootstrap-iidbootstrap-var"]], "arch.bootstrap.CircularBlockBootstrap.reset": [[20, "arch-bootstrap-circularblockbootstrap-reset"]], "arch.bootstrap.StationaryBootstrap": [[9, "arch-bootstrap-stationarybootstrap"]], "arch.bootstrap.CircularBlockBootstrap.clone": [[13, "arch-bootstrap-circularblockbootstrap-clone"]], "arch.bootstrap.IIDBootstrap.update_indices": [[39, "arch-bootstrap-iidbootstrap-update-indices"]], "arch.bootstrap.optimal_block_length": [[10, "arch-bootstrap-optimal-block-length"]], "arch.bootstrap.CircularBlockBootstrap": [[5, "arch-bootstrap-circularblockbootstrap"]], "Confidence Intervals": [[4, "confidence-intervals"]], "Confidence Interval Types": [[4, "confidence-interval-types"]], "Nonparametric Confidence Intervals": [[4, "nonparametric-confidence-intervals"]], "Semi-parametric Confidence Intervals": [[4, "semi-parametric-confidence-intervals"]], "Parametric Confidence Intervals": [[4, "parametric-confidence-intervals"]], "Confidence Interval Methods": [[4, "confidence-interval-methods"]], "Basic (basic)": [[4, "basic-basic"]], "Percentile (percentile)": [[4, "percentile-percentile"]], "Asymptotic Normal Approximation (norm, cov or var)": [[4, "asymptotic-normal-approximation-norm-cov-or-var"]], "Studentized (studentized)": [[4, "studentized-studentized"]], "Bias-corrected (bc, bias-corrected or debiased)": [[4, "bias-corrected-bc-bias-corrected-or-debiased"]], "Bias-corrected and accelerated (bca)": [[4, "bias-corrected-and-accelerated-bca"]], "arch.bootstrap.IIDBootstrap.get_state": [[32, "arch-bootstrap-iidbootstrap-get-state"]], "arch.bootstrap.IIDBootstrap.index": [[33, "arch-bootstrap-iidbootstrap-index"]], "arch.bootstrap.IndependentSamplesBootstrap.clone": [[43, "arch-bootstrap-independentsamplesbootstrap-clone"]], "arch.bootstrap.IndependentSamplesBootstrap.generator": [[46, "arch-bootstrap-independentsamplesbootstrap-generator"]], "arch.bootstrap.CircularBlockBootstrap.bootstrap": [[12, "arch-bootstrap-circularblockbootstrap-bootstrap"]], "arch.bootstrap.IIDBootstrap.conf_int": [[29, "arch-bootstrap-iidbootstrap-conf-int"]], "arch.bootstrap.MovingBlockBootstrap": [[8, "arch-bootstrap-movingblockbootstrap"]], "arch.bootstrap.CircularBlockBootstrap.apply": [[11, "arch-bootstrap-circularblockbootstrap-apply"]], "arch.bootstrap.IndependentSamplesBootstrap": [[7, "arch-bootstrap-independentsamplesbootstrap"]], "arch.bootstrap.IIDBootstrap.clone": [[28, "arch-bootstrap-iidbootstrap-clone"]], "arch.bootstrap.IIDBootstrap.cov": [[30, "arch-bootstrap-iidbootstrap-cov"]], "arch.bootstrap.IndependentSamplesBootstrap.bootstrap": [[42, "arch-bootstrap-independentsamplesbootstrap-bootstrap"]], "References": [[1, "references"], [237, "references"]], "arch.bootstrap.CircularBlockBootstrap.var": [[25, "arch-bootstrap-circularblockbootstrap-var"]], "arch.bootstrap.IIDBootstrap.set_state": [[37, "arch-bootstrap-iidbootstrap-set-state"]], "arch.bootstrap.CircularBlockBootstrap.conf_int": [[14, "arch-bootstrap-circularblockbootstrap-conf-int"]], "arch.bootstrap.IndependentSamplesBootstrap.apply": [[41, "arch-bootstrap-independentsamplesbootstrap-apply"]], "arch.bootstrap.CircularBlockBootstrap.get_state": [[17, "arch-bootstrap-circularblockbootstrap-get-state"]], "arch.bootstrap.IIDBootstrap": [[6, "arch-bootstrap-iidbootstrap"]], "API Reference": [[0, "api-reference"]], "High-level": [[0, "high-level"]], "Mean Specification": [[0, "mean-specification"]], "Volatility Process Specification": [[0, "volatility-process-specification"]], "Shock Distributions": [[0, "shock-distributions"]], "Unit Root Testing": [[0, "unit-root-testing"], [419, "unit-root-testing"], [421, "Unit-Root-Testing"]], "Cointegration Testing": [[0, "cointegration-testing"], [420, "Cointegration-Testing"]], "Cointegrating Relationship Estimation": [[0, "cointegrating-relationship-estimation"]], "Bootstraps": [[0, "bootstraps"]], "Block-length Selection": [[0, "block-length-selection"]], "Testing with Multiple-Comparison": [[0, "testing-with-multiple-comparison"]], "Long-run Covariance (HAC) Estimation": [[0, "long-run-covariance-hac-estimation"]], "arch.bootstrap.CircularBlockBootstrap.cov": [[15, "arch-bootstrap-circularblockbootstrap-cov"]], "arch.bootstrap.CircularBlockBootstrap.index": [[18, "arch-bootstrap-circularblockbootstrap-index"]], "arch.bootstrap.IIDBootstrap.reset": [[35, "arch-bootstrap-iidbootstrap-reset"]], "arch.bootstrap.IIDBootstrap.generator": [[31, "arch-bootstrap-iidbootstrap-generator"]], "arch.bootstrap.IIDBootstrap.random_state": [[34, "arch-bootstrap-iidbootstrap-random-state"]], "arch.univariate.base.ARCHModel.compute_param_cov": [[794, "arch-univariate-base-archmodel-compute-param-cov"]], "arch.univariate.SkewStudent.parameter_names": [[758, "arch-univariate-skewstudent-parameter-names"]], "arch.univariate.base.ARCHModel.constraints": [[795, "arch-univariate-base-archmodel-constraints"]], "arch.univariate.SkewStudent.cdf": [[752, "arch-univariate-skewstudent-cdf"]], "arch.univariate.base.ARCHModel.bounds": [[793, "arch-univariate-base-archmodel-bounds"]], "arch.univariate.SkewStudent.starting_values": [[763, "arch-univariate-skewstudent-starting-values"]], "arch.univariate.SkewStudent.generator": [[754, "arch-univariate-skewstudent-generator"]], "arch.univariate.ZeroMean.volatility": [[790, "arch-univariate-zeromean-volatility"]], "arch.univariate.SkewStudent.name": [[757, "arch-univariate-skewstudent-name"]], "arch.univariate.StudentsT.parameter_names": [[771, "arch-univariate-studentst-parameter-names"]], "arch.univariate.SkewStudent.moment": [[756, "arch-univariate-skewstudent-moment"]], "arch.univariate.SkewStudent.ppf": [[760, "arch-univariate-skewstudent-ppf"]], "arch.univariate.StudentsT.random_state": [[774, "arch-univariate-studentst-random-state"]], "arch.univariate.base.ARCHModel.distribution": [[796, "arch-univariate-base-archmodel-distribution"]], "arch.univariate.StudentsT.partial_moment": [[772, "arch-univariate-studentst-partial-moment"]], "arch.univariate.ZeroMean.resids": [[787, "arch-univariate-zeromean-resids"]], "arch.univariate.ZeroMean.num_params": [[785, "arch-univariate-zeromean-num-params"]], "arch.univariate.ZeroMean.fix": [[782, "arch-univariate-zeromean-fix"]], "arch.univariate.StudentsT.ppf": [[773, "arch-univariate-studentst-ppf"]], "arch.univariate.ZeroMean.fit": [[781, "arch-univariate-zeromean-fit"]], "arch.univariate.SkewStudent.loglikelihood": [[755, "arch-univariate-skewstudent-loglikelihood"]], "arch.univariate.StudentsT.bounds": [[764, "arch-univariate-studentst-bounds"]], "arch.univariate.base.ARCHModel.fit": [[797, "arch-univariate-base-archmodel-fit"]], "arch.univariate.base.ARCHModel.fix": [[798, "arch-univariate-base-archmodel-fix"]], "arch.univariate.SkewStudent.simulate": [[762, "arch-univariate-skewstudent-simulate"]], "arch.univariate.ZeroMean.starting_values": [[789, "arch-univariate-zeromean-starting-values"]], "arch.univariate.SkewStudent.partial_moment": [[759, "arch-univariate-skewstudent-partial-moment"]], "arch.univariate.StudentsT.cdf": [[765, "arch-univariate-studentst-cdf"]], "arch.univariate.StudentsT.simulate": [[775, "arch-univariate-studentst-simulate"]], "arch.univariate.ZeroMean.forecast": [[783, "arch-univariate-zeromean-forecast"]], "arch.univariate.ZeroMean.simulate": [[788, "arch-univariate-zeromean-simulate"]], "arch.univariate.ZeroMean.compute_param_cov": [[778, "arch-univariate-zeromean-compute-param-cov"]], "arch.univariate.ZeroMean.distribution": [[780, "arch-univariate-zeromean-distribution"]], "arch.univariate.ZeroMean.x": [[791, "arch-univariate-zeromean-x"]], "arch.univariate.SkewStudent.constraints": [[753, "arch-univariate-skewstudent-constraints"]], "arch.univariate.ZeroMean.y": [[792, "arch-univariate-zeromean-y"]], "arch.univariate.SkewStudent.random_state": [[761, "arch-univariate-skewstudent-random-state"]], "arch.univariate.ZeroMean.name": [[784, "arch-univariate-zeromean-name"]], "arch.univariate.StudentsT.loglikelihood": [[768, "arch-univariate-studentst-loglikelihood"]], "arch.univariate.ZeroMean.parameter_names": [[786, "arch-univariate-zeromean-parameter-names"]], "arch.univariate.StudentsT.generator": [[767, "arch-univariate-studentst-generator"]], "arch.univariate.StudentsT.starting_values": [[776, "arch-univariate-studentst-starting-values"]], "arch.univariate.StudentsT.constraints": [[766, "arch-univariate-studentst-constraints"]], "arch.univariate.StudentsT.name": [[770, "arch-univariate-studentst-name"]], "arch.univariate.StudentsT.moment": [[769, "arch-univariate-studentst-moment"]], "arch.univariate.ZeroMean.constraints": [[779, "arch-univariate-zeromean-constraints"]], "arch.univariate.ZeroMean.bounds": [[777, "arch-univariate-zeromean-bounds"]], "arch.univariate.RiskMetrics2006.num_params": [[741, "arch-univariate-riskmetrics2006-num-params"]], "arch.univariate.MIDASHyperbolic.starting_values": [[715, "arch-univariate-midashyperbolic-starting-values"]], "arch.univariate.MIDASHyperbolic.forecast": [[709, "arch-univariate-midashyperbolic-forecast"]], "arch.univariate.MIDASHyperbolic.start": [[714, "arch-univariate-midashyperbolic-start"]], "arch.univariate.RiskMetrics2006.starting_values": [[745, "arch-univariate-riskmetrics2006-starting-values"]], "arch.univariate.Normal.constraints": [[723, "arch-univariate-normal-constraints"]], "arch.univariate.MIDASHyperbolic.compute_variance": [[707, "arch-univariate-midashyperbolic-compute-variance"]], "arch.univariate.Normal.generator": [[724, "arch-univariate-normal-generator"]], "arch.univariate.RiskMetrics2006.variance_bounds": [[749, "arch-univariate-riskmetrics2006-variance-bounds"]], "arch.univariate.RiskMetrics2006.parameter_names": [[742, "arch-univariate-riskmetrics2006-parameter-names"]], "arch.univariate.RiskMetrics2006.constraints": [[738, "arch-univariate-riskmetrics2006-constraints"]], "arch.univariate.Normal.moment": [[726, "arch-univariate-normal-moment"]], "arch.univariate.Normal.partial_moment": [[729, "arch-univariate-normal-partial-moment"]], "arch.univariate.MIDASHyperbolic.constraints": [[708, "arch-univariate-midashyperbolic-constraints"]], "arch.univariate.RiskMetrics2006.volatility_updater": [[750, "arch-univariate-riskmetrics2006-volatility-updater"]], "arch.univariate.RiskMetrics2006.forecast": [[739, "arch-univariate-riskmetrics2006-forecast"]], "arch.univariate.Normal.random_state": [[731, "arch-univariate-normal-random-state"]], "arch.univariate.MIDASHyperbolic.name": [[710, "arch-univariate-midashyperbolic-name"]], "arch.univariate.RiskMetrics2006.simulate": [[743, "arch-univariate-riskmetrics2006-simulate"]], "arch.univariate.Normal.starting_values": [[733, "arch-univariate-normal-starting-values"]], "arch.univariate.MIDASHyperbolic.stop": [[716, "arch-univariate-midashyperbolic-stop"]], "arch.univariate.Normal.name": [[727, "arch-univariate-normal-name"]], "arch.univariate.Normal.loglikelihood": [[725, "arch-univariate-normal-loglikelihood"]], "arch.univariate.Normal.bounds": [[721, "arch-univariate-normal-bounds"]], "arch.univariate.MIDASHyperbolic.variance_bounds": [[719, "arch-univariate-midashyperbolic-variance-bounds"]], "arch.univariate.RiskMetrics2006.backcast_transform": [[735, "arch-univariate-riskmetrics2006-backcast-transform"]], "arch.univariate.MIDASHyperbolic.update": [[717, "arch-univariate-midashyperbolic-update"]], "arch.univariate.RiskMetrics2006.update": [[747, "arch-univariate-riskmetrics2006-update"]], "arch.univariate.RiskMetrics2006.compute_variance": [[737, "arch-univariate-riskmetrics2006-compute-variance"]], "arch.univariate.Normal.simulate": [[732, "arch-univariate-normal-simulate"]], "arch.univariate.SkewStudent.bounds": [[751, "arch-univariate-skewstudent-bounds"]], "arch.univariate.MIDASHyperbolic.volatility_updater": [[720, "arch-univariate-midashyperbolic-volatility-updater"]], "arch.univariate.MIDASHyperbolic.backcast_transform": [[705, "arch-univariate-midashyperbolic-backcast-transform"]], "arch.univariate.MIDASHyperbolic.num_params": [[711, "arch-univariate-midashyperbolic-num-params"]], "arch.univariate.RiskMetrics2006.bounds": [[736, "arch-univariate-riskmetrics2006-bounds"]], "arch.univariate.RiskMetrics2006.start": [[744, "arch-univariate-riskmetrics2006-start"]], "arch.univariate.RiskMetrics2006.updateable": [[748, "arch-univariate-riskmetrics2006-updateable"]], "arch.univariate.MIDASHyperbolic.simulate": [[713, "arch-univariate-midashyperbolic-simulate"]], "arch.univariate.Normal.cdf": [[722, "arch-univariate-normal-cdf"]], "arch.univariate.Normal.parameter_names": [[728, "arch-univariate-normal-parameter-names"]], "arch.univariate.RiskMetrics2006.name": [[740, "arch-univariate-riskmetrics2006-name"]], "arch.univariate.Normal.ppf": [[730, "arch-univariate-normal-ppf"]], "arch.univariate.RiskMetrics2006.stop": [[746, "arch-univariate-riskmetrics2006-stop"]], "arch.univariate.MIDASHyperbolic.parameter_names": [[712, "arch-univariate-midashyperbolic-parameter-names"]], "arch.univariate.MIDASHyperbolic.bounds": [[706, "arch-univariate-midashyperbolic-bounds"]], "arch.univariate.RiskMetrics2006.backcast": [[734, "arch-univariate-riskmetrics2006-backcast"]], "arch.univariate.MIDASHyperbolic.updateable": [[718, "arch-univariate-midashyperbolic-updateable"]], "arch.univariate.LS.constraints": [[690, "arch-univariate-ls-constraints"]], "arch.univariate.HARCH.forecast": [[660, "arch-univariate-harch-forecast"]], "arch.univariate.HARX.name": [[679, "arch-univariate-harx-name"]], "arch.univariate.LS.volatility": [[701, "arch-univariate-ls-volatility"]], "arch.univariate.HARX.num_params": [[680, "arch-univariate-harx-num-params"]], "arch.univariate.HARX.parameter_names": [[681, "arch-univariate-harx-parameter-names"]], "arch.univariate.LS.forecast": [[694, "arch-univariate-ls-forecast"]], "arch.univariate.HARX.compute_param_cov": [[673, "arch-univariate-harx-compute-param-cov"]], "arch.univariate.MIDASHyperbolic.backcast": [[704, "arch-univariate-midashyperbolic-backcast"]], "arch.univariate.LS.parameter_names": [[697, "arch-univariate-ls-parameter-names"]], "arch.univariate.LS.simulate": [[699, "arch-univariate-ls-simulate"]], "arch.univariate.LS.num_params": [[696, "arch-univariate-ls-num-params"]], "arch.univariate.HARCH.simulate": [[664, "arch-univariate-harch-simulate"]], "arch.univariate.LS.fit": [[692, "arch-univariate-ls-fit"]], "arch.univariate.HARCH.variance_bounds": [[670, "arch-univariate-harch-variance-bounds"]], "arch.univariate.HARCH.parameter_names": [[663, "arch-univariate-harch-parameter-names"]], "arch.univariate.LS.fix": [[693, "arch-univariate-ls-fix"]], "arch.univariate.HARCH.updateable": [[669, "arch-univariate-harch-updateable"]], "arch.univariate.LS.name": [[695, "arch-univariate-ls-name"]], "arch.univariate.HARX.fix": [[677, "arch-univariate-harx-fix"]], "arch.univariate.HARX.constraints": [[674, "arch-univariate-harx-constraints"]], "arch.univariate.HARCH.name": [[661, "arch-univariate-harch-name"]], "arch.univariate.LS.y": [[703, "arch-univariate-ls-y"]], "arch.univariate.LS.x": [[702, "arch-univariate-ls-x"]], "arch.univariate.HARX.y": [[687, "arch-univariate-harx-y"]], "arch.univariate.HARX.starting_values": [[684, "arch-univariate-harx-starting-values"]], "arch.univariate.LS.starting_values": [[700, "arch-univariate-ls-starting-values"]], "arch.univariate.HARX.resids": [[682, "arch-univariate-harx-resids"]], "arch.univariate.HARX.fit": [[676, "arch-univariate-harx-fit"]], "arch.univariate.HARX.simulate": [[683, "arch-univariate-harx-simulate"]], "arch.univariate.HARCH.constraints": [[659, "arch-univariate-harch-constraints"]], "arch.univariate.HARX.distribution": [[675, "arch-univariate-harx-distribution"]], "arch.univariate.HARX.forecast": [[678, "arch-univariate-harx-forecast"]], "arch.univariate.HARX.volatility": [[685, "arch-univariate-harx-volatility"]], "arch.univariate.HARCH.start": [[665, "arch-univariate-harch-start"]], "arch.univariate.HARCH.update": [[668, "arch-univariate-harch-update"]], "arch.univariate.HARX.x": [[686, "arch-univariate-harx-x"]], "arch.univariate.HARCH.volatility_updater": [[671, "arch-univariate-harch-volatility-updater"]], "arch.univariate.HARCH.num_params": [[662, "arch-univariate-harch-num-params"]], "arch.univariate.HARCH.stop": [[667, "arch-univariate-harch-stop"]], "arch.univariate.LS.resids": [[698, "arch-univariate-ls-resids"]], "arch.univariate.HARCH.compute_variance": [[658, "arch-univariate-harch-compute-variance"]], "arch.univariate.LS.bounds": [[688, "arch-univariate-ls-bounds"]], "arch.univariate.HARCH.starting_values": [[666, "arch-univariate-harch-starting-values"]], "arch.univariate.HARX.bounds": [[672, "arch-univariate-harx-bounds"]], "arch.univariate.LS.compute_param_cov": [[689, "arch-univariate-ls-compute-param-cov"]], "arch.univariate.LS.distribution": [[691, "arch-univariate-ls-distribution"]], "arch.univariate.FixedVariance.num_params": [[615, "arch-univariate-fixedvariance-num-params"]], "arch.univariate.GARCH.volatility_updater": [[641, "arch-univariate-garch-volatility-updater"]], "arch.univariate.FixedVariance.name": [[614, "arch-univariate-fixedvariance-name"]], "arch.univariate.FixedVariance.updateable": [[622, "arch-univariate-fixedvariance-updateable"]], "arch.univariate.GARCH.compute_variance": [[628, "arch-univariate-garch-compute-variance"]], "arch.univariate.GARCH.starting_values": [[636, "arch-univariate-garch-starting-values"]], "arch.univariate.GeneralizedError.ppf": [[651, "arch-univariate-generalizederror-ppf"]], "arch.univariate.GeneralizedError.parameter_names": [[649, "arch-univariate-generalizederror-parameter-names"]], "arch.univariate.GARCH.start": [[635, "arch-univariate-garch-start"]], "arch.univariate.GARCH.constraints": [[629, "arch-univariate-garch-constraints"]], "arch.univariate.GARCH.parameter_names": [[633, "arch-univariate-garch-parameter-names"]], "arch.univariate.GARCH.forecast": [[630, "arch-univariate-garch-forecast"]], "arch.univariate.FixedVariance.parameter_names": [[616, "arch-univariate-fixedvariance-parameter-names"]], "arch.univariate.GeneralizedError.bounds": [[642, "arch-univariate-generalizederror-bounds"]], "arch.univariate.GeneralizedError.moment": [[647, "arch-univariate-generalizederror-moment"]], "arch.univariate.GeneralizedError.partial_moment": [[650, "arch-univariate-generalizederror-partial-moment"]], "arch.univariate.GARCH.update": [[638, "arch-univariate-garch-update"]], "arch.univariate.HARCH.backcast": [[655, "arch-univariate-harch-backcast"]], "arch.univariate.FixedVariance.simulate": [[617, "arch-univariate-fixedvariance-simulate"]], "arch.univariate.GeneralizedError.constraints": [[644, "arch-univariate-generalizederror-constraints"]], "arch.univariate.GARCH.backcast": [[625, "arch-univariate-garch-backcast"]], "arch.univariate.GARCH.backcast_transform": [[626, "arch-univariate-garch-backcast-transform"]], "arch.univariate.FixedVariance.stop": [[620, "arch-univariate-fixedvariance-stop"]], "arch.univariate.FixedVariance.forecast": [[613, "arch-univariate-fixedvariance-forecast"]], "arch.univariate.GARCH.bounds": [[627, "arch-univariate-garch-bounds"]], "arch.univariate.HARCH.backcast_transform": [[656, "arch-univariate-harch-backcast-transform"]], "arch.univariate.FixedVariance.constraints": [[612, "arch-univariate-fixedvariance-constraints"]], "arch.univariate.HARCH.bounds": [[657, "arch-univariate-harch-bounds"]], "arch.univariate.GeneralizedError.name": [[648, "arch-univariate-generalizederror-name"]], "arch.univariate.GeneralizedError.generator": [[645, "arch-univariate-generalizederror-generator"]], "arch.univariate.FixedVariance.variance_bounds": [[623, "arch-univariate-fixedvariance-variance-bounds"]], "arch.univariate.GARCH.variance_bounds": [[640, "arch-univariate-garch-variance-bounds"]], "arch.univariate.GeneralizedError.cdf": [[643, "arch-univariate-generalizederror-cdf"]], "arch.univariate.GARCH.name": [[631, "arch-univariate-garch-name"]], "arch.univariate.GARCH.updateable": [[639, "arch-univariate-garch-updateable"]], "arch.univariate.FixedVariance.starting_values": [[619, "arch-univariate-fixedvariance-starting-values"]], "arch.univariate.GeneralizedError.loglikelihood": [[646, "arch-univariate-generalizederror-loglikelihood"]], "arch.univariate.FixedVariance.compute_variance": [[611, "arch-univariate-fixedvariance-compute-variance"]], "arch.univariate.GeneralizedError.starting_values": [[654, "arch-univariate-generalizederror-starting-values"]], "arch.univariate.GeneralizedError.random_state": [[652, "arch-univariate-generalizederror-random-state"]], "arch.univariate.GARCH.stop": [[637, "arch-univariate-garch-stop"]], "arch.univariate.FixedVariance.update": [[621, "arch-univariate-fixedvariance-update"]], "arch.univariate.GARCH.num_params": [[632, "arch-univariate-garch-num-params"]], "arch.univariate.FixedVariance.volatility_updater": [[624, "arch-univariate-fixedvariance-volatility-updater"]], "arch.univariate.GARCH.simulate": [[634, "arch-univariate-garch-simulate"]], "arch.univariate.GeneralizedError.simulate": [[653, "arch-univariate-generalizederror-simulate"]], "arch.univariate.FixedVariance.start": [[618, "arch-univariate-fixedvariance-start"]], "arch.univariate.FIGARCH.forecast": [[595, "arch-univariate-figarch-forecast"]], "arch.univariate.EWMAVariance.starting_values": [[584, "arch-univariate-ewmavariance-starting-values"]], "arch.univariate.EWMAVariance.start": [[583, "arch-univariate-ewmavariance-start"]], "arch.univariate.FIGARCH.update": [[604, "arch-univariate-figarch-update"]], "arch.univariate.FIGARCH.simulate": [[599, "arch-univariate-figarch-simulate"]], "arch.univariate.EWMAVariance.volatility_updater": [[589, "arch-univariate-ewmavariance-volatility-updater"]], "arch.univariate.EWMAVariance.parameter_names": [[581, "arch-univariate-ewmavariance-parameter-names"]], "arch.univariate.EGARCH.update": [[569, "arch-univariate-egarch-update"]], "arch.univariate.EGARCH.starting_values": [[567, "arch-univariate-egarch-starting-values"]], "arch.univariate.FIGARCH.name": [[596, "arch-univariate-figarch-name"]], "arch.univariate.EWMAVariance.backcast": [[573, "arch-univariate-ewmavariance-backcast"]], "arch.univariate.FIGARCH.compute_variance": [[593, "arch-univariate-figarch-compute-variance"]], "arch.univariate.FIGARCH.backcast": [[590, "arch-univariate-figarch-backcast"]], "arch.univariate.FIGARCH.start": [[600, "arch-univariate-figarch-start"]], "arch.univariate.FixedVariance.bounds": [[610, "arch-univariate-fixedvariance-bounds"]], "arch.univariate.EGARCH.updateable": [[570, "arch-univariate-egarch-updateable"]], "arch.univariate.EWMAVariance.constraints": [[577, "arch-univariate-ewmavariance-constraints"]], "arch.univariate.EGARCH.stop": [[568, "arch-univariate-egarch-stop"]], "arch.univariate.EWMAVariance.bounds": [[575, "arch-univariate-ewmavariance-bounds"]], "arch.univariate.FixedVariance.backcast": [[608, "arch-univariate-fixedvariance-backcast"]], "arch.univariate.EWMAVariance.simulate": [[582, "arch-univariate-ewmavariance-simulate"]], "arch.univariate.FIGARCH.bounds": [[592, "arch-univariate-figarch-bounds"]], "arch.univariate.FIGARCH.parameter_names": [[598, "arch-univariate-figarch-parameter-names"]], "arch.univariate.FIGARCH.starting_values": [[601, "arch-univariate-figarch-starting-values"]], "arch.univariate.EGARCH.parameter_names": [[564, "arch-univariate-egarch-parameter-names"]], "arch.univariate.EWMAVariance.backcast_transform": [[574, "arch-univariate-ewmavariance-backcast-transform"]], "arch.univariate.EWMAVariance.variance_bounds": [[588, "arch-univariate-ewmavariance-variance-bounds"]], "arch.univariate.EGARCH.start": [[566, "arch-univariate-egarch-start"]], "arch.univariate.EWMAVariance.updateable": [[587, "arch-univariate-ewmavariance-updateable"]], "arch.univariate.FIGARCH.backcast_transform": [[591, "arch-univariate-figarch-backcast-transform"]], "arch.univariate.FIGARCH.volatility_updater": [[607, "arch-univariate-figarch-volatility-updater"]], "arch.univariate.EWMAVariance.stop": [[585, "arch-univariate-ewmavariance-stop"]], "arch.univariate.FIGARCH.variance_bounds": [[606, "arch-univariate-figarch-variance-bounds"]], "arch.univariate.FIGARCH.num_params": [[597, "arch-univariate-figarch-num-params"]], "arch.univariate.FIGARCH.stop": [[602, "arch-univariate-figarch-stop"]], "arch.univariate.FixedVariance.backcast_transform": [[609, "arch-univariate-fixedvariance-backcast-transform"]], "arch.univariate.EGARCH.volatility_updater": [[572, "arch-univariate-egarch-volatility-updater"]], "arch.univariate.EGARCH.variance_bounds": [[571, "arch-univariate-egarch-variance-bounds"]], "arch.univariate.EWMAVariance.num_params": [[580, "arch-univariate-ewmavariance-num-params"]], "arch.univariate.EWMAVariance.name": [[579, "arch-univariate-ewmavariance-name"]], "arch.univariate.EWMAVariance.compute_variance": [[576, "arch-univariate-ewmavariance-compute-variance"]], "arch.univariate.FIGARCH.truncation": [[603, "arch-univariate-figarch-truncation"]], "arch.univariate.FIGARCH.constraints": [[594, "arch-univariate-figarch-constraints"]], "arch.univariate.FIGARCH.updateable": [[605, "arch-univariate-figarch-updateable"]], "arch.univariate.EGARCH.simulate": [[565, "arch-univariate-egarch-simulate"]], "arch.univariate.EWMAVariance.forecast": [[578, "arch-univariate-ewmavariance-forecast"]], "arch.univariate.EWMAVariance.update": [[586, "arch-univariate-ewmavariance-update"]], "arch.univariate.ARX.x": [[521, "arch-univariate-arx-x"]], "arch.univariate.ConstantVariance.variance_bounds": [[554, "arch-univariate-constantvariance-variance-bounds"]], "arch.univariate.EGARCH.backcast": [[556, "arch-univariate-egarch-backcast"]], "arch.univariate.EGARCH.bounds": [[558, "arch-univariate-egarch-bounds"]], "arch.univariate.ConstantVariance.bounds": [[541, "arch-univariate-constantvariance-bounds"]], "arch.univariate.ConstantMean.forecast": [[529, "arch-univariate-constantmean-forecast"]], "arch.univariate.ConstantMean.constraints": [[525, "arch-univariate-constantmean-constraints"]], "arch.univariate.EGARCH.name": [[562, "arch-univariate-egarch-name"]], "arch.univariate.ConstantMean.parameter_names": [[532, "arch-univariate-constantmean-parameter-names"]], "arch.univariate.ConstantVariance.constraints": [[543, "arch-univariate-constantvariance-constraints"]], "arch.univariate.ConstantVariance.starting_values": [[550, "arch-univariate-constantvariance-starting-values"]], "arch.univariate.ConstantVariance.compute_variance": [[542, "arch-univariate-constantvariance-compute-variance"]], "arch.univariate.ConstantMean.starting_values": [[535, "arch-univariate-constantmean-starting-values"]], "arch.univariate.ConstantVariance.name": [[545, "arch-univariate-constantvariance-name"]], "arch.univariate.EGARCH.constraints": [[560, "arch-univariate-egarch-constraints"]], "arch.univariate.ConstantVariance.start": [[549, "arch-univariate-constantvariance-start"]], "arch.univariate.ConstantVariance.backcast": [[539, "arch-univariate-constantvariance-backcast"]], "arch.univariate.ARX.simulate": [[518, "arch-univariate-arx-simulate"]], "arch.univariate.ConstantMean.num_params": [[531, "arch-univariate-constantmean-num-params"]], "arch.univariate.EGARCH.forecast": [[561, "arch-univariate-egarch-forecast"]], "arch.univariate.ARX.resids": [[517, "arch-univariate-arx-resids"]], "arch.univariate.ConstantMean.bounds": [[523, "arch-univariate-constantmean-bounds"]], "arch.univariate.ConstantMean.fit": [[527, "arch-univariate-constantmean-fit"]], "arch.univariate.ConstantMean.compute_param_cov": [[524, "arch-univariate-constantmean-compute-param-cov"]], "arch.univariate.ConstantMean.resids": [[533, "arch-univariate-constantmean-resids"]], "arch.univariate.ConstantVariance.backcast_transform": [[540, "arch-univariate-constantvariance-backcast-transform"]], "arch.univariate.ConstantVariance.forecast": [[544, "arch-univariate-constantvariance-forecast"]], "arch.univariate.ConstantVariance.stop": [[551, "arch-univariate-constantvariance-stop"]], "arch.univariate.ConstantVariance.updateable": [[553, "arch-univariate-constantvariance-updateable"]], "arch.univariate.EGARCH.backcast_transform": [[557, "arch-univariate-egarch-backcast-transform"]], "arch.univariate.ConstantVariance.simulate": [[548, "arch-univariate-constantvariance-simulate"]], "arch.univariate.ConstantMean.volatility": [[536, "arch-univariate-constantmean-volatility"]], "arch.univariate.EGARCH.num_params": [[563, "arch-univariate-egarch-num-params"]], "arch.univariate.ConstantMean.name": [[530, "arch-univariate-constantmean-name"]], "arch.univariate.ConstantVariance.num_params": [[546, "arch-univariate-constantvariance-num-params"]], "arch.univariate.ConstantMean.distribution": [[526, "arch-univariate-constantmean-distribution"]], "arch.univariate.ARX.volatility": [[520, "arch-univariate-arx-volatility"]], "arch.univariate.ConstantMean.y": [[538, "arch-univariate-constantmean-y"]], "arch.univariate.ConstantMean.simulate": [[534, "arch-univariate-constantmean-simulate"]], "arch.univariate.ConstantMean.x": [[537, "arch-univariate-constantmean-x"]], "arch.univariate.ConstantMean.fix": [[528, "arch-univariate-constantmean-fix"]], "arch.univariate.ConstantVariance.update": [[552, "arch-univariate-constantvariance-update"]], "arch.univariate.EGARCH.compute_variance": [[559, "arch-univariate-egarch-compute-variance"]], "arch.univariate.ConstantVariance.volatility_updater": [[555, "arch-univariate-constantvariance-volatility-updater"]], "arch.univariate.ARX.y": [[522, "arch-univariate-arx-y"]], "arch.univariate.ConstantVariance.parameter_names": [[547, "arch-univariate-constantvariance-parameter-names"]], "arch.univariate.ARX.starting_values": [[519, "arch-univariate-arx-starting-values"]], "arch.univariate.ARCHInMean.starting_values": [[503, "arch-univariate-archinmean-starting-values"]], "arch.univariate.ARCHInMean.compute_param_cov": [[491, "arch-univariate-archinmean-compute-param-cov"]], "arch.univariate.ARCH.compute_variance": [[476, "arch-univariate-arch-compute-variance"]], "arch.univariate.ARCH.bounds": [[475, "arch-univariate-arch-bounds"]], "arch.univariate.ARCHInMean.num_params": [[499, "arch-univariate-archinmean-num-params"]], "arch.univariate.ARCHInMean.volatility": [[504, "arch-univariate-archinmean-volatility"]], "arch.univariate.ARCH.variance_bounds": [[488, "arch-univariate-arch-variance-bounds"]], "arch.univariate.ARX.fit": [[511, "arch-univariate-arx-fit"]], "arch.univariate.ARX.name": [[514, "arch-univariate-arx-name"]], "arch.univariate.ARCH.backcast": [[473, "arch-univariate-arch-backcast"]], "arch.univariate.ARCH.updateable": [[487, "arch-univariate-arch-updateable"]], "arch.univariate.ARCHInMean.resids": [[501, "arch-univariate-archinmean-resids"]], "arch.univariate.ARCH.forecast": [[478, "arch-univariate-arch-forecast"]], "arch.univariate.ARX.forecast": [[513, "arch-univariate-arx-forecast"]], "arch.univariate.ARCH.parameter_names": [[481, "arch-univariate-arch-parameter-names"]], "arch.univariate.ARCHInMean.bounds": [[490, "arch-univariate-archinmean-bounds"]], "arch.univariate.ARCHInMean.constraints": [[492, "arch-univariate-archinmean-constraints"]], "arch.univariate.APARCH.variance_bounds": [[471, "arch-univariate-aparch-variance-bounds"]], "arch.univariate.ARCH.starting_values": [[484, "arch-univariate-arch-starting-values"]], "arch.univariate.ARCHInMean.forecast": [[496, "arch-univariate-archinmean-forecast"]], "arch.univariate.ARCH.start": [[483, "arch-univariate-arch-start"]], "arch.univariate.ARCHInMean.form": [[497, "arch-univariate-archinmean-form"]], "arch.univariate.ARCHInMean.y": [[506, "arch-univariate-archinmean-y"]], "arch.univariate.ARX.fix": [[512, "arch-univariate-arx-fix"]], "arch.univariate.ARCHInMean.fix": [[495, "arch-univariate-archinmean-fix"]], "arch.univariate.ARX.bounds": [[507, "arch-univariate-arx-bounds"]], "arch.univariate.ARCH.backcast_transform": [[474, "arch-univariate-arch-backcast-transform"]], "arch.univariate.ARCHInMean.parameter_names": [[500, "arch-univariate-archinmean-parameter-names"]], "arch.univariate.APARCH.updateable": [[470, "arch-univariate-aparch-updateable"]], "arch.univariate.ARCH.name": [[479, "arch-univariate-arch-name"]], "arch.univariate.APARCH.volatility_updater": [[472, "arch-univariate-aparch-volatility-updater"]], "arch.univariate.ARX.compute_param_cov": [[508, "arch-univariate-arx-compute-param-cov"]], "arch.univariate.ARCH.stop": [[485, "arch-univariate-arch-stop"]], "arch.univariate.ARCH.simulate": [[482, "arch-univariate-arch-simulate"]], "arch.univariate.ARX.constraints": [[509, "arch-univariate-arx-constraints"]], "arch.univariate.ARCHInMean.name": [[498, "arch-univariate-archinmean-name"]], "arch.univariate.ARCHInMean.x": [[505, "arch-univariate-archinmean-x"]], "arch.univariate.ARCHInMean.simulate": [[502, "arch-univariate-archinmean-simulate"]], "arch.univariate.ARX.distribution": [[510, "arch-univariate-arx-distribution"]], "arch.univariate.ARX.num_params": [[515, "arch-univariate-arx-num-params"]], "arch.univariate.ARCHInMean.distribution": [[493, "arch-univariate-archinmean-distribution"]], "arch.univariate.ARCH.constraints": [[477, "arch-univariate-arch-constraints"]], "arch.univariate.ARCHInMean.fit": [[494, "arch-univariate-archinmean-fit"]], "arch.univariate.ARCH.update": [[486, "arch-univariate-arch-update"]], "arch.univariate.ARCH.num_params": [[480, "arch-univariate-arch-num-params"]], "arch.univariate.ARCH.volatility_updater": [[489, "arch-univariate-arch-volatility-updater"]], "arch.univariate.ARX.parameter_names": [[516, "arch-univariate-arx-parameter-names"]], "arch.unitroot.cointegration.DynamicOLSResults.bandwidth": [[369, "arch-unitroot-cointegration-dynamicolsresults-bandwidth"]], "arch.unitroot.VarianceRatio.robust": [[336, "arch-unitroot-varianceratio-robust"]], "arch.unitroot.VarianceRatio.nobs": [[332, "arch-unitroot-varianceratio-nobs"]], "arch.unitroot.ZivotAndrews.trend": [[351, "arch-unitroot-zivotandrews-trend"]], "arch.unitroot.cointegration.CointegrationAnalysisResults.kernel": [[357, "arch-unitroot-cointegration-cointegrationanalysisresults-kernel"]], "arch.unitroot.ZivotAndrews.lags": [[345, "arch-unitroot-zivotandrews-lags"]], "arch.unitroot.VarianceRatio.vr": [[341, "arch-unitroot-varianceratio-vr"]], "arch.unitroot.cointegration.DynamicOLSResults.lags": [[375, "arch-unitroot-cointegration-dynamicolsresults-lags"]], "arch.unitroot.cointegration.DynamicOLS.fit": [[368, "arch-unitroot-cointegration-dynamicols-fit"]], "arch.unitroot.cointegration.CointegrationAnalysisResults.bandwidth": [[355, "arch-unitroot-cointegration-cointegrationanalysisresults-bandwidth"]], "arch.unitroot.cointegration.DynamicOLSResults.cov_type": [[371, "arch-unitroot-cointegration-dynamicolsresults-cov-type"]], "arch.unitroot.cointegration.DynamicOLSResults.kernel": [[374, "arch-unitroot-cointegration-dynamicolsresults-kernel"]], "arch.unitroot.VarianceRatio.debiased": [[330, "arch-unitroot-varianceratio-debiased"]], "arch.unitroot.cointegration.CointegrationAnalysisResults.params": [[359, "arch-unitroot-cointegration-cointegrationanalysisresults-params"]], "arch.unitroot.ZivotAndrews.valid_trends": [[352, "arch-unitroot-zivotandrews-valid-trends"]], "arch.unitroot.cointegration.CointegrationAnalysisResults.cov": [[356, "arch-unitroot-cointegration-cointegrationanalysisresults-cov"]], "arch.unitroot.cointegration.CanonicalCointegratingReg.fit": [[354, "arch-unitroot-cointegration-canonicalcointegratingreg-fit"]], "arch.unitroot.cointegration.DynamicOLSResults.full_cov": [[372, "arch-unitroot-cointegration-dynamicolsresults-full-cov"]], "arch.unitroot.ZivotAndrews.pvalue": [[348, "arch-unitroot-zivotandrews-pvalue"]], "arch.unitroot.VarianceRatio.pvalue": [[335, "arch-unitroot-varianceratio-pvalue"]], "arch.unitroot.ZivotAndrews.nobs": [[346, "arch-unitroot-zivotandrews-nobs"]], "arch.unitroot.cointegration.DynamicOLSResults.full_params": [[373, "arch-unitroot-cointegration-dynamicolsresults-full-params"]], "arch.unitroot.cointegration.CointegrationAnalysisResults.resid": [[361, "arch-unitroot-cointegration-cointegrationanalysisresults-resid"]], "arch.unitroot.cointegration.CointegrationAnalysisResults.rsquared_adj": [[364, "arch-unitroot-cointegration-cointegrationanalysisresults-rsquared-adj"]], "arch.unitroot.VarianceRatio.trend": [[339, "arch-unitroot-varianceratio-trend"]], "arch.unitroot.ZivotAndrews.y": [[353, "arch-unitroot-zivotandrews-y"]], "arch.unitroot.VarianceRatio.valid_trends": [[340, "arch-unitroot-varianceratio-valid-trends"]], "arch.unitroot.cointegration.CointegrationAnalysisResults.residual_variance": [[362, "arch-unitroot-cointegration-cointegrationanalysisresults-residual-variance"]], "arch.unitroot.VarianceRatio.lags": [[331, "arch-unitroot-varianceratio-lags"]], "arch.unitroot.VarianceRatio.null_hypothesis": [[333, "arch-unitroot-varianceratio-null-hypothesis"]], "arch.unitroot.VarianceRatio.critical_values": [[329, "arch-unitroot-varianceratio-critical-values"]], "arch.unitroot.cointegration.CointegrationAnalysisResults.summary": [[366, "arch-unitroot-cointegration-cointegrationanalysisresults-summary"]], "arch.unitroot.ZivotAndrews.alternative_hypothesis": [[343, "arch-unitroot-zivotandrews-alternative-hypothesis"]], "arch.unitroot.cointegration.CointegrationAnalysisResults.std_errors": [[365, "arch-unitroot-cointegration-cointegrationanalysisresults-std-errors"]], "arch.unitroot.cointegration.CointegrationAnalysisResults.pvalues": [[360, "arch-unitroot-cointegration-cointegrationanalysisresults-pvalues"]], "arch.unitroot.ZivotAndrews.critical_values": [[344, "arch-unitroot-zivotandrews-critical-values"]], "arch.unitroot.ZivotAndrews.stat": [[349, "arch-unitroot-zivotandrews-stat"]], "arch.unitroot.cointegration.DynamicOLSResults.cov": [[370, "arch-unitroot-cointegration-dynamicolsresults-cov"]], "arch.unitroot.cointegration.CointegrationAnalysisResults.tvalues": [[367, "arch-unitroot-cointegration-cointegrationanalysisresults-tvalues"]], "arch.unitroot.VarianceRatio.overlap": [[334, "arch-unitroot-varianceratio-overlap"]], "arch.unitroot.ZivotAndrews.null_hypothesis": [[347, "arch-unitroot-zivotandrews-null-hypothesis"]], "arch.unitroot.cointegration.CointegrationAnalysisResults.rsquared": [[363, "arch-unitroot-cointegration-cointegrationanalysisresults-rsquared"]], "arch.unitroot.VarianceRatio.y": [[342, "arch-unitroot-varianceratio-y"]], "arch.unitroot.VarianceRatio.summary": [[338, "arch-unitroot-varianceratio-summary"]], "arch.unitroot.ZivotAndrews.summary": [[350, "arch-unitroot-zivotandrews-summary"]], "arch.unitroot.VarianceRatio.stat": [[337, "arch-unitroot-varianceratio-stat"]], "arch.unitroot.cointegration.CointegrationAnalysisResults.long_run_variance": [[358, "arch-unitroot-cointegration-cointegrationanalysisresults-long-run-variance"]], "arch.unitroot.PhillipsPerron.stat": [[322, "arch-unitroot-phillipsperron-stat"]], "arch.unitroot.PhillipsPerron.alternative_hypothesis": [[315, "arch-unitroot-phillipsperron-alternative-hypothesis"]], "arch.unitroot.PhillipsPerron.summary": [[323, "arch-unitroot-phillipsperron-summary"]], "arch.unitroot.DFGLS.valid_trends": [[302, "arch-unitroot-dfgls-valid-trends"]], "arch.unitroot.ADF.trend": [[288, "arch-unitroot-adf-trend"]], "arch.unitroot.PhillipsPerron.critical_values": [[316, "arch-unitroot-phillipsperron-critical-values"]], "arch.unitroot.PhillipsPerron.pvalue": [[320, "arch-unitroot-phillipsperron-pvalue"]], "arch.unitroot.PhillipsPerron.trend": [[325, "arch-unitroot-phillipsperron-trend"]], "arch.unitroot.PhillipsPerron.nobs": [[318, "arch-unitroot-phillipsperron-nobs"]], "arch.unitroot.PhillipsPerron.y": [[327, "arch-unitroot-phillipsperron-y"]], "arch.unitroot.ADF.stat": [[286, "arch-unitroot-adf-stat"]], "arch.unitroot.DFGLS.stat": [[299, "arch-unitroot-dfgls-stat"]], "arch.unitroot.PhillipsPerron.valid_trends": [[326, "arch-unitroot-phillipsperron-valid-trends"]], "arch.unitroot.DFGLS.nobs": [[295, "arch-unitroot-dfgls-nobs"]], "arch.unitroot.DFGLS.max_lags": [[294, "arch-unitroot-dfgls-max-lags"]], "arch.unitroot.DFGLS.pvalue": [[297, "arch-unitroot-dfgls-pvalue"]], "arch.unitroot.ADF.pvalue": [[284, "arch-unitroot-adf-pvalue"]], "arch.unitroot.KPSS.nobs": [[307, "arch-unitroot-kpss-nobs"]], "arch.unitroot.ADF.summary": [[287, "arch-unitroot-adf-summary"]], "arch.unitroot.KPSS.alternative_hypothesis": [[304, "arch-unitroot-kpss-alternative-hypothesis"]], "arch.unitroot.VarianceRatio.alternative_hypothesis": [[328, "arch-unitroot-varianceratio-alternative-hypothesis"]], "arch.unitroot.DFGLS.critical_values": [[292, "arch-unitroot-dfgls-critical-values"]], "arch.unitroot.PhillipsPerron.lags": [[317, "arch-unitroot-phillipsperron-lags"]], "arch.unitroot.DFGLS.regression": [[298, "arch-unitroot-dfgls-regression"]], "arch.unitroot.DFGLS.y": [[303, "arch-unitroot-dfgls-y"]], "arch.unitroot.KPSS.null_hypothesis": [[308, "arch-unitroot-kpss-null-hypothesis"]], "arch.unitroot.KPSS.stat": [[310, "arch-unitroot-kpss-stat"]], "arch.unitroot.DFGLS.alternative_hypothesis": [[291, "arch-unitroot-dfgls-alternative-hypothesis"]], "arch.unitroot.DFGLS.lags": [[293, "arch-unitroot-dfgls-lags"]], "arch.unitroot.ADF.nobs": [[282, "arch-unitroot-adf-nobs"]], "arch.unitroot.KPSS.critical_values": [[305, "arch-unitroot-kpss-critical-values"]], "arch.unitroot.KPSS.lags": [[306, "arch-unitroot-kpss-lags"]], "arch.unitroot.DFGLS.trend": [[301, "arch-unitroot-dfgls-trend"]], "arch.unitroot.PhillipsPerron.test_type": [[324, "arch-unitroot-phillipsperron-test-type"]], "arch.unitroot.KPSS.pvalue": [[309, "arch-unitroot-kpss-pvalue"]], "arch.unitroot.ADF.null_hypothesis": [[283, "arch-unitroot-adf-null-hypothesis"]], "arch.unitroot.KPSS.valid_trends": [[313, "arch-unitroot-kpss-valid-trends"]], "arch.unitroot.PhillipsPerron.null_hypothesis": [[319, "arch-unitroot-phillipsperron-null-hypothesis"]], "arch.unitroot.DFGLS.null_hypothesis": [[296, "arch-unitroot-dfgls-null-hypothesis"]], "arch.unitroot.DFGLS.summary": [[300, "arch-unitroot-dfgls-summary"]], "arch.unitroot.ADF.regression": [[285, "arch-unitroot-adf-regression"]], "arch.unitroot.ADF.valid_trends": [[289, "arch-unitroot-adf-valid-trends"]], "arch.unitroot.KPSS.summary": [[311, "arch-unitroot-kpss-summary"]], "arch.unitroot.KPSS.trend": [[312, "arch-unitroot-kpss-trend"]], "arch.unitroot.ADF.y": [[290, "arch-unitroot-adf-y"]], "arch.unitroot.PhillipsPerron.regression": [[321, "arch-unitroot-phillipsperron-regression"]], "arch.unitroot.KPSS.y": [[314, "arch-unitroot-kpss-y"]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.name": [[409, "arch-unitroot-cointegration-phillipsouliaristestresults-name"]], "arch.unitroot.cointegration.EngleGrangerTestResults.distribution_order": [[390, "arch-unitroot-cointegration-englegrangertestresults-distribution-order"]], "arch.unitroot.cointegration.EngleGrangerTestResults.name": [[393, "arch-unitroot-cointegration-englegrangertestresults-name"]], "arch.unitroot.cointegration.DynamicOLSResults.rsquared_adj": [[383, "arch-unitroot-cointegration-dynamicolsresults-rsquared-adj"]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.cointegrating_vector": [[405, "arch-unitroot-cointegration-phillipsouliaristestresults-cointegrating-vector"]], "arch.unitroot.cointegration.EngleGrangerTestResults.stat": [[399, "arch-unitroot-cointegration-englegrangertestresults-stat"]], "arch.unitroot.cointegration.DynamicOLSResults.rsquared": [[382, "arch-unitroot-cointegration-dynamicolsresults-rsquared"]], "arch.unitroot.cointegration.EngleGrangerTestResults.pvalue": [[396, "arch-unitroot-cointegration-englegrangertestresults-pvalue"]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.summary": [[415, "arch-unitroot-cointegration-phillipsouliaristestresults-summary"]], "arch.unitroot.cointegration.EngleGrangerTestResults.alternative_hypothesis": [[387, "arch-unitroot-cointegration-englegrangertestresults-alternative-hypothesis"]], "arch.unitroot.cointegration.DynamicOLSResults.leads": [[376, "arch-unitroot-cointegration-dynamicolsresults-leads"]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.distribution_order": [[407, "arch-unitroot-cointegration-phillipsouliaristestresults-distribution-order"]], "arch.unitroot.cointegration.DynamicOLSResults.pvalues": [[379, "arch-unitroot-cointegration-dynamicolsresults-pvalues"]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.bandwidth": [[404, "arch-unitroot-cointegration-phillipsouliaristestresults-bandwidth"]], "arch.unitroot.cointegration.EngleGrangerTestResults.resid": [[397, "arch-unitroot-cointegration-englegrangertestresults-resid"]], "arch.unitroot.cointegration.EngleGrangerTestResults.critical_values": [[389, "arch-unitroot-cointegration-englegrangertestresults-critical-values"]], "Cointegration Analysis": [[419, "cointegration-analysis"]], "arch.unitroot.cointegration.DynamicOLSResults.residual_variance": [[381, "arch-unitroot-cointegration-dynamicolsresults-residual-variance"]], "arch.unitroot.cointegration.DynamicOLSResults.summary": [[385, "arch-unitroot-cointegration-dynamicolsresults-summary"]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.critical_values": [[406, "arch-unitroot-cointegration-phillipsouliaristestresults-critical-values"]], "Theoretical Background": [[422, "theoretical-background"]], "arch.unitroot.cointegration.EngleGrangerTestResults.cointegrating_vector": [[388, "arch-unitroot-cointegration-englegrangertestresults-cointegrating-vector"]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.stat": [[414, "arch-unitroot-cointegration-phillipsouliaristestresults-stat"]], "arch.unitroot.cointegration.DynamicOLSResults.std_errors": [[384, "arch-unitroot-cointegration-dynamicolsresults-std-errors"]], "arch.unitroot.cointegration.EngleGrangerTestResults.max_lags": [[392, "arch-unitroot-cointegration-englegrangertestresults-max-lags"]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.plot": [[411, "arch-unitroot-cointegration-phillipsouliaristestresults-plot"]], "arch.unitroot.cointegration.EngleGrangerTestResults.summary": [[400, "arch-unitroot-cointegration-englegrangertestresults-summary"]], "Introduction": [[417, "introduction"], [236, "introduction"]], "Basic Example": [[417, "basic-example"]], "arch.unitroot.cointegration.DynamicOLSResults.params": [[378, "arch-unitroot-cointegration-dynamicolsresults-params"]], "arch.unitroot.cointegration.EngleGrangerTestResults.plot": [[395, "arch-unitroot-cointegration-englegrangertestresults-plot"]], "arch.unitroot.cointegration.DynamicOLSResults.long_run_variance": [[377, "arch-unitroot-cointegration-dynamicolsresults-long-run-variance"]], "arch.unitroot.cointegration.DynamicOLSResults.tvalues": [[386, "arch-unitroot-cointegration-dynamicolsresults-tvalues"]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.pvalue": [[412, "arch-unitroot-cointegration-phillipsouliaristestresults-pvalue"]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.kernel": [[408, "arch-unitroot-cointegration-phillipsouliaristestresults-kernel"]], "arch.unitroot.cointegration.DynamicOLSResults.resid": [[380, "arch-unitroot-cointegration-dynamicolsresults-resid"]], "arch.unitroot.cointegration.EngleGrangerTestResults.null_hypothesis": [[394, "arch-unitroot-cointegration-englegrangertestresults-null-hypothesis"]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.null_hypothesis": [[410, "arch-unitroot-cointegration-phillipsouliaristestresults-null-hypothesis"]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.alternative_hypothesis": [[403, "arch-unitroot-cointegration-phillipsouliaristestresults-alternative-hypothesis"]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.trend": [[416, "arch-unitroot-cointegration-phillipsouliaristestresults-trend"]], "The Unit Root Tests": [[418, "module-arch.unitroot"]], "Automatic Bandwidth Selection": [[418, "automatic-bandwidth-selection"]], "arch.unitroot.cointegration.EngleGrangerTestResults.rho": [[398, "arch-unitroot-cointegration-englegrangertestresults-rho"]], "arch.unitroot.cointegration.FullyModifiedOLS.fit": [[402, "arch-unitroot-cointegration-fullymodifiedols-fit"]], "arch.unitroot.cointegration.EngleGrangerTestResults.trend": [[401, "arch-unitroot-cointegration-englegrangertestresults-trend"]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.resid": [[413, "arch-unitroot-cointegration-phillipsouliaristestresults-resid"]], "arch.unitroot.cointegration.EngleGrangerTestResults.lags": [[391, "arch-unitroot-cointegration-englegrangertestresults-lags"]], "Utilities": [[900, "utilities"]], "Test Results": [[900, "test-results"]], "Volatility Processes": [[901, "volatility-processes"], [898, "Volatility-Processes"]], "Parameterless Variance Processes": [[901, "parameterless-variance-processes"]], "FixedVariance": [[901, "fixedvariance"]], "Writing New Volatility Processes": [[901, "writing-new-volatility-processes"]], "Model Results": [[893, "model-results"]], "Univariate Volatility Models": [[894, "univariate-volatility-models"]], "arch.univariate.RiskMetrics2006": [[442, "arch-univariate-riskmetrics2006"]], "arch.univariate.LS": [[439, "arch-univariate-ls"]], "arch.univariate.ZeroMean": [[445, "arch-univariate-zeromean"]], "arch.univariate.ARX": [[428, "arch-univariate-arx"]], "arch.univariate.EWMAVariance": [[432, "arch-univariate-ewmavariance"]], "arch.univariate.base.ARCHModelForecast": [[448, "arch-univariate-base-archmodelforecast"]], "arch.univariate.base.ARCHModelForecastSimulation": [[449, "arch-univariate-base-archmodelforecastsimulation"]], "arch.univariate.ARCHInMean": [[427, "arch-univariate-archinmean"]], "arch.univariate.ARCH": [[426, "arch-univariate-arch"]], "arch.univariate.APARCH.forecast": [[461, "arch-univariate-aparch-forecast"]], "arch.univariate.APARCH.constraints": [[459, "arch-univariate-aparch-constraints"]], "arch.univariate.base.ARCHModel": [[446, "arch-univariate-base-archmodel"]], "arch.univariate.ConstantVariance": [[430, "arch-univariate-constantvariance"]], "arch.univariate.GeneralizedError": [[436, "arch-univariate-generalizederror"]], "arch.univariate.distribution.Distribution": [[451, "arch-univariate-distribution-distribution"]], "arch.univariate.GARCH": [[435, "arch-univariate-garch"]], "arch.univariate.APARCH.compute_variance": [[458, "arch-univariate-aparch-compute-variance"]], "arch.univariate.APARCH.backcast": [[454, "arch-univariate-aparch-backcast"]], "arch.univariate.FIGARCH": [[433, "arch-univariate-figarch"]], "arch.univariate.APARCH.parameter_names": [[464, "arch-univariate-aparch-parameter-names"]], "arch.univariate.APARCH.starting_values": [[467, "arch-univariate-aparch-starting-values"]], "arch.univariate.SkewStudent": [[443, "arch-univariate-skewstudent"]], "arch.univariate.HARCH": [[437, "arch-univariate-harch"]], "arch.univariate.recursions_python.VolatilityUpdater": [[452, "arch-univariate-recursions-python-volatilityupdater"]], "arch.univariate.APARCH.stop": [[468, "arch-univariate-aparch-stop"]], "arch.univariate.APARCH.update": [[469, "arch-univariate-aparch-update"]], "arch.univariate.ConstantMean": [[429, "arch-univariate-constantmean"]], "arch.univariate.APARCH.common_asym": [[457, "arch-univariate-aparch-common-asym"]], "arch.univariate.MIDASHyperbolic": [[440, "arch-univariate-midashyperbolic"]], "arch.univariate.base.ARCHModelFixedResult": [[447, "arch-univariate-base-archmodelfixedresult"]], "arch.univariate.base.ARCHModelResult": [[450, "arch-univariate-base-archmodelresult"]], "arch.univariate.FixedVariance": [[434, "arch-univariate-fixedvariance"]], "Analytical Forecasts": [[424, "analytical-forecasts"], [897, "Analytical-Forecasts"]], "Simulation Forecasts": [[424, "simulation-forecasts"], [897, "Simulation-Forecasts"]], "Bootstrap Forecasts": [[424, "bootstrap-forecasts"], [897, "Bootstrap-Forecasts"]], "Forecasting": [[424, "forecasting"]], "Forecasting Options": [[424, "forecasting-options"]], "Understanding Forecast Output": [[424, "understanding-forecast-output"]], "Output Classes": [[424, "output-classes"]], "arch.univariate.volatility.VolatilityProcess": [[453, "arch-univariate-volatility-volatilityprocess"]], "arch.univariate.APARCH.delta": [[460, "arch-univariate-aparch-delta"]], "arch.univariate.APARCH.name": [[462, "arch-univariate-aparch-name"]], "arch.univariate.Normal": [[441, "arch-univariate-normal"]], "arch.univariate.EGARCH": [[431, "arch-univariate-egarch"]], "Distributions": [[423, "distributions"], [898, "Distributions"]], "Writing New Distributions": [[423, "writing-new-distributions"]], "arch.univariate.APARCH.bounds": [[456, "arch-univariate-aparch-bounds"]], "arch.univariate.APARCH.backcast_transform": [[455, "arch-univariate-aparch-backcast-transform"]], "arch.univariate.APARCH.start": [[466, "arch-univariate-aparch-start"]], "arch.univariate.APARCH": [[425, "arch-univariate-aparch"]], "arch.univariate.APARCH.num_params": [[463, "arch-univariate-aparch-num-params"]], "arch.univariate.StudentsT": [[444, "arch-univariate-studentst"]], "arch.univariate.APARCH.simulate": [[465, "arch-univariate-aparch-simulate"]], "arch.univariate.HARX": [[438, "arch-univariate-harx"]], "arch.covariance.kernel.ParzenRiesz.cov": [[189, "arch-covariance-kernel-parzenriesz-cov"]], "arch.covariance.kernel.TukeyHamming.bandwidth_scale": [[207, "arch-covariance-kernel-tukeyhamming-bandwidth-scale"]], "arch.covariance.kernel.TukeyParzen.kernel_const": [[231, "arch-covariance-kernel-tukeyparzen-kernel-const"]], "arch.covariance.kernel.QuadraticSpectral.bandwidth_scale": [[197, "arch-covariance-kernel-quadraticspectral-bandwidth-scale"]], "arch.covariance.kernel.ParzenRiesz.opt_bandwidth": [[194, "arch-covariance-kernel-parzenriesz-opt-bandwidth"]], "arch.covariance.kernel.TukeyHanning.bandwidth_scale": [[217, "arch-covariance-kernel-tukeyhanning-bandwidth-scale"]], "arch.covariance.kernel.ParzenRiesz.force_int": [[190, "arch-covariance-kernel-parzenriesz-force-int"]], "arch.covariance.kernel.QuadraticSpectral.bandwidth": [[196, "arch-covariance-kernel-quadraticspectral-bandwidth"]], "arch.covariance.kernel.TukeyHamming.rate": [[215, "arch-covariance-kernel-tukeyhamming-rate"]], "arch.covariance.kernel.TukeyHanning.name": [[223, "arch-covariance-kernel-tukeyhanning-name"]], "arch.covariance.kernel.TukeyHanning.kernel_weights": [[222, "arch-covariance-kernel-tukeyhanning-kernel-weights"]], "arch.covariance.kernel.ParzenRiesz.centered": [[188, "arch-covariance-kernel-parzenriesz-centered"]], "arch.covariance.kernel.TukeyParzen.kernel_weights": [[232, "arch-covariance-kernel-tukeyparzen-kernel-weights"]], "arch.covariance.kernel.TukeyHamming.bandwidth": [[206, "arch-covariance-kernel-tukeyhamming-bandwidth"]], "arch.covariance.kernel.TukeyParzen.bandwidth": [[226, "arch-covariance-kernel-tukeyparzen-bandwidth"]], "arch.covariance.kernel.QuadraticSpectral.cov": [[199, "arch-covariance-kernel-quadraticspectral-cov"]], "arch.covariance.kernel.QuadraticSpectral.centered": [[198, "arch-covariance-kernel-quadraticspectral-centered"]], "arch.covariance.kernel.TukeyParzen.opt_bandwidth": [[234, "arch-covariance-kernel-tukeyparzen-opt-bandwidth"]], "arch.covariance.kernel.TukeyHanning.rate": [[225, "arch-covariance-kernel-tukeyhanning-rate"]], "arch.covariance.kernel.QuadraticSpectral.opt_bandwidth": [[204, "arch-covariance-kernel-quadraticspectral-opt-bandwidth"]], "arch.covariance.kernel.TukeyHanning.bandwidth": [[216, "arch-covariance-kernel-tukeyhanning-bandwidth"]], "arch.covariance.kernel.TukeyParzen.force_int": [[230, "arch-covariance-kernel-tukeyparzen-force-int"]], "arch.covariance.kernel.QuadraticSpectral.kernel_const": [[201, "arch-covariance-kernel-quadraticspectral-kernel-const"]], "arch.covariance.kernel.TukeyParzen.centered": [[228, "arch-covariance-kernel-tukeyparzen-centered"]], "arch.covariance.kernel.TukeyHamming.centered": [[208, "arch-covariance-kernel-tukeyhamming-centered"]], "arch.covariance.kernel.TukeyHamming.kernel_const": [[211, "arch-covariance-kernel-tukeyhamming-kernel-const"]], "arch.covariance.kernel.TukeyHamming.opt_bandwidth": [[214, "arch-covariance-kernel-tukeyhamming-opt-bandwidth"]], "arch.covariance.kernel.TukeyHanning.centered": [[218, "arch-covariance-kernel-tukeyhanning-centered"]], "arch.covariance.kernel.TukeyHanning.opt_bandwidth": [[224, "arch-covariance-kernel-tukeyhanning-opt-bandwidth"]], "arch.covariance.kernel.ParzenRiesz.rate": [[195, "arch-covariance-kernel-parzenriesz-rate"]], "arch.covariance.kernel.ParzenRiesz.name": [[193, "arch-covariance-kernel-parzenriesz-name"]], "arch.covariance.kernel.TukeyHamming.force_int": [[210, "arch-covariance-kernel-tukeyhamming-force-int"]], "arch.covariance.kernel.TukeyHanning.force_int": [[220, "arch-covariance-kernel-tukeyhanning-force-int"]], "arch.covariance.kernel.QuadraticSpectral.rate": [[205, "arch-covariance-kernel-quadraticspectral-rate"]], "arch.covariance.kernel.TukeyParzen.bandwidth_scale": [[227, "arch-covariance-kernel-tukeyparzen-bandwidth-scale"]], "arch.covariance.kernel.ParzenRiesz.kernel_weights": [[192, "arch-covariance-kernel-parzenriesz-kernel-weights"]], "arch.covariance.kernel.QuadraticSpectral.name": [[203, "arch-covariance-kernel-quadraticspectral-name"]], "arch.covariance.kernel.TukeyHamming.kernel_weights": [[212, "arch-covariance-kernel-tukeyhamming-kernel-weights"]], "arch.covariance.kernel.TukeyParzen.cov": [[229, "arch-covariance-kernel-tukeyparzen-cov"]], "arch.covariance.kernel.TukeyParzen.name": [[233, "arch-covariance-kernel-tukeyparzen-name"]], "arch.covariance.kernel.TukeyHanning.kernel_const": [[221, "arch-covariance-kernel-tukeyhanning-kernel-const"]], "arch.covariance.kernel.QuadraticSpectral.force_int": [[200, "arch-covariance-kernel-quadraticspectral-force-int"]], "arch.covariance.kernel.QuadraticSpectral.kernel_weights": [[202, "arch-covariance-kernel-quadraticspectral-kernel-weights"]], "arch.covariance.kernel.TukeyHamming.cov": [[209, "arch-covariance-kernel-tukeyhamming-cov"]], "arch.covariance.kernel.TukeyHanning.cov": [[219, "arch-covariance-kernel-tukeyhanning-cov"]], "arch.covariance.kernel.ParzenRiesz.kernel_const": [[191, "arch-covariance-kernel-parzenriesz-kernel-const"]], "arch.covariance.kernel.TukeyHamming.name": [[213, "arch-covariance-kernel-tukeyhamming-name"]], "arch.unitroot.cointegration.CointegrationAnalysisResults": [[270, "arch-unitroot-cointegration-cointegrationanalysisresults"]], "arch.bootstrap.SPA": [[239, "arch-bootstrap-spa"]], "arch.unitroot.cointegration.engle_granger": [[276, "arch-unitroot-cointegration-engle-granger"]], "arch.bootstrap.MCS.included": [[243, "arch-bootstrap-mcs-included"]], "arch.bootstrap.MCS": [[238, "arch-bootstrap-mcs"]], "arch.covariance.kernel.TukeyParzen.rate": [[235, "arch-covariance-kernel-tukeyparzen-rate"]], "arch.bootstrap.SPA.seed": [[252, "arch-bootstrap-spa-seed"]], "arch.unitroot.ADF": [[262, "arch-unitroot-adf"]], "arch.bootstrap.StepM.seed": [[256, "arch-bootstrap-stepm-seed"]], "arch.bootstrap.StepM.compute": [[254, "arch-bootstrap-stepm-compute"]], "arch.unitroot.VarianceRatio": [[266, "arch-unitroot-varianceratio"]], "arch.unitroot.ADF.lags": [[280, "arch-unitroot-adf-lags"]], "arch.bootstrap.SPA.compute": [[248, "arch-bootstrap-spa-compute"]], "arch.bootstrap.SPA.better_models": [[247, "arch-bootstrap-spa-better-models"]], "arch.unitroot.auto_bandwidth": [[268, "arch-unitroot-auto-bandwidth"]], "arch.bootstrap.MCS.compute": [[241, "arch-bootstrap-mcs-compute"]], "Cointegration Tests": [[261, "module-arch.unitroot.cointegration"]], "Cointegrating Vector Estimation": [[261, "cointegrating-vector-estimation"]], "Results Classes": [[261, "results-classes"]], "arch.unitroot.cointegration.DynamicOLSResults": [[272, "arch-unitroot-cointegration-dynamicolsresults"]], "arch.bootstrap.MCS.seed": [[246, "arch-bootstrap-mcs-seed"]], "arch.unitroot.ZivotAndrews": [[267, "arch-unitroot-zivotandrews"]], "Stepwise Multiple Testing (StepM)": [[258, "stepwise-multiple-testing-stepm"], [259, "Stepwise-Multiple-Testing-(StepM)"]], "Module Reference": [[258, "module-arch.bootstrap.multiple_comparison"]], "Test of Superior Predictive Ability (SPA), Reality Check": [[258, "test-of-superior-predictive-ability-spa-reality-check"]], "Model Confidence Set (MCS)": [[258, "model-confidence-set-mcs"]], "arch.unitroot.ADF.alternative_hypothesis": [[278, "arch-unitroot-adf-alternative-hypothesis"]], "arch.unitroot.DFGLS": [[263, "arch-unitroot-dfgls"]], "arch.unitroot.ADF.max_lags": [[281, "arch-unitroot-adf-max-lags"]], "arch.unitroot.KPSS": [[264, "arch-unitroot-kpss"]], "arch.bootstrap.MCS.pvalues": [[244, "arch-bootstrap-mcs-pvalues"]], "arch.unitroot.cointegration.EngleGrangerTestResults": [[273, "arch-unitroot-cointegration-englegrangertestresults"]], "arch.bootstrap.SPA.subset": [[253, "arch-bootstrap-spa-subset"]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults": [[275, "arch-unitroot-cointegration-phillipsouliaristestresults"]], "arch.unitroot.cointegration.phillips_ouliaris": [[277, "arch-unitroot-cointegration-phillips-ouliaris"]], "arch.bootstrap.MCS.excluded": [[242, "arch-bootstrap-mcs-excluded"]], "arch.bootstrap.SPA.critical_values": [[249, "arch-bootstrap-spa-critical-values"]], "Citation": [[236, "citation"]], "Index": [[236, "index"]], "arch.bootstrap.SPA.reset": [[251, "arch-bootstrap-spa-reset"]], "arch.unitroot.ADF.critical_values": [[279, "arch-unitroot-adf-critical-values"]], "arch.bootstrap.StepM": [[240, "arch-bootstrap-stepm"]], "arch.unitroot.PhillipsPerron": [[265, "arch-unitroot-phillipsperron"]], "arch.bootstrap.SPA.pvalues": [[250, "arch-bootstrap-spa-pvalues"]], "arch.bootstrap.StepM.reset": [[255, "arch-bootstrap-stepm-reset"]], "arch.bootstrap.StepM.superior_models": [[257, "arch-bootstrap-stepm-superior-models"]], "arch.unitroot.cointegration.FullyModifiedOLS": [[274, "arch-unitroot-cointegration-fullymodifiedols"]], "arch.bootstrap.MCS.reset": [[245, "arch-bootstrap-mcs-reset"]], "arch.unitroot.cointegration.CanonicalCointegratingReg": [[269, "arch-unitroot-cointegration-canonicalcointegratingreg"]], "Multiple Comparison Procedures": [[260, "multiple-comparison-procedures"]], "arch.unitroot.cointegration.DynamicOLS": [[271, "arch-unitroot-cointegration-dynamicols"]], "Bootstrap Examples": [[3, "Bootstrap-Examples"]], "Sharpe Ratio": [[3, "Sharpe-Ratio"]], "Reproducibility": [[3, "Reproducibility"]], "Optimal Block Length Estimation": [[3, "Optimal-Block-Length-Estimation"]], "Probit (statsmodels)": [[3, "Probit-(statsmodels)"]], "Fitting the model directly": [[3, "Fitting-the-model-directly"]], "The wrapper function": [[3, "The-wrapper-function"]], "Speeding things up": [[3, "Speeding-things-up"]], "Bootstrapping Uneven Length Samples": [[3, "Bootstrapping-Uneven-Length-Samples"]], "Multiple Comparisons": [[259, "Multiple-Comparisons"]], "The test of Superior Predictive Ability (SPA)": [[259, "The-test-of-Superior-Predictive-Ability-(SPA)"]], "Study Design": [[259, "Study-Design"]], "Power": [[259, "Power"]], "The Model Confidence Set": [[259, "The-Model-Confidence-Set"]], "Augmented Dickey-Fuller Testing": [[421, "Augmented-Dickey-Fuller-Testing"]], "Setting the number of lags": [[421, "Setting-the-number-of-lags"]], "Deterministic terms": [[421, "Deterministic-terms"]], "Regression output": [[421, "Regression-output"]], "Dickey-Fuller GLS Testing": [[421, "Dickey-Fuller-GLS-Testing"]], "Phillips-Perron Testing": [[421, "Phillips-Perron-Testing"]], "KPSS Testing": [[421, "KPSS-Testing"]], "Zivot-Andrews Test": [[421, "Zivot-Andrews-Test"]], "Variance Ratio Testing": [[421, "Variance-Ratio-Testing"]], "Phillips-Ouliaris": [[420, "Phillips-Ouliaris"]], "Volatility Forecasting": [[897, "Volatility-Forecasting"]], "Data": [[897, "Data"], [896, "Data"]], "Basic Forecasting": [[897, "Basic-Forecasting"]], "Alternative Forecast Generation Schemes": [[897, "Alternative-Forecast-Generation-Schemes"]], "Fixed Window Forecasting": [[897, "Fixed-Window-Forecasting"]], "Rolling Window Forecasting": [[897, "Rolling-Window-Forecasting"]], "Recursive Forecast Generation": [[897, "Recursive-Forecast-Generation"]], "TARCH": [[897, "TARCH"]], "Value-at-Risk Forecasting": [[897, "Value-at-Risk-Forecasting"]], "Parametric VaR": [[897, "Parametric-VaR"]], "Filtered Historical Simulation": [[897, "Filtered-Historical-Simulation"]], "ARCH Modeling": [[898, "ARCH-Modeling"]], "Specifying Common Models": [[898, "Specifying-Common-Models"]], "GARCH (with a Constant Mean)": [[898, "GARCH-(with-a-Constant-Mean)"]], "GJR-GARCH": [[898, "GJR-GARCH"]], "TARCH/ZARCH": [[898, "TARCH/ZARCH"]], "Student\u2019s T Errors": [[898, "Student's-T-Errors"]], "Fixing Parameters": [[898, "Fixing-Parameters"]], "Building a Model From Components": [[898, "Building-a-Model-From-Components"]], "WTI Crude": [[898, "WTI-Crude"]], "Simulation": [[898, "Simulation"], [895, "Simulation"]], "Volatility Scenarios": [[899, "Volatility-Scenarios"]], "Custom Random Generators": [[899, "Custom-Random-Generators"]], "Bootstrap Scenarios": [[899, "Bootstrap-Scenarios"]], "Visualizing the differences": [[899, "Visualizing-the-differences"]], "Comparing the paths": [[899, "Comparing-the-paths"]], "Comparing across the year": [[899, "Comparing-across-the-year"]], "Using the Fixed Variance process": [[896, "Using-the-Fixed-Variance-process"]], "Initial Mean Model Estimation": [[896, "Initial-Mean-Model-Estimation"]], "Initial Volatility Model Estimation": [[896, "Initial-Volatility-Model-Estimation"]], "Re-estimating the mean with a FixedVariance": [[896, "Re-estimating-the-mean-with-a-FixedVariance"]], "Zig-Zag estimation": [[896, "Zig-Zag-estimation"]], "Direct Estimation": [[896, "Direct-Estimation"]], "Forecasting with Exogenous Regressors": [[895, "Forecasting-with-Exogenous-Regressors"]], "Simulating data": [[895, "Simulating-data"]], "Plotting the data": [[895, "Plotting-the-data"]], "Forecasting the X values": [[895, "Forecasting-the-X-values"]], "Fitting the model": [[895, "Fitting-the-model"]], "Using a dict": [[895, "Using-a-dict"]], "Using DataFrame": [[895, "Using-DataFrame"]], "Using an array": [[895, "Using-an-array"]], "Producing multiple forecasts": [[895, "Producing-multiple-forecasts"]], "x input array sizes": [[895, "x-input-array-sizes"]], "Special Cases with a single x variable": [[895, "Special-Cases-with-a-single-x-variable"]], "Static out-of-sample x": [[895, "Static-out-of-sample-x"]], "Simulating the out-of-sample x": [[895, "Simulating-the-out-of-sample-x"]]}, "indexentries": {"arch.bootstrap": [[2, "module-arch.bootstrap"]], "module": [[2, "module-arch.bootstrap"]]}, "docurls": ["api.html", "bootstrap/background.html", "bootstrap/bootstrap.html", "bootstrap/bootstrap_examples.html", "bootstrap/confidence-intervals.html", "bootstrap/generated/arch.bootstrap.CircularBlockBootstrap.html", "bootstrap/generated/arch.bootstrap.IIDBootstrap.html", "bootstrap/generated/arch.bootstrap.IndependentSamplesBootstrap.html", "bootstrap/generated/arch.bootstrap.MovingBlockBootstrap.html", "bootstrap/generated/arch.bootstrap.StationaryBootstrap.html", "bootstrap/generated/arch.bootstrap.optimal_block_length.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.apply.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.bootstrap.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.clone.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.conf_int.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.cov.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.generator.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.get_state.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.index.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.random_state.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.reset.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.seed.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.set_state.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.state.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.update_indices.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.var.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.apply.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.bootstrap.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.clone.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.conf_int.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.cov.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.generator.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.get_state.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.index.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.random_state.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.reset.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.seed.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.set_state.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.state.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.update_indices.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.var.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.apply.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.bootstrap.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.clone.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.conf_int.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.cov.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.generator.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.get_state.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.index.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.random_state.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.reset.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.seed.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.set_state.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.state.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.update_indices.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.var.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.apply.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.bootstrap.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.clone.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.conf_int.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.cov.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.generator.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.get_state.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.index.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.random_state.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.reset.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.seed.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.set_state.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.state.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.update_indices.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.var.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.apply.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.bootstrap.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.clone.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.conf_int.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.cov.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.generator.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.get_state.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.index.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.random_state.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.reset.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.seed.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.set_state.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.state.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.update_indices.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.var.html", "bootstrap/iid-bootstraps.html", "bootstrap/low-level-interface.html", "bootstrap/parameter-covariance-estimation.html", "bootstrap/semiparametric-parametric-bootstrap.html", "bootstrap/timeseries-bootstraps.html", "changes.html", "changes/1.0.html", "changes/2.0.html", "changes/3.0.html", "changes/4.0.html", "changes/5.0.html", "changes/6.0.html", "covariance/covariance.html", "covariance/generated/arch.covariance.kernel.Andrews.html", "covariance/generated/arch.covariance.kernel.Bartlett.html", "covariance/generated/arch.covariance.kernel.CovarianceEstimate.html", "covariance/generated/arch.covariance.kernel.Gallant.html", "covariance/generated/arch.covariance.kernel.NeweyWest.html", "covariance/generated/arch.covariance.kernel.Parzen.html", "covariance/generated/arch.covariance.kernel.ParzenCauchy.html", "covariance/generated/arch.covariance.kernel.ParzenGeometric.html", "covariance/generated/arch.covariance.kernel.ParzenRiesz.html", "covariance/generated/arch.covariance.kernel.QuadraticSpectral.html", "covariance/generated/arch.covariance.kernel.TukeyHamming.html", "covariance/generated/arch.covariance.kernel.TukeyHanning.html", "covariance/generated/arch.covariance.kernel.TukeyParzen.html", "covariance/generated/generated/arch.covariance.kernel.Andrews.bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.Andrews.bandwidth_scale.html", "covariance/generated/generated/arch.covariance.kernel.Andrews.centered.html", "covariance/generated/generated/arch.covariance.kernel.Andrews.cov.html", "covariance/generated/generated/arch.covariance.kernel.Andrews.force_int.html", "covariance/generated/generated/arch.covariance.kernel.Andrews.kernel_const.html", "covariance/generated/generated/arch.covariance.kernel.Andrews.kernel_weights.html", "covariance/generated/generated/arch.covariance.kernel.Andrews.name.html", "covariance/generated/generated/arch.covariance.kernel.Andrews.opt_bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.Andrews.rate.html", "covariance/generated/generated/arch.covariance.kernel.Bartlett.bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.Bartlett.bandwidth_scale.html", "covariance/generated/generated/arch.covariance.kernel.Bartlett.centered.html", "covariance/generated/generated/arch.covariance.kernel.Bartlett.cov.html", "covariance/generated/generated/arch.covariance.kernel.Bartlett.force_int.html", "covariance/generated/generated/arch.covariance.kernel.Bartlett.kernel_const.html", "covariance/generated/generated/arch.covariance.kernel.Bartlett.kernel_weights.html", "covariance/generated/generated/arch.covariance.kernel.Bartlett.name.html", "covariance/generated/generated/arch.covariance.kernel.Bartlett.opt_bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.Bartlett.rate.html", "covariance/generated/generated/arch.covariance.kernel.CovarianceEstimate.long_run.html", "covariance/generated/generated/arch.covariance.kernel.CovarianceEstimate.one_sided.html", "covariance/generated/generated/arch.covariance.kernel.CovarianceEstimate.one_sided_strict.html", "covariance/generated/generated/arch.covariance.kernel.CovarianceEstimate.short_run.html", "covariance/generated/generated/arch.covariance.kernel.Gallant.bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.Gallant.bandwidth_scale.html", "covariance/generated/generated/arch.covariance.kernel.Gallant.centered.html", "covariance/generated/generated/arch.covariance.kernel.Gallant.cov.html", "covariance/generated/generated/arch.covariance.kernel.Gallant.force_int.html", "covariance/generated/generated/arch.covariance.kernel.Gallant.kernel_const.html", "covariance/generated/generated/arch.covariance.kernel.Gallant.kernel_weights.html", "covariance/generated/generated/arch.covariance.kernel.Gallant.name.html", "covariance/generated/generated/arch.covariance.kernel.Gallant.opt_bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.Gallant.rate.html", "covariance/generated/generated/arch.covariance.kernel.NeweyWest.bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.NeweyWest.bandwidth_scale.html", "covariance/generated/generated/arch.covariance.kernel.NeweyWest.centered.html", "covariance/generated/generated/arch.covariance.kernel.NeweyWest.cov.html", "covariance/generated/generated/arch.covariance.kernel.NeweyWest.force_int.html", "covariance/generated/generated/arch.covariance.kernel.NeweyWest.kernel_const.html", "covariance/generated/generated/arch.covariance.kernel.NeweyWest.kernel_weights.html", "covariance/generated/generated/arch.covariance.kernel.NeweyWest.name.html", "covariance/generated/generated/arch.covariance.kernel.NeweyWest.opt_bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.NeweyWest.rate.html", "covariance/generated/generated/arch.covariance.kernel.Parzen.bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.Parzen.bandwidth_scale.html", "covariance/generated/generated/arch.covariance.kernel.Parzen.centered.html", "covariance/generated/generated/arch.covariance.kernel.Parzen.cov.html", "covariance/generated/generated/arch.covariance.kernel.Parzen.force_int.html", "covariance/generated/generated/arch.covariance.kernel.Parzen.kernel_const.html", "covariance/generated/generated/arch.covariance.kernel.Parzen.kernel_weights.html", "covariance/generated/generated/arch.covariance.kernel.Parzen.name.html", "covariance/generated/generated/arch.covariance.kernel.Parzen.opt_bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.Parzen.rate.html", "covariance/generated/generated/arch.covariance.kernel.ParzenCauchy.bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.ParzenCauchy.bandwidth_scale.html", "covariance/generated/generated/arch.covariance.kernel.ParzenCauchy.centered.html", "covariance/generated/generated/arch.covariance.kernel.ParzenCauchy.cov.html", "covariance/generated/generated/arch.covariance.kernel.ParzenCauchy.force_int.html", "covariance/generated/generated/arch.covariance.kernel.ParzenCauchy.kernel_const.html", "covariance/generated/generated/arch.covariance.kernel.ParzenCauchy.kernel_weights.html", "covariance/generated/generated/arch.covariance.kernel.ParzenCauchy.name.html", "covariance/generated/generated/arch.covariance.kernel.ParzenCauchy.opt_bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.ParzenCauchy.rate.html", "covariance/generated/generated/arch.covariance.kernel.ParzenGeometric.bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.ParzenGeometric.bandwidth_scale.html", "covariance/generated/generated/arch.covariance.kernel.ParzenGeometric.centered.html", "covariance/generated/generated/arch.covariance.kernel.ParzenGeometric.cov.html", "covariance/generated/generated/arch.covariance.kernel.ParzenGeometric.force_int.html", "covariance/generated/generated/arch.covariance.kernel.ParzenGeometric.kernel_const.html", "covariance/generated/generated/arch.covariance.kernel.ParzenGeometric.kernel_weights.html", "covariance/generated/generated/arch.covariance.kernel.ParzenGeometric.name.html", "covariance/generated/generated/arch.covariance.kernel.ParzenGeometric.opt_bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.ParzenGeometric.rate.html", "covariance/generated/generated/arch.covariance.kernel.ParzenRiesz.bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.ParzenRiesz.bandwidth_scale.html", "covariance/generated/generated/arch.covariance.kernel.ParzenRiesz.centered.html", "covariance/generated/generated/arch.covariance.kernel.ParzenRiesz.cov.html", "covariance/generated/generated/arch.covariance.kernel.ParzenRiesz.force_int.html", "covariance/generated/generated/arch.covariance.kernel.ParzenRiesz.kernel_const.html", "covariance/generated/generated/arch.covariance.kernel.ParzenRiesz.kernel_weights.html", "covariance/generated/generated/arch.covariance.kernel.ParzenRiesz.name.html", "covariance/generated/generated/arch.covariance.kernel.ParzenRiesz.opt_bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.ParzenRiesz.rate.html", "covariance/generated/generated/arch.covariance.kernel.QuadraticSpectral.bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.QuadraticSpectral.bandwidth_scale.html", "covariance/generated/generated/arch.covariance.kernel.QuadraticSpectral.centered.html", "covariance/generated/generated/arch.covariance.kernel.QuadraticSpectral.cov.html", "covariance/generated/generated/arch.covariance.kernel.QuadraticSpectral.force_int.html", "covariance/generated/generated/arch.covariance.kernel.QuadraticSpectral.kernel_const.html", "covariance/generated/generated/arch.covariance.kernel.QuadraticSpectral.kernel_weights.html", "covariance/generated/generated/arch.covariance.kernel.QuadraticSpectral.name.html", "covariance/generated/generated/arch.covariance.kernel.QuadraticSpectral.opt_bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.QuadraticSpectral.rate.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHamming.bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHamming.bandwidth_scale.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHamming.centered.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHamming.cov.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHamming.force_int.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHamming.kernel_const.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHamming.kernel_weights.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHamming.name.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHamming.opt_bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHamming.rate.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHanning.bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHanning.bandwidth_scale.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHanning.centered.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHanning.cov.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHanning.force_int.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHanning.kernel_const.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHanning.kernel_weights.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHanning.name.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHanning.opt_bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHanning.rate.html", "covariance/generated/generated/arch.covariance.kernel.TukeyParzen.bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.TukeyParzen.bandwidth_scale.html", "covariance/generated/generated/arch.covariance.kernel.TukeyParzen.centered.html", "covariance/generated/generated/arch.covariance.kernel.TukeyParzen.cov.html", "covariance/generated/generated/arch.covariance.kernel.TukeyParzen.force_int.html", "covariance/generated/generated/arch.covariance.kernel.TukeyParzen.kernel_const.html", "covariance/generated/generated/arch.covariance.kernel.TukeyParzen.kernel_weights.html", "covariance/generated/generated/arch.covariance.kernel.TukeyParzen.name.html", "covariance/generated/generated/arch.covariance.kernel.TukeyParzen.opt_bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.TukeyParzen.rate.html", "index.html", "multiple-comparison/background.html", "multiple-comparison/generated/arch.bootstrap.MCS.html", "multiple-comparison/generated/arch.bootstrap.SPA.html", "multiple-comparison/generated/arch.bootstrap.StepM.html", "multiple-comparison/generated/generated/arch.bootstrap.MCS.compute.html", "multiple-comparison/generated/generated/arch.bootstrap.MCS.excluded.html", "multiple-comparison/generated/generated/arch.bootstrap.MCS.included.html", "multiple-comparison/generated/generated/arch.bootstrap.MCS.pvalues.html", "multiple-comparison/generated/generated/arch.bootstrap.MCS.reset.html", "multiple-comparison/generated/generated/arch.bootstrap.MCS.seed.html", "multiple-comparison/generated/generated/arch.bootstrap.SPA.better_models.html", "multiple-comparison/generated/generated/arch.bootstrap.SPA.compute.html", "multiple-comparison/generated/generated/arch.bootstrap.SPA.critical_values.html", "multiple-comparison/generated/generated/arch.bootstrap.SPA.pvalues.html", "multiple-comparison/generated/generated/arch.bootstrap.SPA.reset.html", "multiple-comparison/generated/generated/arch.bootstrap.SPA.seed.html", "multiple-comparison/generated/generated/arch.bootstrap.SPA.subset.html", "multiple-comparison/generated/generated/arch.bootstrap.StepM.compute.html", "multiple-comparison/generated/generated/arch.bootstrap.StepM.reset.html", "multiple-comparison/generated/generated/arch.bootstrap.StepM.seed.html", "multiple-comparison/generated/generated/arch.bootstrap.StepM.superior_models.html", "multiple-comparison/multiple-comparison-reference.html", "multiple-comparison/multiple-comparison_examples.html", "multiple-comparison/multiple-comparisons.html", "unitroot/cointegration.html", "unitroot/generated/arch.unitroot.ADF.html", "unitroot/generated/arch.unitroot.DFGLS.html", "unitroot/generated/arch.unitroot.KPSS.html", "unitroot/generated/arch.unitroot.PhillipsPerron.html", "unitroot/generated/arch.unitroot.VarianceRatio.html", "unitroot/generated/arch.unitroot.ZivotAndrews.html", "unitroot/generated/arch.unitroot.auto_bandwidth.html", "unitroot/generated/arch.unitroot.cointegration.CanonicalCointegratingReg.html", "unitroot/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.html", "unitroot/generated/arch.unitroot.cointegration.DynamicOLS.html", "unitroot/generated/arch.unitroot.cointegration.DynamicOLSResults.html", "unitroot/generated/arch.unitroot.cointegration.EngleGrangerTestResults.html", "unitroot/generated/arch.unitroot.cointegration.FullyModifiedOLS.html", "unitroot/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.html", "unitroot/generated/arch.unitroot.cointegration.engle_granger.html", "unitroot/generated/arch.unitroot.cointegration.phillips_ouliaris.html", "unitroot/generated/generated/arch.unitroot.ADF.alternative_hypothesis.html", "unitroot/generated/generated/arch.unitroot.ADF.critical_values.html", "unitroot/generated/generated/arch.unitroot.ADF.lags.html", "unitroot/generated/generated/arch.unitroot.ADF.max_lags.html", "unitroot/generated/generated/arch.unitroot.ADF.nobs.html", "unitroot/generated/generated/arch.unitroot.ADF.null_hypothesis.html", "unitroot/generated/generated/arch.unitroot.ADF.pvalue.html", "unitroot/generated/generated/arch.unitroot.ADF.regression.html", "unitroot/generated/generated/arch.unitroot.ADF.stat.html", "unitroot/generated/generated/arch.unitroot.ADF.summary.html", "unitroot/generated/generated/arch.unitroot.ADF.trend.html", "unitroot/generated/generated/arch.unitroot.ADF.valid_trends.html", "unitroot/generated/generated/arch.unitroot.ADF.y.html", "unitroot/generated/generated/arch.unitroot.DFGLS.alternative_hypothesis.html", "unitroot/generated/generated/arch.unitroot.DFGLS.critical_values.html", "unitroot/generated/generated/arch.unitroot.DFGLS.lags.html", "unitroot/generated/generated/arch.unitroot.DFGLS.max_lags.html", "unitroot/generated/generated/arch.unitroot.DFGLS.nobs.html", "unitroot/generated/generated/arch.unitroot.DFGLS.null_hypothesis.html", "unitroot/generated/generated/arch.unitroot.DFGLS.pvalue.html", "unitroot/generated/generated/arch.unitroot.DFGLS.regression.html", "unitroot/generated/generated/arch.unitroot.DFGLS.stat.html", "unitroot/generated/generated/arch.unitroot.DFGLS.summary.html", "unitroot/generated/generated/arch.unitroot.DFGLS.trend.html", "unitroot/generated/generated/arch.unitroot.DFGLS.valid_trends.html", "unitroot/generated/generated/arch.unitroot.DFGLS.y.html", "unitroot/generated/generated/arch.unitroot.KPSS.alternative_hypothesis.html", "unitroot/generated/generated/arch.unitroot.KPSS.critical_values.html", "unitroot/generated/generated/arch.unitroot.KPSS.lags.html", "unitroot/generated/generated/arch.unitroot.KPSS.nobs.html", "unitroot/generated/generated/arch.unitroot.KPSS.null_hypothesis.html", "unitroot/generated/generated/arch.unitroot.KPSS.pvalue.html", "unitroot/generated/generated/arch.unitroot.KPSS.stat.html", "unitroot/generated/generated/arch.unitroot.KPSS.summary.html", "unitroot/generated/generated/arch.unitroot.KPSS.trend.html", "unitroot/generated/generated/arch.unitroot.KPSS.valid_trends.html", "unitroot/generated/generated/arch.unitroot.KPSS.y.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.alternative_hypothesis.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.critical_values.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.lags.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.nobs.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.null_hypothesis.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.pvalue.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.regression.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.stat.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.summary.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.test_type.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.trend.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.valid_trends.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.y.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.alternative_hypothesis.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.critical_values.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.debiased.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.lags.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.nobs.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.null_hypothesis.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.overlap.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.pvalue.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.robust.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.stat.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.summary.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.trend.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.valid_trends.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.vr.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.y.html", "unitroot/generated/generated/arch.unitroot.ZivotAndrews.alternative_hypothesis.html", "unitroot/generated/generated/arch.unitroot.ZivotAndrews.critical_values.html", "unitroot/generated/generated/arch.unitroot.ZivotAndrews.lags.html", "unitroot/generated/generated/arch.unitroot.ZivotAndrews.nobs.html", "unitroot/generated/generated/arch.unitroot.ZivotAndrews.null_hypothesis.html", "unitroot/generated/generated/arch.unitroot.ZivotAndrews.pvalue.html", "unitroot/generated/generated/arch.unitroot.ZivotAndrews.stat.html", "unitroot/generated/generated/arch.unitroot.ZivotAndrews.summary.html", "unitroot/generated/generated/arch.unitroot.ZivotAndrews.trend.html", "unitroot/generated/generated/arch.unitroot.ZivotAndrews.valid_trends.html", "unitroot/generated/generated/arch.unitroot.ZivotAndrews.y.html", "unitroot/generated/generated/arch.unitroot.cointegration.CanonicalCointegratingReg.fit.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.bandwidth.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.cov.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.kernel.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.long_run_variance.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.params.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.pvalues.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.resid.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.residual_variance.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.rsquared.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.rsquared_adj.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.std_errors.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.summary.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.tvalues.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLS.fit.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.bandwidth.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.cov.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.cov_type.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.full_cov.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.full_params.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.kernel.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.lags.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.leads.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.long_run_variance.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.params.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.pvalues.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.resid.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.residual_variance.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.rsquared.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.rsquared_adj.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.std_errors.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.summary.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.tvalues.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.alternative_hypothesis.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.cointegrating_vector.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.critical_values.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.distribution_order.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.lags.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.max_lags.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.name.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.null_hypothesis.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.plot.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.pvalue.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.resid.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.rho.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.stat.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.summary.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.trend.html", "unitroot/generated/generated/arch.unitroot.cointegration.FullyModifiedOLS.fit.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.alternative_hypothesis.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.bandwidth.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.cointegrating_vector.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.critical_values.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.distribution_order.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.kernel.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.name.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.null_hypothesis.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.plot.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.pvalue.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.resid.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.stat.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.summary.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.trend.html", "unitroot/introduction.html", "unitroot/tests.html", "unitroot/unitroot.html", "unitroot/unitroot_cointegration_examples.html", "unitroot/unitroot_examples.html", "univariate/background.html", "univariate/distribution.html", "univariate/forecasting.html", "univariate/generated/arch.univariate.APARCH.html", "univariate/generated/arch.univariate.ARCH.html", "univariate/generated/arch.univariate.ARCHInMean.html", "univariate/generated/arch.univariate.ARX.html", "univariate/generated/arch.univariate.ConstantMean.html", "univariate/generated/arch.univariate.ConstantVariance.html", "univariate/generated/arch.univariate.EGARCH.html", "univariate/generated/arch.univariate.EWMAVariance.html", "univariate/generated/arch.univariate.FIGARCH.html", "univariate/generated/arch.univariate.FixedVariance.html", "univariate/generated/arch.univariate.GARCH.html", "univariate/generated/arch.univariate.GeneralizedError.html", "univariate/generated/arch.univariate.HARCH.html", "univariate/generated/arch.univariate.HARX.html", "univariate/generated/arch.univariate.LS.html", "univariate/generated/arch.univariate.MIDASHyperbolic.html", "univariate/generated/arch.univariate.Normal.html", "univariate/generated/arch.univariate.RiskMetrics2006.html", "univariate/generated/arch.univariate.SkewStudent.html", "univariate/generated/arch.univariate.StudentsT.html", "univariate/generated/arch.univariate.ZeroMean.html", "univariate/generated/arch.univariate.base.ARCHModel.html", "univariate/generated/arch.univariate.base.ARCHModelFixedResult.html", "univariate/generated/arch.univariate.base.ARCHModelForecast.html", "univariate/generated/arch.univariate.base.ARCHModelForecastSimulation.html", "univariate/generated/arch.univariate.base.ARCHModelResult.html", "univariate/generated/arch.univariate.distribution.Distribution.html", "univariate/generated/arch.univariate.recursions_python.VolatilityUpdater.html", "univariate/generated/arch.univariate.volatility.VolatilityProcess.html", "univariate/generated/generated/arch.univariate.APARCH.backcast.html", "univariate/generated/generated/arch.univariate.APARCH.backcast_transform.html", "univariate/generated/generated/arch.univariate.APARCH.bounds.html", "univariate/generated/generated/arch.univariate.APARCH.common_asym.html", "univariate/generated/generated/arch.univariate.APARCH.compute_variance.html", "univariate/generated/generated/arch.univariate.APARCH.constraints.html", "univariate/generated/generated/arch.univariate.APARCH.delta.html", "univariate/generated/generated/arch.univariate.APARCH.forecast.html", "univariate/generated/generated/arch.univariate.APARCH.name.html", "univariate/generated/generated/arch.univariate.APARCH.num_params.html", "univariate/generated/generated/arch.univariate.APARCH.parameter_names.html", "univariate/generated/generated/arch.univariate.APARCH.simulate.html", "univariate/generated/generated/arch.univariate.APARCH.start.html", "univariate/generated/generated/arch.univariate.APARCH.starting_values.html", "univariate/generated/generated/arch.univariate.APARCH.stop.html", "univariate/generated/generated/arch.univariate.APARCH.update.html", "univariate/generated/generated/arch.univariate.APARCH.updateable.html", "univariate/generated/generated/arch.univariate.APARCH.variance_bounds.html", "univariate/generated/generated/arch.univariate.APARCH.volatility_updater.html", "univariate/generated/generated/arch.univariate.ARCH.backcast.html", "univariate/generated/generated/arch.univariate.ARCH.backcast_transform.html", "univariate/generated/generated/arch.univariate.ARCH.bounds.html", "univariate/generated/generated/arch.univariate.ARCH.compute_variance.html", "univariate/generated/generated/arch.univariate.ARCH.constraints.html", "univariate/generated/generated/arch.univariate.ARCH.forecast.html", "univariate/generated/generated/arch.univariate.ARCH.name.html", "univariate/generated/generated/arch.univariate.ARCH.num_params.html", "univariate/generated/generated/arch.univariate.ARCH.parameter_names.html", "univariate/generated/generated/arch.univariate.ARCH.simulate.html", "univariate/generated/generated/arch.univariate.ARCH.start.html", "univariate/generated/generated/arch.univariate.ARCH.starting_values.html", "univariate/generated/generated/arch.univariate.ARCH.stop.html", "univariate/generated/generated/arch.univariate.ARCH.update.html", "univariate/generated/generated/arch.univariate.ARCH.updateable.html", "univariate/generated/generated/arch.univariate.ARCH.variance_bounds.html", "univariate/generated/generated/arch.univariate.ARCH.volatility_updater.html", "univariate/generated/generated/arch.univariate.ARCHInMean.bounds.html", "univariate/generated/generated/arch.univariate.ARCHInMean.compute_param_cov.html", "univariate/generated/generated/arch.univariate.ARCHInMean.constraints.html", "univariate/generated/generated/arch.univariate.ARCHInMean.distribution.html", "univariate/generated/generated/arch.univariate.ARCHInMean.fit.html", "univariate/generated/generated/arch.univariate.ARCHInMean.fix.html", "univariate/generated/generated/arch.univariate.ARCHInMean.forecast.html", "univariate/generated/generated/arch.univariate.ARCHInMean.form.html", "univariate/generated/generated/arch.univariate.ARCHInMean.name.html", "univariate/generated/generated/arch.univariate.ARCHInMean.num_params.html", "univariate/generated/generated/arch.univariate.ARCHInMean.parameter_names.html", "univariate/generated/generated/arch.univariate.ARCHInMean.resids.html", "univariate/generated/generated/arch.univariate.ARCHInMean.simulate.html", "univariate/generated/generated/arch.univariate.ARCHInMean.starting_values.html", "univariate/generated/generated/arch.univariate.ARCHInMean.volatility.html", "univariate/generated/generated/arch.univariate.ARCHInMean.x.html", "univariate/generated/generated/arch.univariate.ARCHInMean.y.html", "univariate/generated/generated/arch.univariate.ARX.bounds.html", "univariate/generated/generated/arch.univariate.ARX.compute_param_cov.html", "univariate/generated/generated/arch.univariate.ARX.constraints.html", "univariate/generated/generated/arch.univariate.ARX.distribution.html", "univariate/generated/generated/arch.univariate.ARX.fit.html", "univariate/generated/generated/arch.univariate.ARX.fix.html", "univariate/generated/generated/arch.univariate.ARX.forecast.html", "univariate/generated/generated/arch.univariate.ARX.name.html", "univariate/generated/generated/arch.univariate.ARX.num_params.html", "univariate/generated/generated/arch.univariate.ARX.parameter_names.html", "univariate/generated/generated/arch.univariate.ARX.resids.html", "univariate/generated/generated/arch.univariate.ARX.simulate.html", "univariate/generated/generated/arch.univariate.ARX.starting_values.html", "univariate/generated/generated/arch.univariate.ARX.volatility.html", "univariate/generated/generated/arch.univariate.ARX.x.html", "univariate/generated/generated/arch.univariate.ARX.y.html", "univariate/generated/generated/arch.univariate.ConstantMean.bounds.html", "univariate/generated/generated/arch.univariate.ConstantMean.compute_param_cov.html", "univariate/generated/generated/arch.univariate.ConstantMean.constraints.html", "univariate/generated/generated/arch.univariate.ConstantMean.distribution.html", "univariate/generated/generated/arch.univariate.ConstantMean.fit.html", "univariate/generated/generated/arch.univariate.ConstantMean.fix.html", "univariate/generated/generated/arch.univariate.ConstantMean.forecast.html", "univariate/generated/generated/arch.univariate.ConstantMean.name.html", "univariate/generated/generated/arch.univariate.ConstantMean.num_params.html", "univariate/generated/generated/arch.univariate.ConstantMean.parameter_names.html", "univariate/generated/generated/arch.univariate.ConstantMean.resids.html", "univariate/generated/generated/arch.univariate.ConstantMean.simulate.html", "univariate/generated/generated/arch.univariate.ConstantMean.starting_values.html", "univariate/generated/generated/arch.univariate.ConstantMean.volatility.html", "univariate/generated/generated/arch.univariate.ConstantMean.x.html", "univariate/generated/generated/arch.univariate.ConstantMean.y.html", "univariate/generated/generated/arch.univariate.ConstantVariance.backcast.html", "univariate/generated/generated/arch.univariate.ConstantVariance.backcast_transform.html", "univariate/generated/generated/arch.univariate.ConstantVariance.bounds.html", "univariate/generated/generated/arch.univariate.ConstantVariance.compute_variance.html", "univariate/generated/generated/arch.univariate.ConstantVariance.constraints.html", "univariate/generated/generated/arch.univariate.ConstantVariance.forecast.html", "univariate/generated/generated/arch.univariate.ConstantVariance.name.html", "univariate/generated/generated/arch.univariate.ConstantVariance.num_params.html", "univariate/generated/generated/arch.univariate.ConstantVariance.parameter_names.html", "univariate/generated/generated/arch.univariate.ConstantVariance.simulate.html", "univariate/generated/generated/arch.univariate.ConstantVariance.start.html", "univariate/generated/generated/arch.univariate.ConstantVariance.starting_values.html", "univariate/generated/generated/arch.univariate.ConstantVariance.stop.html", "univariate/generated/generated/arch.univariate.ConstantVariance.update.html", "univariate/generated/generated/arch.univariate.ConstantVariance.updateable.html", "univariate/generated/generated/arch.univariate.ConstantVariance.variance_bounds.html", "univariate/generated/generated/arch.univariate.ConstantVariance.volatility_updater.html", "univariate/generated/generated/arch.univariate.EGARCH.backcast.html", "univariate/generated/generated/arch.univariate.EGARCH.backcast_transform.html", "univariate/generated/generated/arch.univariate.EGARCH.bounds.html", "univariate/generated/generated/arch.univariate.EGARCH.compute_variance.html", "univariate/generated/generated/arch.univariate.EGARCH.constraints.html", "univariate/generated/generated/arch.univariate.EGARCH.forecast.html", "univariate/generated/generated/arch.univariate.EGARCH.name.html", "univariate/generated/generated/arch.univariate.EGARCH.num_params.html", "univariate/generated/generated/arch.univariate.EGARCH.parameter_names.html", "univariate/generated/generated/arch.univariate.EGARCH.simulate.html", "univariate/generated/generated/arch.univariate.EGARCH.start.html", "univariate/generated/generated/arch.univariate.EGARCH.starting_values.html", "univariate/generated/generated/arch.univariate.EGARCH.stop.html", "univariate/generated/generated/arch.univariate.EGARCH.update.html", "univariate/generated/generated/arch.univariate.EGARCH.updateable.html", "univariate/generated/generated/arch.univariate.EGARCH.variance_bounds.html", "univariate/generated/generated/arch.univariate.EGARCH.volatility_updater.html", "univariate/generated/generated/arch.univariate.EWMAVariance.backcast.html", "univariate/generated/generated/arch.univariate.EWMAVariance.backcast_transform.html", "univariate/generated/generated/arch.univariate.EWMAVariance.bounds.html", "univariate/generated/generated/arch.univariate.EWMAVariance.compute_variance.html", "univariate/generated/generated/arch.univariate.EWMAVariance.constraints.html", "univariate/generated/generated/arch.univariate.EWMAVariance.forecast.html", "univariate/generated/generated/arch.univariate.EWMAVariance.name.html", "univariate/generated/generated/arch.univariate.EWMAVariance.num_params.html", "univariate/generated/generated/arch.univariate.EWMAVariance.parameter_names.html", "univariate/generated/generated/arch.univariate.EWMAVariance.simulate.html", "univariate/generated/generated/arch.univariate.EWMAVariance.start.html", "univariate/generated/generated/arch.univariate.EWMAVariance.starting_values.html", "univariate/generated/generated/arch.univariate.EWMAVariance.stop.html", "univariate/generated/generated/arch.univariate.EWMAVariance.update.html", "univariate/generated/generated/arch.univariate.EWMAVariance.updateable.html", "univariate/generated/generated/arch.univariate.EWMAVariance.variance_bounds.html", "univariate/generated/generated/arch.univariate.EWMAVariance.volatility_updater.html", "univariate/generated/generated/arch.univariate.FIGARCH.backcast.html", "univariate/generated/generated/arch.univariate.FIGARCH.backcast_transform.html", "univariate/generated/generated/arch.univariate.FIGARCH.bounds.html", "univariate/generated/generated/arch.univariate.FIGARCH.compute_variance.html", "univariate/generated/generated/arch.univariate.FIGARCH.constraints.html", "univariate/generated/generated/arch.univariate.FIGARCH.forecast.html", "univariate/generated/generated/arch.univariate.FIGARCH.name.html", "univariate/generated/generated/arch.univariate.FIGARCH.num_params.html", "univariate/generated/generated/arch.univariate.FIGARCH.parameter_names.html", "univariate/generated/generated/arch.univariate.FIGARCH.simulate.html", "univariate/generated/generated/arch.univariate.FIGARCH.start.html", "univariate/generated/generated/arch.univariate.FIGARCH.starting_values.html", "univariate/generated/generated/arch.univariate.FIGARCH.stop.html", "univariate/generated/generated/arch.univariate.FIGARCH.truncation.html", "univariate/generated/generated/arch.univariate.FIGARCH.update.html", "univariate/generated/generated/arch.univariate.FIGARCH.updateable.html", "univariate/generated/generated/arch.univariate.FIGARCH.variance_bounds.html", "univariate/generated/generated/arch.univariate.FIGARCH.volatility_updater.html", "univariate/generated/generated/arch.univariate.FixedVariance.backcast.html", "univariate/generated/generated/arch.univariate.FixedVariance.backcast_transform.html", "univariate/generated/generated/arch.univariate.FixedVariance.bounds.html", "univariate/generated/generated/arch.univariate.FixedVariance.compute_variance.html", "univariate/generated/generated/arch.univariate.FixedVariance.constraints.html", "univariate/generated/generated/arch.univariate.FixedVariance.forecast.html", "univariate/generated/generated/arch.univariate.FixedVariance.name.html", "univariate/generated/generated/arch.univariate.FixedVariance.num_params.html", "univariate/generated/generated/arch.univariate.FixedVariance.parameter_names.html", "univariate/generated/generated/arch.univariate.FixedVariance.simulate.html", "univariate/generated/generated/arch.univariate.FixedVariance.start.html", "univariate/generated/generated/arch.univariate.FixedVariance.starting_values.html", "univariate/generated/generated/arch.univariate.FixedVariance.stop.html", "univariate/generated/generated/arch.univariate.FixedVariance.update.html", "univariate/generated/generated/arch.univariate.FixedVariance.updateable.html", "univariate/generated/generated/arch.univariate.FixedVariance.variance_bounds.html", "univariate/generated/generated/arch.univariate.FixedVariance.volatility_updater.html", "univariate/generated/generated/arch.univariate.GARCH.backcast.html", "univariate/generated/generated/arch.univariate.GARCH.backcast_transform.html", "univariate/generated/generated/arch.univariate.GARCH.bounds.html", "univariate/generated/generated/arch.univariate.GARCH.compute_variance.html", "univariate/generated/generated/arch.univariate.GARCH.constraints.html", "univariate/generated/generated/arch.univariate.GARCH.forecast.html", "univariate/generated/generated/arch.univariate.GARCH.name.html", "univariate/generated/generated/arch.univariate.GARCH.num_params.html", "univariate/generated/generated/arch.univariate.GARCH.parameter_names.html", "univariate/generated/generated/arch.univariate.GARCH.simulate.html", "univariate/generated/generated/arch.univariate.GARCH.start.html", "univariate/generated/generated/arch.univariate.GARCH.starting_values.html", "univariate/generated/generated/arch.univariate.GARCH.stop.html", "univariate/generated/generated/arch.univariate.GARCH.update.html", "univariate/generated/generated/arch.univariate.GARCH.updateable.html", "univariate/generated/generated/arch.univariate.GARCH.variance_bounds.html", "univariate/generated/generated/arch.univariate.GARCH.volatility_updater.html", "univariate/generated/generated/arch.univariate.GeneralizedError.bounds.html", "univariate/generated/generated/arch.univariate.GeneralizedError.cdf.html", "univariate/generated/generated/arch.univariate.GeneralizedError.constraints.html", "univariate/generated/generated/arch.univariate.GeneralizedError.generator.html", "univariate/generated/generated/arch.univariate.GeneralizedError.loglikelihood.html", "univariate/generated/generated/arch.univariate.GeneralizedError.moment.html", "univariate/generated/generated/arch.univariate.GeneralizedError.name.html", "univariate/generated/generated/arch.univariate.GeneralizedError.parameter_names.html", "univariate/generated/generated/arch.univariate.GeneralizedError.partial_moment.html", "univariate/generated/generated/arch.univariate.GeneralizedError.ppf.html", "univariate/generated/generated/arch.univariate.GeneralizedError.random_state.html", "univariate/generated/generated/arch.univariate.GeneralizedError.simulate.html", "univariate/generated/generated/arch.univariate.GeneralizedError.starting_values.html", "univariate/generated/generated/arch.univariate.HARCH.backcast.html", "univariate/generated/generated/arch.univariate.HARCH.backcast_transform.html", "univariate/generated/generated/arch.univariate.HARCH.bounds.html", "univariate/generated/generated/arch.univariate.HARCH.compute_variance.html", "univariate/generated/generated/arch.univariate.HARCH.constraints.html", "univariate/generated/generated/arch.univariate.HARCH.forecast.html", "univariate/generated/generated/arch.univariate.HARCH.name.html", "univariate/generated/generated/arch.univariate.HARCH.num_params.html", "univariate/generated/generated/arch.univariate.HARCH.parameter_names.html", "univariate/generated/generated/arch.univariate.HARCH.simulate.html", "univariate/generated/generated/arch.univariate.HARCH.start.html", "univariate/generated/generated/arch.univariate.HARCH.starting_values.html", "univariate/generated/generated/arch.univariate.HARCH.stop.html", "univariate/generated/generated/arch.univariate.HARCH.update.html", "univariate/generated/generated/arch.univariate.HARCH.updateable.html", "univariate/generated/generated/arch.univariate.HARCH.variance_bounds.html", "univariate/generated/generated/arch.univariate.HARCH.volatility_updater.html", "univariate/generated/generated/arch.univariate.HARX.bounds.html", "univariate/generated/generated/arch.univariate.HARX.compute_param_cov.html", "univariate/generated/generated/arch.univariate.HARX.constraints.html", "univariate/generated/generated/arch.univariate.HARX.distribution.html", "univariate/generated/generated/arch.univariate.HARX.fit.html", "univariate/generated/generated/arch.univariate.HARX.fix.html", "univariate/generated/generated/arch.univariate.HARX.forecast.html", "univariate/generated/generated/arch.univariate.HARX.name.html", "univariate/generated/generated/arch.univariate.HARX.num_params.html", "univariate/generated/generated/arch.univariate.HARX.parameter_names.html", "univariate/generated/generated/arch.univariate.HARX.resids.html", "univariate/generated/generated/arch.univariate.HARX.simulate.html", "univariate/generated/generated/arch.univariate.HARX.starting_values.html", "univariate/generated/generated/arch.univariate.HARX.volatility.html", "univariate/generated/generated/arch.univariate.HARX.x.html", "univariate/generated/generated/arch.univariate.HARX.y.html", "univariate/generated/generated/arch.univariate.LS.bounds.html", "univariate/generated/generated/arch.univariate.LS.compute_param_cov.html", "univariate/generated/generated/arch.univariate.LS.constraints.html", "univariate/generated/generated/arch.univariate.LS.distribution.html", "univariate/generated/generated/arch.univariate.LS.fit.html", "univariate/generated/generated/arch.univariate.LS.fix.html", "univariate/generated/generated/arch.univariate.LS.forecast.html", "univariate/generated/generated/arch.univariate.LS.name.html", "univariate/generated/generated/arch.univariate.LS.num_params.html", "univariate/generated/generated/arch.univariate.LS.parameter_names.html", "univariate/generated/generated/arch.univariate.LS.resids.html", "univariate/generated/generated/arch.univariate.LS.simulate.html", "univariate/generated/generated/arch.univariate.LS.starting_values.html", "univariate/generated/generated/arch.univariate.LS.volatility.html", "univariate/generated/generated/arch.univariate.LS.x.html", "univariate/generated/generated/arch.univariate.LS.y.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.backcast.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.backcast_transform.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.bounds.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.compute_variance.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.constraints.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.forecast.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.name.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.num_params.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.parameter_names.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.simulate.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.start.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.starting_values.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.stop.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.update.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.updateable.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.variance_bounds.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.volatility_updater.html", "univariate/generated/generated/arch.univariate.Normal.bounds.html", "univariate/generated/generated/arch.univariate.Normal.cdf.html", "univariate/generated/generated/arch.univariate.Normal.constraints.html", "univariate/generated/generated/arch.univariate.Normal.generator.html", "univariate/generated/generated/arch.univariate.Normal.loglikelihood.html", "univariate/generated/generated/arch.univariate.Normal.moment.html", "univariate/generated/generated/arch.univariate.Normal.name.html", "univariate/generated/generated/arch.univariate.Normal.parameter_names.html", "univariate/generated/generated/arch.univariate.Normal.partial_moment.html", "univariate/generated/generated/arch.univariate.Normal.ppf.html", "univariate/generated/generated/arch.univariate.Normal.random_state.html", "univariate/generated/generated/arch.univariate.Normal.simulate.html", "univariate/generated/generated/arch.univariate.Normal.starting_values.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.backcast.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.backcast_transform.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.bounds.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.compute_variance.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.constraints.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.forecast.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.name.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.num_params.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.parameter_names.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.simulate.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.start.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.starting_values.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.stop.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.update.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.updateable.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.variance_bounds.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.volatility_updater.html", "univariate/generated/generated/arch.univariate.SkewStudent.bounds.html", "univariate/generated/generated/arch.univariate.SkewStudent.cdf.html", "univariate/generated/generated/arch.univariate.SkewStudent.constraints.html", "univariate/generated/generated/arch.univariate.SkewStudent.generator.html", "univariate/generated/generated/arch.univariate.SkewStudent.loglikelihood.html", "univariate/generated/generated/arch.univariate.SkewStudent.moment.html", "univariate/generated/generated/arch.univariate.SkewStudent.name.html", "univariate/generated/generated/arch.univariate.SkewStudent.parameter_names.html", "univariate/generated/generated/arch.univariate.SkewStudent.partial_moment.html", "univariate/generated/generated/arch.univariate.SkewStudent.ppf.html", "univariate/generated/generated/arch.univariate.SkewStudent.random_state.html", "univariate/generated/generated/arch.univariate.SkewStudent.simulate.html", "univariate/generated/generated/arch.univariate.SkewStudent.starting_values.html", "univariate/generated/generated/arch.univariate.StudentsT.bounds.html", "univariate/generated/generated/arch.univariate.StudentsT.cdf.html", "univariate/generated/generated/arch.univariate.StudentsT.constraints.html", "univariate/generated/generated/arch.univariate.StudentsT.generator.html", "univariate/generated/generated/arch.univariate.StudentsT.loglikelihood.html", "univariate/generated/generated/arch.univariate.StudentsT.moment.html", "univariate/generated/generated/arch.univariate.StudentsT.name.html", "univariate/generated/generated/arch.univariate.StudentsT.parameter_names.html", "univariate/generated/generated/arch.univariate.StudentsT.partial_moment.html", "univariate/generated/generated/arch.univariate.StudentsT.ppf.html", "univariate/generated/generated/arch.univariate.StudentsT.random_state.html", "univariate/generated/generated/arch.univariate.StudentsT.simulate.html", "univariate/generated/generated/arch.univariate.StudentsT.starting_values.html", "univariate/generated/generated/arch.univariate.ZeroMean.bounds.html", "univariate/generated/generated/arch.univariate.ZeroMean.compute_param_cov.html", "univariate/generated/generated/arch.univariate.ZeroMean.constraints.html", "univariate/generated/generated/arch.univariate.ZeroMean.distribution.html", "univariate/generated/generated/arch.univariate.ZeroMean.fit.html", "univariate/generated/generated/arch.univariate.ZeroMean.fix.html", "univariate/generated/generated/arch.univariate.ZeroMean.forecast.html", "univariate/generated/generated/arch.univariate.ZeroMean.name.html", "univariate/generated/generated/arch.univariate.ZeroMean.num_params.html", "univariate/generated/generated/arch.univariate.ZeroMean.parameter_names.html", "univariate/generated/generated/arch.univariate.ZeroMean.resids.html", "univariate/generated/generated/arch.univariate.ZeroMean.simulate.html", "univariate/generated/generated/arch.univariate.ZeroMean.starting_values.html", "univariate/generated/generated/arch.univariate.ZeroMean.volatility.html", "univariate/generated/generated/arch.univariate.ZeroMean.x.html", "univariate/generated/generated/arch.univariate.ZeroMean.y.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.bounds.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.compute_param_cov.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.constraints.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.distribution.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.fit.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.fix.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.forecast.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.name.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.num_params.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.parameter_names.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.resids.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.simulate.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.starting_values.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.volatility.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.y.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.aic.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.arch_lm_test.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.bic.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.conditional_volatility.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.forecast.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.hedgehog_plot.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.loglikelihood.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.model.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.nobs.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.num_params.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.params.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.plot.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.resid.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.std_resid.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.summary.html", "univariate/generated/generated/arch.univariate.base.ARCHModelForecast.mean.html", "univariate/generated/generated/arch.univariate.base.ARCHModelForecast.residual_variance.html", "univariate/generated/generated/arch.univariate.base.ARCHModelForecast.simulations.html", "univariate/generated/generated/arch.univariate.base.ARCHModelForecast.variance.html", "univariate/generated/generated/arch.univariate.base.ARCHModelForecastSimulation.index.html", "univariate/generated/generated/arch.univariate.base.ARCHModelForecastSimulation.residual_variances.html", "univariate/generated/generated/arch.univariate.base.ARCHModelForecastSimulation.residuals.html", "univariate/generated/generated/arch.univariate.base.ARCHModelForecastSimulation.values.html", "univariate/generated/generated/arch.univariate.base.ARCHModelForecastSimulation.variances.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.aic.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.arch_lm_test.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.bic.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.conditional_volatility.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.conf_int.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.convergence_flag.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.fit_start.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.fit_stop.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.forecast.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.hedgehog_plot.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.loglikelihood.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.model.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.nobs.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.num_params.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.optimization_result.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.param_cov.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.params.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.plot.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.pvalues.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.resid.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.rsquared.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.rsquared_adj.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.scale.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.std_err.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.std_resid.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.summary.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.tvalues.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.bounds.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.cdf.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.constraints.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.generator.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.loglikelihood.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.moment.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.name.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.parameter_names.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.partial_moment.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.ppf.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.random_state.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.simulate.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.starting_values.html", "univariate/generated/generated/arch.univariate.recursions_python.VolatilityUpdater.initialize_update.html", "univariate/generated/generated/arch.univariate.recursions_python.VolatilityUpdater.update.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.backcast.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.backcast_transform.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.bounds.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.compute_variance.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.constraints.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.forecast.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.name.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.num_params.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.parameter_names.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.simulate.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.start.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.starting_values.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.stop.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.update.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.updateable.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.variance_bounds.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.volatility_updater.html", "univariate/introduction.html", "univariate/mean.html", "univariate/results.html", "univariate/univariate.html", "univariate/univariate_forecasting_with_exogenous_variables.html", "univariate/univariate_using_fixed_variance.html", "univariate/univariate_volatility_forecasting.html", "univariate/univariate_volatility_modeling.html", "univariate/univariate_volatility_scenarios.html", "univariate/utility.html", "univariate/volatility.html"]})