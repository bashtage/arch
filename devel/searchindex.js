Search.setIndex({"alltitles": {"(G)ARCH-in-mean Models": [[893, "g-arch-in-mean-models"]], "API Reference": [[0, null]], "ARCH Modeling": [[899, null]], "Alternative Forecast Generation Schemes": [[898, "Alternative-Forecast-Generation-Schemes"]], "Analytical Forecasts": [[425, "analytical-forecasts"], [898, "Analytical-Forecasts"]], "Asymptotic Normal Approximation (norm, cov or var)": [[4, "asymptotic-normal-approximation-norm-cov-or-var"]], "Augmented Dickey-Fuller Testing": [[422, "Augmented-Dickey-Fuller-Testing"]], "Automatic Bandwidth Selection": [[419, "automatic-bandwidth-selection"]], "Basic (basic)": [[4, "basic-basic"]], "Basic Example": [[418, "basic-example"]], "Basic Forecasting": [[898, "Basic-Forecasting"]], "Bias-corrected (bc, bias-corrected or debiased)": [[4, "bias-corrected-bc-bias-corrected-or-debiased"]], "Bias-corrected and accelerated (bca)": [[4, "bias-corrected-and-accelerated-bca"]], "Block-length Selection": [[0, "block-length-selection"]], "Bootstrap": [[96, "bootstrap"]], "Bootstrap Examples": [[3, null]], "Bootstrap Forecasts": [[425, "bootstrap-forecasts"], [898, "Bootstrap-Forecasts"]], "Bootstrap Scenarios": [[900, "Bootstrap-Scenarios"]], "Bootstrapping": [[2, null]], "Bootstrapping Uneven Length Samples": [[3, "Bootstrapping-Uneven-Length-Samples"]], "Bootstraps": [[0, "bootstraps"]], "Building a Model From Components": [[899, "Building-a-Model-From-Components"]], "Change Logs": [[91, null]], "Changes Since 5.5": [[96, "changes-since-5-5"]], "Citation": [[237, "citation"]], "Cointegrating Relationship Estimation": [[0, "cointegrating-relationship-estimation"]], "Cointegrating Vector Estimation": [[262, "cointegrating-vector-estimation"]], "Cointegration Analysis": [[420, "cointegration-analysis"]], "Cointegration Testing": [[0, "cointegration-testing"], [421, null]], "Cointegration Tests": [[262, null]], "Comparing across the year": [[900, "Comparing-across-the-year"]], "Comparing the paths": [[900, "Comparing-the-paths"]], "Confidence Interval Methods": [[4, "confidence-interval-methods"]], "Confidence Interval Types": [[4, "confidence-interval-types"]], "Confidence Intervals": [[4, null]], "Constructing Parameter Estimates": [[87, "constructing-parameter-estimates"]], "Covariance Estimation": [[88, null]], "Custom Random Generators": [[900, "Custom-Random-Generators"]], "Data": [[897, "Data"], [898, "Data"]], "Deterministic terms": [[422, "Deterministic-terms"]], "Dickey-Fuller GLS Testing": [[422, "Dickey-Fuller-GLS-Testing"]], "Direct Estimation": [[897, "Direct-Estimation"]], "Distributions": [[424, null], [899, "Distributions"]], "Filtered Historical Simulation": [[898, "Filtered-Historical-Simulation"]], "Fitting the model": [[896, "Fitting-the-model"]], "Fitting the model directly": [[3, "Fitting-the-model-directly"]], "Fixed Window Forecasting": [[898, "Fixed-Window-Forecasting"]], "FixedVariance": [[902, "fixedvariance"]], "Fixing Parameters": [[899, "Fixing-Parameters"]], "Forecasting": [[425, null]], "Forecasting Options": [[425, "forecasting-options"]], "Forecasting the X values": [[896, "Forecasting-the-X-values"]], "Forecasting with Exogenous Regressors": [[896, null]], "GARCH (with a Constant Mean)": [[899, "GARCH-(with-a-Constant-Mean)"]], "GJR-GARCH": [[899, "GJR-GARCH"]], "High-level": [[0, "high-level"]], "Independent Samples": [[86, "independent-samples"]], "Independent, Identical Distributed Data (i.i.d.)": [[86, null]], "Index": [[237, "index"]], "Initial Mean Model Estimation": [[897, "Initial-Mean-Model-Estimation"]], "Initial Volatility Model Estimation": [[897, "Initial-Volatility-Model-Estimation"]], "Introduction": [[237, "introduction"], [418, null]], "Introduction to ARCH Models": [[892, null]], "KPSS Testing": [[422, "KPSS-Testing"]], "Long-run Covariance (HAC) Estimation": [[0, "long-run-covariance-hac-estimation"]], "Long-run Covariance Estimation": [[99, null]], "Long-run Covariance Estimators": [[99, "module-arch.covariance.kernel"]], "Low-level Interfaces": [[87, null]], "Mean Models": [[893, null], [899, "Mean-Models"]], "Mean Specification": [[0, "mean-specification"]], "Model Confidence Set (MCS)": [[259, "model-confidence-set-mcs"]], "Model Constructor": [[892, "model-constructor"]], "Model Results": [[894, null]], "Module Reference": [[259, null]], "Multiple Comparison Procedures": [[261, null]], "Multiple Comparisons": [[260, null]], "Nonparametric Confidence Intervals": [[4, "nonparametric-confidence-intervals"]], "Note": [[4, null], [4, null], [4, null], [4, null], [4, null], [12, null], [15, null], [25, null], [27, null], [30, null], [40, null], [42, null], [45, null], [55, null], [57, null], [60, null], [70, null], [72, null], [75, null], [85, null], [88, null], [89, null], [89, null], [89, null], [98, null], [237, null]], "Optimal Block Length Estimation": [[3, "Optimal-Block-Length-Estimation"]], "Output Classes": [[425, "output-classes"]], "Parameterless Variance Processes": [[902, "parameterless-variance-processes"]], "Parametric Bootstraps": [[89, "parametric-bootstraps"]], "Parametric Confidence Intervals": [[4, "parametric-confidence-intervals"]], "Parametric VaR": [[898, "Parametric-VaR"]], "Past Releases": [[91, "past-releases"]], "Percentile (percentile)": [[4, "percentile-percentile"]], "Phillips-Ouliaris": [[421, "Phillips-Ouliaris"]], "Phillips-Perron Testing": [[422, "Phillips-Perron-Testing"]], "Plotting the data": [[896, "Plotting-the-data"]], "Power": [[260, "Power"]], "Probit (statsmodels)": [[3, "Probit-(statsmodels)"]], "Producing multiple forecasts": [[896, "Producing-multiple-forecasts"]], "Re-estimating the mean with a FixedVariance": [[897, "Re-estimating-the-mean-with-a-FixedVariance"]], "Recursive Forecast Generation": [[898, "Recursive-Forecast-Generation"]], "References": [[1, null], [238, null]], "Regression output": [[422, "Regression-output"]], "Release 4.10": [[95, "release-4-10"]], "Release 4.11": [[95, "release-4-11"]], "Release 4.12": [[95, "release-4-12"]], "Release 4.13": [[95, "release-4-13"]], "Release 4.14": [[95, "release-4-14"]], "Release 4.15": [[95, "release-4-15"]], "Release 4.16": [[95, "release-4-16"]], "Release 4.17": [[95, "release-4-17"]], "Release 4.18": [[95, "release-4-18"]], "Release 4.19": [[95, "release-4-19"]], "Release 4.2": [[95, "release-4-2"]], "Release 4.3": [[95, "release-4-3"]], "Release 4.4": [[95, "release-4-4"]], "Release 4.5": [[95, "release-4-5"]], "Release 4.6": [[95, "release-4-6"]], "Release 4.7": [[95, "release-4-7"]], "Release 4.8": [[95, "release-4-8"]], "Release 4.8.1": [[95, "release-4-8-1"]], "Release 4.9": [[95, "release-4-9"]], "Release 5.0": [[96, "release-5-0"]], "Release 5.1": [[96, "release-5-1"]], "Release 5.2": [[96, "release-5-2"]], "Release 5.3": [[96, "release-5-3"]], "Release 5.4": [[96, "release-5-4"]], "Release 5.5": [[96, "release-5-5"]], "Release 6.0": [[91, "release-6-0"], [97, "release-6-0"]], "Release 6.1": [[91, "release-6-1"], [97, "release-6-1"]], "Release 6.2": [[91, "release-6-2"], [97, "release-6-2"]], "Release 6.3": [[91, "release-6-3"], [97, "release-6-3"]], "Release 7.0": [[98, "release-7-0"]], "Reproducibility": [[3, "Reproducibility"]], "Results": [[99, "results"]], "Results Classes": [[262, "results-classes"]], "Rolling Window Forecasting": [[898, "Rolling-Window-Forecasting"]], "See also": [[5, null], [6, null], [7, null], [8, null], [9, null], [10, null], [100, null], [103, null], [104, null], [116, null], [126, null], [140, null], [150, null], [160, null], [170, null], [180, null], [190, null], [200, null], [210, null], [220, null], [230, null], [240, null], [241, null], [277, null], [278, null], [369, null]], "Semi-parametric Confidence Intervals": [[4, "semi-parametric-confidence-intervals"]], "Semiparametric Bootstrap (Alternative Method)": [[89, "semiparametric-bootstrap-alternative-method"]], "Semiparametric Bootstraps": [[89, null]], "Setting the number of lags": [[422, "Setting-the-number-of-lags"]], "Setup": [[4, "setup"], [96, "setup"], [422, "Setup"], [897, "Setup"], [899, "Setup"]], "Sharpe Ratio": [[3, "Sharpe-Ratio"]], "Shock Distributions": [[0, "shock-distributions"]], "Simulating data": [[896, "Simulating-data"]], "Simulating the out-of-sample x": [[896, "Simulating-the-out-of-sample-x"]], "Simulation": [[896, "Simulation"], [899, "Simulation"]], "Simulation Forecasts": [[425, "simulation-forecasts"], [898, "Simulation-Forecasts"]], "Special Cases with a single x variable": [[896, "Special-Cases-with-a-single-x-variable"]], "Special Requirements": [[893, "special-requirements"]], "Specifying Common Models": [[899, "Specifying-Common-Models"]], "Speeding things up": [[3, "Speeding-things-up"]], "Static out-of-sample x": [[896, "Static-out-of-sample-x"]], "Stepwise Multiple Testing (StepM)": [[259, "stepwise-multiple-testing-stepm"], [260, "Stepwise-Multiple-Testing-(StepM)"]], "Studentized (studentized)": [[4, "studentized-studentized"]], "Student\u2019s T Errors": [[899, "Student's-T-Errors"]], "Study Design": [[260, "Study-Design"]], "TARCH": [[898, "TARCH"]], "TARCH/ZARCH": [[899, "TARCH/ZARCH"]], "Test Results": [[901, "test-results"]], "Test of Superior Predictive Ability (SPA), Reality Check": [[259, "test-of-superior-predictive-ability-spa-reality-check"]], "Testing with Multiple-Comparison": [[0, "testing-with-multiple-comparison"]], "The Bootstrap Iterator": [[87, "the-bootstrap-iterator"]], "The Model Confidence Set": [[260, "The-Model-Confidence-Set"]], "The Unit Root Tests": [[419, null]], "The test of Superior Predictive Ability (SPA)": [[260, "The-test-of-Superior-Predictive-Ability-(SPA)"]], "The wrapper function": [[3, "The-wrapper-function"]], "Theoretical Background": [[423, null]], "Time-series Bootstraps": [[90, null]], "Understanding Forecast Output": [[425, "understanding-forecast-output"]], "Unit Root": [[96, "unit-root"], [96, "id1"]], "Unit Root Testing": [[0, "unit-root-testing"], [420, null], [422, null]], "Univariate Volatility Models": [[895, null]], "Using DataFrame": [[896, "Using-DataFrame"]], "Using a dict": [[896, "Using-a-dict"]], "Using an array": [[896, "Using-an-array"]], "Using partial instead of extra_kwargs": [[89, "using-partial-instead-of-extra-kwargs"]], "Using the Fixed Variance process": [[897, null]], "Utilities": [[901, null]], "Value-at-Risk Forecasting": [[898, "Value-at-Risk-Forecasting"]], "Variance Ratio Testing": [[422, "Variance-Ratio-Testing"]], "Version 1": [[92, null]], "Version 1.1": [[92, "version-1-1"]], "Version 2": [[93, null]], "Version 2.1": [[93, "version-2-1"]], "Version 2.2": [[93, "version-2-2"]], "Version 3": [[94, null]], "Version 4": [[95, null]], "Version 5": [[96, null]], "Version 6": [[91, "version-6"], [97, null]], "Version 7": [[98, null]], "Visualizing the differences": [[900, "Visualizing-the-differences"]], "Volatility Forecasting": [[898, null]], "Volatility Modeling": [[0, "volatility-modeling"], [96, "volatility-modeling"]], "Volatility Process Specification": [[0, "volatility-process-specification"]], "Volatility Processes": [[899, "Volatility-Processes"], [902, null]], "Volatility Scenarios": [[900, null]], "WTI Crude": [[899, "WTI-Crude"]], "Warning": [[3, "Warning"], [89, null]], "Writing New Distributions": [[424, "writing-new-distributions"]], "Writing New Mean Models": [[893, "writing-new-mean-models"]], "Writing New Volatility Processes": [[902, "writing-new-volatility-processes"]], "Zig-Zag estimation": [[897, "Zig-Zag-estimation"]], "Zivot-Andrews Test": [[422, "Zivot-Andrews-Test"]], "arch.bootstrap.CircularBlockBootstrap": [[5, null]], "arch.bootstrap.CircularBlockBootstrap.apply": [[11, null]], "arch.bootstrap.CircularBlockBootstrap.bootstrap": [[12, null]], "arch.bootstrap.CircularBlockBootstrap.clone": [[13, null]], "arch.bootstrap.CircularBlockBootstrap.conf_int": [[14, null]], "arch.bootstrap.CircularBlockBootstrap.cov": [[15, null]], "arch.bootstrap.CircularBlockBootstrap.generator": [[16, null]], "arch.bootstrap.CircularBlockBootstrap.get_state": [[17, null]], "arch.bootstrap.CircularBlockBootstrap.index": [[18, null]], "arch.bootstrap.CircularBlockBootstrap.random_state": [[19, null]], "arch.bootstrap.CircularBlockBootstrap.reset": [[20, null]], "arch.bootstrap.CircularBlockBootstrap.seed": [[21, null]], "arch.bootstrap.CircularBlockBootstrap.set_state": [[22, null]], "arch.bootstrap.CircularBlockBootstrap.state": [[23, null]], "arch.bootstrap.CircularBlockBootstrap.update_indices": [[24, null]], "arch.bootstrap.CircularBlockBootstrap.var": [[25, null]], "arch.bootstrap.IIDBootstrap": [[6, null]], "arch.bootstrap.IIDBootstrap.apply": [[26, null]], "arch.bootstrap.IIDBootstrap.bootstrap": [[27, null]], "arch.bootstrap.IIDBootstrap.clone": [[28, null]], "arch.bootstrap.IIDBootstrap.conf_int": [[29, null]], "arch.bootstrap.IIDBootstrap.cov": [[30, null]], "arch.bootstrap.IIDBootstrap.generator": [[31, null]], "arch.bootstrap.IIDBootstrap.get_state": [[32, null]], "arch.bootstrap.IIDBootstrap.index": [[33, null]], "arch.bootstrap.IIDBootstrap.random_state": [[34, null]], "arch.bootstrap.IIDBootstrap.reset": [[35, null]], "arch.bootstrap.IIDBootstrap.seed": [[36, null]], "arch.bootstrap.IIDBootstrap.set_state": [[37, null]], "arch.bootstrap.IIDBootstrap.state": [[38, null]], "arch.bootstrap.IIDBootstrap.update_indices": [[39, null]], "arch.bootstrap.IIDBootstrap.var": [[40, null]], "arch.bootstrap.IndependentSamplesBootstrap": [[7, null]], "arch.bootstrap.IndependentSamplesBootstrap.apply": [[41, null]], "arch.bootstrap.IndependentSamplesBootstrap.bootstrap": [[42, null]], "arch.bootstrap.IndependentSamplesBootstrap.clone": [[43, null]], "arch.bootstrap.IndependentSamplesBootstrap.conf_int": [[44, null]], "arch.bootstrap.IndependentSamplesBootstrap.cov": [[45, null]], "arch.bootstrap.IndependentSamplesBootstrap.generator": [[46, null]], "arch.bootstrap.IndependentSamplesBootstrap.get_state": [[47, null]], "arch.bootstrap.IndependentSamplesBootstrap.index": [[48, null]], "arch.bootstrap.IndependentSamplesBootstrap.random_state": [[49, null]], "arch.bootstrap.IndependentSamplesBootstrap.reset": [[50, null]], "arch.bootstrap.IndependentSamplesBootstrap.seed": [[51, null]], "arch.bootstrap.IndependentSamplesBootstrap.set_state": [[52, null]], "arch.bootstrap.IndependentSamplesBootstrap.state": [[53, null]], "arch.bootstrap.IndependentSamplesBootstrap.update_indices": [[54, null]], "arch.bootstrap.IndependentSamplesBootstrap.var": [[55, null]], "arch.bootstrap.MCS": [[239, null]], "arch.bootstrap.MCS.compute": [[242, null]], "arch.bootstrap.MCS.excluded": [[243, null]], "arch.bootstrap.MCS.included": [[244, null]], "arch.bootstrap.MCS.pvalues": [[245, null]], "arch.bootstrap.MCS.reset": [[246, null]], "arch.bootstrap.MCS.seed": [[247, null]], "arch.bootstrap.MovingBlockBootstrap": [[8, null]], "arch.bootstrap.MovingBlockBootstrap.apply": [[56, null]], "arch.bootstrap.MovingBlockBootstrap.bootstrap": [[57, null]], "arch.bootstrap.MovingBlockBootstrap.clone": [[58, null]], "arch.bootstrap.MovingBlockBootstrap.conf_int": [[59, null]], "arch.bootstrap.MovingBlockBootstrap.cov": [[60, null]], "arch.bootstrap.MovingBlockBootstrap.generator": [[61, null]], "arch.bootstrap.MovingBlockBootstrap.get_state": [[62, null]], "arch.bootstrap.MovingBlockBootstrap.index": [[63, null]], "arch.bootstrap.MovingBlockBootstrap.random_state": [[64, null]], "arch.bootstrap.MovingBlockBootstrap.reset": [[65, null]], "arch.bootstrap.MovingBlockBootstrap.seed": [[66, null]], "arch.bootstrap.MovingBlockBootstrap.set_state": [[67, null]], "arch.bootstrap.MovingBlockBootstrap.state": [[68, null]], "arch.bootstrap.MovingBlockBootstrap.update_indices": [[69, null]], "arch.bootstrap.MovingBlockBootstrap.var": [[70, null]], "arch.bootstrap.SPA": [[240, null]], "arch.bootstrap.SPA.better_models": [[248, null]], "arch.bootstrap.SPA.compute": [[249, null]], "arch.bootstrap.SPA.critical_values": [[250, null]], "arch.bootstrap.SPA.pvalues": [[251, null]], "arch.bootstrap.SPA.reset": [[252, null]], "arch.bootstrap.SPA.seed": [[253, null]], "arch.bootstrap.SPA.subset": [[254, null]], "arch.bootstrap.StationaryBootstrap": [[9, null]], "arch.bootstrap.StationaryBootstrap.apply": [[71, null]], "arch.bootstrap.StationaryBootstrap.bootstrap": [[72, null]], "arch.bootstrap.StationaryBootstrap.clone": [[73, null]], "arch.bootstrap.StationaryBootstrap.conf_int": [[74, null]], "arch.bootstrap.StationaryBootstrap.cov": [[75, null]], "arch.bootstrap.StationaryBootstrap.generator": [[76, null]], "arch.bootstrap.StationaryBootstrap.get_state": [[77, null]], "arch.bootstrap.StationaryBootstrap.index": [[78, null]], "arch.bootstrap.StationaryBootstrap.random_state": [[79, null]], "arch.bootstrap.StationaryBootstrap.reset": [[80, null]], "arch.bootstrap.StationaryBootstrap.seed": [[81, null]], "arch.bootstrap.StationaryBootstrap.set_state": [[82, null]], "arch.bootstrap.StationaryBootstrap.state": [[83, null]], "arch.bootstrap.StationaryBootstrap.update_indices": [[84, null]], "arch.bootstrap.StationaryBootstrap.var": [[85, null]], "arch.bootstrap.StepM": [[241, null]], "arch.bootstrap.StepM.compute": [[255, null]], "arch.bootstrap.StepM.reset": [[256, null]], "arch.bootstrap.StepM.seed": [[257, null]], "arch.bootstrap.StepM.superior_models": [[258, null]], "arch.bootstrap.optimal_block_length": [[10, null]], "arch.covariance.kernel.Andrews": [[100, null]], "arch.covariance.kernel.Andrews.bandwidth": [[113, null]], "arch.covariance.kernel.Andrews.bandwidth_scale": [[114, null]], "arch.covariance.kernel.Andrews.centered": [[115, null]], "arch.covariance.kernel.Andrews.cov": [[116, null]], "arch.covariance.kernel.Andrews.force_int": [[117, null]], "arch.covariance.kernel.Andrews.kernel_const": [[118, null]], "arch.covariance.kernel.Andrews.kernel_weights": [[119, null]], "arch.covariance.kernel.Andrews.name": [[120, null]], "arch.covariance.kernel.Andrews.opt_bandwidth": [[121, null]], "arch.covariance.kernel.Andrews.rate": [[122, null]], "arch.covariance.kernel.Bartlett": [[101, null]], "arch.covariance.kernel.Bartlett.bandwidth": [[123, null]], "arch.covariance.kernel.Bartlett.bandwidth_scale": [[124, null]], "arch.covariance.kernel.Bartlett.centered": [[125, null]], "arch.covariance.kernel.Bartlett.cov": [[126, null]], "arch.covariance.kernel.Bartlett.force_int": [[127, null]], "arch.covariance.kernel.Bartlett.kernel_const": [[128, null]], "arch.covariance.kernel.Bartlett.kernel_weights": [[129, null]], "arch.covariance.kernel.Bartlett.name": [[130, null]], "arch.covariance.kernel.Bartlett.opt_bandwidth": [[131, null]], "arch.covariance.kernel.Bartlett.rate": [[132, null]], "arch.covariance.kernel.CovarianceEstimate": [[102, null]], "arch.covariance.kernel.CovarianceEstimate.long_run": [[133, null]], "arch.covariance.kernel.CovarianceEstimate.one_sided": [[134, null]], "arch.covariance.kernel.CovarianceEstimate.one_sided_strict": [[135, null]], "arch.covariance.kernel.CovarianceEstimate.short_run": [[136, null]], "arch.covariance.kernel.Gallant": [[103, null]], "arch.covariance.kernel.Gallant.bandwidth": [[137, null]], "arch.covariance.kernel.Gallant.bandwidth_scale": [[138, null]], "arch.covariance.kernel.Gallant.centered": [[139, null]], "arch.covariance.kernel.Gallant.cov": [[140, null]], "arch.covariance.kernel.Gallant.force_int": [[141, null]], "arch.covariance.kernel.Gallant.kernel_const": [[142, null]], "arch.covariance.kernel.Gallant.kernel_weights": [[143, null]], "arch.covariance.kernel.Gallant.name": [[144, null]], "arch.covariance.kernel.Gallant.opt_bandwidth": [[145, null]], "arch.covariance.kernel.Gallant.rate": [[146, null]], "arch.covariance.kernel.NeweyWest": [[104, null]], "arch.covariance.kernel.NeweyWest.bandwidth": [[147, null]], "arch.covariance.kernel.NeweyWest.bandwidth_scale": [[148, null]], "arch.covariance.kernel.NeweyWest.centered": [[149, null]], "arch.covariance.kernel.NeweyWest.cov": [[150, null]], "arch.covariance.kernel.NeweyWest.force_int": [[151, null]], "arch.covariance.kernel.NeweyWest.kernel_const": [[152, null]], "arch.covariance.kernel.NeweyWest.kernel_weights": [[153, null]], "arch.covariance.kernel.NeweyWest.name": [[154, null]], "arch.covariance.kernel.NeweyWest.opt_bandwidth": [[155, null]], "arch.covariance.kernel.NeweyWest.rate": [[156, null]], "arch.covariance.kernel.Parzen": [[105, null]], "arch.covariance.kernel.Parzen.bandwidth": [[157, null]], "arch.covariance.kernel.Parzen.bandwidth_scale": [[158, null]], "arch.covariance.kernel.Parzen.centered": [[159, null]], "arch.covariance.kernel.Parzen.cov": [[160, null]], "arch.covariance.kernel.Parzen.force_int": [[161, null]], "arch.covariance.kernel.Parzen.kernel_const": [[162, null]], "arch.covariance.kernel.Parzen.kernel_weights": [[163, null]], "arch.covariance.kernel.Parzen.name": [[164, null]], "arch.covariance.kernel.Parzen.opt_bandwidth": [[165, null]], "arch.covariance.kernel.Parzen.rate": [[166, null]], "arch.covariance.kernel.ParzenCauchy": [[106, null]], "arch.covariance.kernel.ParzenCauchy.bandwidth": [[167, null]], "arch.covariance.kernel.ParzenCauchy.bandwidth_scale": [[168, null]], "arch.covariance.kernel.ParzenCauchy.centered": [[169, null]], "arch.covariance.kernel.ParzenCauchy.cov": [[170, null]], "arch.covariance.kernel.ParzenCauchy.force_int": [[171, null]], "arch.covariance.kernel.ParzenCauchy.kernel_const": [[172, null]], "arch.covariance.kernel.ParzenCauchy.kernel_weights": [[173, null]], "arch.covariance.kernel.ParzenCauchy.name": [[174, null]], "arch.covariance.kernel.ParzenCauchy.opt_bandwidth": [[175, null]], "arch.covariance.kernel.ParzenCauchy.rate": [[176, null]], "arch.covariance.kernel.ParzenGeometric": [[107, null]], "arch.covariance.kernel.ParzenGeometric.bandwidth": [[177, null]], "arch.covariance.kernel.ParzenGeometric.bandwidth_scale": [[178, null]], "arch.covariance.kernel.ParzenGeometric.centered": [[179, null]], "arch.covariance.kernel.ParzenGeometric.cov": [[180, null]], "arch.covariance.kernel.ParzenGeometric.force_int": [[181, null]], "arch.covariance.kernel.ParzenGeometric.kernel_const": [[182, null]], "arch.covariance.kernel.ParzenGeometric.kernel_weights": [[183, null]], "arch.covariance.kernel.ParzenGeometric.name": [[184, null]], "arch.covariance.kernel.ParzenGeometric.opt_bandwidth": [[185, null]], "arch.covariance.kernel.ParzenGeometric.rate": [[186, null]], "arch.covariance.kernel.ParzenRiesz": [[108, null]], "arch.covariance.kernel.ParzenRiesz.bandwidth": [[187, null]], "arch.covariance.kernel.ParzenRiesz.bandwidth_scale": [[188, null]], "arch.covariance.kernel.ParzenRiesz.centered": [[189, null]], "arch.covariance.kernel.ParzenRiesz.cov": [[190, null]], "arch.covariance.kernel.ParzenRiesz.force_int": [[191, null]], "arch.covariance.kernel.ParzenRiesz.kernel_const": [[192, null]], "arch.covariance.kernel.ParzenRiesz.kernel_weights": [[193, null]], "arch.covariance.kernel.ParzenRiesz.name": [[194, null]], "arch.covariance.kernel.ParzenRiesz.opt_bandwidth": [[195, null]], "arch.covariance.kernel.ParzenRiesz.rate": [[196, null]], "arch.covariance.kernel.QuadraticSpectral": [[109, null]], "arch.covariance.kernel.QuadraticSpectral.bandwidth": [[197, null]], "arch.covariance.kernel.QuadraticSpectral.bandwidth_scale": [[198, null]], "arch.covariance.kernel.QuadraticSpectral.centered": [[199, null]], "arch.covariance.kernel.QuadraticSpectral.cov": [[200, null]], "arch.covariance.kernel.QuadraticSpectral.force_int": [[201, null]], "arch.covariance.kernel.QuadraticSpectral.kernel_const": [[202, null]], "arch.covariance.kernel.QuadraticSpectral.kernel_weights": [[203, null]], "arch.covariance.kernel.QuadraticSpectral.name": [[204, null]], "arch.covariance.kernel.QuadraticSpectral.opt_bandwidth": [[205, null]], "arch.covariance.kernel.QuadraticSpectral.rate": [[206, null]], "arch.covariance.kernel.TukeyHamming": [[110, null]], "arch.covariance.kernel.TukeyHamming.bandwidth": [[207, null]], "arch.covariance.kernel.TukeyHamming.bandwidth_scale": [[208, null]], "arch.covariance.kernel.TukeyHamming.centered": [[209, null]], "arch.covariance.kernel.TukeyHamming.cov": [[210, null]], "arch.covariance.kernel.TukeyHamming.force_int": [[211, null]], "arch.covariance.kernel.TukeyHamming.kernel_const": [[212, null]], "arch.covariance.kernel.TukeyHamming.kernel_weights": [[213, null]], "arch.covariance.kernel.TukeyHamming.name": [[214, null]], "arch.covariance.kernel.TukeyHamming.opt_bandwidth": [[215, null]], "arch.covariance.kernel.TukeyHamming.rate": [[216, null]], "arch.covariance.kernel.TukeyHanning": [[111, null]], "arch.covariance.kernel.TukeyHanning.bandwidth": [[217, null]], "arch.covariance.kernel.TukeyHanning.bandwidth_scale": [[218, null]], "arch.covariance.kernel.TukeyHanning.centered": [[219, null]], "arch.covariance.kernel.TukeyHanning.cov": [[220, null]], "arch.covariance.kernel.TukeyHanning.force_int": [[221, null]], "arch.covariance.kernel.TukeyHanning.kernel_const": [[222, null]], "arch.covariance.kernel.TukeyHanning.kernel_weights": [[223, null]], "arch.covariance.kernel.TukeyHanning.name": [[224, null]], "arch.covariance.kernel.TukeyHanning.opt_bandwidth": [[225, null]], "arch.covariance.kernel.TukeyHanning.rate": [[226, null]], "arch.covariance.kernel.TukeyParzen": [[112, null]], "arch.covariance.kernel.TukeyParzen.bandwidth": [[227, null]], "arch.covariance.kernel.TukeyParzen.bandwidth_scale": [[228, null]], "arch.covariance.kernel.TukeyParzen.centered": [[229, null]], "arch.covariance.kernel.TukeyParzen.cov": [[230, null]], "arch.covariance.kernel.TukeyParzen.force_int": [[231, null]], "arch.covariance.kernel.TukeyParzen.kernel_const": [[232, null]], "arch.covariance.kernel.TukeyParzen.kernel_weights": [[233, null]], "arch.covariance.kernel.TukeyParzen.name": [[234, null]], "arch.covariance.kernel.TukeyParzen.opt_bandwidth": [[235, null]], "arch.covariance.kernel.TukeyParzen.rate": [[236, null]], "arch.unitroot.ADF": [[263, null]], "arch.unitroot.ADF.alternative_hypothesis": [[279, null]], "arch.unitroot.ADF.critical_values": [[280, null]], "arch.unitroot.ADF.lags": [[281, null]], "arch.unitroot.ADF.max_lags": [[282, null]], "arch.unitroot.ADF.nobs": [[283, null]], "arch.unitroot.ADF.null_hypothesis": [[284, null]], "arch.unitroot.ADF.pvalue": [[285, null]], "arch.unitroot.ADF.regression": [[286, null]], "arch.unitroot.ADF.stat": [[287, null]], "arch.unitroot.ADF.summary": [[288, null]], "arch.unitroot.ADF.trend": [[289, null]], "arch.unitroot.ADF.valid_trends": [[290, null]], "arch.unitroot.ADF.y": [[291, null]], "arch.unitroot.DFGLS": [[264, null]], "arch.unitroot.DFGLS.alternative_hypothesis": [[292, null]], "arch.unitroot.DFGLS.critical_values": [[293, null]], "arch.unitroot.DFGLS.lags": [[294, null]], "arch.unitroot.DFGLS.max_lags": [[295, null]], "arch.unitroot.DFGLS.nobs": [[296, null]], "arch.unitroot.DFGLS.null_hypothesis": [[297, null]], "arch.unitroot.DFGLS.pvalue": [[298, null]], "arch.unitroot.DFGLS.regression": [[299, null]], "arch.unitroot.DFGLS.stat": [[300, null]], "arch.unitroot.DFGLS.summary": [[301, null]], "arch.unitroot.DFGLS.trend": [[302, null]], "arch.unitroot.DFGLS.valid_trends": [[303, null]], "arch.unitroot.DFGLS.y": [[304, null]], "arch.unitroot.KPSS": [[265, null]], "arch.unitroot.KPSS.alternative_hypothesis": [[305, null]], "arch.unitroot.KPSS.critical_values": [[306, null]], "arch.unitroot.KPSS.lags": [[307, null]], "arch.unitroot.KPSS.nobs": [[308, null]], "arch.unitroot.KPSS.null_hypothesis": [[309, null]], "arch.unitroot.KPSS.pvalue": [[310, null]], "arch.unitroot.KPSS.stat": [[311, null]], "arch.unitroot.KPSS.summary": [[312, null]], "arch.unitroot.KPSS.trend": [[313, null]], "arch.unitroot.KPSS.valid_trends": [[314, null]], "arch.unitroot.KPSS.y": [[315, null]], "arch.unitroot.PhillipsPerron": [[266, null]], "arch.unitroot.PhillipsPerron.alternative_hypothesis": [[316, null]], "arch.unitroot.PhillipsPerron.critical_values": [[317, null]], "arch.unitroot.PhillipsPerron.lags": [[318, null]], "arch.unitroot.PhillipsPerron.nobs": [[319, null]], "arch.unitroot.PhillipsPerron.null_hypothesis": [[320, null]], "arch.unitroot.PhillipsPerron.pvalue": [[321, null]], "arch.unitroot.PhillipsPerron.regression": [[322, null]], "arch.unitroot.PhillipsPerron.stat": [[323, null]], "arch.unitroot.PhillipsPerron.summary": [[324, null]], "arch.unitroot.PhillipsPerron.test_type": [[325, null]], "arch.unitroot.PhillipsPerron.trend": [[326, null]], "arch.unitroot.PhillipsPerron.valid_trends": [[327, null]], "arch.unitroot.PhillipsPerron.y": [[328, null]], "arch.unitroot.VarianceRatio": [[267, null]], "arch.unitroot.VarianceRatio.alternative_hypothesis": [[329, null]], "arch.unitroot.VarianceRatio.critical_values": [[330, null]], "arch.unitroot.VarianceRatio.debiased": [[331, null]], "arch.unitroot.VarianceRatio.lags": [[332, null]], "arch.unitroot.VarianceRatio.nobs": [[333, null]], "arch.unitroot.VarianceRatio.null_hypothesis": [[334, null]], "arch.unitroot.VarianceRatio.overlap": [[335, null]], "arch.unitroot.VarianceRatio.pvalue": [[336, null]], "arch.unitroot.VarianceRatio.robust": [[337, null]], "arch.unitroot.VarianceRatio.stat": [[338, null]], "arch.unitroot.VarianceRatio.summary": [[339, null]], "arch.unitroot.VarianceRatio.trend": [[340, null]], "arch.unitroot.VarianceRatio.valid_trends": [[341, null]], "arch.unitroot.VarianceRatio.vr": [[342, null]], "arch.unitroot.VarianceRatio.y": [[343, null]], "arch.unitroot.ZivotAndrews": [[268, null]], "arch.unitroot.ZivotAndrews.alternative_hypothesis": [[344, null]], "arch.unitroot.ZivotAndrews.critical_values": [[345, null]], "arch.unitroot.ZivotAndrews.lags": [[346, null]], "arch.unitroot.ZivotAndrews.nobs": [[347, null]], "arch.unitroot.ZivotAndrews.null_hypothesis": [[348, null]], "arch.unitroot.ZivotAndrews.pvalue": [[349, null]], "arch.unitroot.ZivotAndrews.stat": [[350, null]], "arch.unitroot.ZivotAndrews.summary": [[351, null]], "arch.unitroot.ZivotAndrews.trend": [[352, null]], "arch.unitroot.ZivotAndrews.valid_trends": [[353, null]], "arch.unitroot.ZivotAndrews.y": [[354, null]], "arch.unitroot.auto_bandwidth": [[269, null]], "arch.unitroot.cointegration.CanonicalCointegratingReg": [[270, null]], "arch.unitroot.cointegration.CanonicalCointegratingReg.fit": [[355, null]], "arch.unitroot.cointegration.CointegrationAnalysisResults": [[271, null]], "arch.unitroot.cointegration.CointegrationAnalysisResults.bandwidth": [[356, null]], "arch.unitroot.cointegration.CointegrationAnalysisResults.cov": [[357, null]], "arch.unitroot.cointegration.CointegrationAnalysisResults.kernel": [[358, null]], "arch.unitroot.cointegration.CointegrationAnalysisResults.long_run_variance": [[359, null]], "arch.unitroot.cointegration.CointegrationAnalysisResults.params": [[360, null]], "arch.unitroot.cointegration.CointegrationAnalysisResults.pvalues": [[361, null]], "arch.unitroot.cointegration.CointegrationAnalysisResults.resid": [[362, null]], "arch.unitroot.cointegration.CointegrationAnalysisResults.residual_variance": [[363, null]], "arch.unitroot.cointegration.CointegrationAnalysisResults.rsquared": [[364, null]], "arch.unitroot.cointegration.CointegrationAnalysisResults.rsquared_adj": [[365, null]], "arch.unitroot.cointegration.CointegrationAnalysisResults.std_errors": [[366, null]], "arch.unitroot.cointegration.CointegrationAnalysisResults.summary": [[367, null]], "arch.unitroot.cointegration.CointegrationAnalysisResults.tvalues": [[368, null]], "arch.unitroot.cointegration.DynamicOLS": [[272, null]], "arch.unitroot.cointegration.DynamicOLS.fit": [[369, null]], "arch.unitroot.cointegration.DynamicOLSResults": [[273, null]], "arch.unitroot.cointegration.DynamicOLSResults.bandwidth": [[370, null]], "arch.unitroot.cointegration.DynamicOLSResults.cov": [[371, null]], "arch.unitroot.cointegration.DynamicOLSResults.cov_type": [[372, null]], "arch.unitroot.cointegration.DynamicOLSResults.full_cov": [[373, null]], "arch.unitroot.cointegration.DynamicOLSResults.full_params": [[374, null]], "arch.unitroot.cointegration.DynamicOLSResults.kernel": [[375, null]], "arch.unitroot.cointegration.DynamicOLSResults.lags": [[376, null]], "arch.unitroot.cointegration.DynamicOLSResults.leads": [[377, null]], "arch.unitroot.cointegration.DynamicOLSResults.long_run_variance": [[378, null]], "arch.unitroot.cointegration.DynamicOLSResults.params": [[379, null]], "arch.unitroot.cointegration.DynamicOLSResults.pvalues": [[380, null]], "arch.unitroot.cointegration.DynamicOLSResults.resid": [[381, null]], "arch.unitroot.cointegration.DynamicOLSResults.residual_variance": [[382, null]], "arch.unitroot.cointegration.DynamicOLSResults.rsquared": [[383, null]], "arch.unitroot.cointegration.DynamicOLSResults.rsquared_adj": [[384, null]], "arch.unitroot.cointegration.DynamicOLSResults.std_errors": [[385, null]], "arch.unitroot.cointegration.DynamicOLSResults.summary": [[386, null]], "arch.unitroot.cointegration.DynamicOLSResults.tvalues": [[387, null]], "arch.unitroot.cointegration.EngleGrangerTestResults": [[274, null]], "arch.unitroot.cointegration.EngleGrangerTestResults.alternative_hypothesis": [[388, null]], "arch.unitroot.cointegration.EngleGrangerTestResults.cointegrating_vector": [[389, null]], "arch.unitroot.cointegration.EngleGrangerTestResults.critical_values": [[390, null]], "arch.unitroot.cointegration.EngleGrangerTestResults.distribution_order": [[391, null]], "arch.unitroot.cointegration.EngleGrangerTestResults.lags": [[392, null]], "arch.unitroot.cointegration.EngleGrangerTestResults.max_lags": [[393, null]], "arch.unitroot.cointegration.EngleGrangerTestResults.name": [[394, null]], "arch.unitroot.cointegration.EngleGrangerTestResults.null_hypothesis": [[395, null]], "arch.unitroot.cointegration.EngleGrangerTestResults.plot": [[396, null]], "arch.unitroot.cointegration.EngleGrangerTestResults.pvalue": [[397, null]], "arch.unitroot.cointegration.EngleGrangerTestResults.resid": [[398, null]], "arch.unitroot.cointegration.EngleGrangerTestResults.rho": [[399, null]], "arch.unitroot.cointegration.EngleGrangerTestResults.stat": [[400, null]], "arch.unitroot.cointegration.EngleGrangerTestResults.summary": [[401, null]], "arch.unitroot.cointegration.EngleGrangerTestResults.trend": [[402, null]], "arch.unitroot.cointegration.FullyModifiedOLS": [[275, null]], "arch.unitroot.cointegration.FullyModifiedOLS.fit": [[403, null]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults": [[276, null]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.alternative_hypothesis": [[404, null]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.bandwidth": [[405, null]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.cointegrating_vector": [[406, null]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.critical_values": [[407, null]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.distribution_order": [[408, null]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.kernel": [[409, null]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.name": [[410, null]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.null_hypothesis": [[411, null]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.plot": [[412, null]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.pvalue": [[413, null]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.resid": [[414, null]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.stat": [[415, null]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.summary": [[416, null]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.trend": [[417, null]], "arch.unitroot.cointegration.engle_granger": [[277, null]], "arch.unitroot.cointegration.phillips_ouliaris": [[278, null]], "arch.univariate.APARCH": [[426, null]], "arch.univariate.APARCH.backcast": [[455, null]], "arch.univariate.APARCH.backcast_transform": [[456, null]], "arch.univariate.APARCH.bounds": [[457, null]], "arch.univariate.APARCH.common_asym": [[458, null]], "arch.univariate.APARCH.compute_variance": [[459, null]], "arch.univariate.APARCH.constraints": [[460, null]], "arch.univariate.APARCH.delta": [[461, null]], "arch.univariate.APARCH.forecast": [[462, null]], "arch.univariate.APARCH.name": [[463, null]], "arch.univariate.APARCH.num_params": [[464, null]], "arch.univariate.APARCH.parameter_names": [[465, null]], "arch.univariate.APARCH.simulate": [[466, null]], "arch.univariate.APARCH.start": [[467, null]], "arch.univariate.APARCH.starting_values": [[468, null]], "arch.univariate.APARCH.stop": [[469, null]], "arch.univariate.APARCH.update": [[470, null]], "arch.univariate.APARCH.updateable": [[471, null]], "arch.univariate.APARCH.variance_bounds": [[472, null]], "arch.univariate.APARCH.volatility_updater": [[473, null]], "arch.univariate.ARCH": [[427, null]], "arch.univariate.ARCH.backcast": [[474, null]], "arch.univariate.ARCH.backcast_transform": [[475, null]], "arch.univariate.ARCH.bounds": [[476, null]], "arch.univariate.ARCH.compute_variance": [[477, null]], "arch.univariate.ARCH.constraints": [[478, null]], "arch.univariate.ARCH.forecast": [[479, null]], "arch.univariate.ARCH.name": [[480, null]], "arch.univariate.ARCH.num_params": [[481, null]], "arch.univariate.ARCH.parameter_names": [[482, null]], "arch.univariate.ARCH.simulate": [[483, null]], "arch.univariate.ARCH.start": [[484, null]], "arch.univariate.ARCH.starting_values": [[485, null]], "arch.univariate.ARCH.stop": [[486, null]], "arch.univariate.ARCH.update": [[487, null]], "arch.univariate.ARCH.updateable": [[488, null]], "arch.univariate.ARCH.variance_bounds": [[489, null]], "arch.univariate.ARCH.volatility_updater": [[490, null]], "arch.univariate.ARCHInMean": [[428, null]], "arch.univariate.ARCHInMean.bounds": [[491, null]], "arch.univariate.ARCHInMean.compute_param_cov": [[492, null]], "arch.univariate.ARCHInMean.constraints": [[493, null]], "arch.univariate.ARCHInMean.distribution": [[494, null]], "arch.univariate.ARCHInMean.fit": [[495, null]], "arch.univariate.ARCHInMean.fix": [[496, null]], "arch.univariate.ARCHInMean.forecast": [[497, null]], "arch.univariate.ARCHInMean.form": [[498, null]], "arch.univariate.ARCHInMean.name": [[499, null]], "arch.univariate.ARCHInMean.num_params": [[500, null]], "arch.univariate.ARCHInMean.parameter_names": [[501, null]], "arch.univariate.ARCHInMean.resids": [[502, null]], "arch.univariate.ARCHInMean.simulate": [[503, null]], "arch.univariate.ARCHInMean.starting_values": [[504, null]], "arch.univariate.ARCHInMean.volatility": [[505, null]], "arch.univariate.ARCHInMean.x": [[506, null]], "arch.univariate.ARCHInMean.y": [[507, null]], "arch.univariate.ARX": [[429, null]], "arch.univariate.ARX.bounds": [[508, null]], "arch.univariate.ARX.compute_param_cov": [[509, null]], "arch.univariate.ARX.constraints": [[510, null]], "arch.univariate.ARX.distribution": [[511, null]], "arch.univariate.ARX.fit": [[512, null]], "arch.univariate.ARX.fix": [[513, null]], "arch.univariate.ARX.forecast": [[514, null]], "arch.univariate.ARX.name": [[515, null]], "arch.univariate.ARX.num_params": [[516, null]], "arch.univariate.ARX.parameter_names": [[517, null]], "arch.univariate.ARX.resids": [[518, null]], "arch.univariate.ARX.simulate": [[519, null]], "arch.univariate.ARX.starting_values": [[520, null]], "arch.univariate.ARX.volatility": [[521, null]], "arch.univariate.ARX.x": [[522, null]], "arch.univariate.ARX.y": [[523, null]], "arch.univariate.ConstantMean": [[430, null]], "arch.univariate.ConstantMean.bounds": [[524, null]], "arch.univariate.ConstantMean.compute_param_cov": [[525, null]], "arch.univariate.ConstantMean.constraints": [[526, null]], "arch.univariate.ConstantMean.distribution": [[527, null]], "arch.univariate.ConstantMean.fit": [[528, null]], "arch.univariate.ConstantMean.fix": [[529, null]], "arch.univariate.ConstantMean.forecast": [[530, null]], "arch.univariate.ConstantMean.name": [[531, null]], "arch.univariate.ConstantMean.num_params": [[532, null]], "arch.univariate.ConstantMean.parameter_names": [[533, null]], "arch.univariate.ConstantMean.resids": [[534, null]], "arch.univariate.ConstantMean.simulate": [[535, null]], "arch.univariate.ConstantMean.starting_values": [[536, null]], "arch.univariate.ConstantMean.volatility": [[537, null]], "arch.univariate.ConstantMean.x": [[538, null]], "arch.univariate.ConstantMean.y": [[539, null]], "arch.univariate.ConstantVariance": [[431, null]], "arch.univariate.ConstantVariance.backcast": [[540, null]], "arch.univariate.ConstantVariance.backcast_transform": [[541, null]], "arch.univariate.ConstantVariance.bounds": [[542, null]], "arch.univariate.ConstantVariance.compute_variance": [[543, null]], "arch.univariate.ConstantVariance.constraints": [[544, null]], "arch.univariate.ConstantVariance.forecast": [[545, null]], "arch.univariate.ConstantVariance.name": [[546, null]], "arch.univariate.ConstantVariance.num_params": [[547, null]], "arch.univariate.ConstantVariance.parameter_names": [[548, null]], "arch.univariate.ConstantVariance.simulate": [[549, null]], "arch.univariate.ConstantVariance.start": [[550, null]], "arch.univariate.ConstantVariance.starting_values": [[551, null]], "arch.univariate.ConstantVariance.stop": [[552, null]], "arch.univariate.ConstantVariance.update": [[553, null]], "arch.univariate.ConstantVariance.updateable": [[554, null]], "arch.univariate.ConstantVariance.variance_bounds": [[555, null]], "arch.univariate.ConstantVariance.volatility_updater": [[556, null]], "arch.univariate.EGARCH": [[432, null]], "arch.univariate.EGARCH.backcast": [[557, null]], "arch.univariate.EGARCH.backcast_transform": [[558, null]], "arch.univariate.EGARCH.bounds": [[559, null]], "arch.univariate.EGARCH.compute_variance": [[560, null]], "arch.univariate.EGARCH.constraints": [[561, null]], "arch.univariate.EGARCH.forecast": [[562, null]], "arch.univariate.EGARCH.name": [[563, null]], "arch.univariate.EGARCH.num_params": [[564, null]], "arch.univariate.EGARCH.parameter_names": [[565, null]], "arch.univariate.EGARCH.simulate": [[566, null]], "arch.univariate.EGARCH.start": [[567, null]], "arch.univariate.EGARCH.starting_values": [[568, null]], "arch.univariate.EGARCH.stop": [[569, null]], "arch.univariate.EGARCH.update": [[570, null]], "arch.univariate.EGARCH.updateable": [[571, null]], "arch.univariate.EGARCH.variance_bounds": [[572, null]], "arch.univariate.EGARCH.volatility_updater": [[573, null]], "arch.univariate.EWMAVariance": [[433, null]], "arch.univariate.EWMAVariance.backcast": [[574, null]], "arch.univariate.EWMAVariance.backcast_transform": [[575, null]], "arch.univariate.EWMAVariance.bounds": [[576, null]], "arch.univariate.EWMAVariance.compute_variance": [[577, null]], "arch.univariate.EWMAVariance.constraints": [[578, null]], "arch.univariate.EWMAVariance.forecast": [[579, null]], "arch.univariate.EWMAVariance.name": [[580, null]], "arch.univariate.EWMAVariance.num_params": [[581, null]], "arch.univariate.EWMAVariance.parameter_names": [[582, null]], "arch.univariate.EWMAVariance.simulate": [[583, null]], "arch.univariate.EWMAVariance.start": [[584, null]], "arch.univariate.EWMAVariance.starting_values": [[585, null]], "arch.univariate.EWMAVariance.stop": [[586, null]], "arch.univariate.EWMAVariance.update": [[587, null]], "arch.univariate.EWMAVariance.updateable": [[588, null]], "arch.univariate.EWMAVariance.variance_bounds": [[589, null]], "arch.univariate.EWMAVariance.volatility_updater": [[590, null]], "arch.univariate.FIGARCH": [[434, null]], "arch.univariate.FIGARCH.backcast": [[591, null]], "arch.univariate.FIGARCH.backcast_transform": [[592, null]], "arch.univariate.FIGARCH.bounds": [[593, null]], "arch.univariate.FIGARCH.compute_variance": [[594, null]], "arch.univariate.FIGARCH.constraints": [[595, null]], "arch.univariate.FIGARCH.forecast": [[596, null]], "arch.univariate.FIGARCH.name": [[597, null]], "arch.univariate.FIGARCH.num_params": [[598, null]], "arch.univariate.FIGARCH.parameter_names": [[599, null]], "arch.univariate.FIGARCH.simulate": [[600, null]], "arch.univariate.FIGARCH.start": [[601, null]], "arch.univariate.FIGARCH.starting_values": [[602, null]], "arch.univariate.FIGARCH.stop": [[603, null]], "arch.univariate.FIGARCH.truncation": [[604, null]], "arch.univariate.FIGARCH.update": [[605, null]], "arch.univariate.FIGARCH.updateable": [[606, null]], "arch.univariate.FIGARCH.variance_bounds": [[607, null]], "arch.univariate.FIGARCH.volatility_updater": [[608, null]], "arch.univariate.FixedVariance": [[435, null]], "arch.univariate.FixedVariance.backcast": [[609, null]], "arch.univariate.FixedVariance.backcast_transform": [[610, null]], "arch.univariate.FixedVariance.bounds": [[611, null]], "arch.univariate.FixedVariance.compute_variance": [[612, null]], "arch.univariate.FixedVariance.constraints": [[613, null]], "arch.univariate.FixedVariance.forecast": [[614, null]], "arch.univariate.FixedVariance.name": [[615, null]], "arch.univariate.FixedVariance.num_params": [[616, null]], "arch.univariate.FixedVariance.parameter_names": [[617, null]], "arch.univariate.FixedVariance.simulate": [[618, null]], "arch.univariate.FixedVariance.start": [[619, null]], "arch.univariate.FixedVariance.starting_values": [[620, null]], "arch.univariate.FixedVariance.stop": [[621, null]], "arch.univariate.FixedVariance.update": [[622, null]], "arch.univariate.FixedVariance.updateable": [[623, null]], "arch.univariate.FixedVariance.variance_bounds": [[624, null]], "arch.univariate.FixedVariance.volatility_updater": [[625, null]], "arch.univariate.GARCH": [[436, null]], "arch.univariate.GARCH.backcast": [[626, null]], "arch.univariate.GARCH.backcast_transform": [[627, null]], "arch.univariate.GARCH.bounds": [[628, null]], "arch.univariate.GARCH.compute_variance": [[629, null]], "arch.univariate.GARCH.constraints": [[630, null]], "arch.univariate.GARCH.forecast": [[631, null]], "arch.univariate.GARCH.name": [[632, null]], "arch.univariate.GARCH.num_params": [[633, null]], "arch.univariate.GARCH.parameter_names": [[634, null]], "arch.univariate.GARCH.simulate": [[635, null]], "arch.univariate.GARCH.start": [[636, null]], "arch.univariate.GARCH.starting_values": [[637, null]], "arch.univariate.GARCH.stop": [[638, null]], "arch.univariate.GARCH.update": [[639, null]], "arch.univariate.GARCH.updateable": [[640, null]], "arch.univariate.GARCH.variance_bounds": [[641, null]], "arch.univariate.GARCH.volatility_updater": [[642, null]], "arch.univariate.GeneralizedError": [[437, null]], "arch.univariate.GeneralizedError.bounds": [[643, null]], "arch.univariate.GeneralizedError.cdf": [[644, null]], "arch.univariate.GeneralizedError.constraints": [[645, null]], "arch.univariate.GeneralizedError.generator": [[646, null]], "arch.univariate.GeneralizedError.loglikelihood": [[647, null]], "arch.univariate.GeneralizedError.moment": [[648, null]], "arch.univariate.GeneralizedError.name": [[649, null]], "arch.univariate.GeneralizedError.parameter_names": [[650, null]], "arch.univariate.GeneralizedError.partial_moment": [[651, null]], "arch.univariate.GeneralizedError.ppf": [[652, null]], "arch.univariate.GeneralizedError.random_state": [[653, null]], "arch.univariate.GeneralizedError.simulate": [[654, null]], "arch.univariate.GeneralizedError.starting_values": [[655, null]], "arch.univariate.HARCH": [[438, null]], "arch.univariate.HARCH.backcast": [[656, null]], "arch.univariate.HARCH.backcast_transform": [[657, null]], "arch.univariate.HARCH.bounds": [[658, null]], "arch.univariate.HARCH.compute_variance": [[659, null]], "arch.univariate.HARCH.constraints": [[660, null]], "arch.univariate.HARCH.forecast": [[661, null]], "arch.univariate.HARCH.name": [[662, null]], "arch.univariate.HARCH.num_params": [[663, null]], "arch.univariate.HARCH.parameter_names": [[664, null]], "arch.univariate.HARCH.simulate": [[665, null]], "arch.univariate.HARCH.start": [[666, null]], "arch.univariate.HARCH.starting_values": [[667, null]], "arch.univariate.HARCH.stop": [[668, null]], "arch.univariate.HARCH.update": [[669, null]], "arch.univariate.HARCH.updateable": [[670, null]], "arch.univariate.HARCH.variance_bounds": [[671, null]], "arch.univariate.HARCH.volatility_updater": [[672, null]], "arch.univariate.HARX": [[439, null]], "arch.univariate.HARX.bounds": [[673, null]], "arch.univariate.HARX.compute_param_cov": [[674, null]], "arch.univariate.HARX.constraints": [[675, null]], "arch.univariate.HARX.distribution": [[676, null]], "arch.univariate.HARX.fit": [[677, null]], "arch.univariate.HARX.fix": [[678, null]], "arch.univariate.HARX.forecast": [[679, null]], "arch.univariate.HARX.name": [[680, null]], "arch.univariate.HARX.num_params": [[681, null]], "arch.univariate.HARX.parameter_names": [[682, null]], "arch.univariate.HARX.resids": [[683, null]], "arch.univariate.HARX.simulate": [[684, null]], "arch.univariate.HARX.starting_values": [[685, null]], "arch.univariate.HARX.volatility": [[686, null]], "arch.univariate.HARX.x": [[687, null]], "arch.univariate.HARX.y": [[688, null]], "arch.univariate.LS": [[440, null]], "arch.univariate.LS.bounds": [[689, null]], "arch.univariate.LS.compute_param_cov": [[690, null]], "arch.univariate.LS.constraints": [[691, null]], "arch.univariate.LS.distribution": [[692, null]], "arch.univariate.LS.fit": [[693, null]], "arch.univariate.LS.fix": [[694, null]], "arch.univariate.LS.forecast": [[695, null]], "arch.univariate.LS.name": [[696, null]], "arch.univariate.LS.num_params": [[697, null]], "arch.univariate.LS.parameter_names": [[698, null]], "arch.univariate.LS.resids": [[699, null]], "arch.univariate.LS.simulate": [[700, null]], "arch.univariate.LS.starting_values": [[701, null]], "arch.univariate.LS.volatility": [[702, null]], "arch.univariate.LS.x": [[703, null]], "arch.univariate.LS.y": [[704, null]], "arch.univariate.MIDASHyperbolic": [[441, null]], "arch.univariate.MIDASHyperbolic.backcast": [[705, null]], "arch.univariate.MIDASHyperbolic.backcast_transform": [[706, null]], "arch.univariate.MIDASHyperbolic.bounds": [[707, null]], "arch.univariate.MIDASHyperbolic.compute_variance": [[708, null]], "arch.univariate.MIDASHyperbolic.constraints": [[709, null]], "arch.univariate.MIDASHyperbolic.forecast": [[710, null]], "arch.univariate.MIDASHyperbolic.name": [[711, null]], "arch.univariate.MIDASHyperbolic.num_params": [[712, null]], "arch.univariate.MIDASHyperbolic.parameter_names": [[713, null]], "arch.univariate.MIDASHyperbolic.simulate": [[714, null]], "arch.univariate.MIDASHyperbolic.start": [[715, null]], "arch.univariate.MIDASHyperbolic.starting_values": [[716, null]], "arch.univariate.MIDASHyperbolic.stop": [[717, null]], "arch.univariate.MIDASHyperbolic.update": [[718, null]], "arch.univariate.MIDASHyperbolic.updateable": [[719, null]], "arch.univariate.MIDASHyperbolic.variance_bounds": [[720, null]], "arch.univariate.MIDASHyperbolic.volatility_updater": [[721, null]], "arch.univariate.Normal": [[442, null]], "arch.univariate.Normal.bounds": [[722, null]], "arch.univariate.Normal.cdf": [[723, null]], "arch.univariate.Normal.constraints": [[724, null]], "arch.univariate.Normal.generator": [[725, null]], "arch.univariate.Normal.loglikelihood": [[726, null]], "arch.univariate.Normal.moment": [[727, null]], "arch.univariate.Normal.name": [[728, null]], "arch.univariate.Normal.parameter_names": [[729, null]], "arch.univariate.Normal.partial_moment": [[730, null]], "arch.univariate.Normal.ppf": [[731, null]], "arch.univariate.Normal.random_state": [[732, null]], "arch.univariate.Normal.simulate": [[733, null]], "arch.univariate.Normal.starting_values": [[734, null]], "arch.univariate.RiskMetrics2006": [[443, null]], "arch.univariate.RiskMetrics2006.backcast": [[735, null]], "arch.univariate.RiskMetrics2006.backcast_transform": [[736, null]], "arch.univariate.RiskMetrics2006.bounds": [[737, null]], "arch.univariate.RiskMetrics2006.compute_variance": [[738, null]], "arch.univariate.RiskMetrics2006.constraints": [[739, null]], "arch.univariate.RiskMetrics2006.forecast": [[740, null]], "arch.univariate.RiskMetrics2006.name": [[741, null]], "arch.univariate.RiskMetrics2006.num_params": [[742, null]], "arch.univariate.RiskMetrics2006.parameter_names": [[743, null]], "arch.univariate.RiskMetrics2006.simulate": [[744, null]], "arch.univariate.RiskMetrics2006.start": [[745, null]], "arch.univariate.RiskMetrics2006.starting_values": [[746, null]], "arch.univariate.RiskMetrics2006.stop": [[747, null]], "arch.univariate.RiskMetrics2006.update": [[748, null]], "arch.univariate.RiskMetrics2006.updateable": [[749, null]], "arch.univariate.RiskMetrics2006.variance_bounds": [[750, null]], "arch.univariate.RiskMetrics2006.volatility_updater": [[751, null]], "arch.univariate.SkewStudent": [[444, null]], "arch.univariate.SkewStudent.bounds": [[752, null]], "arch.univariate.SkewStudent.cdf": [[753, null]], "arch.univariate.SkewStudent.constraints": [[754, null]], "arch.univariate.SkewStudent.generator": [[755, null]], "arch.univariate.SkewStudent.loglikelihood": [[756, null]], "arch.univariate.SkewStudent.moment": [[757, null]], "arch.univariate.SkewStudent.name": [[758, null]], "arch.univariate.SkewStudent.parameter_names": [[759, null]], "arch.univariate.SkewStudent.partial_moment": [[760, null]], "arch.univariate.SkewStudent.ppf": [[761, null]], "arch.univariate.SkewStudent.random_state": [[762, null]], "arch.univariate.SkewStudent.simulate": [[763, null]], "arch.univariate.SkewStudent.starting_values": [[764, null]], "arch.univariate.StudentsT": [[445, null]], "arch.univariate.StudentsT.bounds": [[765, null]], "arch.univariate.StudentsT.cdf": [[766, null]], "arch.univariate.StudentsT.constraints": [[767, null]], "arch.univariate.StudentsT.generator": [[768, null]], "arch.univariate.StudentsT.loglikelihood": [[769, null]], "arch.univariate.StudentsT.moment": [[770, null]], "arch.univariate.StudentsT.name": [[771, null]], "arch.univariate.StudentsT.parameter_names": [[772, null]], "arch.univariate.StudentsT.partial_moment": [[773, null]], "arch.univariate.StudentsT.ppf": [[774, null]], "arch.univariate.StudentsT.random_state": [[775, null]], "arch.univariate.StudentsT.simulate": [[776, null]], "arch.univariate.StudentsT.starting_values": [[777, null]], "arch.univariate.ZeroMean": [[446, null]], "arch.univariate.ZeroMean.bounds": [[778, null]], "arch.univariate.ZeroMean.compute_param_cov": [[779, null]], "arch.univariate.ZeroMean.constraints": [[780, null]], "arch.univariate.ZeroMean.distribution": [[781, null]], "arch.univariate.ZeroMean.fit": [[782, null]], "arch.univariate.ZeroMean.fix": [[783, null]], "arch.univariate.ZeroMean.forecast": [[784, null]], "arch.univariate.ZeroMean.name": [[785, null]], "arch.univariate.ZeroMean.num_params": [[786, null]], "arch.univariate.ZeroMean.parameter_names": [[787, null]], "arch.univariate.ZeroMean.resids": [[788, null]], "arch.univariate.ZeroMean.simulate": [[789, null]], "arch.univariate.ZeroMean.starting_values": [[790, null]], "arch.univariate.ZeroMean.volatility": [[791, null]], "arch.univariate.ZeroMean.x": [[792, null]], "arch.univariate.ZeroMean.y": [[793, null]], "arch.univariate.base.ARCHModel": [[447, null]], "arch.univariate.base.ARCHModel.bounds": [[794, null]], "arch.univariate.base.ARCHModel.compute_param_cov": [[795, null]], "arch.univariate.base.ARCHModel.constraints": [[796, null]], "arch.univariate.base.ARCHModel.distribution": [[797, null]], "arch.univariate.base.ARCHModel.fit": [[798, null]], "arch.univariate.base.ARCHModel.fix": [[799, null]], "arch.univariate.base.ARCHModel.forecast": [[800, null]], "arch.univariate.base.ARCHModel.name": [[801, null]], "arch.univariate.base.ARCHModel.num_params": [[802, null]], "arch.univariate.base.ARCHModel.parameter_names": [[803, null]], "arch.univariate.base.ARCHModel.resids": [[804, null]], "arch.univariate.base.ARCHModel.simulate": [[805, null]], "arch.univariate.base.ARCHModel.starting_values": [[806, null]], "arch.univariate.base.ARCHModel.volatility": [[807, null]], "arch.univariate.base.ARCHModel.y": [[808, null]], "arch.univariate.base.ARCHModelFixedResult": [[448, null]], "arch.univariate.base.ARCHModelFixedResult.aic": [[809, null]], "arch.univariate.base.ARCHModelFixedResult.arch_lm_test": [[810, null]], "arch.univariate.base.ARCHModelFixedResult.bic": [[811, null]], "arch.univariate.base.ARCHModelFixedResult.conditional_volatility": [[812, null]], "arch.univariate.base.ARCHModelFixedResult.forecast": [[813, null]], "arch.univariate.base.ARCHModelFixedResult.hedgehog_plot": [[814, null]], "arch.univariate.base.ARCHModelFixedResult.loglikelihood": [[815, null]], "arch.univariate.base.ARCHModelFixedResult.model": [[816, null]], "arch.univariate.base.ARCHModelFixedResult.nobs": [[817, null]], "arch.univariate.base.ARCHModelFixedResult.num_params": [[818, null]], "arch.univariate.base.ARCHModelFixedResult.params": [[819, null]], "arch.univariate.base.ARCHModelFixedResult.plot": [[820, null]], "arch.univariate.base.ARCHModelFixedResult.resid": [[821, null]], "arch.univariate.base.ARCHModelFixedResult.std_resid": [[822, null]], "arch.univariate.base.ARCHModelFixedResult.summary": [[823, null]], "arch.univariate.base.ARCHModelForecast": [[449, null]], "arch.univariate.base.ARCHModelForecast.mean": [[824, null]], "arch.univariate.base.ARCHModelForecast.residual_variance": [[825, null]], "arch.univariate.base.ARCHModelForecast.simulations": [[826, null]], "arch.univariate.base.ARCHModelForecast.variance": [[827, null]], "arch.univariate.base.ARCHModelForecastSimulation": [[450, null]], "arch.univariate.base.ARCHModelForecastSimulation.index": [[828, null]], "arch.univariate.base.ARCHModelForecastSimulation.residual_variances": [[829, null]], "arch.univariate.base.ARCHModelForecastSimulation.residuals": [[830, null]], "arch.univariate.base.ARCHModelForecastSimulation.values": [[831, null]], "arch.univariate.base.ARCHModelForecastSimulation.variances": [[832, null]], "arch.univariate.base.ARCHModelResult": [[451, null]], "arch.univariate.base.ARCHModelResult.aic": [[833, null]], "arch.univariate.base.ARCHModelResult.arch_lm_test": [[834, null]], "arch.univariate.base.ARCHModelResult.bic": [[835, null]], "arch.univariate.base.ARCHModelResult.conditional_volatility": [[836, null]], "arch.univariate.base.ARCHModelResult.conf_int": [[837, null]], "arch.univariate.base.ARCHModelResult.convergence_flag": [[838, null]], "arch.univariate.base.ARCHModelResult.fit_start": [[839, null]], "arch.univariate.base.ARCHModelResult.fit_stop": [[840, null]], "arch.univariate.base.ARCHModelResult.forecast": [[841, null]], "arch.univariate.base.ARCHModelResult.hedgehog_plot": [[842, null]], "arch.univariate.base.ARCHModelResult.loglikelihood": [[843, null]], "arch.univariate.base.ARCHModelResult.model": [[844, null]], "arch.univariate.base.ARCHModelResult.nobs": [[845, null]], "arch.univariate.base.ARCHModelResult.num_params": [[846, null]], "arch.univariate.base.ARCHModelResult.optimization_result": [[847, null]], "arch.univariate.base.ARCHModelResult.param_cov": [[848, null]], "arch.univariate.base.ARCHModelResult.params": [[849, null]], "arch.univariate.base.ARCHModelResult.plot": [[850, null]], "arch.univariate.base.ARCHModelResult.pvalues": [[851, null]], "arch.univariate.base.ARCHModelResult.resid": [[852, null]], "arch.univariate.base.ARCHModelResult.rsquared": [[853, null]], "arch.univariate.base.ARCHModelResult.rsquared_adj": [[854, null]], "arch.univariate.base.ARCHModelResult.scale": [[855, null]], "arch.univariate.base.ARCHModelResult.std_err": [[856, null]], "arch.univariate.base.ARCHModelResult.std_resid": [[857, null]], "arch.univariate.base.ARCHModelResult.summary": [[858, null]], "arch.univariate.base.ARCHModelResult.tvalues": [[859, null]], "arch.univariate.distribution.Distribution": [[452, null]], "arch.univariate.distribution.Distribution.bounds": [[860, null]], "arch.univariate.distribution.Distribution.cdf": [[861, null]], "arch.univariate.distribution.Distribution.constraints": [[862, null]], "arch.univariate.distribution.Distribution.generator": [[863, null]], "arch.univariate.distribution.Distribution.loglikelihood": [[864, null]], "arch.univariate.distribution.Distribution.moment": [[865, null]], "arch.univariate.distribution.Distribution.name": [[866, null]], "arch.univariate.distribution.Distribution.parameter_names": [[867, null]], "arch.univariate.distribution.Distribution.partial_moment": [[868, null]], "arch.univariate.distribution.Distribution.ppf": [[869, null]], "arch.univariate.distribution.Distribution.random_state": [[870, null]], "arch.univariate.distribution.Distribution.simulate": [[871, null]], "arch.univariate.distribution.Distribution.starting_values": [[872, null]], "arch.univariate.recursions_python.VolatilityUpdater": [[453, null]], "arch.univariate.recursions_python.VolatilityUpdater.initialize_update": [[873, null]], "arch.univariate.recursions_python.VolatilityUpdater.update": [[874, null]], "arch.univariate.volatility.VolatilityProcess": [[454, null]], "arch.univariate.volatility.VolatilityProcess.backcast": [[875, null]], "arch.univariate.volatility.VolatilityProcess.backcast_transform": [[876, null]], "arch.univariate.volatility.VolatilityProcess.bounds": [[877, null]], "arch.univariate.volatility.VolatilityProcess.compute_variance": [[878, null]], "arch.univariate.volatility.VolatilityProcess.constraints": [[879, null]], "arch.univariate.volatility.VolatilityProcess.forecast": [[880, null]], "arch.univariate.volatility.VolatilityProcess.name": [[881, null]], "arch.univariate.volatility.VolatilityProcess.num_params": [[882, null]], "arch.univariate.volatility.VolatilityProcess.parameter_names": [[883, null]], "arch.univariate.volatility.VolatilityProcess.simulate": [[884, null]], "arch.univariate.volatility.VolatilityProcess.start": [[885, null]], "arch.univariate.volatility.VolatilityProcess.starting_values": [[886, null]], "arch.univariate.volatility.VolatilityProcess.stop": [[887, null]], "arch.univariate.volatility.VolatilityProcess.update": [[888, null]], "arch.univariate.volatility.VolatilityProcess.updateable": [[889, null]], "arch.univariate.volatility.VolatilityProcess.variance_bounds": [[890, null]], "arch.univariate.volatility.VolatilityProcess.volatility_updater": [[891, null]], "x input array sizes": [[896, "x-input-array-sizes"]]}, "docurls": ["api.html", "bootstrap/background.html", "bootstrap/bootstrap.html", "bootstrap/bootstrap_examples.html", "bootstrap/confidence-intervals.html", "bootstrap/generated/arch.bootstrap.CircularBlockBootstrap.html", "bootstrap/generated/arch.bootstrap.IIDBootstrap.html", "bootstrap/generated/arch.bootstrap.IndependentSamplesBootstrap.html", "bootstrap/generated/arch.bootstrap.MovingBlockBootstrap.html", "bootstrap/generated/arch.bootstrap.StationaryBootstrap.html", "bootstrap/generated/arch.bootstrap.optimal_block_length.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.apply.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.bootstrap.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.clone.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.conf_int.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.cov.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.generator.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.get_state.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.index.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.random_state.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.reset.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.seed.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.set_state.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.state.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.update_indices.html", "bootstrap/generated/generated/arch.bootstrap.CircularBlockBootstrap.var.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.apply.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.bootstrap.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.clone.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.conf_int.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.cov.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.generator.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.get_state.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.index.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.random_state.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.reset.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.seed.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.set_state.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.state.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.update_indices.html", "bootstrap/generated/generated/arch.bootstrap.IIDBootstrap.var.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.apply.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.bootstrap.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.clone.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.conf_int.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.cov.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.generator.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.get_state.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.index.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.random_state.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.reset.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.seed.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.set_state.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.state.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.update_indices.html", "bootstrap/generated/generated/arch.bootstrap.IndependentSamplesBootstrap.var.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.apply.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.bootstrap.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.clone.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.conf_int.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.cov.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.generator.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.get_state.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.index.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.random_state.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.reset.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.seed.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.set_state.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.state.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.update_indices.html", "bootstrap/generated/generated/arch.bootstrap.MovingBlockBootstrap.var.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.apply.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.bootstrap.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.clone.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.conf_int.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.cov.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.generator.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.get_state.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.index.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.random_state.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.reset.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.seed.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.set_state.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.state.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.update_indices.html", "bootstrap/generated/generated/arch.bootstrap.StationaryBootstrap.var.html", "bootstrap/iid-bootstraps.html", "bootstrap/low-level-interface.html", "bootstrap/parameter-covariance-estimation.html", "bootstrap/semiparametric-parametric-bootstrap.html", "bootstrap/timeseries-bootstraps.html", "changes.html", "changes/1.0.html", "changes/2.0.html", "changes/3.0.html", "changes/4.0.html", "changes/5.0.html", "changes/6.0.html", "changes/7.0.html", "covariance/covariance.html", "covariance/generated/arch.covariance.kernel.Andrews.html", "covariance/generated/arch.covariance.kernel.Bartlett.html", "covariance/generated/arch.covariance.kernel.CovarianceEstimate.html", "covariance/generated/arch.covariance.kernel.Gallant.html", "covariance/generated/arch.covariance.kernel.NeweyWest.html", "covariance/generated/arch.covariance.kernel.Parzen.html", "covariance/generated/arch.covariance.kernel.ParzenCauchy.html", "covariance/generated/arch.covariance.kernel.ParzenGeometric.html", "covariance/generated/arch.covariance.kernel.ParzenRiesz.html", "covariance/generated/arch.covariance.kernel.QuadraticSpectral.html", "covariance/generated/arch.covariance.kernel.TukeyHamming.html", "covariance/generated/arch.covariance.kernel.TukeyHanning.html", "covariance/generated/arch.covariance.kernel.TukeyParzen.html", "covariance/generated/generated/arch.covariance.kernel.Andrews.bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.Andrews.bandwidth_scale.html", "covariance/generated/generated/arch.covariance.kernel.Andrews.centered.html", "covariance/generated/generated/arch.covariance.kernel.Andrews.cov.html", "covariance/generated/generated/arch.covariance.kernel.Andrews.force_int.html", "covariance/generated/generated/arch.covariance.kernel.Andrews.kernel_const.html", "covariance/generated/generated/arch.covariance.kernel.Andrews.kernel_weights.html", "covariance/generated/generated/arch.covariance.kernel.Andrews.name.html", "covariance/generated/generated/arch.covariance.kernel.Andrews.opt_bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.Andrews.rate.html", "covariance/generated/generated/arch.covariance.kernel.Bartlett.bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.Bartlett.bandwidth_scale.html", "covariance/generated/generated/arch.covariance.kernel.Bartlett.centered.html", "covariance/generated/generated/arch.covariance.kernel.Bartlett.cov.html", "covariance/generated/generated/arch.covariance.kernel.Bartlett.force_int.html", "covariance/generated/generated/arch.covariance.kernel.Bartlett.kernel_const.html", "covariance/generated/generated/arch.covariance.kernel.Bartlett.kernel_weights.html", "covariance/generated/generated/arch.covariance.kernel.Bartlett.name.html", "covariance/generated/generated/arch.covariance.kernel.Bartlett.opt_bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.Bartlett.rate.html", "covariance/generated/generated/arch.covariance.kernel.CovarianceEstimate.long_run.html", "covariance/generated/generated/arch.covariance.kernel.CovarianceEstimate.one_sided.html", "covariance/generated/generated/arch.covariance.kernel.CovarianceEstimate.one_sided_strict.html", "covariance/generated/generated/arch.covariance.kernel.CovarianceEstimate.short_run.html", "covariance/generated/generated/arch.covariance.kernel.Gallant.bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.Gallant.bandwidth_scale.html", "covariance/generated/generated/arch.covariance.kernel.Gallant.centered.html", "covariance/generated/generated/arch.covariance.kernel.Gallant.cov.html", "covariance/generated/generated/arch.covariance.kernel.Gallant.force_int.html", "covariance/generated/generated/arch.covariance.kernel.Gallant.kernel_const.html", "covariance/generated/generated/arch.covariance.kernel.Gallant.kernel_weights.html", "covariance/generated/generated/arch.covariance.kernel.Gallant.name.html", "covariance/generated/generated/arch.covariance.kernel.Gallant.opt_bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.Gallant.rate.html", "covariance/generated/generated/arch.covariance.kernel.NeweyWest.bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.NeweyWest.bandwidth_scale.html", "covariance/generated/generated/arch.covariance.kernel.NeweyWest.centered.html", "covariance/generated/generated/arch.covariance.kernel.NeweyWest.cov.html", "covariance/generated/generated/arch.covariance.kernel.NeweyWest.force_int.html", "covariance/generated/generated/arch.covariance.kernel.NeweyWest.kernel_const.html", "covariance/generated/generated/arch.covariance.kernel.NeweyWest.kernel_weights.html", "covariance/generated/generated/arch.covariance.kernel.NeweyWest.name.html", "covariance/generated/generated/arch.covariance.kernel.NeweyWest.opt_bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.NeweyWest.rate.html", "covariance/generated/generated/arch.covariance.kernel.Parzen.bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.Parzen.bandwidth_scale.html", "covariance/generated/generated/arch.covariance.kernel.Parzen.centered.html", "covariance/generated/generated/arch.covariance.kernel.Parzen.cov.html", "covariance/generated/generated/arch.covariance.kernel.Parzen.force_int.html", "covariance/generated/generated/arch.covariance.kernel.Parzen.kernel_const.html", "covariance/generated/generated/arch.covariance.kernel.Parzen.kernel_weights.html", "covariance/generated/generated/arch.covariance.kernel.Parzen.name.html", "covariance/generated/generated/arch.covariance.kernel.Parzen.opt_bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.Parzen.rate.html", "covariance/generated/generated/arch.covariance.kernel.ParzenCauchy.bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.ParzenCauchy.bandwidth_scale.html", "covariance/generated/generated/arch.covariance.kernel.ParzenCauchy.centered.html", "covariance/generated/generated/arch.covariance.kernel.ParzenCauchy.cov.html", "covariance/generated/generated/arch.covariance.kernel.ParzenCauchy.force_int.html", "covariance/generated/generated/arch.covariance.kernel.ParzenCauchy.kernel_const.html", "covariance/generated/generated/arch.covariance.kernel.ParzenCauchy.kernel_weights.html", "covariance/generated/generated/arch.covariance.kernel.ParzenCauchy.name.html", "covariance/generated/generated/arch.covariance.kernel.ParzenCauchy.opt_bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.ParzenCauchy.rate.html", "covariance/generated/generated/arch.covariance.kernel.ParzenGeometric.bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.ParzenGeometric.bandwidth_scale.html", "covariance/generated/generated/arch.covariance.kernel.ParzenGeometric.centered.html", "covariance/generated/generated/arch.covariance.kernel.ParzenGeometric.cov.html", "covariance/generated/generated/arch.covariance.kernel.ParzenGeometric.force_int.html", "covariance/generated/generated/arch.covariance.kernel.ParzenGeometric.kernel_const.html", "covariance/generated/generated/arch.covariance.kernel.ParzenGeometric.kernel_weights.html", "covariance/generated/generated/arch.covariance.kernel.ParzenGeometric.name.html", "covariance/generated/generated/arch.covariance.kernel.ParzenGeometric.opt_bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.ParzenGeometric.rate.html", "covariance/generated/generated/arch.covariance.kernel.ParzenRiesz.bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.ParzenRiesz.bandwidth_scale.html", "covariance/generated/generated/arch.covariance.kernel.ParzenRiesz.centered.html", "covariance/generated/generated/arch.covariance.kernel.ParzenRiesz.cov.html", "covariance/generated/generated/arch.covariance.kernel.ParzenRiesz.force_int.html", "covariance/generated/generated/arch.covariance.kernel.ParzenRiesz.kernel_const.html", "covariance/generated/generated/arch.covariance.kernel.ParzenRiesz.kernel_weights.html", "covariance/generated/generated/arch.covariance.kernel.ParzenRiesz.name.html", "covariance/generated/generated/arch.covariance.kernel.ParzenRiesz.opt_bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.ParzenRiesz.rate.html", "covariance/generated/generated/arch.covariance.kernel.QuadraticSpectral.bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.QuadraticSpectral.bandwidth_scale.html", "covariance/generated/generated/arch.covariance.kernel.QuadraticSpectral.centered.html", "covariance/generated/generated/arch.covariance.kernel.QuadraticSpectral.cov.html", "covariance/generated/generated/arch.covariance.kernel.QuadraticSpectral.force_int.html", "covariance/generated/generated/arch.covariance.kernel.QuadraticSpectral.kernel_const.html", "covariance/generated/generated/arch.covariance.kernel.QuadraticSpectral.kernel_weights.html", "covariance/generated/generated/arch.covariance.kernel.QuadraticSpectral.name.html", "covariance/generated/generated/arch.covariance.kernel.QuadraticSpectral.opt_bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.QuadraticSpectral.rate.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHamming.bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHamming.bandwidth_scale.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHamming.centered.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHamming.cov.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHamming.force_int.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHamming.kernel_const.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHamming.kernel_weights.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHamming.name.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHamming.opt_bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHamming.rate.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHanning.bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHanning.bandwidth_scale.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHanning.centered.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHanning.cov.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHanning.force_int.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHanning.kernel_const.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHanning.kernel_weights.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHanning.name.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHanning.opt_bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.TukeyHanning.rate.html", "covariance/generated/generated/arch.covariance.kernel.TukeyParzen.bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.TukeyParzen.bandwidth_scale.html", "covariance/generated/generated/arch.covariance.kernel.TukeyParzen.centered.html", "covariance/generated/generated/arch.covariance.kernel.TukeyParzen.cov.html", "covariance/generated/generated/arch.covariance.kernel.TukeyParzen.force_int.html", "covariance/generated/generated/arch.covariance.kernel.TukeyParzen.kernel_const.html", "covariance/generated/generated/arch.covariance.kernel.TukeyParzen.kernel_weights.html", "covariance/generated/generated/arch.covariance.kernel.TukeyParzen.name.html", "covariance/generated/generated/arch.covariance.kernel.TukeyParzen.opt_bandwidth.html", "covariance/generated/generated/arch.covariance.kernel.TukeyParzen.rate.html", "index.html", "multiple-comparison/background.html", "multiple-comparison/generated/arch.bootstrap.MCS.html", "multiple-comparison/generated/arch.bootstrap.SPA.html", "multiple-comparison/generated/arch.bootstrap.StepM.html", "multiple-comparison/generated/generated/arch.bootstrap.MCS.compute.html", "multiple-comparison/generated/generated/arch.bootstrap.MCS.excluded.html", "multiple-comparison/generated/generated/arch.bootstrap.MCS.included.html", "multiple-comparison/generated/generated/arch.bootstrap.MCS.pvalues.html", "multiple-comparison/generated/generated/arch.bootstrap.MCS.reset.html", "multiple-comparison/generated/generated/arch.bootstrap.MCS.seed.html", "multiple-comparison/generated/generated/arch.bootstrap.SPA.better_models.html", "multiple-comparison/generated/generated/arch.bootstrap.SPA.compute.html", "multiple-comparison/generated/generated/arch.bootstrap.SPA.critical_values.html", "multiple-comparison/generated/generated/arch.bootstrap.SPA.pvalues.html", "multiple-comparison/generated/generated/arch.bootstrap.SPA.reset.html", "multiple-comparison/generated/generated/arch.bootstrap.SPA.seed.html", "multiple-comparison/generated/generated/arch.bootstrap.SPA.subset.html", "multiple-comparison/generated/generated/arch.bootstrap.StepM.compute.html", "multiple-comparison/generated/generated/arch.bootstrap.StepM.reset.html", "multiple-comparison/generated/generated/arch.bootstrap.StepM.seed.html", "multiple-comparison/generated/generated/arch.bootstrap.StepM.superior_models.html", "multiple-comparison/multiple-comparison-reference.html", "multiple-comparison/multiple-comparison_examples.html", "multiple-comparison/multiple-comparisons.html", "unitroot/cointegration.html", "unitroot/generated/arch.unitroot.ADF.html", "unitroot/generated/arch.unitroot.DFGLS.html", "unitroot/generated/arch.unitroot.KPSS.html", "unitroot/generated/arch.unitroot.PhillipsPerron.html", "unitroot/generated/arch.unitroot.VarianceRatio.html", "unitroot/generated/arch.unitroot.ZivotAndrews.html", "unitroot/generated/arch.unitroot.auto_bandwidth.html", "unitroot/generated/arch.unitroot.cointegration.CanonicalCointegratingReg.html", "unitroot/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.html", "unitroot/generated/arch.unitroot.cointegration.DynamicOLS.html", "unitroot/generated/arch.unitroot.cointegration.DynamicOLSResults.html", "unitroot/generated/arch.unitroot.cointegration.EngleGrangerTestResults.html", "unitroot/generated/arch.unitroot.cointegration.FullyModifiedOLS.html", "unitroot/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.html", "unitroot/generated/arch.unitroot.cointegration.engle_granger.html", "unitroot/generated/arch.unitroot.cointegration.phillips_ouliaris.html", "unitroot/generated/generated/arch.unitroot.ADF.alternative_hypothesis.html", "unitroot/generated/generated/arch.unitroot.ADF.critical_values.html", "unitroot/generated/generated/arch.unitroot.ADF.lags.html", "unitroot/generated/generated/arch.unitroot.ADF.max_lags.html", "unitroot/generated/generated/arch.unitroot.ADF.nobs.html", "unitroot/generated/generated/arch.unitroot.ADF.null_hypothesis.html", "unitroot/generated/generated/arch.unitroot.ADF.pvalue.html", "unitroot/generated/generated/arch.unitroot.ADF.regression.html", "unitroot/generated/generated/arch.unitroot.ADF.stat.html", "unitroot/generated/generated/arch.unitroot.ADF.summary.html", "unitroot/generated/generated/arch.unitroot.ADF.trend.html", "unitroot/generated/generated/arch.unitroot.ADF.valid_trends.html", "unitroot/generated/generated/arch.unitroot.ADF.y.html", "unitroot/generated/generated/arch.unitroot.DFGLS.alternative_hypothesis.html", "unitroot/generated/generated/arch.unitroot.DFGLS.critical_values.html", "unitroot/generated/generated/arch.unitroot.DFGLS.lags.html", "unitroot/generated/generated/arch.unitroot.DFGLS.max_lags.html", "unitroot/generated/generated/arch.unitroot.DFGLS.nobs.html", "unitroot/generated/generated/arch.unitroot.DFGLS.null_hypothesis.html", "unitroot/generated/generated/arch.unitroot.DFGLS.pvalue.html", "unitroot/generated/generated/arch.unitroot.DFGLS.regression.html", "unitroot/generated/generated/arch.unitroot.DFGLS.stat.html", "unitroot/generated/generated/arch.unitroot.DFGLS.summary.html", "unitroot/generated/generated/arch.unitroot.DFGLS.trend.html", "unitroot/generated/generated/arch.unitroot.DFGLS.valid_trends.html", "unitroot/generated/generated/arch.unitroot.DFGLS.y.html", "unitroot/generated/generated/arch.unitroot.KPSS.alternative_hypothesis.html", "unitroot/generated/generated/arch.unitroot.KPSS.critical_values.html", "unitroot/generated/generated/arch.unitroot.KPSS.lags.html", "unitroot/generated/generated/arch.unitroot.KPSS.nobs.html", "unitroot/generated/generated/arch.unitroot.KPSS.null_hypothesis.html", "unitroot/generated/generated/arch.unitroot.KPSS.pvalue.html", "unitroot/generated/generated/arch.unitroot.KPSS.stat.html", "unitroot/generated/generated/arch.unitroot.KPSS.summary.html", "unitroot/generated/generated/arch.unitroot.KPSS.trend.html", "unitroot/generated/generated/arch.unitroot.KPSS.valid_trends.html", "unitroot/generated/generated/arch.unitroot.KPSS.y.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.alternative_hypothesis.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.critical_values.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.lags.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.nobs.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.null_hypothesis.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.pvalue.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.regression.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.stat.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.summary.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.test_type.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.trend.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.valid_trends.html", "unitroot/generated/generated/arch.unitroot.PhillipsPerron.y.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.alternative_hypothesis.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.critical_values.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.debiased.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.lags.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.nobs.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.null_hypothesis.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.overlap.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.pvalue.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.robust.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.stat.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.summary.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.trend.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.valid_trends.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.vr.html", "unitroot/generated/generated/arch.unitroot.VarianceRatio.y.html", "unitroot/generated/generated/arch.unitroot.ZivotAndrews.alternative_hypothesis.html", "unitroot/generated/generated/arch.unitroot.ZivotAndrews.critical_values.html", "unitroot/generated/generated/arch.unitroot.ZivotAndrews.lags.html", "unitroot/generated/generated/arch.unitroot.ZivotAndrews.nobs.html", "unitroot/generated/generated/arch.unitroot.ZivotAndrews.null_hypothesis.html", "unitroot/generated/generated/arch.unitroot.ZivotAndrews.pvalue.html", "unitroot/generated/generated/arch.unitroot.ZivotAndrews.stat.html", "unitroot/generated/generated/arch.unitroot.ZivotAndrews.summary.html", "unitroot/generated/generated/arch.unitroot.ZivotAndrews.trend.html", "unitroot/generated/generated/arch.unitroot.ZivotAndrews.valid_trends.html", "unitroot/generated/generated/arch.unitroot.ZivotAndrews.y.html", "unitroot/generated/generated/arch.unitroot.cointegration.CanonicalCointegratingReg.fit.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.bandwidth.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.cov.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.kernel.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.long_run_variance.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.params.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.pvalues.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.resid.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.residual_variance.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.rsquared.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.rsquared_adj.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.std_errors.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.summary.html", "unitroot/generated/generated/arch.unitroot.cointegration.CointegrationAnalysisResults.tvalues.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLS.fit.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.bandwidth.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.cov.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.cov_type.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.full_cov.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.full_params.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.kernel.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.lags.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.leads.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.long_run_variance.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.params.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.pvalues.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.resid.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.residual_variance.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.rsquared.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.rsquared_adj.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.std_errors.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.summary.html", "unitroot/generated/generated/arch.unitroot.cointegration.DynamicOLSResults.tvalues.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.alternative_hypothesis.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.cointegrating_vector.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.critical_values.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.distribution_order.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.lags.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.max_lags.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.name.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.null_hypothesis.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.plot.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.pvalue.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.resid.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.rho.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.stat.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.summary.html", "unitroot/generated/generated/arch.unitroot.cointegration.EngleGrangerTestResults.trend.html", "unitroot/generated/generated/arch.unitroot.cointegration.FullyModifiedOLS.fit.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.alternative_hypothesis.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.bandwidth.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.cointegrating_vector.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.critical_values.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.distribution_order.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.kernel.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.name.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.null_hypothesis.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.plot.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.pvalue.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.resid.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.stat.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.summary.html", "unitroot/generated/generated/arch.unitroot.cointegration.PhillipsOuliarisTestResults.trend.html", "unitroot/introduction.html", "unitroot/tests.html", "unitroot/unitroot.html", "unitroot/unitroot_cointegration_examples.html", "unitroot/unitroot_examples.html", "univariate/background.html", "univariate/distribution.html", "univariate/forecasting.html", "univariate/generated/arch.univariate.APARCH.html", "univariate/generated/arch.univariate.ARCH.html", "univariate/generated/arch.univariate.ARCHInMean.html", "univariate/generated/arch.univariate.ARX.html", "univariate/generated/arch.univariate.ConstantMean.html", "univariate/generated/arch.univariate.ConstantVariance.html", "univariate/generated/arch.univariate.EGARCH.html", "univariate/generated/arch.univariate.EWMAVariance.html", "univariate/generated/arch.univariate.FIGARCH.html", "univariate/generated/arch.univariate.FixedVariance.html", "univariate/generated/arch.univariate.GARCH.html", "univariate/generated/arch.univariate.GeneralizedError.html", "univariate/generated/arch.univariate.HARCH.html", "univariate/generated/arch.univariate.HARX.html", "univariate/generated/arch.univariate.LS.html", "univariate/generated/arch.univariate.MIDASHyperbolic.html", "univariate/generated/arch.univariate.Normal.html", "univariate/generated/arch.univariate.RiskMetrics2006.html", "univariate/generated/arch.univariate.SkewStudent.html", "univariate/generated/arch.univariate.StudentsT.html", "univariate/generated/arch.univariate.ZeroMean.html", "univariate/generated/arch.univariate.base.ARCHModel.html", "univariate/generated/arch.univariate.base.ARCHModelFixedResult.html", "univariate/generated/arch.univariate.base.ARCHModelForecast.html", "univariate/generated/arch.univariate.base.ARCHModelForecastSimulation.html", "univariate/generated/arch.univariate.base.ARCHModelResult.html", "univariate/generated/arch.univariate.distribution.Distribution.html", "univariate/generated/arch.univariate.recursions_python.VolatilityUpdater.html", "univariate/generated/arch.univariate.volatility.VolatilityProcess.html", "univariate/generated/generated/arch.univariate.APARCH.backcast.html", "univariate/generated/generated/arch.univariate.APARCH.backcast_transform.html", "univariate/generated/generated/arch.univariate.APARCH.bounds.html", "univariate/generated/generated/arch.univariate.APARCH.common_asym.html", "univariate/generated/generated/arch.univariate.APARCH.compute_variance.html", "univariate/generated/generated/arch.univariate.APARCH.constraints.html", "univariate/generated/generated/arch.univariate.APARCH.delta.html", "univariate/generated/generated/arch.univariate.APARCH.forecast.html", "univariate/generated/generated/arch.univariate.APARCH.name.html", "univariate/generated/generated/arch.univariate.APARCH.num_params.html", "univariate/generated/generated/arch.univariate.APARCH.parameter_names.html", "univariate/generated/generated/arch.univariate.APARCH.simulate.html", "univariate/generated/generated/arch.univariate.APARCH.start.html", "univariate/generated/generated/arch.univariate.APARCH.starting_values.html", "univariate/generated/generated/arch.univariate.APARCH.stop.html", "univariate/generated/generated/arch.univariate.APARCH.update.html", "univariate/generated/generated/arch.univariate.APARCH.updateable.html", "univariate/generated/generated/arch.univariate.APARCH.variance_bounds.html", "univariate/generated/generated/arch.univariate.APARCH.volatility_updater.html", "univariate/generated/generated/arch.univariate.ARCH.backcast.html", "univariate/generated/generated/arch.univariate.ARCH.backcast_transform.html", "univariate/generated/generated/arch.univariate.ARCH.bounds.html", "univariate/generated/generated/arch.univariate.ARCH.compute_variance.html", "univariate/generated/generated/arch.univariate.ARCH.constraints.html", "univariate/generated/generated/arch.univariate.ARCH.forecast.html", "univariate/generated/generated/arch.univariate.ARCH.name.html", "univariate/generated/generated/arch.univariate.ARCH.num_params.html", "univariate/generated/generated/arch.univariate.ARCH.parameter_names.html", "univariate/generated/generated/arch.univariate.ARCH.simulate.html", "univariate/generated/generated/arch.univariate.ARCH.start.html", "univariate/generated/generated/arch.univariate.ARCH.starting_values.html", "univariate/generated/generated/arch.univariate.ARCH.stop.html", "univariate/generated/generated/arch.univariate.ARCH.update.html", "univariate/generated/generated/arch.univariate.ARCH.updateable.html", "univariate/generated/generated/arch.univariate.ARCH.variance_bounds.html", "univariate/generated/generated/arch.univariate.ARCH.volatility_updater.html", "univariate/generated/generated/arch.univariate.ARCHInMean.bounds.html", "univariate/generated/generated/arch.univariate.ARCHInMean.compute_param_cov.html", "univariate/generated/generated/arch.univariate.ARCHInMean.constraints.html", "univariate/generated/generated/arch.univariate.ARCHInMean.distribution.html", "univariate/generated/generated/arch.univariate.ARCHInMean.fit.html", "univariate/generated/generated/arch.univariate.ARCHInMean.fix.html", "univariate/generated/generated/arch.univariate.ARCHInMean.forecast.html", "univariate/generated/generated/arch.univariate.ARCHInMean.form.html", "univariate/generated/generated/arch.univariate.ARCHInMean.name.html", "univariate/generated/generated/arch.univariate.ARCHInMean.num_params.html", "univariate/generated/generated/arch.univariate.ARCHInMean.parameter_names.html", "univariate/generated/generated/arch.univariate.ARCHInMean.resids.html", "univariate/generated/generated/arch.univariate.ARCHInMean.simulate.html", "univariate/generated/generated/arch.univariate.ARCHInMean.starting_values.html", "univariate/generated/generated/arch.univariate.ARCHInMean.volatility.html", "univariate/generated/generated/arch.univariate.ARCHInMean.x.html", "univariate/generated/generated/arch.univariate.ARCHInMean.y.html", "univariate/generated/generated/arch.univariate.ARX.bounds.html", "univariate/generated/generated/arch.univariate.ARX.compute_param_cov.html", "univariate/generated/generated/arch.univariate.ARX.constraints.html", "univariate/generated/generated/arch.univariate.ARX.distribution.html", "univariate/generated/generated/arch.univariate.ARX.fit.html", "univariate/generated/generated/arch.univariate.ARX.fix.html", "univariate/generated/generated/arch.univariate.ARX.forecast.html", "univariate/generated/generated/arch.univariate.ARX.name.html", "univariate/generated/generated/arch.univariate.ARX.num_params.html", "univariate/generated/generated/arch.univariate.ARX.parameter_names.html", "univariate/generated/generated/arch.univariate.ARX.resids.html", "univariate/generated/generated/arch.univariate.ARX.simulate.html", "univariate/generated/generated/arch.univariate.ARX.starting_values.html", "univariate/generated/generated/arch.univariate.ARX.volatility.html", "univariate/generated/generated/arch.univariate.ARX.x.html", "univariate/generated/generated/arch.univariate.ARX.y.html", "univariate/generated/generated/arch.univariate.ConstantMean.bounds.html", "univariate/generated/generated/arch.univariate.ConstantMean.compute_param_cov.html", "univariate/generated/generated/arch.univariate.ConstantMean.constraints.html", "univariate/generated/generated/arch.univariate.ConstantMean.distribution.html", "univariate/generated/generated/arch.univariate.ConstantMean.fit.html", "univariate/generated/generated/arch.univariate.ConstantMean.fix.html", "univariate/generated/generated/arch.univariate.ConstantMean.forecast.html", "univariate/generated/generated/arch.univariate.ConstantMean.name.html", "univariate/generated/generated/arch.univariate.ConstantMean.num_params.html", "univariate/generated/generated/arch.univariate.ConstantMean.parameter_names.html", "univariate/generated/generated/arch.univariate.ConstantMean.resids.html", "univariate/generated/generated/arch.univariate.ConstantMean.simulate.html", "univariate/generated/generated/arch.univariate.ConstantMean.starting_values.html", "univariate/generated/generated/arch.univariate.ConstantMean.volatility.html", "univariate/generated/generated/arch.univariate.ConstantMean.x.html", "univariate/generated/generated/arch.univariate.ConstantMean.y.html", "univariate/generated/generated/arch.univariate.ConstantVariance.backcast.html", "univariate/generated/generated/arch.univariate.ConstantVariance.backcast_transform.html", "univariate/generated/generated/arch.univariate.ConstantVariance.bounds.html", "univariate/generated/generated/arch.univariate.ConstantVariance.compute_variance.html", "univariate/generated/generated/arch.univariate.ConstantVariance.constraints.html", "univariate/generated/generated/arch.univariate.ConstantVariance.forecast.html", "univariate/generated/generated/arch.univariate.ConstantVariance.name.html", "univariate/generated/generated/arch.univariate.ConstantVariance.num_params.html", "univariate/generated/generated/arch.univariate.ConstantVariance.parameter_names.html", "univariate/generated/generated/arch.univariate.ConstantVariance.simulate.html", "univariate/generated/generated/arch.univariate.ConstantVariance.start.html", "univariate/generated/generated/arch.univariate.ConstantVariance.starting_values.html", "univariate/generated/generated/arch.univariate.ConstantVariance.stop.html", "univariate/generated/generated/arch.univariate.ConstantVariance.update.html", "univariate/generated/generated/arch.univariate.ConstantVariance.updateable.html", "univariate/generated/generated/arch.univariate.ConstantVariance.variance_bounds.html", "univariate/generated/generated/arch.univariate.ConstantVariance.volatility_updater.html", "univariate/generated/generated/arch.univariate.EGARCH.backcast.html", "univariate/generated/generated/arch.univariate.EGARCH.backcast_transform.html", "univariate/generated/generated/arch.univariate.EGARCH.bounds.html", "univariate/generated/generated/arch.univariate.EGARCH.compute_variance.html", "univariate/generated/generated/arch.univariate.EGARCH.constraints.html", "univariate/generated/generated/arch.univariate.EGARCH.forecast.html", "univariate/generated/generated/arch.univariate.EGARCH.name.html", "univariate/generated/generated/arch.univariate.EGARCH.num_params.html", "univariate/generated/generated/arch.univariate.EGARCH.parameter_names.html", "univariate/generated/generated/arch.univariate.EGARCH.simulate.html", "univariate/generated/generated/arch.univariate.EGARCH.start.html", "univariate/generated/generated/arch.univariate.EGARCH.starting_values.html", "univariate/generated/generated/arch.univariate.EGARCH.stop.html", "univariate/generated/generated/arch.univariate.EGARCH.update.html", "univariate/generated/generated/arch.univariate.EGARCH.updateable.html", "univariate/generated/generated/arch.univariate.EGARCH.variance_bounds.html", "univariate/generated/generated/arch.univariate.EGARCH.volatility_updater.html", "univariate/generated/generated/arch.univariate.EWMAVariance.backcast.html", "univariate/generated/generated/arch.univariate.EWMAVariance.backcast_transform.html", "univariate/generated/generated/arch.univariate.EWMAVariance.bounds.html", "univariate/generated/generated/arch.univariate.EWMAVariance.compute_variance.html", "univariate/generated/generated/arch.univariate.EWMAVariance.constraints.html", "univariate/generated/generated/arch.univariate.EWMAVariance.forecast.html", "univariate/generated/generated/arch.univariate.EWMAVariance.name.html", "univariate/generated/generated/arch.univariate.EWMAVariance.num_params.html", "univariate/generated/generated/arch.univariate.EWMAVariance.parameter_names.html", "univariate/generated/generated/arch.univariate.EWMAVariance.simulate.html", "univariate/generated/generated/arch.univariate.EWMAVariance.start.html", "univariate/generated/generated/arch.univariate.EWMAVariance.starting_values.html", "univariate/generated/generated/arch.univariate.EWMAVariance.stop.html", "univariate/generated/generated/arch.univariate.EWMAVariance.update.html", "univariate/generated/generated/arch.univariate.EWMAVariance.updateable.html", "univariate/generated/generated/arch.univariate.EWMAVariance.variance_bounds.html", "univariate/generated/generated/arch.univariate.EWMAVariance.volatility_updater.html", "univariate/generated/generated/arch.univariate.FIGARCH.backcast.html", "univariate/generated/generated/arch.univariate.FIGARCH.backcast_transform.html", "univariate/generated/generated/arch.univariate.FIGARCH.bounds.html", "univariate/generated/generated/arch.univariate.FIGARCH.compute_variance.html", "univariate/generated/generated/arch.univariate.FIGARCH.constraints.html", "univariate/generated/generated/arch.univariate.FIGARCH.forecast.html", "univariate/generated/generated/arch.univariate.FIGARCH.name.html", "univariate/generated/generated/arch.univariate.FIGARCH.num_params.html", "univariate/generated/generated/arch.univariate.FIGARCH.parameter_names.html", "univariate/generated/generated/arch.univariate.FIGARCH.simulate.html", "univariate/generated/generated/arch.univariate.FIGARCH.start.html", "univariate/generated/generated/arch.univariate.FIGARCH.starting_values.html", "univariate/generated/generated/arch.univariate.FIGARCH.stop.html", "univariate/generated/generated/arch.univariate.FIGARCH.truncation.html", "univariate/generated/generated/arch.univariate.FIGARCH.update.html", "univariate/generated/generated/arch.univariate.FIGARCH.updateable.html", "univariate/generated/generated/arch.univariate.FIGARCH.variance_bounds.html", "univariate/generated/generated/arch.univariate.FIGARCH.volatility_updater.html", "univariate/generated/generated/arch.univariate.FixedVariance.backcast.html", "univariate/generated/generated/arch.univariate.FixedVariance.backcast_transform.html", "univariate/generated/generated/arch.univariate.FixedVariance.bounds.html", "univariate/generated/generated/arch.univariate.FixedVariance.compute_variance.html", "univariate/generated/generated/arch.univariate.FixedVariance.constraints.html", "univariate/generated/generated/arch.univariate.FixedVariance.forecast.html", "univariate/generated/generated/arch.univariate.FixedVariance.name.html", "univariate/generated/generated/arch.univariate.FixedVariance.num_params.html", "univariate/generated/generated/arch.univariate.FixedVariance.parameter_names.html", "univariate/generated/generated/arch.univariate.FixedVariance.simulate.html", "univariate/generated/generated/arch.univariate.FixedVariance.start.html", "univariate/generated/generated/arch.univariate.FixedVariance.starting_values.html", "univariate/generated/generated/arch.univariate.FixedVariance.stop.html", "univariate/generated/generated/arch.univariate.FixedVariance.update.html", "univariate/generated/generated/arch.univariate.FixedVariance.updateable.html", "univariate/generated/generated/arch.univariate.FixedVariance.variance_bounds.html", "univariate/generated/generated/arch.univariate.FixedVariance.volatility_updater.html", "univariate/generated/generated/arch.univariate.GARCH.backcast.html", "univariate/generated/generated/arch.univariate.GARCH.backcast_transform.html", "univariate/generated/generated/arch.univariate.GARCH.bounds.html", "univariate/generated/generated/arch.univariate.GARCH.compute_variance.html", "univariate/generated/generated/arch.univariate.GARCH.constraints.html", "univariate/generated/generated/arch.univariate.GARCH.forecast.html", "univariate/generated/generated/arch.univariate.GARCH.name.html", "univariate/generated/generated/arch.univariate.GARCH.num_params.html", "univariate/generated/generated/arch.univariate.GARCH.parameter_names.html", "univariate/generated/generated/arch.univariate.GARCH.simulate.html", "univariate/generated/generated/arch.univariate.GARCH.start.html", "univariate/generated/generated/arch.univariate.GARCH.starting_values.html", "univariate/generated/generated/arch.univariate.GARCH.stop.html", "univariate/generated/generated/arch.univariate.GARCH.update.html", "univariate/generated/generated/arch.univariate.GARCH.updateable.html", "univariate/generated/generated/arch.univariate.GARCH.variance_bounds.html", "univariate/generated/generated/arch.univariate.GARCH.volatility_updater.html", "univariate/generated/generated/arch.univariate.GeneralizedError.bounds.html", "univariate/generated/generated/arch.univariate.GeneralizedError.cdf.html", "univariate/generated/generated/arch.univariate.GeneralizedError.constraints.html", "univariate/generated/generated/arch.univariate.GeneralizedError.generator.html", "univariate/generated/generated/arch.univariate.GeneralizedError.loglikelihood.html", "univariate/generated/generated/arch.univariate.GeneralizedError.moment.html", "univariate/generated/generated/arch.univariate.GeneralizedError.name.html", "univariate/generated/generated/arch.univariate.GeneralizedError.parameter_names.html", "univariate/generated/generated/arch.univariate.GeneralizedError.partial_moment.html", "univariate/generated/generated/arch.univariate.GeneralizedError.ppf.html", "univariate/generated/generated/arch.univariate.GeneralizedError.random_state.html", "univariate/generated/generated/arch.univariate.GeneralizedError.simulate.html", "univariate/generated/generated/arch.univariate.GeneralizedError.starting_values.html", "univariate/generated/generated/arch.univariate.HARCH.backcast.html", "univariate/generated/generated/arch.univariate.HARCH.backcast_transform.html", "univariate/generated/generated/arch.univariate.HARCH.bounds.html", "univariate/generated/generated/arch.univariate.HARCH.compute_variance.html", "univariate/generated/generated/arch.univariate.HARCH.constraints.html", "univariate/generated/generated/arch.univariate.HARCH.forecast.html", "univariate/generated/generated/arch.univariate.HARCH.name.html", "univariate/generated/generated/arch.univariate.HARCH.num_params.html", "univariate/generated/generated/arch.univariate.HARCH.parameter_names.html", "univariate/generated/generated/arch.univariate.HARCH.simulate.html", "univariate/generated/generated/arch.univariate.HARCH.start.html", "univariate/generated/generated/arch.univariate.HARCH.starting_values.html", "univariate/generated/generated/arch.univariate.HARCH.stop.html", "univariate/generated/generated/arch.univariate.HARCH.update.html", "univariate/generated/generated/arch.univariate.HARCH.updateable.html", "univariate/generated/generated/arch.univariate.HARCH.variance_bounds.html", "univariate/generated/generated/arch.univariate.HARCH.volatility_updater.html", "univariate/generated/generated/arch.univariate.HARX.bounds.html", "univariate/generated/generated/arch.univariate.HARX.compute_param_cov.html", "univariate/generated/generated/arch.univariate.HARX.constraints.html", "univariate/generated/generated/arch.univariate.HARX.distribution.html", "univariate/generated/generated/arch.univariate.HARX.fit.html", "univariate/generated/generated/arch.univariate.HARX.fix.html", "univariate/generated/generated/arch.univariate.HARX.forecast.html", "univariate/generated/generated/arch.univariate.HARX.name.html", "univariate/generated/generated/arch.univariate.HARX.num_params.html", "univariate/generated/generated/arch.univariate.HARX.parameter_names.html", "univariate/generated/generated/arch.univariate.HARX.resids.html", "univariate/generated/generated/arch.univariate.HARX.simulate.html", "univariate/generated/generated/arch.univariate.HARX.starting_values.html", "univariate/generated/generated/arch.univariate.HARX.volatility.html", "univariate/generated/generated/arch.univariate.HARX.x.html", "univariate/generated/generated/arch.univariate.HARX.y.html", "univariate/generated/generated/arch.univariate.LS.bounds.html", "univariate/generated/generated/arch.univariate.LS.compute_param_cov.html", "univariate/generated/generated/arch.univariate.LS.constraints.html", "univariate/generated/generated/arch.univariate.LS.distribution.html", "univariate/generated/generated/arch.univariate.LS.fit.html", "univariate/generated/generated/arch.univariate.LS.fix.html", "univariate/generated/generated/arch.univariate.LS.forecast.html", "univariate/generated/generated/arch.univariate.LS.name.html", "univariate/generated/generated/arch.univariate.LS.num_params.html", "univariate/generated/generated/arch.univariate.LS.parameter_names.html", "univariate/generated/generated/arch.univariate.LS.resids.html", "univariate/generated/generated/arch.univariate.LS.simulate.html", "univariate/generated/generated/arch.univariate.LS.starting_values.html", "univariate/generated/generated/arch.univariate.LS.volatility.html", "univariate/generated/generated/arch.univariate.LS.x.html", "univariate/generated/generated/arch.univariate.LS.y.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.backcast.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.backcast_transform.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.bounds.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.compute_variance.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.constraints.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.forecast.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.name.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.num_params.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.parameter_names.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.simulate.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.start.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.starting_values.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.stop.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.update.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.updateable.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.variance_bounds.html", "univariate/generated/generated/arch.univariate.MIDASHyperbolic.volatility_updater.html", "univariate/generated/generated/arch.univariate.Normal.bounds.html", "univariate/generated/generated/arch.univariate.Normal.cdf.html", "univariate/generated/generated/arch.univariate.Normal.constraints.html", "univariate/generated/generated/arch.univariate.Normal.generator.html", "univariate/generated/generated/arch.univariate.Normal.loglikelihood.html", "univariate/generated/generated/arch.univariate.Normal.moment.html", "univariate/generated/generated/arch.univariate.Normal.name.html", "univariate/generated/generated/arch.univariate.Normal.parameter_names.html", "univariate/generated/generated/arch.univariate.Normal.partial_moment.html", "univariate/generated/generated/arch.univariate.Normal.ppf.html", "univariate/generated/generated/arch.univariate.Normal.random_state.html", "univariate/generated/generated/arch.univariate.Normal.simulate.html", "univariate/generated/generated/arch.univariate.Normal.starting_values.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.backcast.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.backcast_transform.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.bounds.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.compute_variance.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.constraints.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.forecast.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.name.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.num_params.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.parameter_names.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.simulate.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.start.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.starting_values.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.stop.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.update.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.updateable.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.variance_bounds.html", "univariate/generated/generated/arch.univariate.RiskMetrics2006.volatility_updater.html", "univariate/generated/generated/arch.univariate.SkewStudent.bounds.html", "univariate/generated/generated/arch.univariate.SkewStudent.cdf.html", "univariate/generated/generated/arch.univariate.SkewStudent.constraints.html", "univariate/generated/generated/arch.univariate.SkewStudent.generator.html", "univariate/generated/generated/arch.univariate.SkewStudent.loglikelihood.html", "univariate/generated/generated/arch.univariate.SkewStudent.moment.html", "univariate/generated/generated/arch.univariate.SkewStudent.name.html", "univariate/generated/generated/arch.univariate.SkewStudent.parameter_names.html", "univariate/generated/generated/arch.univariate.SkewStudent.partial_moment.html", "univariate/generated/generated/arch.univariate.SkewStudent.ppf.html", "univariate/generated/generated/arch.univariate.SkewStudent.random_state.html", "univariate/generated/generated/arch.univariate.SkewStudent.simulate.html", "univariate/generated/generated/arch.univariate.SkewStudent.starting_values.html", "univariate/generated/generated/arch.univariate.StudentsT.bounds.html", "univariate/generated/generated/arch.univariate.StudentsT.cdf.html", "univariate/generated/generated/arch.univariate.StudentsT.constraints.html", "univariate/generated/generated/arch.univariate.StudentsT.generator.html", "univariate/generated/generated/arch.univariate.StudentsT.loglikelihood.html", "univariate/generated/generated/arch.univariate.StudentsT.moment.html", "univariate/generated/generated/arch.univariate.StudentsT.name.html", "univariate/generated/generated/arch.univariate.StudentsT.parameter_names.html", "univariate/generated/generated/arch.univariate.StudentsT.partial_moment.html", "univariate/generated/generated/arch.univariate.StudentsT.ppf.html", "univariate/generated/generated/arch.univariate.StudentsT.random_state.html", "univariate/generated/generated/arch.univariate.StudentsT.simulate.html", "univariate/generated/generated/arch.univariate.StudentsT.starting_values.html", "univariate/generated/generated/arch.univariate.ZeroMean.bounds.html", "univariate/generated/generated/arch.univariate.ZeroMean.compute_param_cov.html", "univariate/generated/generated/arch.univariate.ZeroMean.constraints.html", "univariate/generated/generated/arch.univariate.ZeroMean.distribution.html", "univariate/generated/generated/arch.univariate.ZeroMean.fit.html", "univariate/generated/generated/arch.univariate.ZeroMean.fix.html", "univariate/generated/generated/arch.univariate.ZeroMean.forecast.html", "univariate/generated/generated/arch.univariate.ZeroMean.name.html", "univariate/generated/generated/arch.univariate.ZeroMean.num_params.html", "univariate/generated/generated/arch.univariate.ZeroMean.parameter_names.html", "univariate/generated/generated/arch.univariate.ZeroMean.resids.html", "univariate/generated/generated/arch.univariate.ZeroMean.simulate.html", "univariate/generated/generated/arch.univariate.ZeroMean.starting_values.html", "univariate/generated/generated/arch.univariate.ZeroMean.volatility.html", "univariate/generated/generated/arch.univariate.ZeroMean.x.html", "univariate/generated/generated/arch.univariate.ZeroMean.y.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.bounds.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.compute_param_cov.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.constraints.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.distribution.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.fit.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.fix.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.forecast.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.name.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.num_params.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.parameter_names.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.resids.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.simulate.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.starting_values.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.volatility.html", "univariate/generated/generated/arch.univariate.base.ARCHModel.y.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.aic.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.arch_lm_test.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.bic.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.conditional_volatility.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.forecast.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.hedgehog_plot.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.loglikelihood.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.model.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.nobs.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.num_params.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.params.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.plot.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.resid.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.std_resid.html", "univariate/generated/generated/arch.univariate.base.ARCHModelFixedResult.summary.html", "univariate/generated/generated/arch.univariate.base.ARCHModelForecast.mean.html", "univariate/generated/generated/arch.univariate.base.ARCHModelForecast.residual_variance.html", "univariate/generated/generated/arch.univariate.base.ARCHModelForecast.simulations.html", "univariate/generated/generated/arch.univariate.base.ARCHModelForecast.variance.html", "univariate/generated/generated/arch.univariate.base.ARCHModelForecastSimulation.index.html", "univariate/generated/generated/arch.univariate.base.ARCHModelForecastSimulation.residual_variances.html", "univariate/generated/generated/arch.univariate.base.ARCHModelForecastSimulation.residuals.html", "univariate/generated/generated/arch.univariate.base.ARCHModelForecastSimulation.values.html", "univariate/generated/generated/arch.univariate.base.ARCHModelForecastSimulation.variances.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.aic.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.arch_lm_test.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.bic.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.conditional_volatility.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.conf_int.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.convergence_flag.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.fit_start.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.fit_stop.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.forecast.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.hedgehog_plot.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.loglikelihood.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.model.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.nobs.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.num_params.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.optimization_result.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.param_cov.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.params.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.plot.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.pvalues.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.resid.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.rsquared.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.rsquared_adj.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.scale.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.std_err.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.std_resid.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.summary.html", "univariate/generated/generated/arch.univariate.base.ARCHModelResult.tvalues.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.bounds.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.cdf.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.constraints.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.generator.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.loglikelihood.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.moment.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.name.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.parameter_names.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.partial_moment.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.ppf.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.random_state.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.simulate.html", "univariate/generated/generated/arch.univariate.distribution.Distribution.starting_values.html", "univariate/generated/generated/arch.univariate.recursions_python.VolatilityUpdater.initialize_update.html", "univariate/generated/generated/arch.univariate.recursions_python.VolatilityUpdater.update.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.backcast.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.backcast_transform.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.bounds.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.compute_variance.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.constraints.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.forecast.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.name.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.num_params.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.parameter_names.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.simulate.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.start.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.starting_values.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.stop.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.update.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.updateable.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.variance_bounds.html", "univariate/generated/generated/arch.univariate.volatility.VolatilityProcess.volatility_updater.html", "univariate/introduction.html", "univariate/mean.html", "univariate/results.html", "univariate/univariate.html", "univariate/univariate_forecasting_with_exogenous_variables.html", "univariate/univariate_using_fixed_variance.html", "univariate/univariate_volatility_forecasting.html", "univariate/univariate_volatility_modeling.html", "univariate/univariate_volatility_scenarios.html", "univariate/utility.html", "univariate/volatility.html"], "envversion": {"nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1}, "indexentries": {"arch.bootstrap": [[2, "module-arch.bootstrap", false]], "module": [[2, "module-arch.bootstrap", false]]}, "objects": {"arch": [[2, 0, 0, 1, "bootstrap", ""], [419, 0, 0, 1, "unitroot", ""]], "arch.bootstrap": [[5, 1, 1, 0, "CircularBlockBootstrap", "Bootstrap using blocks of the same length with end-to-start wrap around"], [6, 1, 1, 0, "IIDBootstrap", "Bootstrap using uniform resampling"], [7, 1, 1, 0, "IndependentSamplesBootstrap", "Bootstrap where each input is independently resampled"], [239, 1, 1, 0, "MCS", "Model Confidence Set (MCS) of Hansen, Lunde and Nason."], [8, 1, 1, 0, "MovingBlockBootstrap", "Bootstrap using blocks of the same length without wrap around"], [240, 1, 1, 0, "SPA", "Test of Superior Predictive Ability (SPA) of White and Hansen."], [9, 1, 1, 0, "StationaryBootstrap", "Politis and Romano (1994) bootstrap with expon distributed block sizes"], [241, 1, 1, 0, "StepM", "StepM multiple comparison procedure of Romano and Wolf."], [259, 0, 0, 1, "multiple_comparison", ""], [10, 6, 1, 0, "optimal_block_length", "Estimate optimal window length for time-series bootstraps"]], "arch.bootstrap.CircularBlockBootstrap": [[11, 3, 1, 0, "apply", "Applies a function to bootstrap replicated data"], [12, 3, 1, 0, "bootstrap", "Iterator for use when bootstrapping"], [13, 3, 1, 0, "clone", "Clones the bootstrap using different data with a fresh prng."], [14, 3, 1, 0, "conf_int", "Function the computes parameter values.  See Notes for requirements"], [15, 3, 1, 0, "cov", "Compute parameter covariance using bootstrap"], [5, 4, 1, 0, "data", "Two-element tuple with the pos_data in the first position and kw_data in the second (pos_data, kw_data)"], [16, 5, 1, 0, "generator", "Set or get the instance PRNG"], [17, 3, 1, 0, "get_state", "Gets the state of the bootstrap's random number generator"], [18, 5, 1, 0, "index", "The current index of the bootstrap"], [5, 4, 1, 0, "kw_data", "Dictionary containing the keyword arguments"], [5, 4, 1, 0, "pos_data", "Tuple containing the positional arguments (in the order entered)"], [19, 5, 1, 0, "random_state", "Set or get the instance random state"], [20, 3, 1, 0, "reset", "Resets the bootstrap to either its initial state or the last seed."], [21, 3, 1, 0, "seed", "Reseeds the bootstrap's random number generator"], [22, 3, 1, 0, "set_state", "Sets the state of the bootstrap's random number generator"], [23, 5, 1, 0, "state", "Set or get the generator's state"], [24, 3, 1, 0, "update_indices", "Update indices for the next iteration of the bootstrap.  This must be overridden when creating new bootstraps."], [25, 3, 1, 0, "var", "Compute parameter variance using bootstrap"]], "arch.bootstrap.CircularBlockBootstrap.__init__": [[5, 2, 2, 0, "args", "Positional arguments to bootstrap"], [5, 2, 2, 0, "block_size", "Size of block to use"], [5, 2, 2, 0, "kwargs", "Keyword arguments to bootstrap"], [5, 2, 2, 0, "random_state", "RandomState to use to ensure reproducable results."], [5, 2, 2, 0, "seed", "Seed to use to ensure reproducable results."]], "arch.bootstrap.CircularBlockBootstrap.apply": [[11, 2, 2, 0, "extra_kwargs", "Extra keyword arguments to use when calling func."], [11, 2, 2, 0, "func", "Function the computes parameter values."], [11, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.CircularBlockBootstrap.bootstrap": [[12, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.CircularBlockBootstrap.clone": [[13, 2, 2, 0, "args", "Positional arguments to bootstrap"], [13, 2, 2, 0, "kwargs", "Keyword arguments to bootstrap"], [13, 2, 2, 0, "seed", "The seed value to pass to the closed generator"]], "arch.bootstrap.CircularBlockBootstrap.conf_int": [[14, 2, 2, 0, "extra_kwargs", "Extra keyword arguments to use when calling func and std_err_func, when appropriate"], [14, 2, 2, 0, "func", "Function the computes parameter values."], [14, 2, 2, 0, "method", "One of 'basic', 'percentile', 'studentized', 'norm' (identical to 'var', 'cov'), 'bc' (identical to 'debiased', 'bias-corrected'), or 'bca'"], [14, 2, 2, 0, "reps", "Number of bootstrap replications"], [14, 2, 2, 0, "reuse", "Flag indicating whether to reuse previously computed bootstrap results."], [14, 2, 2, 0, "sampling", "Type of sampling to use: 'nonparametric', 'semi-parametric' (or 'semi') or 'parametric'."], [14, 2, 2, 0, "size", "Coverage of confidence interval"], [14, 2, 2, 0, "std_err_func", "Function to use when standardizing estimated parameters when using the studentized bootstrap."], [14, 2, 2, 0, "studentize_reps", "Number of bootstraps to use in the inner bootstrap when using the studentized bootstrap."], [14, 2, 2, 0, "tail", "One of 'two', 'upper' or 'lower'."]], "arch.bootstrap.CircularBlockBootstrap.cov": [[15, 2, 2, 0, "extra_kwargs", "Dictionary of extra keyword arguments to pass to func"], [15, 2, 2, 0, "func", "Callable function that returns the statistic of interest as a 1-d array"], [15, 2, 2, 0, "recenter", "Whether to center the bootstrap variance estimator on the average of the bootstrap samples (True) or to center on the original sample estimate (False)."], [15, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.CircularBlockBootstrap.reset": [[20, 2, 2, 0, "use_seed", "Flag indicating whether to use the last seed if provided."]], "arch.bootstrap.CircularBlockBootstrap.seed": [[21, 2, 2, 0, "value", "Value to use as the seed."]], "arch.bootstrap.CircularBlockBootstrap.set_state": [[22, 2, 2, 0, "state", "Dictionary or tuple containing the state."]], "arch.bootstrap.CircularBlockBootstrap.var": [[25, 2, 2, 0, "extra_kwargs", "Dictionary of extra keyword arguments to pass to func"], [25, 2, 2, 0, "func", "Callable function that returns the statistic of interest as a 1-d array"], [25, 2, 2, 0, "recenter", "Whether to center the bootstrap variance estimator on the average of the bootstrap samples (True) or to center on the original sample estimate (False)."], [25, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.IIDBootstrap": [[26, 3, 1, 0, "apply", "Applies a function to bootstrap replicated data"], [27, 3, 1, 0, "bootstrap", "Iterator for use when bootstrapping"], [28, 3, 1, 0, "clone", "Clones the bootstrap using different data with a fresh prng."], [29, 3, 1, 0, "conf_int", "Function the computes parameter values.  See Notes for requirements"], [30, 3, 1, 0, "cov", "Compute parameter covariance using bootstrap"], [6, 4, 1, 0, "data", "Two-element tuple with the pos_data in the first position and kw_data in the second (pos_data, kw_data)"], [31, 5, 1, 0, "generator", "Set or get the instance PRNG"], [32, 3, 1, 0, "get_state", "Gets the state of the bootstrap's random number generator"], [33, 5, 1, 0, "index", "The current index of the bootstrap"], [6, 4, 1, 0, "kw_data", "Dictionary containing the keyword arguments"], [6, 4, 1, 0, "pos_data", "Tuple containing the positional arguments (in the order entered)"], [34, 5, 1, 0, "random_state", "Set or get the instance random state"], [35, 3, 1, 0, "reset", "Resets the bootstrap to either its initial state or the last seed."], [36, 3, 1, 0, "seed", "Reseeds the bootstrap's random number generator"], [37, 3, 1, 0, "set_state", "Sets the state of the bootstrap's random number generator"], [38, 5, 1, 0, "state", "Set or get the generator's state"], [39, 3, 1, 0, "update_indices", "Update indices for the next iteration of the bootstrap.  This must be overridden when creating new bootstraps."], [40, 3, 1, 0, "var", "Compute parameter variance using bootstrap"]], "arch.bootstrap.IIDBootstrap.__init__": [[6, 2, 2, 0, "args", "Positional arguments to bootstrap"], [6, 2, 2, 0, "kwargs", "Keyword arguments to bootstrap"], [6, 2, 2, 0, "random_state", "RandomState to use to ensure reproducable results."], [6, 2, 2, 0, "seed", "Seed to use to ensure reproducable results."]], "arch.bootstrap.IIDBootstrap.apply": [[26, 2, 2, 0, "extra_kwargs", "Extra keyword arguments to use when calling func."], [26, 2, 2, 0, "func", "Function the computes parameter values."], [26, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.IIDBootstrap.bootstrap": [[27, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.IIDBootstrap.clone": [[28, 2, 2, 0, "args", "Positional arguments to bootstrap"], [28, 2, 2, 0, "kwargs", "Keyword arguments to bootstrap"], [28, 2, 2, 0, "seed", "The seed value to pass to the closed generator"]], "arch.bootstrap.IIDBootstrap.conf_int": [[29, 2, 2, 0, "extra_kwargs", "Extra keyword arguments to use when calling func and std_err_func, when appropriate"], [29, 2, 2, 0, "func", "Function the computes parameter values."], [29, 2, 2, 0, "method", "One of 'basic', 'percentile', 'studentized', 'norm' (identical to 'var', 'cov'), 'bc' (identical to 'debiased', 'bias-corrected'), or 'bca'"], [29, 2, 2, 0, "reps", "Number of bootstrap replications"], [29, 2, 2, 0, "reuse", "Flag indicating whether to reuse previously computed bootstrap results."], [29, 2, 2, 0, "sampling", "Type of sampling to use: 'nonparametric', 'semi-parametric' (or 'semi') or 'parametric'."], [29, 2, 2, 0, "size", "Coverage of confidence interval"], [29, 2, 2, 0, "std_err_func", "Function to use when standardizing estimated parameters when using the studentized bootstrap."], [29, 2, 2, 0, "studentize_reps", "Number of bootstraps to use in the inner bootstrap when using the studentized bootstrap."], [29, 2, 2, 0, "tail", "One of 'two', 'upper' or 'lower'."]], "arch.bootstrap.IIDBootstrap.cov": [[30, 2, 2, 0, "extra_kwargs", "Dictionary of extra keyword arguments to pass to func"], [30, 2, 2, 0, "func", "Callable function that returns the statistic of interest as a 1-d array"], [30, 2, 2, 0, "recenter", "Whether to center the bootstrap variance estimator on the average of the bootstrap samples (True) or to center on the original sample estimate (False)."], [30, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.IIDBootstrap.reset": [[35, 2, 2, 0, "use_seed", "Flag indicating whether to use the last seed if provided."]], "arch.bootstrap.IIDBootstrap.seed": [[36, 2, 2, 0, "value", "Value to use as the seed."]], "arch.bootstrap.IIDBootstrap.set_state": [[37, 2, 2, 0, "state", "Dictionary or tuple containing the state."]], "arch.bootstrap.IIDBootstrap.var": [[40, 2, 2, 0, "extra_kwargs", "Dictionary of extra keyword arguments to pass to func"], [40, 2, 2, 0, "func", "Callable function that returns the statistic of interest as a 1-d array"], [40, 2, 2, 0, "recenter", "Whether to center the bootstrap variance estimator on the average of the bootstrap samples (True) or to center on the original sample estimate (False)."], [40, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.IndependentSamplesBootstrap": [[41, 3, 1, 0, "apply", "Applies a function to bootstrap replicated data"], [42, 3, 1, 0, "bootstrap", "Iterator for use when bootstrapping"], [43, 3, 1, 0, "clone", "Clones the bootstrap using different data with a fresh prng."], [44, 3, 1, 0, "conf_int", "Function the computes parameter values.  See Notes for requirements"], [45, 3, 1, 0, "cov", "Compute parameter covariance using bootstrap"], [7, 4, 1, 0, "data", "Two-element tuple with the pos_data in the first position and kw_data in the second (pos_data, kw_data)"], [46, 5, 1, 0, "generator", "Set or get the instance PRNG"], [47, 3, 1, 0, "get_state", "Gets the state of the bootstrap's random number generator"], [48, 5, 1, 0, "index", "Returns the current index of the bootstrap"], [7, 4, 1, 0, "kw_data", "Dictionary containing the keyword arguments"], [7, 4, 1, 0, "pos_data", "Tuple containing the positional arguments (in the order entered)"], [49, 5, 1, 0, "random_state", "Set or get the instance random state"], [50, 3, 1, 0, "reset", "Resets the bootstrap to either its initial state or the last seed."], [51, 3, 1, 0, "seed", "Reseeds the bootstrap's random number generator"], [52, 3, 1, 0, "set_state", "Sets the state of the bootstrap's random number generator"], [53, 5, 1, 0, "state", "Set or get the generator's state"], [54, 3, 1, 0, "update_indices", "Update indices for the next iteration of the bootstrap.  This must be overridden when creating new bootstraps."], [55, 3, 1, 0, "var", "Compute parameter variance using bootstrap"]], "arch.bootstrap.IndependentSamplesBootstrap.__init__": [[7, 2, 2, 0, "args", "Positional arguments to bootstrap"], [7, 2, 2, 0, "kwargs", "Keyword arguments to bootstrap"], [7, 2, 2, "arch.bootstrap.IndependentSamplesBootstrap", "random_state", "Bootstrap where each input is independently resampled"], [7, 2, 2, "arch.bootstrap.IndependentSamplesBootstrap", "seed", "Bootstrap where each input is independently resampled"]], "arch.bootstrap.IndependentSamplesBootstrap.apply": [[41, 2, 2, 0, "extra_kwargs", "Extra keyword arguments to use when calling func."], [41, 2, 2, 0, "func", "Function the computes parameter values."], [41, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.IndependentSamplesBootstrap.bootstrap": [[42, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.IndependentSamplesBootstrap.clone": [[43, 2, 2, 0, "args", "Positional arguments to bootstrap"], [43, 2, 2, 0, "kwargs", "Keyword arguments to bootstrap"], [43, 2, 2, 0, "seed", "The seed value to pass to the closed generator"]], "arch.bootstrap.IndependentSamplesBootstrap.conf_int": [[44, 2, 2, 0, "extra_kwargs", "Extra keyword arguments to use when calling func and std_err_func, when appropriate"], [44, 2, 2, 0, "func", "Function the computes parameter values."], [44, 2, 2, 0, "method", "One of 'basic', 'percentile', 'studentized', 'norm' (identical to 'var', 'cov'), 'bc' (identical to 'debiased', 'bias-corrected'), or 'bca'"], [44, 2, 2, 0, "reps", "Number of bootstrap replications"], [44, 2, 2, 0, "reuse", "Flag indicating whether to reuse previously computed bootstrap results."], [44, 2, 2, 0, "sampling", "Type of sampling to use: 'nonparametric', 'semi-parametric' (or 'semi') or 'parametric'."], [44, 2, 2, 0, "size", "Coverage of confidence interval"], [44, 2, 2, 0, "std_err_func", "Function to use when standardizing estimated parameters when using the studentized bootstrap."], [44, 2, 2, 0, "studentize_reps", "Number of bootstraps to use in the inner bootstrap when using the studentized bootstrap."], [44, 2, 2, 0, "tail", "One of 'two', 'upper' or 'lower'."]], "arch.bootstrap.IndependentSamplesBootstrap.cov": [[45, 2, 2, 0, "extra_kwargs", "Dictionary of extra keyword arguments to pass to func"], [45, 2, 2, 0, "func", "Callable function that returns the statistic of interest as a 1-d array"], [45, 2, 2, 0, "recenter", "Whether to center the bootstrap variance estimator on the average of the bootstrap samples (True) or to center on the original sample estimate (False)."], [45, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.IndependentSamplesBootstrap.reset": [[50, 2, 2, 0, "use_seed", "Flag indicating whether to use the last seed if provided."]], "arch.bootstrap.IndependentSamplesBootstrap.seed": [[51, 2, 2, 0, "value", "Value to use as the seed."]], "arch.bootstrap.IndependentSamplesBootstrap.set_state": [[52, 2, 2, 0, "state", "Dictionary or tuple containing the state."]], "arch.bootstrap.IndependentSamplesBootstrap.var": [[55, 2, 2, 0, "extra_kwargs", "Dictionary of extra keyword arguments to pass to func"], [55, 2, 2, 0, "func", "Callable function that returns the statistic of interest as a 1-d array"], [55, 2, 2, 0, "recenter", "Whether to center the bootstrap variance estimator on the average of the bootstrap samples (True) or to center on the original sample estimate (False)."], [55, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.MCS": [[242, 3, 1, 0, "compute", "Compute the set of models in the confidence set."], [243, 5, 1, 0, "excluded", "List of model indices that are excluded from the MCS"], [244, 5, 1, 0, "included", "List of model indices that are included in the MCS"], [245, 5, 1, 0, "pvalues", "Model p-values for inclusion in the MCS"], [246, 3, 1, 0, "reset", "Reset the bootstrap to it's initial state."], [247, 3, 1, 0, "seed", "Seed the bootstrap's random number generator"]], "arch.bootstrap.MCS.__init__": [[239, 2, 2, 0, "block_size", "Length of window to use in the bootstrap."], [239, 2, 2, 0, "bootstrap", "Bootstrap to use."], [239, 2, 2, 0, "losses", "T by k array containing losses from a set of models"], [239, 2, 2, 0, "method", "MCS test and elimination implementation method, either 'max' or 'R'. Default is 'R'."], [239, 2, 2, 0, "reps", "Number of bootstrap replications to uses."], [239, 2, 2, 0, "seed", "Seed value to use when creating the bootstrap used in the comparison. If an integer or None, the NumPy default_rng is used with the seed value."], [239, 2, 2, 0, "size", "Value in (0,1) to use as the test size when implementing the mcs."]], "arch.bootstrap.MCS.seed": [[247, 2, 2, 0, "value", "Integer to use as the seed"]], "arch.bootstrap.MovingBlockBootstrap": [[56, 3, 1, 0, "apply", "Applies a function to bootstrap replicated data"], [57, 3, 1, 0, "bootstrap", "Iterator for use when bootstrapping"], [58, 3, 1, 0, "clone", "Clones the bootstrap using different data with a fresh prng."], [59, 3, 1, 0, "conf_int", "Function the computes parameter values.  See Notes for requirements"], [60, 3, 1, 0, "cov", "Compute parameter covariance using bootstrap"], [8, 4, 1, 0, "data", "Two-element tuple with the pos_data in the first position and kw_data in the second (pos_data, kw_data)"], [61, 5, 1, 0, "generator", "Set or get the instance PRNG"], [62, 3, 1, 0, "get_state", "Gets the state of the bootstrap's random number generator"], [63, 5, 1, 0, "index", "The current index of the bootstrap"], [8, 4, 1, 0, "kw_data", "Dictionary containing the keyword arguments"], [8, 4, 1, 0, "pos_data", "Tuple containing the positional arguments (in the order entered)"], [64, 5, 1, 0, "random_state", "Set or get the instance random state"], [65, 3, 1, 0, "reset", "Resets the bootstrap to either its initial state or the last seed."], [66, 3, 1, 0, "seed", "Reseeds the bootstrap's random number generator"], [67, 3, 1, 0, "set_state", "Sets the state of the bootstrap's random number generator"], [68, 5, 1, 0, "state", "Set or get the generator's state"], [69, 3, 1, 0, "update_indices", "Update indices for the next iteration of the bootstrap.  This must be overridden when creating new bootstraps."], [70, 3, 1, 0, "var", "Compute parameter variance using bootstrap"]], "arch.bootstrap.MovingBlockBootstrap.__init__": [[8, 2, 2, 0, "args", "Positional arguments to bootstrap"], [8, 2, 2, 0, "block_size", "Size of block to use"], [8, 2, 2, 0, "kwargs", "Keyword arguments to bootstrap"], [8, 2, 2, 0, "random_state", "RandomState to use to ensure reproducable results."], [8, 2, 2, 0, "seed", "Seed to use to ensure reproducable results."]], "arch.bootstrap.MovingBlockBootstrap.apply": [[56, 2, 2, 0, "extra_kwargs", "Extra keyword arguments to use when calling func."], [56, 2, 2, 0, "func", "Function the computes parameter values."], [56, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.MovingBlockBootstrap.bootstrap": [[57, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.MovingBlockBootstrap.clone": [[58, 2, 2, 0, "args", "Positional arguments to bootstrap"], [58, 2, 2, 0, "kwargs", "Keyword arguments to bootstrap"], [58, 2, 2, 0, "seed", "The seed value to pass to the closed generator"]], "arch.bootstrap.MovingBlockBootstrap.conf_int": [[59, 2, 2, 0, "extra_kwargs", "Extra keyword arguments to use when calling func and std_err_func, when appropriate"], [59, 2, 2, 0, "func", "Function the computes parameter values."], [59, 2, 2, 0, "method", "One of 'basic', 'percentile', 'studentized', 'norm' (identical to 'var', 'cov'), 'bc' (identical to 'debiased', 'bias-corrected'), or 'bca'"], [59, 2, 2, 0, "reps", "Number of bootstrap replications"], [59, 2, 2, 0, "reuse", "Flag indicating whether to reuse previously computed bootstrap results."], [59, 2, 2, 0, "sampling", "Type of sampling to use: 'nonparametric', 'semi-parametric' (or 'semi') or 'parametric'."], [59, 2, 2, 0, "size", "Coverage of confidence interval"], [59, 2, 2, 0, "std_err_func", "Function to use when standardizing estimated parameters when using the studentized bootstrap."], [59, 2, 2, 0, "studentize_reps", "Number of bootstraps to use in the inner bootstrap when using the studentized bootstrap."], [59, 2, 2, 0, "tail", "One of 'two', 'upper' or 'lower'."]], "arch.bootstrap.MovingBlockBootstrap.cov": [[60, 2, 2, 0, "extra_kwargs", "Dictionary of extra keyword arguments to pass to func"], [60, 2, 2, 0, "func", "Callable function that returns the statistic of interest as a 1-d array"], [60, 2, 2, 0, "recenter", "Whether to center the bootstrap variance estimator on the average of the bootstrap samples (True) or to center on the original sample estimate (False)."], [60, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.MovingBlockBootstrap.reset": [[65, 2, 2, 0, "use_seed", "Flag indicating whether to use the last seed if provided."]], "arch.bootstrap.MovingBlockBootstrap.seed": [[66, 2, 2, 0, "value", "Value to use as the seed."]], "arch.bootstrap.MovingBlockBootstrap.set_state": [[67, 2, 2, 0, "state", "Dictionary or tuple containing the state."]], "arch.bootstrap.MovingBlockBootstrap.var": [[70, 2, 2, 0, "extra_kwargs", "Dictionary of extra keyword arguments to pass to func"], [70, 2, 2, 0, "func", "Callable function that returns the statistic of interest as a 1-d array"], [70, 2, 2, 0, "recenter", "Whether to center the bootstrap variance estimator on the average of the bootstrap samples (True) or to center on the original sample estimate (False)."], [70, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.SPA": [[248, 3, 1, 0, "better_models", "Returns set of models rejected as being equal-or-worse than the benchmark"], [249, 3, 1, 0, "compute", "Compute the bootstrap pvalue."], [250, 3, 1, 0, "critical_values", "Returns data-dependent critical values"], [251, 5, 1, 0, "pvalues", "P-values corresponding to the lower, consistent and upper p-values."], [252, 3, 1, 0, "reset", "Reset the bootstrap to its initial state."], [253, 3, 1, 0, "seed", "Seed the bootstrap's random number generator"], [254, 3, 1, 0, "subset", "Sets a list of active models to run the SPA on.  Primarily for internal use."]], "arch.bootstrap.SPA.__init__": [[240, 2, 2, 0, "benchmark", "T element array of benchmark model losses"], [240, 2, 2, 0, "block_size", "Length of window to use in the bootstrap."], [240, 2, 2, 0, "bootstrap", "Bootstrap to use."], [240, 2, 2, 0, "models", "T  by k element array of alternative model losses"], [240, 2, 2, 0, "nested", "Flag indicating to use a nested bootstrap to compute variances for studentization."], [240, 2, 2, 0, "reps", "Number of bootstrap replications to uses."], [240, 2, 2, 0, "seed", "Seed value to use when creating the bootstrap used in the comparison. If an integer or None, the NumPy default_rng is used with the seed value."], [240, 2, 2, 0, "studentize", "Flag indicating to studentize loss differentials."]], "arch.bootstrap.SPA.better_models": [[248, 2, 2, 0, "pvalue", "P-value in (0,1) to use when computing superior models"], [248, 2, 2, 0, "pvalue_type", "String in 'lower', 'consistent', or 'upper' indicating which critical value to use."]], "arch.bootstrap.SPA.critical_values": [[250, 2, 2, 0, "pvalue", "P-value in (0,1) to use when computing the critical values."]], "arch.bootstrap.SPA.seed": [[253, 2, 2, 0, "value", "Integer to use as the seed"]], "arch.bootstrap.SPA.subset": [[254, 2, 2, 0, "selector", "Boolean array indicating which columns to use when computing the p-values."]], "arch.bootstrap.StationaryBootstrap": [[71, 3, 1, 0, "apply", "Applies a function to bootstrap replicated data"], [72, 3, 1, 0, "bootstrap", "Iterator for use when bootstrapping"], [73, 3, 1, 0, "clone", "Clones the bootstrap using different data with a fresh prng."], [74, 3, 1, 0, "conf_int", "Function the computes parameter values.  See Notes for requirements"], [75, 3, 1, 0, "cov", "Compute parameter covariance using bootstrap"], [9, 4, 1, 0, "data", "Two-element tuple with the pos_data in the first position and kw_data in the second (pos_data, kw_data)"], [76, 5, 1, 0, "generator", "Set or get the instance PRNG"], [77, 3, 1, 0, "get_state", "Gets the state of the bootstrap's random number generator"], [78, 5, 1, 0, "index", "The current index of the bootstrap"], [9, 4, 1, 0, "kw_data", "Dictionary containing the keyword arguments"], [9, 4, 1, 0, "pos_data", "Tuple containing the positional arguments (in the order entered)"], [79, 5, 1, 0, "random_state", "Set or get the instance random state"], [80, 3, 1, 0, "reset", "Resets the bootstrap to either its initial state or the last seed."], [81, 3, 1, 0, "seed", "Reseeds the bootstrap's random number generator"], [82, 3, 1, 0, "set_state", "Sets the state of the bootstrap's random number generator"], [83, 5, 1, 0, "state", "Set or get the generator's state"], [84, 3, 1, 0, "update_indices", "Update indices for the next iteration of the bootstrap.  This must be overridden when creating new bootstraps."], [85, 3, 1, 0, "var", "Compute parameter variance using bootstrap"]], "arch.bootstrap.StationaryBootstrap.__init__": [[9, 2, 2, 0, "args", "Positional arguments to bootstrap"], [9, 2, 2, 0, "block_size", "Average size of block to use"], [9, 2, 2, 0, "kwargs", "Keyword arguments to bootstrap"], [9, 2, 2, 0, "random_state", "RandomState to use to ensure reproducable results."], [9, 2, 2, 0, "seed", "Seed to use to ensure reproducable results."]], "arch.bootstrap.StationaryBootstrap.apply": [[71, 2, 2, 0, "extra_kwargs", "Extra keyword arguments to use when calling func."], [71, 2, 2, 0, "func", "Function the computes parameter values."], [71, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.StationaryBootstrap.bootstrap": [[72, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.StationaryBootstrap.clone": [[73, 2, 2, 0, "args", "Positional arguments to bootstrap"], [73, 2, 2, 0, "kwargs", "Keyword arguments to bootstrap"], [73, 2, 2, 0, "seed", "The seed value to pass to the closed generator"]], "arch.bootstrap.StationaryBootstrap.conf_int": [[74, 2, 2, 0, "extra_kwargs", "Extra keyword arguments to use when calling func and std_err_func, when appropriate"], [74, 2, 2, 0, "func", "Function the computes parameter values."], [74, 2, 2, 0, "method", "One of 'basic', 'percentile', 'studentized', 'norm' (identical to 'var', 'cov'), 'bc' (identical to 'debiased', 'bias-corrected'), or 'bca'"], [74, 2, 2, 0, "reps", "Number of bootstrap replications"], [74, 2, 2, 0, "reuse", "Flag indicating whether to reuse previously computed bootstrap results."], [74, 2, 2, 0, "sampling", "Type of sampling to use: 'nonparametric', 'semi-parametric' (or 'semi') or 'parametric'."], [74, 2, 2, 0, "size", "Coverage of confidence interval"], [74, 2, 2, 0, "std_err_func", "Function to use when standardizing estimated parameters when using the studentized bootstrap."], [74, 2, 2, 0, "studentize_reps", "Number of bootstraps to use in the inner bootstrap when using the studentized bootstrap."], [74, 2, 2, 0, "tail", "One of 'two', 'upper' or 'lower'."]], "arch.bootstrap.StationaryBootstrap.cov": [[75, 2, 2, 0, "extra_kwargs", "Dictionary of extra keyword arguments to pass to func"], [75, 2, 2, 0, "func", "Callable function that returns the statistic of interest as a 1-d array"], [75, 2, 2, 0, "recenter", "Whether to center the bootstrap variance estimator on the average of the bootstrap samples (True) or to center on the original sample estimate (False)."], [75, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.StationaryBootstrap.reset": [[80, 2, 2, 0, "use_seed", "Flag indicating whether to use the last seed if provided."]], "arch.bootstrap.StationaryBootstrap.seed": [[81, 2, 2, 0, "value", "Value to use as the seed."]], "arch.bootstrap.StationaryBootstrap.set_state": [[82, 2, 2, 0, "state", "Dictionary or tuple containing the state."]], "arch.bootstrap.StationaryBootstrap.var": [[85, 2, 2, 0, "extra_kwargs", "Dictionary of extra keyword arguments to pass to func"], [85, 2, 2, 0, "func", "Callable function that returns the statistic of interest as a 1-d array"], [85, 2, 2, 0, "recenter", "Whether to center the bootstrap variance estimator on the average of the bootstrap samples (True) or to center on the original sample estimate (False)."], [85, 2, 2, 0, "reps", "Number of bootstrap replications"]], "arch.bootstrap.StepM": [[255, 3, 1, 0, "compute", "Compute the set of superior models."], [256, 3, 1, 0, "reset", "Reset the bootstrap to it's initial state."], [257, 3, 1, 0, "seed", "Seed the bootstrap's random number generator"], [258, 5, 1, 0, "superior_models", "List of the indices or column names of the superior models"]], "arch.bootstrap.StepM.__init__": [[241, 2, 2, 0, "benchmark", "T element array of benchmark model losses"], [241, 2, 2, 0, "block_size", "Length of window to use in the bootstrap."], [241, 2, 2, 0, "bootstrap", "Bootstrap to use."], [241, 2, 2, 0, "models", "T by k element array of alternative model losses"], [241, 2, 2, 0, "nested", "Flag indicating to use a nested bootstrap to compute variances for studentization."], [241, 2, 2, 0, "reps", "Number of bootstrap replications to uses."], [241, 2, 2, 0, "seed", "Seed value to use when creating the bootstrap used in the comparison. If an integer or None, the NumPy default_rng is used with the seed value."], [241, 2, 2, 0, "size", "Value in (0,1) to use as the test size when implementing the comparison."], [241, 2, 2, 0, "studentize", "Flag indicating to studentize loss differentials."]], "arch.bootstrap.StepM.seed": [[257, 2, 2, 0, "value", "Integer to use as the seed"]], "arch.bootstrap.optimal_block_length": [[10, 2, 2, 0, "x", "A one-dimensional or two-dimensional array-like."]], "arch.covariance": [[99, 0, 0, 1, "kernel", ""]], "arch.covariance.kernel": [[100, 1, 1, 0, "Andrews", "Alternative name of the QuadraticSpectral covariance estimator."], [101, 1, 1, 0, "Bartlett", "Bartlett's (Newey-West) kernel covariance estimation."], [102, 1, 1, 0, "CovarianceEstimate", "Covariance estimate using a long-run covariance estimator"], [103, 1, 1, 0, "Gallant", "Alternative name for Parzen covariance estimator."], [104, 1, 1, 0, "NeweyWest", "Alternative name for Bartlett covariance estimator."], [105, 1, 1, 0, "Parzen", "Parzen's kernel covariance estimation."], [106, 1, 1, 0, "ParzenCauchy", "Parzen's Cauchy kernel covariance estimation."], [107, 1, 1, 0, "ParzenGeometric", "Parzen's Geometric kernel covariance estimation."], [108, 1, 1, 0, "ParzenRiesz", "Parzen-Reisz kernel covariance estimation."], [109, 1, 1, 0, "QuadraticSpectral", "Quadratic-Spectral (Andrews') kernel covariance estimation."], [110, 1, 1, 0, "TukeyHamming", "Tukey-Hamming kernel covariance estimation."], [111, 1, 1, 0, "TukeyHanning", "Tukey-Hanning kernel covariance estimation."], [112, 1, 1, 0, "TukeyParzen", "Tukey-Parzen kernel covariance estimation."]], "arch.covariance.kernel.Andrews": [[113, 5, 1, 0, "bandwidth", "The bandwidth used by the covariance estimator."], [114, 5, 1, 0, "bandwidth_scale", "The power used in optimal bandwidth calculation."], [115, 5, 1, 0, "centered", "Flag indicating whether the data are centered (demeaned)."], [116, 5, 1, 0, "cov", "The estimated covariances."], [117, 5, 1, 0, "force_int", "Flag indicating whether the bandwidth is restricted to be an integer."], [118, 5, 1, 0, "kernel_const", "The constant used in optimal bandwidth calculation."], [119, 5, 1, 0, "kernel_weights", "Weights used in covariance calculation."], [120, 5, 1, 0, "name", "The covariance estimator's name."], [121, 5, 1, 0, "opt_bandwidth", "Estimate optimal bandwidth."], [122, 5, 1, 0, "rate", "The optimal rate used in bandwidth selection."]], "arch.covariance.kernel.Andrews.__init__": [[100, 2, 2, "arch.covariance.kernel.Andrews", "bandwidth", "Alternative name of the QuadraticSpectral covariance estimator."], [100, 2, 2, "arch.covariance.kernel.Andrews", "center", "Alternative name of the QuadraticSpectral covariance estimator."], [100, 2, 2, "arch.covariance.kernel.Andrews", "df_adjust", "Alternative name of the QuadraticSpectral covariance estimator."], [100, 2, 2, "arch.covariance.kernel.Andrews", "force_int", "Alternative name of the QuadraticSpectral covariance estimator."], [100, 2, 2, "arch.covariance.kernel.Andrews", "weights", "Alternative name of the QuadraticSpectral covariance estimator."], [100, 2, 2, "arch.covariance.kernel.Andrews", "x", "Alternative name of the QuadraticSpectral covariance estimator."]], "arch.covariance.kernel.Bartlett": [[123, 5, 1, 0, "bandwidth", "The bandwidth used by the covariance estimator."], [124, 5, 1, 0, "bandwidth_scale", "The power used in optimal bandwidth calculation."], [125, 5, 1, 0, "centered", "Flag indicating whether the data are centered (demeaned)."], [126, 5, 1, 0, "cov", "The estimated covariances."], [127, 5, 1, 0, "force_int", "Flag indicating whether the bandwidth is restricted to be an integer."], [128, 5, 1, 0, "kernel_const", "The constant used in optimal bandwidth calculation."], [129, 5, 1, 0, "kernel_weights", "Weights used in covariance calculation."], [130, 5, 1, 0, "name", "The covariance estimator's name."], [131, 5, 1, 0, "opt_bandwidth", "Estimate optimal bandwidth."], [132, 5, 1, 0, "rate", "The optimal rate used in bandwidth selection."]], "arch.covariance.kernel.Bartlett.__init__": [[101, 2, 2, 0, "bandwidth", "The kernel's bandwidth."], [101, 2, 2, 0, "center", "A flag indicating whether x should be demeaned before estimating the covariance."], [101, 2, 2, 0, "df_adjust", "Degrees of freedom to remove when adjusting the covariance."], [101, 2, 2, 0, "force_int", "Force bandwidth to be an integer."], [101, 2, 2, 0, "weights", "An array of weights used to combine when estimating optimal bandwidth. If not provided, a vector of 1s is used."], [101, 2, 2, 0, "x", "The data to use in covariance estimation."]], "arch.covariance.kernel.CovarianceEstimate": [[133, 5, 1, 0, "long_run", "The long-run covariance estimate."], [134, 5, 1, 0, "one_sided", "The one-sided covariance estimate."], [135, 5, 1, 0, "one_sided_strict", "The one-sided strict covariance estimate."], [136, 5, 1, 0, "short_run", "The short-run covariance estimate."]], "arch.covariance.kernel.CovarianceEstimate.__init__": [[102, 2, 2, 0, "columns", "Column labels to use if covariance estimates are returned as DataFrames."], [102, 2, 2, 0, "long_run", "The long-run covariance estimate."], [102, 2, 2, "arch.covariance.kernel.CovarianceEstimate", "one_sided", "Covariance estimate using a long-run covariance estimator"], [102, 2, 2, 0, "one_sided_strict", "The one-sided-strict covariance estimate."], [102, 2, 2, 0, "short_run", "The short-run covariance estimate."]], "arch.covariance.kernel.Gallant": [[137, 5, 1, 0, "bandwidth", "The bandwidth used by the covariance estimator."], [138, 5, 1, 0, "bandwidth_scale", "The power used in optimal bandwidth calculation."], [139, 5, 1, 0, "centered", "Flag indicating whether the data are centered (demeaned)."], [140, 5, 1, 0, "cov", "The estimated covariances."], [141, 5, 1, 0, "force_int", "Flag indicating whether the bandwidth is restricted to be an integer."], [142, 5, 1, 0, "kernel_const", "The constant used in optimal bandwidth calculation."], [143, 5, 1, 0, "kernel_weights", "Weights used in covariance calculation."], [144, 5, 1, 0, "name", "The covariance estimator's name."], [145, 5, 1, 0, "opt_bandwidth", "Estimate optimal bandwidth."], [146, 5, 1, 0, "rate", "The optimal rate used in bandwidth selection."]], "arch.covariance.kernel.Gallant.__init__": [[103, 2, 2, "arch.covariance.kernel.Gallant", "bandwidth", "Alternative name for Parzen covariance estimator."], [103, 2, 2, "arch.covariance.kernel.Gallant", "center", "Alternative name for Parzen covariance estimator."], [103, 2, 2, "arch.covariance.kernel.Gallant", "df_adjust", "Alternative name for Parzen covariance estimator."], [103, 2, 2, "arch.covariance.kernel.Gallant", "force_int", "Alternative name for Parzen covariance estimator."], [103, 2, 2, "arch.covariance.kernel.Gallant", "weights", "Alternative name for Parzen covariance estimator."], [103, 2, 2, "arch.covariance.kernel.Gallant", "x", "Alternative name for Parzen covariance estimator."]], "arch.covariance.kernel.NeweyWest": [[147, 5, 1, 0, "bandwidth", "The bandwidth used by the covariance estimator."], [148, 5, 1, 0, "bandwidth_scale", "The power used in optimal bandwidth calculation."], [149, 5, 1, 0, "centered", "Flag indicating whether the data are centered (demeaned)."], [150, 5, 1, 0, "cov", "The estimated covariances."], [151, 5, 1, 0, "force_int", "Flag indicating whether the bandwidth is restricted to be an integer."], [152, 5, 1, 0, "kernel_const", "The constant used in optimal bandwidth calculation."], [153, 5, 1, 0, "kernel_weights", "Weights used in covariance calculation."], [154, 5, 1, 0, "name", "The covariance estimator's name."], [155, 5, 1, 0, "opt_bandwidth", "Estimate optimal bandwidth."], [156, 5, 1, 0, "rate", "The optimal rate used in bandwidth selection."]], "arch.covariance.kernel.NeweyWest.__init__": [[104, 2, 2, "arch.covariance.kernel.NeweyWest", "bandwidth", "Alternative name for Bartlett covariance estimator."], [104, 2, 2, "arch.covariance.kernel.NeweyWest", "center", "Alternative name for Bartlett covariance estimator."], [104, 2, 2, "arch.covariance.kernel.NeweyWest", "df_adjust", "Alternative name for Bartlett covariance estimator."], [104, 2, 2, "arch.covariance.kernel.NeweyWest", "force_int", "Alternative name for Bartlett covariance estimator."], [104, 2, 2, "arch.covariance.kernel.NeweyWest", "weights", "Alternative name for Bartlett covariance estimator."], [104, 2, 2, "arch.covariance.kernel.NeweyWest", "x", "Alternative name for Bartlett covariance estimator."]], "arch.covariance.kernel.Parzen": [[157, 5, 1, 0, "bandwidth", "The bandwidth used by the covariance estimator."], [158, 5, 1, 0, "bandwidth_scale", "The power used in optimal bandwidth calculation."], [159, 5, 1, 0, "centered", "Flag indicating whether the data are centered (demeaned)."], [160, 5, 1, 0, "cov", "The estimated covariances."], [161, 5, 1, 0, "force_int", "Flag indicating whether the bandwidth is restricted to be an integer."], [162, 5, 1, 0, "kernel_const", "The constant used in optimal bandwidth calculation."], [163, 5, 1, 0, "kernel_weights", "Weights used in covariance calculation."], [164, 5, 1, 0, "name", "The covariance estimator's name."], [165, 5, 1, 0, "opt_bandwidth", "Estimate optimal bandwidth."], [166, 5, 1, 0, "rate", "The optimal rate used in bandwidth selection."]], "arch.covariance.kernel.Parzen.__init__": [[105, 2, 2, 0, "bandwidth", "The kernel's bandwidth."], [105, 2, 2, 0, "center", "A flag indicating whether x should be demeaned before estimating the covariance."], [105, 2, 2, 0, "df_adjust", "Degrees of freedom to remove when adjusting the covariance."], [105, 2, 2, 0, "force_int", "Force bandwidth to be an integer."], [105, 2, 2, 0, "weights", "An array of weights used to combine when estimating optimal bandwidth. If not provided, a vector of 1s is used."], [105, 2, 2, 0, "x", "The data to use in covariance estimation."]], "arch.covariance.kernel.ParzenCauchy": [[167, 5, 1, 0, "bandwidth", "The bandwidth used by the covariance estimator."], [168, 5, 1, 0, "bandwidth_scale", "The power used in optimal bandwidth calculation."], [169, 5, 1, 0, "centered", "Flag indicating whether the data are centered (demeaned)."], [170, 5, 1, 0, "cov", "The estimated covariances."], [171, 5, 1, 0, "force_int", "Flag indicating whether the bandwidth is restricted to be an integer."], [172, 5, 1, 0, "kernel_const", "The constant used in optimal bandwidth calculation."], [173, 5, 1, 0, "kernel_weights", "Weights used in covariance calculation."], [174, 5, 1, 0, "name", "The covariance estimator's name."], [175, 5, 1, 0, "opt_bandwidth", "Estimate optimal bandwidth."], [176, 5, 1, 0, "rate", "The optimal rate used in bandwidth selection."]], "arch.covariance.kernel.ParzenCauchy.__init__": [[106, 2, 2, 0, "bandwidth", "The kernel's bandwidth."], [106, 2, 2, 0, "center", "A flag indicating whether x should be demeaned before estimating the covariance."], [106, 2, 2, 0, "df_adjust", "Degrees of freedom to remove when adjusting the covariance."], [106, 2, 2, 0, "force_int", "Force bandwidth to be an integer."], [106, 2, 2, 0, "weights", "An array of weights used to combine when estimating optimal bandwidth. If not provided, a vector of 1s is used."], [106, 2, 2, 0, "x", "The data to use in covariance estimation."]], "arch.covariance.kernel.ParzenGeometric": [[177, 5, 1, 0, "bandwidth", "The bandwidth used by the covariance estimator."], [178, 5, 1, 0, "bandwidth_scale", "The power used in optimal bandwidth calculation."], [179, 5, 1, 0, "centered", "Flag indicating whether the data are centered (demeaned)."], [180, 5, 1, 0, "cov", "The estimated covariances."], [181, 5, 1, 0, "force_int", "Flag indicating whether the bandwidth is restricted to be an integer."], [182, 5, 1, 0, "kernel_const", "The constant used in optimal bandwidth calculation."], [183, 5, 1, 0, "kernel_weights", "Weights used in covariance calculation."], [184, 5, 1, 0, "name", "The covariance estimator's name."], [185, 5, 1, 0, "opt_bandwidth", "Estimate optimal bandwidth."], [186, 5, 1, 0, "rate", "The optimal rate used in bandwidth selection."]], "arch.covariance.kernel.ParzenGeometric.__init__": [[107, 2, 2, 0, "bandwidth", "The kernel's bandwidth."], [107, 2, 2, 0, "center", "A flag indicating whether x should be demeaned before estimating the covariance."], [107, 2, 2, 0, "df_adjust", "Degrees of freedom to remove when adjusting the covariance."], [107, 2, 2, 0, "force_int", "Force bandwidth to be an integer."], [107, 2, 2, 0, "weights", "An array of weights used to combine when estimating optimal bandwidth. If not provided, a vector of 1s is used."], [107, 2, 2, 0, "x", "The data to use in covariance estimation."]], "arch.covariance.kernel.ParzenRiesz": [[187, 5, 1, 0, "bandwidth", "The bandwidth used by the covariance estimator."], [188, 5, 1, 0, "bandwidth_scale", "The power used in optimal bandwidth calculation."], [189, 5, 1, 0, "centered", "Flag indicating whether the data are centered (demeaned)."], [190, 5, 1, 0, "cov", "The estimated covariances."], [191, 5, 1, 0, "force_int", "Flag indicating whether the bandwidth is restricted to be an integer."], [192, 5, 1, 0, "kernel_const", "The constant used in optimal bandwidth calculation."], [193, 5, 1, 0, "kernel_weights", "Weights used in covariance calculation."], [194, 5, 1, 0, "name", "The covariance estimator's name."], [195, 5, 1, 0, "opt_bandwidth", "Estimate optimal bandwidth."], [196, 5, 1, 0, "rate", "The optimal rate used in bandwidth selection."]], "arch.covariance.kernel.ParzenRiesz.__init__": [[108, 2, 2, 0, "bandwidth", "The kernel's bandwidth."], [108, 2, 2, 0, "center", "A flag indicating whether x should be demeaned before estimating the covariance."], [108, 2, 2, 0, "df_adjust", "Degrees of freedom to remove when adjusting the covariance."], [108, 2, 2, 0, "force_int", "Force bandwidth to be an integer."], [108, 2, 2, 0, "weights", "An array of weights used to combine when estimating optimal bandwidth. If not provided, a vector of 1s is used."], [108, 2, 2, 0, "x", "The data to use in covariance estimation."]], "arch.covariance.kernel.QuadraticSpectral": [[197, 5, 1, 0, "bandwidth", "The bandwidth used by the covariance estimator."], [198, 5, 1, 0, "bandwidth_scale", "The power used in optimal bandwidth calculation."], [199, 5, 1, 0, "centered", "Flag indicating whether the data are centered (demeaned)."], [200, 5, 1, 0, "cov", "The estimated covariances."], [201, 5, 1, 0, "force_int", "Flag indicating whether the bandwidth is restricted to be an integer."], [202, 5, 1, 0, "kernel_const", "The constant used in optimal bandwidth calculation."], [203, 5, 1, 0, "kernel_weights", "Weights used in covariance calculation."], [204, 5, 1, 0, "name", "The covariance estimator's name."], [205, 5, 1, 0, "opt_bandwidth", "Estimate optimal bandwidth."], [206, 5, 1, 0, "rate", "The optimal rate used in bandwidth selection."]], "arch.covariance.kernel.QuadraticSpectral.__init__": [[109, 2, 2, 0, "bandwidth", "The kernel's bandwidth."], [109, 2, 2, 0, "center", "A flag indicating whether x should be demeaned before estimating the covariance."], [109, 2, 2, 0, "df_adjust", "Degrees of freedom to remove when adjusting the covariance."], [109, 2, 2, 0, "force_int", "Force bandwidth to be an integer."], [109, 2, 2, 0, "weights", "An array of weights used to combine when estimating optimal bandwidth. If not provided, a vector of 1s is used."], [109, 2, 2, 0, "x", "The data to use in covariance estimation."]], "arch.covariance.kernel.TukeyHamming": [[207, 5, 1, 0, "bandwidth", "The bandwidth used by the covariance estimator."], [208, 5, 1, 0, "bandwidth_scale", "The power used in optimal bandwidth calculation."], [209, 5, 1, 0, "centered", "Flag indicating whether the data are centered (demeaned)."], [210, 5, 1, 0, "cov", "The estimated covariances."], [211, 5, 1, 0, "force_int", "Flag indicating whether the bandwidth is restricted to be an integer."], [212, 5, 1, 0, "kernel_const", "The constant used in optimal bandwidth calculation."], [213, 5, 1, 0, "kernel_weights", "Weights used in covariance calculation."], [214, 5, 1, 0, "name", "The covariance estimator's name."], [215, 5, 1, 0, "opt_bandwidth", "Estimate optimal bandwidth."], [216, 5, 1, 0, "rate", "The optimal rate used in bandwidth selection."]], "arch.covariance.kernel.TukeyHamming.__init__": [[110, 2, 2, 0, "bandwidth", "The kernel's bandwidth."], [110, 2, 2, 0, "center", "A flag indicating whether x should be demeaned before estimating the covariance."], [110, 2, 2, 0, "df_adjust", "Degrees of freedom to remove when adjusting the covariance."], [110, 2, 2, 0, "force_int", "Force bandwidth to be an integer."], [110, 2, 2, 0, "weights", "An array of weights used to combine when estimating optimal bandwidth. If not provided, a vector of 1s is used."], [110, 2, 2, 0, "x", "The data to use in covariance estimation."]], "arch.covariance.kernel.TukeyHanning": [[217, 5, 1, 0, "bandwidth", "The bandwidth used by the covariance estimator."], [218, 5, 1, 0, "bandwidth_scale", "The power used in optimal bandwidth calculation."], [219, 5, 1, 0, "centered", "Flag indicating whether the data are centered (demeaned)."], [220, 5, 1, 0, "cov", "The estimated covariances."], [221, 5, 1, 0, "force_int", "Flag indicating whether the bandwidth is restricted to be an integer."], [222, 5, 1, 0, "kernel_const", "The constant used in optimal bandwidth calculation."], [223, 5, 1, 0, "kernel_weights", "Weights used in covariance calculation."], [224, 5, 1, 0, "name", "The covariance estimator's name."], [225, 5, 1, 0, "opt_bandwidth", "Estimate optimal bandwidth."], [226, 5, 1, 0, "rate", "The optimal rate used in bandwidth selection."]], "arch.covariance.kernel.TukeyHanning.__init__": [[111, 2, 2, 0, "bandwidth", "The kernel's bandwidth."], [111, 2, 2, 0, "center", "A flag indicating whether x should be demeaned before estimating the covariance."], [111, 2, 2, 0, "df_adjust", "Degrees of freedom to remove when adjusting the covariance."], [111, 2, 2, 0, "force_int", "Force bandwidth to be an integer."], [111, 2, 2, 0, "weights", "An array of weights used to combine when estimating optimal bandwidth. If not provided, a vector of 1s is used."], [111, 2, 2, 0, "x", "The data to use in covariance estimation."]], "arch.covariance.kernel.TukeyParzen": [[227, 5, 1, 0, "bandwidth", "The bandwidth used by the covariance estimator."], [228, 5, 1, 0, "bandwidth_scale", "The power used in optimal bandwidth calculation."], [229, 5, 1, 0, "centered", "Flag indicating whether the data are centered (demeaned)."], [230, 5, 1, 0, "cov", "The estimated covariances."], [231, 5, 1, 0, "force_int", "Flag indicating whether the bandwidth is restricted to be an integer."], [232, 5, 1, 0, "kernel_const", "The constant used in optimal bandwidth calculation."], [233, 5, 1, 0, "kernel_weights", "Weights used in covariance calculation."], [234, 5, 1, 0, "name", "The covariance estimator's name."], [235, 5, 1, 0, "opt_bandwidth", "Estimate optimal bandwidth."], [236, 5, 1, 0, "rate", "The optimal rate used in bandwidth selection."]], "arch.covariance.kernel.TukeyParzen.__init__": [[112, 2, 2, 0, "bandwidth", "The kernel's bandwidth."], [112, 2, 2, 0, "center", "A flag indicating whether x should be demeaned before estimating the covariance."], [112, 2, 2, 0, "df_adjust", "Degrees of freedom to remove when adjusting the covariance."], [112, 2, 2, 0, "force_int", "Force bandwidth to be an integer."], [112, 2, 2, 0, "weights", "An array of weights used to combine when estimating optimal bandwidth. If not provided, a vector of 1s is used."], [112, 2, 2, 0, "x", "The data to use in covariance estimation."]], "arch.unitroot": [[263, 1, 1, 0, "ADF", "Augmented Dickey-Fuller unit root test"], [264, 1, 1, 0, "DFGLS", "Elliott, Rothenberg and Stock's (1) GLS detrended Dickey-Fuller"], [265, 1, 1, 0, "KPSS", "Kwiatkowski, Phillips, Schmidt and Shin (KPSS) stationarity test"], [266, 1, 1, 0, "PhillipsPerron", "Phillips-Perron unit root test"], [267, 1, 1, 0, "VarianceRatio", "Variance Ratio test of a random walk."], [268, 1, 1, 0, "ZivotAndrews", "Zivot-Andrews structural-break unit-root test"], [269, 6, 1, 0, "auto_bandwidth", "Automatic bandwidth selection of Andrews (1991) and Newey & West (1994)."], [262, 0, 0, 1, "cointegration", ""]], "arch.unitroot.ADF": [[279, 5, 1, 0, "alternative_hypothesis", "The alternative hypothesis"], [280, 5, 1, 0, "critical_values", "Dictionary containing critical values specific to the test, number of observations and included deterministic trend terms."], [281, 5, 1, 0, "lags", "Sets or gets the number of lags used in the model. When bootstrap use DF-type regressions, lags is the number of lags in the regression model.  When bootstrap use long-run variance estimators, lags is the number of lags used in the long-run variance estimator."], [282, 5, 1, 0, "max_lags", "Sets or gets the maximum lags used when automatically selecting lag length"], [283, 5, 1, 0, "nobs", "The number of observations used when computing the test statistic. Accounts for loss of data due to lags for regression-based bootstrap."], [284, 5, 1, 0, "null_hypothesis", "The null hypothesis"], [285, 5, 1, 0, "pvalue", "Returns the p-value for the test statistic"], [286, 5, 1, 0, "regression", "Returns the OLS regression results from the ADF model estimated"], [287, 5, 1, 0, "stat", "The test statistic for a unit root"], [288, 3, 1, 0, "summary", "Summary of test, containing statistic, p-value and critical values"], [289, 5, 1, 0, "trend", "Sets or gets the deterministic trend term used in the test. See valid_trends for a list of supported trends"], [290, 5, 1, 0, "valid_trends", "List of valid trend terms."], [291, 5, 1, 0, "y", "Returns the data used in the test statistic"]], "arch.unitroot.ADF.__init__": [[263, 2, 2, 0, "lags", "The number of lags to use in the ADF regression."], [263, 2, 2, 0, "low_memory", "Flag indicating whether to use a low memory implementation of the lag selection algorithm."], [263, 2, 2, 0, "max_lags", "The maximum number of lags to use when selecting lag length"], [263, 2, 2, 0, "method", "The method to use when selecting the lag length"], [263, 2, 2, 0, "trend", "The trend component to include in the test"], [263, 2, 2, 0, "y", "The data to test for a unit root"]], "arch.unitroot.DFGLS": [[292, 5, 1, 0, "alternative_hypothesis", "The alternative hypothesis"], [293, 5, 1, 0, "critical_values", "Dictionary containing critical values specific to the test, number of observations and included deterministic trend terms."], [294, 5, 1, 0, "lags", "Sets or gets the number of lags used in the model. When bootstrap use DF-type regressions, lags is the number of lags in the regression model.  When bootstrap use long-run variance estimators, lags is the number of lags used in the long-run variance estimator."], [295, 5, 1, 0, "max_lags", "Sets or gets the maximum lags used when automatically selecting lag length"], [296, 5, 1, 0, "nobs", "The number of observations used when computing the test statistic. Accounts for loss of data due to lags for regression-based bootstrap."], [297, 5, 1, 0, "null_hypothesis", "The null hypothesis"], [298, 5, 1, 0, "pvalue", "Returns the p-value for the test statistic"], [299, 5, 1, 0, "regression", "Returns the OLS regression results from the ADF model estimated"], [300, 5, 1, 0, "stat", "The test statistic for a unit root"], [301, 3, 1, 0, "summary", "Summary of test, containing statistic, p-value and critical values"], [302, 5, 1, 0, "trend", "Sets or gets the deterministic trend term used in the test. See valid_trends for a list of supported trends"], [303, 5, 1, 0, "valid_trends", "List of valid trend terms."], [304, 5, 1, 0, "y", "Returns the data used in the test statistic"]], "arch.unitroot.DFGLS.__init__": [[264, 2, 2, 0, "lags", "The number of lags to use in the ADF regression."], [264, 2, 2, "arch.unitroot.DFGLS", "low_memory", "Elliott, Rothenberg and Stock's (1) GLS detrended Dickey-Fuller"], [264, 2, 2, 0, "max_lags", "The maximum number of lags to use when selecting lag length."], [264, 2, 2, 0, "method", "The method to use when selecting the lag length"], [264, 2, 2, 0, "trend", "The trend component to include in the test"], [264, 2, 2, 0, "y", "The data to test for a unit root"]], "arch.unitroot.KPSS": [[305, 5, 1, 0, "alternative_hypothesis", "The alternative hypothesis"], [306, 5, 1, 0, "critical_values", "Dictionary containing critical values specific to the test, number of observations and included deterministic trend terms."], [307, 5, 1, 0, "lags", "Sets or gets the number of lags used in the model. When bootstrap use DF-type regressions, lags is the number of lags in the regression model.  When bootstrap use long-run variance estimators, lags is the number of lags used in the long-run variance estimator."], [308, 5, 1, 0, "nobs", "The number of observations used when computing the test statistic. Accounts for loss of data due to lags for regression-based bootstrap."], [309, 5, 1, 0, "null_hypothesis", "The null hypothesis"], [310, 5, 1, 0, "pvalue", "Returns the p-value for the test statistic"], [311, 5, 1, 0, "stat", "The test statistic for a unit root"], [312, 3, 1, 0, "summary", "Summary of test, containing statistic, p-value and critical values"], [313, 5, 1, 0, "trend", "Sets or gets the deterministic trend term used in the test. See valid_trends for a list of supported trends"], [314, 5, 1, 0, "valid_trends", "List of valid trend terms."], [315, 5, 1, 0, "y", "Returns the data used in the test statistic"]], "arch.unitroot.KPSS.__init__": [[265, 2, 2, 0, "lags", "The number of lags to use in the Newey-West estimator of the long-run covariance."], [265, 2, 2, 0, "trend", "\"c\" - Include a constant (Default) \"ct\" - Include a constant and linear time trend"], [265, 2, 2, 0, "y", "The data to test for stationarity"]], "arch.unitroot.PhillipsPerron": [[316, 5, 1, 0, "alternative_hypothesis", "The alternative hypothesis"], [317, 5, 1, 0, "critical_values", "Dictionary containing critical values specific to the test, number of observations and included deterministic trend terms."], [318, 5, 1, 0, "lags", "Sets or gets the number of lags used in the model. When bootstrap use DF-type regressions, lags is the number of lags in the regression model.  When bootstrap use long-run variance estimators, lags is the number of lags used in the long-run variance estimator."], [319, 5, 1, 0, "nobs", "The number of observations used when computing the test statistic. Accounts for loss of data due to lags for regression-based bootstrap."], [320, 5, 1, 0, "null_hypothesis", "The null hypothesis"], [321, 5, 1, 0, "pvalue", "Returns the p-value for the test statistic"], [322, 5, 1, 0, "regression", "Returns OLS regression results for the specification used in the test"], [323, 5, 1, 0, "stat", "The test statistic for a unit root"], [324, 3, 1, 0, "summary", "Summary of test, containing statistic, p-value and critical values"], [325, 5, 1, 0, "test_type", "Gets or sets the test type returned by stat. Valid values are \"tau\" or \"rho\""], [326, 5, 1, 0, "trend", "Sets or gets the deterministic trend term used in the test. See valid_trends for a list of supported trends"], [327, 5, 1, 0, "valid_trends", "List of valid trend terms."], [328, 5, 1, 0, "y", "Returns the data used in the test statistic"]], "arch.unitroot.PhillipsPerron.__init__": [[266, 2, 2, 0, "lags", "The number of lags to use in the Newey-West estimator of the long-run covariance."], [266, 2, 2, 0, "test_type", "The test to use when computing the test statistic."], [266, 2, 2, 0, "trend", "The trend component to include in the test"], [266, 2, 2, 0, "y", "The data to test for a unit root"]], "arch.unitroot.VarianceRatio": [[329, 5, 1, 0, "alternative_hypothesis", "The alternative hypothesis"], [330, 5, 1, 0, "critical_values", "Dictionary containing critical values specific to the test, number of observations and included deterministic trend terms."], [331, 5, 1, 0, "debiased", "Sets of gets the indicator to use debiased variances in the ratio"], [332, 5, 1, 0, "lags", "Sets or gets the number of lags used in the model. When bootstrap use DF-type regressions, lags is the number of lags in the regression model.  When bootstrap use long-run variance estimators, lags is the number of lags used in the long-run variance estimator."], [333, 5, 1, 0, "nobs", "The number of observations used when computing the test statistic. Accounts for loss of data due to lags for regression-based bootstrap."], [334, 5, 1, 0, "null_hypothesis", "The null hypothesis"], [335, 5, 1, 0, "overlap", "Sets of gets the indicator to use overlapping returns in the long-period variance estimator"], [336, 5, 1, 0, "pvalue", "Returns the p-value for the test statistic"], [337, 5, 1, 0, "robust", "Sets of gets the indicator to use a heteroskedasticity robust variance estimator"], [338, 5, 1, 0, "stat", "The test statistic for a unit root"], [339, 3, 1, 0, "summary", "Summary of test, containing statistic, p-value and critical values"], [340, 5, 1, 0, "trend", "Sets or gets the deterministic trend term used in the test. See valid_trends for a list of supported trends"], [341, 5, 1, 0, "valid_trends", "List of valid trend terms."], [342, 5, 1, 0, "vr", "The ratio of the long block lags-period variance to the 1-period variance"], [343, 5, 1, 0, "y", "Returns the data used in the test statistic"]], "arch.unitroot.VarianceRatio.__init__": [[267, 2, 2, 0, "debiased", "Indicates whether to use a debiased version of the test."], [267, 2, 2, 0, "lags", "The number of periods to used in the multi-period variance, which is the numerator of the test statistic."], [267, 2, 2, 0, "overlap", "Indicates whether to use all overlapping blocks."], [267, 2, 2, 0, "robust", "Indicates whether to use heteroskedasticity robust inference."], [267, 2, 2, 0, "trend", "\"c\" allows for a non-zero drift in the random walk, while \"n\" requires that the increments to y are mean 0"], [267, 2, 2, 0, "y", "The data to test for a random walk"]], "arch.unitroot.ZivotAndrews": [[344, 5, 1, 0, "alternative_hypothesis", "The alternative hypothesis"], [345, 5, 1, 0, "critical_values", "Dictionary containing critical values specific to the test, number of observations and included deterministic trend terms."], [346, 5, 1, 0, "lags", "Sets or gets the number of lags used in the model. When bootstrap use DF-type regressions, lags is the number of lags in the regression model.  When bootstrap use long-run variance estimators, lags is the number of lags used in the long-run variance estimator."], [347, 5, 1, 0, "nobs", "The number of observations used when computing the test statistic. Accounts for loss of data due to lags for regression-based bootstrap."], [348, 5, 1, 0, "null_hypothesis", "The null hypothesis"], [349, 5, 1, 0, "pvalue", "Returns the p-value for the test statistic"], [350, 5, 1, 0, "stat", "The test statistic for a unit root"], [351, 3, 1, 0, "summary", "Summary of test, containing statistic, p-value and critical values"], [352, 5, 1, 0, "trend", "Sets or gets the deterministic trend term used in the test. See valid_trends for a list of supported trends"], [353, 5, 1, 0, "valid_trends", "List of valid trend terms."], [354, 5, 1, 0, "y", "Returns the data used in the test statistic"]], "arch.unitroot.ZivotAndrews.__init__": [[268, 2, 2, 0, "lags", "The number of lags to use in the ADF regression."], [268, 2, 2, 0, "max_lags", "The maximum number of lags to use when selecting lag length"], [268, 2, 2, 0, "method", "The method to use when selecting the lag length"], [268, 2, 2, 0, "trend", "The trend component to include in the test"], [268, 2, 2, 0, "trim", "percentage of series at begin/end to exclude from break-period calculation in range [0, 0.333] (default=0.15)"], [268, 2, 2, 0, "y", "data series"]], "arch.unitroot.auto_bandwidth": [[269, 2, 2, 0, "kernel", "The kernel function to use for selecting the bandwidth"], [269, 2, 2, 0, "y", "Data on which to apply the bandwidth selection"]], "arch.unitroot.cointegration": [[270, 1, 1, 0, "CanonicalCointegratingReg", "Canonical Cointegrating Regression cointegrating vector estimation."], [271, 1, 1, 0, "CointegrationAnalysisResults", "summary()"], [272, 1, 1, 0, "DynamicOLS", "Dynamic OLS (DOLS) cointegrating vector estimation"], [273, 1, 1, 0, "DynamicOLSResults", "Estimation results for Dynamic OLS models"], [274, 1, 1, 0, "EngleGrangerTestResults", "Results class for Engle-Granger cointegration tests."], [275, 1, 1, 0, "FullyModifiedOLS", "Fully Modified OLS cointegrating vector estimation."], [276, 1, 1, 0, "PhillipsOuliarisTestResults", "plot([axes, title])"], [277, 6, 1, 0, "engle_granger", "Test for cointegration within a set of time series."], [278, 6, 1, 0, "phillips_ouliaris", "Test for cointegration within a set of time series."]], "arch.unitroot.cointegration.CanonicalCointegratingReg": [[355, 3, 1, 0, "fit", "Estimate the cointegrating vector."]], "arch.unitroot.cointegration.CanonicalCointegratingReg.__init__": [[270, 2, 2, 0, "trend", "Trend to include in the cointegrating regression."], [270, 2, 2, 0, "x", "The right-hand-side variables in the cointegrating regression."], [270, 2, 2, 0, "x_trend", "Trends that affects affect the x-data but do not appear in the cointegrating regression."], [270, 2, 2, 0, "y", "The left-hand-side variable in the cointegrating regression."]], "arch.unitroot.cointegration.CanonicalCointegratingReg.fit": [[355, 2, 2, 0, "bandwidth", "The bandwidth to use."], [355, 2, 2, 0, "df_adjust", "Whether the adjust the parameter covariance to account for the number of parameters estimated in the regression."], [355, 2, 2, 0, "diff", "Use differenced data to estimate the residuals."], [355, 2, 2, 0, "force_int", "Whether the force the estimated optimal bandwidth to be an integer."], [355, 2, 2, 0, "kernel", "The string name of any of any known kernel-based long-run covariance estimators."]], "arch.unitroot.cointegration.CointegrationAnalysisResults": [[356, 5, 1, 0, "bandwidth", "The bandwidth used in the parameter covariance estimation"], [357, 5, 1, 0, "cov", "The estimated parameter covariance of the cointegrating vector"], [358, 5, 1, 0, "kernel", "The kernel used to estimate the covariance"], [359, 5, 1, 0, "long_run_variance", "Long-run variance estimate used in the parameter covariance estimator"], [360, 5, 1, 0, "params", "The estimated parameters of the cointegrating vector"], [361, 5, 1, 0, "pvalues", "P-value of the parameters in the cointegrating vector"], [362, 5, 1, 0, "resid", "The model residuals"], [363, 5, 1, 0, "residual_variance", "The variance of the regression residual."], [364, 5, 1, 0, "rsquared", "The model R\u00b2"], [365, 5, 1, 0, "rsquared_adj", "The degree-of-freedom adjusted R\u00b2"], [366, 5, 1, 0, "std_errors", "Standard errors  of the parameters in the cointegrating vector"], [367, 3, 1, 0, "summary", "Summary of the model, containing estimated parameters and std. errors"], [368, 5, 1, 0, "tvalues", "T-statistics of the parameters in the cointegrating vector"]], "arch.unitroot.cointegration.CointegrationAnalysisResults.__init__": [[271, 2, 2, "arch.unitroot.cointegration.CointegrationAnalysisResults", "cov", "summary()"], [271, 2, 2, "arch.unitroot.cointegration.CointegrationAnalysisResults", "df_adjust", "summary()"], [271, 2, 2, "arch.unitroot.cointegration.CointegrationAnalysisResults", "estimator_type", "summary()"], [271, 2, 2, "arch.unitroot.cointegration.CointegrationAnalysisResults", "kernel_est", "summary()"], [271, 2, 2, "arch.unitroot.cointegration.CointegrationAnalysisResults", "num_x", "summary()"], [271, 2, 2, "arch.unitroot.cointegration.CointegrationAnalysisResults", "omega_112", "summary()"], [271, 2, 2, "arch.unitroot.cointegration.CointegrationAnalysisResults", "params", "summary()"], [271, 2, 2, "arch.unitroot.cointegration.CointegrationAnalysisResults", "resid", "summary()"], [271, 2, 2, "arch.unitroot.cointegration.CointegrationAnalysisResults", "rsquared", "summary()"], [271, 2, 2, "arch.unitroot.cointegration.CointegrationAnalysisResults", "rsquared_adj", "summary()"], [271, 2, 2, "arch.unitroot.cointegration.CointegrationAnalysisResults", "trend", "summary()"]], "arch.unitroot.cointegration.DynamicOLS": [[369, 3, 1, 0, "fit", "Estimate the Dynamic OLS regression"]], "arch.unitroot.cointegration.DynamicOLS.__init__": [[272, 2, 2, 0, "common", "Flag indicating that lags and leads should be restricted to the same value."], [272, 2, 2, 0, "lags", "The number of lags to include in the model."], [272, 2, 2, 0, "leads", "The number of leads to include in the model."], [272, 2, 2, 0, "max_lag", "The maximum lag to consider."], [272, 2, 2, 0, "max_lead", "The maximum lead to consider."], [272, 2, 2, 0, "method", "The method used to select lag length when lags or leads is None."], [272, 2, 2, 0, "trend", "Trend to include in the cointegrating regression."], [272, 2, 2, 0, "x", "The right-hand-side variables in the cointegrating regression."], [272, 2, 2, 0, "y", "The left-hand-side variable in the cointegrating regression."]], "arch.unitroot.cointegration.DynamicOLS.fit": [[369, 2, 2, 0, "bandwidth", "The bandwidth to use."], [369, 2, 2, 0, "cov_type", "Either \"unadjusted\" (or is equivalent \"homoskedastic\") or \"robust\" (or its equivalent \"kernel\")."], [369, 2, 2, 0, "df_adjust", "Whether the adjust the parameter covariance to account for the number of parameters estimated in the regression."], [369, 2, 2, 0, "force_int", "Whether the force the estimated optimal bandwidth to be an integer."], [369, 2, 2, 0, "kernel", "The string name of any of any known kernel-based long-run covariance estimators."]], "arch.unitroot.cointegration.DynamicOLSResults": [[370, 5, 1, 0, "bandwidth", "The bandwidth used in the parameter covariance estimation"], [371, 5, 1, 0, "cov", "The estimated parameter covariance of the cointegrating vector"], [372, 5, 1, 0, "cov_type", "The type of parameter covariance estimator used"], [373, 5, 1, 0, "full_cov", "Parameter covariance of the all model parameters, incl. leads and lags"], [374, 5, 1, 0, "full_params", "The complete set of parameters, including leads and lags"], [375, 5, 1, 0, "kernel", "The kernel used to estimate the covariance"], [376, 5, 1, 0, "lags", "The number of lags included in the model"], [377, 5, 1, 0, "leads", "The number of leads included in the model"], [378, 5, 1, 0, "long_run_variance", "The long-run variance of the regression residual."], [379, 5, 1, 0, "params", "The estimated parameters of the cointegrating vector"], [380, 5, 1, 0, "pvalues", "P-value of the parameters in the cointegrating vector"], [381, 5, 1, 0, "resid", "The model residuals"], [382, 5, 1, 0, "residual_variance", "The variance of the regression residual."], [383, 5, 1, 0, "rsquared", "The model R\u00b2"], [384, 5, 1, 0, "rsquared_adj", "The degree-of-freedom adjusted R\u00b2"], [385, 5, 1, 0, "std_errors", "Standard errors  of the parameters in the cointegrating vector"], [386, 3, 1, 0, "summary", "Summary of the model, containing estimated parameters and std. errors"], [387, 5, 1, 0, "tvalues", "T-statistics of the parameters in the cointegrating vector"]], "arch.unitroot.cointegration.DynamicOLSResults.__init__": [[273, 2, 2, 0, "cov", "The estimated parameter covariance."], [273, 2, 2, 0, "cov_type", "The type of the parameter covariance estimator used."], [273, 2, 2, 0, "df_adjust", "Whether to degree of freedom adjust the estimator."], [273, 2, 2, 0, "kernel_est", "The covariance estimator instance used to estimate the parameter covariance."], [273, 2, 2, 0, "lags", "The number of lags included in the model."], [273, 2, 2, 0, "leads", "The number of leads included in the model."], [273, 2, 2, "arch.unitroot.cointegration.DynamicOLSResults", "num_x", "Estimation results for Dynamic OLS models"], [273, 2, 2, 0, "params", "The estimated model parameters."], [273, 2, 2, 0, "reg_results", "Regression results from fitting statsmodels OLS."], [273, 2, 2, 0, "resid", "The model residuals."], [273, 2, 2, "arch.unitroot.cointegration.DynamicOLSResults", "trend", "Estimation results for Dynamic OLS models"]], "arch.unitroot.cointegration.DynamicOLSResults.summary": [[386, 2, 2, 0, "full", "Flag indicating whether to include all estimated parameters (True) or only the parameters of the cointegrating vector"]], "arch.unitroot.cointegration.EngleGrangerTestResults": [[388, 5, 1, 0, "alternative_hypothesis", "The alternative hypothesis"], [389, 5, 1, 0, "cointegrating_vector", "The estimated cointegrating vector."], [390, 5, 1, 0, "critical_values", "Critical Values"], [391, 5, 1, 0, "distribution_order", "The number of stochastic trends under the null hypothesis."], [392, 5, 1, 0, "lags", "The number of lags used in the Augmented Dickey-Fuller regression."], [393, 5, 1, 0, "max_lags", "The maximum number of lags used in the lag-length selection."], [394, 5, 1, 0, "name", "Sets or gets the name of the cointegration test"], [395, 5, 1, 0, "null_hypothesis", "The null hypothesis"], [396, 3, 1, 0, "plot", "Plot the cointegration residuals."], [397, 5, 1, 0, "pvalue", "The p-value of the test statistic."], [398, 5, 1, 0, "resid", "The residual from the cointegrating regression."], [399, 5, 1, 0, "rho", "The estimated coefficient in the Dickey-Fuller Test"], [400, 5, 1, 0, "stat", "The test statistic."], [401, 3, 1, 0, "summary", "Summary of test, containing statistic, p-value and critical values"], [402, 5, 1, 0, "trend", "The trend used in the cointegrating regression"]], "arch.unitroot.cointegration.EngleGrangerTestResults.__init__": [[274, 2, 2, 0, "adf", "The ADF instance used to perform the test and lag selection."], [274, 2, 2, 0, "alternative", "The alternative hypothesis."], [274, 2, 2, 0, "crit_vals", "The critical values of the Engle-Granger specific to the sample size and model dimension."], [274, 2, 2, 0, "null", "The null hypothesis."], [274, 2, 2, 0, "order", "The number of stochastic trends in the null distribution."], [274, 2, 2, 0, "pvalue", "The pvalue of the Engle-Granger test statistic."], [274, 2, 2, 0, "stat", "The Engle-Granger test statistic."], [274, 2, 2, 0, "trend", "The model's trend description."], [274, 2, 2, 0, "xsection", "The OLS results used in the cross-sectional regression."]], "arch.unitroot.cointegration.EngleGrangerTestResults.plot": [[396, 2, 2, 0, "axes", "matplotlib axes instance to hold the figure."], [396, 2, 2, 0, "title", "Title for the figure."]], "arch.unitroot.cointegration.FullyModifiedOLS": [[403, 3, 1, 0, "fit", "Estimate the cointegrating vector."]], "arch.unitroot.cointegration.FullyModifiedOLS.__init__": [[275, 2, 2, 0, "trend", "Trend to include in the cointegrating regression."], [275, 2, 2, 0, "x", "The right-hand-side variables in the cointegrating regression."], [275, 2, 2, 0, "x_trend", "Trends that affects affect the x-data but do not appear in the cointegrating regression."], [275, 2, 2, 0, "y", "The left-hand-side variable in the cointegrating regression."]], "arch.unitroot.cointegration.FullyModifiedOLS.fit": [[403, 2, 2, 0, "bandwidth", "The bandwidth to use."], [403, 2, 2, 0, "df_adjust", "Whether the adjust the parameter covariance to account for the number of parameters estimated in the regression."], [403, 2, 2, 0, "diff", "Use differenced data to estimate the residuals."], [403, 2, 2, 0, "force_int", "Whether the force the estimated optimal bandwidth to be an integer."], [403, 2, 2, 0, "kernel", "The string name of any of any known kernel-based long-run covariance estimators."]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults": [[404, 5, 1, 0, "alternative_hypothesis", "The alternative hypothesis"], [405, 5, 1, 0, "bandwidth", "Bandwidth used by the long-run covariance estimator"], [406, 5, 1, 0, "cointegrating_vector", "The estimated cointegrating vector."], [407, 5, 1, 0, "critical_values", "Critical Values"], [408, 5, 1, 0, "distribution_order", "The number of stochastic trends under the null hypothesis."], [409, 5, 1, 0, "kernel", "Name of the long-run covariance estimator"], [410, 5, 1, 0, "name", "Sets or gets the name of the cointegration test"], [411, 5, 1, 0, "null_hypothesis", "The null hypothesis"], [412, 3, 1, 0, "plot", "Plot the cointegration residuals."], [413, 5, 1, 0, "pvalue", "The p-value of the test statistic."], [414, 5, 1, 0, "resid", "The residual from the cointegrating regression."], [415, 5, 1, 0, "stat", "The test statistic."], [416, 3, 1, 0, "summary", "Summary of test, containing statistic, p-value and critical values"], [417, 5, 1, 0, "trend", "The trend used in the cointegrating regression"]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.__init__": [[276, 2, 2, "arch.unitroot.cointegration.PhillipsOuliarisTestResults", "alternative", "plot([axes, title])"], [276, 2, 2, "arch.unitroot.cointegration.PhillipsOuliarisTestResults", "crit_vals", "plot([axes, title])"], [276, 2, 2, "arch.unitroot.cointegration.PhillipsOuliarisTestResults", "kernel_est", "plot([axes, title])"], [276, 2, 2, "arch.unitroot.cointegration.PhillipsOuliarisTestResults", "null", "plot([axes, title])"], [276, 2, 2, "arch.unitroot.cointegration.PhillipsOuliarisTestResults", "order", "plot([axes, title])"], [276, 2, 2, "arch.unitroot.cointegration.PhillipsOuliarisTestResults", "pvalue", "plot([axes, title])"], [276, 2, 2, "arch.unitroot.cointegration.PhillipsOuliarisTestResults", "rho", "plot([axes, title])"], [276, 2, 2, "arch.unitroot.cointegration.PhillipsOuliarisTestResults", "stat", "plot([axes, title])"], [276, 2, 2, "arch.unitroot.cointegration.PhillipsOuliarisTestResults", "test_type", "plot([axes, title])"], [276, 2, 2, "arch.unitroot.cointegration.PhillipsOuliarisTestResults", "trend", "plot([axes, title])"], [276, 2, 2, "arch.unitroot.cointegration.PhillipsOuliarisTestResults", "xsection", "plot([axes, title])"]], "arch.unitroot.cointegration.PhillipsOuliarisTestResults.plot": [[412, 2, 2, 0, "axes", "matplotlib axes instance to hold the figure."], [412, 2, 2, 0, "title", "Title for the figure."]], "arch.unitroot.cointegration.engle_granger": [[277, 2, 2, 0, "lags", "The number of lagged differences to include in the Augmented Dickey-Fuller test used on the residuals of the"], [277, 2, 2, 0, "max_lags", "The maximum number of lags to consider when using automatic lag-length in the Augmented Dickey-Fuller regression."], [277, 2, 2, 0, "method", "The method used to select the number of lags included in the Augmented Dickey-Fuller regression."], [277, 2, 2, 0, "trend", "Trend to include in the cointegrating regression."], [277, 2, 2, 0, "x", "The right-hand-side variables in the cointegrating regression."], [277, 2, 2, 0, "y", "The left-hand-side variable in the cointegrating regression."]], "arch.unitroot.cointegration.phillips_ouliaris": [[278, 2, 2, 0, "bandwidth", "The bandwidth to use."], [278, 2, 2, 0, "force_int", "Whether the force the estimated optimal bandwidth to be an integer."], [278, 2, 2, 0, "kernel", "The string name of any of any known kernel-based long-run covariance estimators."], [278, 2, 2, 0, "test_type", "The test statistic to compute."], [278, 2, 2, 0, "trend", "Trend to include in the cointegrating regression."], [278, 2, 2, 0, "x", "The right-hand-side variables in the cointegrating regression."], [278, 2, 2, 0, "y", "The left-hand-side variable in the cointegrating regression."]], "arch.univariate": [[426, 1, 1, 0, "APARCH", "Asymmetric Power ARCH (APARCH) volatility process"], [427, 1, 1, 0, "ARCH", "ARCH process"], [428, 1, 1, 0, "ARCHInMean", "(G)ARCH-in-mean model and simulation"], [429, 1, 1, 0, "ARX", "Autoregressive model with optional exogenous regressors estimation and simulation"], [430, 1, 1, 0, "ConstantMean", "Constant mean model estimation and simulation."], [431, 1, 1, 0, "ConstantVariance", "Constant volatility process"], [432, 1, 1, 0, "EGARCH", "EGARCH model estimation"], [433, 1, 1, 0, "EWMAVariance", "Exponentially Weighted Moving-Average (RiskMetrics) Variance process"], [434, 1, 1, 0, "FIGARCH", "FIGARCH model"], [435, 1, 1, 0, "FixedVariance", "Fixed volatility process"], [436, 1, 1, 0, "GARCH", "GARCH and related model estimation"], [437, 1, 1, 0, "GeneralizedError", "Generalized Error distribution for use with ARCH models"], [438, 1, 1, 0, "HARCH", "Heterogeneous ARCH process"], [439, 1, 1, 0, "HARX", "Heterogeneous Autoregression (HAR), with optional exogenous regressors, model estimation and simulation"], [440, 1, 1, 0, "LS", "Least squares model estimation and simulation"], [441, 1, 1, 0, "MIDASHyperbolic", "MIDAS Hyperbolic ARCH process"], [442, 1, 1, 0, "Normal", "Standard normal distribution for use with ARCH models"], [443, 1, 1, 0, "RiskMetrics2006", "RiskMetrics 2006 Variance process"], [444, 1, 1, 0, "SkewStudent", "Standardized Skewed Student's distribution for use with ARCH models"], [445, 1, 1, 0, "StudentsT", "Standardized Student's distribution for use with ARCH models"], [446, 1, 1, 0, "ZeroMean", "Model with zero conditional mean estimation and simulation"], [892, 6, 1, 0, "arch_model", "Initialization of common ARCH model specifications"]], "arch.univariate.APARCH": [[455, 3, 1, 0, "backcast", "Construct values for backcasting to start the recursion"], [456, 3, 1, 0, "backcast_transform", "Transformation to apply to user-provided backcast values"], [457, 3, 1, 0, "bounds", "Returns bounds for parameters"], [458, 5, 1, 0, "common_asym", "The value of delta in the model. NaN is delta is estimated."], [459, 3, 1, 0, "compute_variance", "Compute the variance for the ARCH model"], [460, 3, 1, 0, "constraints", "Construct parameter constraints arrays for parameter estimation"], [461, 5, 1, 0, "delta", "The value of delta in the model. NaN is delta is estimated."], [462, 3, 1, 0, "forecast", "Forecast volatility from the model"], [463, 5, 1, 0, "name", "The name of the volatility process"], [464, 5, 1, 0, "num_params", "The number of parameters in the model"], [465, 3, 1, 0, "parameter_names", "Names of model parameters"], [466, 3, 1, 0, "simulate", "Simulate data from the model"], [467, 5, 1, 0, "start", "Index to use to start variance subarray selection"], [468, 3, 1, 0, "starting_values", "Returns starting values for the ARCH model"], [469, 5, 1, 0, "stop", "Index to use to stop variance subarray selection"], [470, 3, 1, 0, "update", "Compute the variance for a single observation"], [471, 5, 1, 0, "updateable", "Flag indicating that the volatility process supports update"], [472, 3, 1, 0, "variance_bounds", "Construct loose bounds for conditional variances."], [473, 5, 1, 0, "volatility_updater", "Get the volatility updater associated with the volatility process"]], "arch.univariate.APARCH.__init__": [[426, 2, 2, 0, "common_asym", "Restrict all asymmetry terms to share the same asymmetry parameter."], [426, 2, 2, 0, "delta", "Value to use for a fixed delta in the APARCH model."], [426, 2, 2, 0, "o", "Order of the asymmetric innovation."], [426, 2, 2, 0, "p", "Order of the symmetric innovation."], [426, 2, 2, 0, "q", "Order of the lagged (transformed) conditional variance"]], "arch.univariate.APARCH.backcast": [[455, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.APARCH.backcast_transform": [[456, 2, 2, 0, "backcast", "User-provided backcast that approximates sigma2[0]."]], "arch.univariate.APARCH.bounds": [[457, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.APARCH.compute_variance": [[459, 2, 2, 0, "backcast", "Value to use when initializing ARCH recursion."], [459, 2, 2, 0, "parameters", "Model parameters"], [459, 2, 2, 0, "resids", "Vector of mean zero residuals"], [459, 2, 2, 0, "sigma2", "Array with same size as resids to store the conditional variance"], [459, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.APARCH.forecast": [[462, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [462, 2, 2, 0, "horizon", "Forecast horizon."], [462, 2, 2, 0, "method", "Method to use when producing the forecast."], [462, 2, 2, 0, "parameters", "Parameters required to forecast the volatility model"], [462, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [462, 2, 2, 0, "resids", "Residuals to use in the recursion"], [462, 2, 2, 0, "rng", "Callable random number generator required if method is 'simulation'."], [462, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [462, 2, 2, 0, "start", "Index of the first observation to use as the starting point for the forecast."], [462, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.APARCH.simulate": [[466, 2, 2, 0, "burn", "Number of additional observations to generate when initializing the simulation"], [466, 2, 2, 0, "initial_value", "Scalar or array of initial values to use when initializing the simulation"], [466, 2, 2, 0, "nobs", "Number of data points to simulate"], [466, 2, 2, 0, "parameters", "Parameters required to simulate the volatility model"], [466, 2, 2, 0, "rng", "Callable function that takes a single integer input and returns a vector of random numbers"]], "arch.univariate.APARCH.starting_values": [[468, 2, 2, 0, "resids", "Array of (approximate) residuals to use when computing starting values"]], "arch.univariate.APARCH.update": [[470, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [470, 2, 2, 0, "index", "The numerical index of the variance to compute"], [470, 2, 2, 0, "parameters", "The variance model parameters"], [470, 2, 2, 0, "resids", "The residual array."], [470, 2, 2, 0, "sigma2", "The array containing the variances."], [470, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.APARCH.variance_bounds": [[472, 2, 2, 0, "power", "Power used in the model."], [472, 2, 2, 0, "resids", "Approximate residuals to use to compute the lower and upper bounds on the conditional variance"]], "arch.univariate.ARCH": [[474, 3, 1, 0, "backcast", "Construct values for backcasting to start the recursion"], [475, 3, 1, 0, "backcast_transform", "Transformation to apply to user-provided backcast values"], [476, 3, 1, 0, "bounds", "Returns bounds for parameters"], [477, 3, 1, 0, "compute_variance", "Compute the variance for the ARCH model"], [478, 3, 1, 0, "constraints", "Construct parameter constraints arrays for parameter estimation"], [479, 3, 1, 0, "forecast", "Forecast volatility from the model"], [480, 5, 1, 0, "name", "The name of the volatility process"], [481, 5, 1, 0, "num_params", "The number of parameters in the model"], [482, 3, 1, 0, "parameter_names", "Names of model parameters"], [483, 3, 1, 0, "simulate", "Simulate data from the model"], [484, 5, 1, 0, "start", "Index to use to start variance subarray selection"], [485, 3, 1, 0, "starting_values", "Returns starting values for the ARCH model"], [486, 5, 1, 0, "stop", "Index to use to stop variance subarray selection"], [487, 3, 1, 0, "update", "Compute the variance for a single observation"], [488, 5, 1, 0, "updateable", "Flag indicating that the volatility process supports update"], [489, 3, 1, 0, "variance_bounds", "Construct loose bounds for conditional variances."], [490, 5, 1, 0, "volatility_updater", "Get the volatility updater associated with the volatility process"]], "arch.univariate.ARCH.__init__": [[427, 2, 2, 0, "p", "Order of the symmetric innovation"]], "arch.univariate.ARCH.backcast": [[474, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.ARCH.backcast_transform": [[475, 2, 2, 0, "backcast", "User-provided backcast that approximates sigma2[0]."]], "arch.univariate.ARCH.bounds": [[476, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.ARCH.compute_variance": [[477, 2, 2, 0, "backcast", "Value to use when initializing ARCH recursion."], [477, 2, 2, 0, "parameters", "Model parameters"], [477, 2, 2, 0, "resids", "Vector of mean zero residuals"], [477, 2, 2, 0, "sigma2", "Array with same size as resids to store the conditional variance"], [477, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.ARCH.forecast": [[479, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [479, 2, 2, 0, "horizon", "Forecast horizon."], [479, 2, 2, 0, "method", "Method to use when producing the forecast."], [479, 2, 2, 0, "parameters", "Parameters required to forecast the volatility model"], [479, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [479, 2, 2, 0, "resids", "Residuals to use in the recursion"], [479, 2, 2, 0, "rng", "Callable random number generator required if method is 'simulation'."], [479, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [479, 2, 2, 0, "start", "Index of the first observation to use as the starting point for the forecast."], [479, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.ARCH.simulate": [[483, 2, 2, 0, "burn", "Number of additional observations to generate when initializing the simulation"], [483, 2, 2, 0, "initial_value", "Scalar or array of initial values to use when initializing the simulation"], [483, 2, 2, 0, "nobs", "Number of data points to simulate"], [483, 2, 2, 0, "parameters", "Parameters required to simulate the volatility model"], [483, 2, 2, 0, "rng", "Callable function that takes a single integer input and returns a vector of random numbers"]], "arch.univariate.ARCH.starting_values": [[485, 2, 2, 0, "resids", "Array of (approximate) residuals to use when computing starting values"]], "arch.univariate.ARCH.update": [[487, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [487, 2, 2, 0, "index", "The numerical index of the variance to compute"], [487, 2, 2, 0, "parameters", "The variance model parameters"], [487, 2, 2, 0, "resids", "The residual array."], [487, 2, 2, 0, "sigma2", "The array containing the variances."], [487, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.ARCH.variance_bounds": [[489, 2, 2, 0, "power", "Power used in the model."], [489, 2, 2, 0, "resids", "Approximate residuals to use to compute the lower and upper bounds on the conditional variance"]], "arch.univariate.ARCHInMean": [[491, 3, 1, 0, "bounds", "Construct bounds for parameters to use in non-linear optimization"], [492, 3, 1, 0, "compute_param_cov", "Computes parameter covariances using numerical derivatives."], [493, 3, 1, 0, "constraints", "Construct linear constraint arrays  for use in non-linear optimization"], [494, 5, 1, 0, "distribution", "Set or gets the error distribution"], [495, 3, 1, 0, "fit", "Estimate model parameters"], [496, 3, 1, 0, "fix", "Allows an ARCHModelFixedResult to be constructed from fixed parameters."], [497, 3, 1, 0, "forecast", "Construct forecasts from estimated model"], [498, 5, 1, 0, "form", "The form of the conditional variance in the mean"], [499, 5, 1, 0, "name", "The name of the model."], [500, 5, 1, 0, "num_params", "Returns the number of parameters"], [501, 3, 1, 0, "parameter_names", "List of parameters names"], [502, 3, 1, 0, "resids", "Compute model residuals"], [503, 3, 1, 0, "simulate", "Simulates data from a linear regression, AR or HAR models"], [504, 3, 1, 0, "starting_values", "Returns starting values for the mean model, often the same as the values returned from fit"], [505, 5, 1, 0, "volatility", "Set or gets the volatility process"], [506, 5, 1, 0, "x", "Gets the value of the exogenous regressors in the model"], [507, 5, 1, 0, "y", "Returns the dependent variable"]], "arch.univariate.ARCHInMean.__init__": [[428, 2, 2, 0, "constant", "Flag whether the model should include a constant"], [428, 2, 2, 0, "distribution", "Error distribution to use in the model"], [428, 2, 2, 0, "form", "The form of the conditional variance that appears in the mean equation."], [428, 2, 2, 0, "hold_back", "Number of observations at the start of the sample to exclude when estimating model parameters."], [428, 2, 2, 0, "lags", "Description of lag structure of the HAR."], [428, 2, 2, 0, "rescale", "Flag indicating whether to automatically rescale data if the scale of the data is likely to produce convergence issues when estimating model parameters. If False, the model is estimated on the data without transformation."], [428, 2, 2, 0, "volatility", "Volatility process to use in the model."], [428, 2, 2, 0, "x", "nobs by k element array containing exogenous regressors"], [428, 2, 2, 0, "y", "nobs element vector containing the dependent variable"]], "arch.univariate.ARCHInMean.compute_param_cov": [[492, 2, 2, 0, "backcast", "Value to use for pre-sample observations"], [492, 2, 2, 0, "params", "Model parameters"], [492, 2, 2, 0, "robust", "Flag indicating whether to use robust standard errors (True) or classic MLE (False)"]], "arch.univariate.ARCHInMean.fit": [[495, 2, 2, 0, "backcast", "Value to use as backcast."], [495, 2, 2, 0, "cov_type", "Estimation method of parameter covariance."], [495, 2, 2, 0, "disp", "Either 'final' to print optimization result or 'off' to display nothing."], [495, 2, 2, 0, "first_obs", "First observation to use when estimating model"], [495, 2, 2, 0, "last_obs", "Last observation to use when estimating model"], [495, 2, 2, 0, "options", "Options to pass to scipy.optimize.minimize."], [495, 2, 2, 0, "show_warning", "Flag indicating whether convergence warnings should be shown."], [495, 2, 2, 0, "starting_values", "Array of starting values to use."], [495, 2, 2, 0, "tol", "Tolerance for termination."], [495, 2, 2, 0, "update_freq", "Frequency of iteration updates."]], "arch.univariate.ARCHInMean.fix": [[496, 2, 2, 0, "first_obs", "First observation to use when fixing model"], [496, 2, 2, 0, "last_obs", "Last observation to use when fixing model"], [496, 2, 2, 0, "params", "User specified parameters to use when generating the result."]], "arch.univariate.ARCHInMean.forecast": [[497, 2, 2, 0, "align", "Either 'origin' or 'target'."], [497, 2, 2, 0, "horizon", "Number of steps to forecast"], [497, 2, 2, 0, "method", "Method to use when producing the forecast."], [497, 2, 2, 0, "params", "Parameters required to forecast."], [497, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [497, 2, 2, 0, "reindex", "Whether to reindex the forecasts to have the same dimension as the series being forecast."], [497, 2, 2, 0, "rng", "Custom random number generator to use in simulation-based forecasts. Must produce random samples using the syntax rng(size) where size the 2-element tuple (simulations, horizon)."], [497, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [497, 2, 2, 0, "start", "An integer, datetime or str indicating the first observation to produce the forecast for."], [497, 2, 2, 0, "x", "Values to use for exogenous regressors if any are included in the model."]], "arch.univariate.ARCHInMean.resids": [[502, 2, 2, 0, "params", "Model parameters"], [502, 2, 2, 0, "regressors", "Alternative regressor values to use when computing model residuals"], [502, 2, 2, 0, "y", "Alternative values to use when computing model residuals"]], "arch.univariate.ARCHInMean.simulate": [[503, 2, 2, 0, "burn", "Number of values to simulate to initialize the model and remove dependence on initial values."], [503, 2, 2, 0, "initial_value", "Either a scalar value or max(lags) array set of initial values to use when initializing the model."], [503, 2, 2, 0, "initial_value_vol", "An array or scalar to use when initializing the volatility process."], [503, 2, 2, 0, "nobs", "Length of series to simulate"], [503, 2, 2, 0, "params", "Parameters to use when simulating the model."], [503, 2, 2, 0, "x", "nobs + burn by k array of exogenous variables to include in the simulation."]], "arch.univariate.ARX": [[508, 3, 1, 0, "bounds", "Construct bounds for parameters to use in non-linear optimization"], [509, 3, 1, 0, "compute_param_cov", "Computes parameter covariances using numerical derivatives."], [510, 3, 1, 0, "constraints", "Construct linear constraint arrays  for use in non-linear optimization"], [511, 5, 1, 0, "distribution", "Set or gets the error distribution"], [512, 3, 1, 0, "fit", "Estimate model parameters"], [513, 3, 1, 0, "fix", "Allows an ARCHModelFixedResult to be constructed from fixed parameters."], [514, 3, 1, 0, "forecast", "Construct forecasts from estimated model"], [515, 5, 1, 0, "name", "The name of the model."], [516, 5, 1, 0, "num_params", "Returns the number of parameters"], [517, 3, 1, 0, "parameter_names", "List of parameters names"], [518, 3, 1, 0, "resids", "Compute model residuals"], [519, 3, 1, 0, "simulate", "Simulates data from a linear regression, AR or HAR models"], [520, 3, 1, 0, "starting_values", "Returns starting values for the mean model, often the same as the values returned from fit"], [521, 5, 1, 0, "volatility", "Set or gets the volatility process"], [522, 5, 1, 0, "x", "Gets the value of the exogenous regressors in the model"], [523, 5, 1, 0, "y", "Returns the dependent variable"]], "arch.univariate.ARX.__init__": [[429, 2, 2, 0, "constant", "Flag whether the model should include a constant"], [429, 2, 2, 0, "distribution", "Error distribution to use in the model"], [429, 2, 2, 0, "hold_back", "Number of observations at the start of the sample to exclude when estimating model parameters."], [429, 2, 2, 0, "lags", "Description of lag structure of the HAR."], [429, 2, 2, 0, "rescale", "Flag indicating whether to automatically rescale data if the scale of the data is likely to produce convergence issues when estimating model parameters. If False, the model is estimated on the data without transformation."], [429, 2, 2, 0, "volatility", "Volatility process to use in the model"], [429, 2, 2, 0, "x", "nobs by k element array containing exogenous regressors"], [429, 2, 2, 0, "y", "nobs element vector containing the dependent variable"]], "arch.univariate.ARX.compute_param_cov": [[509, 2, 2, 0, "backcast", "Value to use for pre-sample observations"], [509, 2, 2, 0, "params", "Model parameters"], [509, 2, 2, 0, "robust", "Flag indicating whether to use robust standard errors (True) or classic MLE (False)"]], "arch.univariate.ARX.fit": [[512, 2, 2, 0, "backcast", "Value to use as backcast."], [512, 2, 2, 0, "cov_type", "Estimation method of parameter covariance."], [512, 2, 2, 0, "disp", "Either 'final' to print optimization result or 'off' to display nothing."], [512, 2, 2, 0, "first_obs", "First observation to use when estimating model"], [512, 2, 2, 0, "last_obs", "Last observation to use when estimating model"], [512, 2, 2, 0, "options", "Options to pass to scipy.optimize.minimize."], [512, 2, 2, 0, "show_warning", "Flag indicating whether convergence warnings should be shown."], [512, 2, 2, 0, "starting_values", "Array of starting values to use."], [512, 2, 2, 0, "tol", "Tolerance for termination."], [512, 2, 2, 0, "update_freq", "Frequency of iteration updates."]], "arch.univariate.ARX.fix": [[513, 2, 2, 0, "first_obs", "First observation to use when fixing model"], [513, 2, 2, 0, "last_obs", "Last observation to use when fixing model"], [513, 2, 2, 0, "params", "User specified parameters to use when generating the result."]], "arch.univariate.ARX.forecast": [[514, 2, 2, 0, "align", "Either 'origin' or 'target'."], [514, 2, 2, 0, "horizon", "Number of steps to forecast"], [514, 2, 2, 0, "method", "Method to use when producing the forecast."], [514, 2, 2, 0, "params", "Parameters required to forecast."], [514, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [514, 2, 2, 0, "reindex", "Whether to reindex the forecasts to have the same dimension as the series being forecast."], [514, 2, 2, 0, "rng", "Custom random number generator to use in simulation-based forecasts. Must produce random samples using the syntax rng(size) where size the 2-element tuple (simulations, horizon)."], [514, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [514, 2, 2, 0, "start", "An integer, datetime or str indicating the first observation to produce the forecast for."], [514, 2, 2, 0, "x", "Values to use for exogenous regressors if any are included in the model."]], "arch.univariate.ARX.resids": [[518, 2, 2, 0, "params", "Model parameters"], [518, 2, 2, 0, "regressors", "Alternative regressor values to use when computing model residuals"], [518, 2, 2, 0, "y", "Alternative values to use when computing model residuals"]], "arch.univariate.ARX.simulate": [[519, 2, 2, 0, "burn", "Number of values to simulate to initialize the model and remove dependence on initial values."], [519, 2, 2, 0, "initial_value", "Either a scalar value or max(lags) array set of initial values to use when initializing the model."], [519, 2, 2, 0, "initial_value_vol", "An array or scalar to use when initializing the volatility process."], [519, 2, 2, 0, "nobs", "Length of series to simulate"], [519, 2, 2, 0, "params", "Parameters to use when simulating the model."], [519, 2, 2, 0, "x", "nobs + burn by k array of exogenous variables to include in the simulation."]], "arch.univariate.ConstantMean": [[524, 3, 1, 0, "bounds", "Construct bounds for parameters to use in non-linear optimization"], [525, 3, 1, 0, "compute_param_cov", "Computes parameter covariances using numerical derivatives."], [526, 3, 1, 0, "constraints", "Construct linear constraint arrays  for use in non-linear optimization"], [527, 5, 1, 0, "distribution", "Set or gets the error distribution"], [528, 3, 1, 0, "fit", "Estimate model parameters"], [529, 3, 1, 0, "fix", "Allows an ARCHModelFixedResult to be constructed from fixed parameters."], [530, 3, 1, 0, "forecast", "Construct forecasts from estimated model"], [531, 5, 1, 0, "name", "The name of the model."], [532, 5, 1, 0, "num_params", "Returns the number of parameters"], [533, 3, 1, 0, "parameter_names", "List of parameters names"], [534, 3, 1, 0, "resids", "Compute model residuals"], [535, 3, 1, 0, "simulate", "Simulated data from a constant mean model"], [536, 3, 1, 0, "starting_values", "Returns starting values for the mean model, often the same as the values returned from fit"], [537, 5, 1, 0, "volatility", "Set or gets the volatility process"], [538, 5, 1, 0, "x", "Gets the value of the exogenous regressors in the model"], [539, 5, 1, 0, "y", "Returns the dependent variable"]], "arch.univariate.ConstantMean.__init__": [[430, 2, 2, 0, "distribution", "Error distribution to use in the model"], [430, 2, 2, 0, "hold_back", "Number of observations at the start of the sample to exclude when estimating model parameters."], [430, 2, 2, 0, "rescale", "Flag indicating whether to automatically rescale data if the scale of the data is likely to produce convergence issues when estimating model parameters. If False, the model is estimated on the data without transformation."], [430, 2, 2, 0, "volatility", "Volatility process to use in the model"], [430, 2, 2, 0, "y", "nobs element vector containing the dependent variable"]], "arch.univariate.ConstantMean.compute_param_cov": [[525, 2, 2, 0, "backcast", "Value to use for pre-sample observations"], [525, 2, 2, 0, "params", "Model parameters"], [525, 2, 2, 0, "robust", "Flag indicating whether to use robust standard errors (True) or classic MLE (False)"]], "arch.univariate.ConstantMean.fit": [[528, 2, 2, 0, "backcast", "Value to use as backcast."], [528, 2, 2, 0, "cov_type", "Estimation method of parameter covariance."], [528, 2, 2, 0, "disp", "Either 'final' to print optimization result or 'off' to display nothing."], [528, 2, 2, 0, "first_obs", "First observation to use when estimating model"], [528, 2, 2, 0, "last_obs", "Last observation to use when estimating model"], [528, 2, 2, 0, "options", "Options to pass to scipy.optimize.minimize."], [528, 2, 2, 0, "show_warning", "Flag indicating whether convergence warnings should be shown."], [528, 2, 2, 0, "starting_values", "Array of starting values to use."], [528, 2, 2, 0, "tol", "Tolerance for termination."], [528, 2, 2, 0, "update_freq", "Frequency of iteration updates."]], "arch.univariate.ConstantMean.fix": [[529, 2, 2, 0, "first_obs", "First observation to use when fixing model"], [529, 2, 2, 0, "last_obs", "Last observation to use when fixing model"], [529, 2, 2, 0, "params", "User specified parameters to use when generating the result."]], "arch.univariate.ConstantMean.forecast": [[530, 2, 2, 0, "align", "Either 'origin' or 'target'."], [530, 2, 2, 0, "horizon", "Number of steps to forecast"], [530, 2, 2, 0, "method", "Method to use when producing the forecast."], [530, 2, 2, 0, "params", "Parameters required to forecast."], [530, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [530, 2, 2, 0, "reindex", "Whether to reindex the forecasts to have the same dimension as the series being forecast."], [530, 2, 2, 0, "rng", "Custom random number generator to use in simulation-based forecasts. Must produce random samples using the syntax rng(size) where size the 2-element tuple (simulations, horizon)."], [530, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [530, 2, 2, 0, "start", "An integer, datetime or str indicating the first observation to produce the forecast for."], [530, 2, 2, 0, "x", "Values to use for exogenous regressors if any are included in the model."]], "arch.univariate.ConstantMean.resids": [[534, 2, 2, 0, "params", "Model parameters"], [534, 2, 2, 0, "regressors", "Alternative regressor values to use when computing model residuals"], [534, 2, 2, 0, "y", "Alternative values to use when computing model residuals"]], "arch.univariate.ConstantMean.simulate": [[535, 2, 2, 0, "burn", "Number of values to simulate to initialize the model and remove dependence on initial values."], [535, 2, 2, 0, "initial_value", "This value is not used."], [535, 2, 2, 0, "initial_value_vol", "An array or scalar to use when initializing the volatility process."], [535, 2, 2, 0, "nobs", "Length of series to simulate"], [535, 2, 2, 0, "params", "Parameters to use when simulating the model."], [535, 2, 2, 0, "x", "This value is not used."]], "arch.univariate.ConstantVariance": [[540, 3, 1, 0, "backcast", "Construct values for backcasting to start the recursion"], [541, 3, 1, 0, "backcast_transform", "Transformation to apply to user-provided backcast values"], [542, 3, 1, 0, "bounds", "Returns bounds for parameters"], [543, 3, 1, 0, "compute_variance", "Compute the variance for the ARCH model"], [544, 3, 1, 0, "constraints", "Construct parameter constraints arrays for parameter estimation"], [545, 3, 1, 0, "forecast", "Forecast volatility from the model"], [546, 5, 1, 0, "name", "The name of the volatility process"], [547, 5, 1, 0, "num_params", "The number of parameters in the model"], [548, 3, 1, 0, "parameter_names", "Names of model parameters"], [549, 3, 1, 0, "simulate", "Simulate data from the model"], [550, 5, 1, 0, "start", "Index to use to start variance subarray selection"], [551, 3, 1, 0, "starting_values", "Returns starting values for the ARCH model"], [552, 5, 1, 0, "stop", "Index to use to stop variance subarray selection"], [553, 3, 1, 0, "update", "Compute the variance for a single observation"], [554, 5, 1, 0, "updateable", "Flag indicating that the volatility process supports update"], [555, 3, 1, 0, "variance_bounds", "Construct loose bounds for conditional variances."], [556, 5, 1, 0, "volatility_updater", "Get the volatility updater associated with the volatility process"]], "arch.univariate.ConstantVariance.backcast": [[540, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.ConstantVariance.backcast_transform": [[541, 2, 2, 0, "backcast", "User-provided backcast that approximates sigma2[0]."]], "arch.univariate.ConstantVariance.bounds": [[542, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.ConstantVariance.compute_variance": [[543, 2, 2, 0, "backcast", "Value to use when initializing ARCH recursion."], [543, 2, 2, 0, "parameters", "Model parameters"], [543, 2, 2, 0, "resids", "Vector of mean zero residuals"], [543, 2, 2, 0, "sigma2", "Array with same size as resids to store the conditional variance"], [543, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.ConstantVariance.forecast": [[545, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [545, 2, 2, 0, "horizon", "Forecast horizon."], [545, 2, 2, 0, "method", "Method to use when producing the forecast."], [545, 2, 2, 0, "parameters", "Parameters required to forecast the volatility model"], [545, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [545, 2, 2, 0, "resids", "Residuals to use in the recursion"], [545, 2, 2, 0, "rng", "Callable random number generator required if method is 'simulation'."], [545, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [545, 2, 2, 0, "start", "Index of the first observation to use as the starting point for the forecast."], [545, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.ConstantVariance.simulate": [[549, 2, 2, 0, "burn", "Number of additional observations to generate when initializing the simulation"], [549, 2, 2, 0, "initial_value", "Scalar or array of initial values to use when initializing the simulation"], [549, 2, 2, 0, "nobs", "Number of data points to simulate"], [549, 2, 2, 0, "parameters", "Parameters required to simulate the volatility model"], [549, 2, 2, 0, "rng", "Callable function that takes a single integer input and returns a vector of random numbers"]], "arch.univariate.ConstantVariance.starting_values": [[551, 2, 2, 0, "resids", "Array of (approximate) residuals to use when computing starting values"]], "arch.univariate.ConstantVariance.update": [[553, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [553, 2, 2, 0, "index", "The numerical index of the variance to compute"], [553, 2, 2, 0, "parameters", "The variance model parameters"], [553, 2, 2, 0, "resids", "The residual array."], [553, 2, 2, 0, "sigma2", "The array containing the variances."], [553, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.ConstantVariance.variance_bounds": [[555, 2, 2, 0, "power", "Power used in the model."], [555, 2, 2, 0, "resids", "Approximate residuals to use to compute the lower and upper bounds on the conditional variance"]], "arch.univariate.EGARCH": [[557, 3, 1, 0, "backcast", "Construct values for backcasting to start the recursion"], [558, 3, 1, 0, "backcast_transform", "Transformation to apply to user-provided backcast values"], [559, 3, 1, 0, "bounds", "Returns bounds for parameters"], [560, 3, 1, 0, "compute_variance", "Compute the variance for the ARCH model"], [561, 3, 1, 0, "constraints", "Construct parameter constraints arrays for parameter estimation"], [562, 3, 1, 0, "forecast", "Forecast volatility from the model"], [563, 5, 1, 0, "name", "The name of the volatility process"], [564, 5, 1, 0, "num_params", "The number of parameters in the model"], [565, 3, 1, 0, "parameter_names", "Names of model parameters"], [566, 3, 1, 0, "simulate", "Simulate data from the model"], [567, 5, 1, 0, "start", "Index to use to start variance subarray selection"], [568, 3, 1, 0, "starting_values", "Returns starting values for the ARCH model"], [569, 5, 1, 0, "stop", "Index to use to stop variance subarray selection"], [570, 3, 1, 0, "update", "Compute the variance for a single observation"], [571, 5, 1, 0, "updateable", "Flag indicating that the volatility process supports update"], [572, 3, 1, 0, "variance_bounds", "Construct loose bounds for conditional variances."], [573, 5, 1, 0, "volatility_updater", "Get the volatility updater associated with the volatility process"]], "arch.univariate.EGARCH.__init__": [[432, 2, 2, 0, "o", "Order of the asymmetric innovation"], [432, 2, 2, 0, "p", "Order of the symmetric innovation"], [432, 2, 2, 0, "q", "Order of the lagged (transformed) conditional variance"]], "arch.univariate.EGARCH.backcast": [[557, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.EGARCH.backcast_transform": [[558, 2, 2, 0, "backcast", "User-provided backcast that approximates sigma2[0]."]], "arch.univariate.EGARCH.bounds": [[559, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.EGARCH.compute_variance": [[560, 2, 2, 0, "backcast", "Value to use when initializing ARCH recursion."], [560, 2, 2, 0, "parameters", "Model parameters"], [560, 2, 2, 0, "resids", "Vector of mean zero residuals"], [560, 2, 2, 0, "sigma2", "Array with same size as resids to store the conditional variance"], [560, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.EGARCH.forecast": [[562, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [562, 2, 2, 0, "horizon", "Forecast horizon."], [562, 2, 2, 0, "method", "Method to use when producing the forecast."], [562, 2, 2, 0, "parameters", "Parameters required to forecast the volatility model"], [562, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [562, 2, 2, 0, "resids", "Residuals to use in the recursion"], [562, 2, 2, 0, "rng", "Callable random number generator required if method is 'simulation'."], [562, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [562, 2, 2, 0, "start", "Index of the first observation to use as the starting point for the forecast."], [562, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.EGARCH.simulate": [[566, 2, 2, 0, "burn", "Number of additional observations to generate when initializing the simulation"], [566, 2, 2, 0, "initial_value", "Scalar or array of initial values to use when initializing the simulation"], [566, 2, 2, 0, "nobs", "Number of data points to simulate"], [566, 2, 2, 0, "parameters", "Parameters required to simulate the volatility model"], [566, 2, 2, 0, "rng", "Callable function that takes a single integer input and returns a vector of random numbers"]], "arch.univariate.EGARCH.starting_values": [[568, 2, 2, 0, "resids", "Array of (approximate) residuals to use when computing starting values"]], "arch.univariate.EGARCH.update": [[570, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [570, 2, 2, 0, "index", "The numerical index of the variance to compute"], [570, 2, 2, 0, "parameters", "The variance model parameters"], [570, 2, 2, 0, "resids", "The residual array."], [570, 2, 2, 0, "sigma2", "The array containing the variances."], [570, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.EGARCH.variance_bounds": [[572, 2, 2, 0, "power", "Power used in the model."], [572, 2, 2, 0, "resids", "Approximate residuals to use to compute the lower and upper bounds on the conditional variance"]], "arch.univariate.EWMAVariance": [[574, 3, 1, 0, "backcast", "Construct values for backcasting to start the recursion"], [575, 3, 1, 0, "backcast_transform", "Transformation to apply to user-provided backcast values"], [576, 3, 1, 0, "bounds", "Returns bounds for parameters"], [577, 3, 1, 0, "compute_variance", "Compute the variance for the ARCH model"], [578, 3, 1, 0, "constraints", "Construct parameter constraints arrays for parameter estimation"], [579, 3, 1, 0, "forecast", "Forecast volatility from the model"], [580, 5, 1, 0, "name", "The name of the volatility process"], [581, 5, 1, 0, "num_params", "The number of parameters in the model"], [582, 3, 1, 0, "parameter_names", "Names of model parameters"], [583, 3, 1, 0, "simulate", "Simulate data from the model"], [584, 5, 1, 0, "start", "Index to use to start variance subarray selection"], [585, 3, 1, 0, "starting_values", "Returns starting values for the ARCH model"], [586, 5, 1, 0, "stop", "Index to use to stop variance subarray selection"], [587, 3, 1, 0, "update", "Compute the variance for a single observation"], [588, 5, 1, 0, "updateable", "Flag indicating that the volatility process supports update"], [589, 3, 1, 0, "variance_bounds", "Construct loose bounds for conditional variances."], [590, 5, 1, 0, "volatility_updater", "Get the volatility updater associated with the volatility process"]], "arch.univariate.EWMAVariance.__init__": [[433, 2, 2, 0, "lam", "Smoothing parameter."]], "arch.univariate.EWMAVariance.backcast": [[574, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.EWMAVariance.backcast_transform": [[575, 2, 2, 0, "backcast", "User-provided backcast that approximates sigma2[0]."]], "arch.univariate.EWMAVariance.bounds": [[576, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.EWMAVariance.compute_variance": [[577, 2, 2, 0, "backcast", "Value to use when initializing ARCH recursion."], [577, 2, 2, 0, "parameters", "Model parameters"], [577, 2, 2, 0, "resids", "Vector of mean zero residuals"], [577, 2, 2, 0, "sigma2", "Array with same size as resids to store the conditional variance"], [577, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.EWMAVariance.forecast": [[579, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [579, 2, 2, 0, "horizon", "Forecast horizon."], [579, 2, 2, 0, "method", "Method to use when producing the forecast."], [579, 2, 2, 0, "parameters", "Parameters required to forecast the volatility model"], [579, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [579, 2, 2, 0, "resids", "Residuals to use in the recursion"], [579, 2, 2, 0, "rng", "Callable random number generator required if method is 'simulation'."], [579, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [579, 2, 2, 0, "start", "Index of the first observation to use as the starting point for the forecast."], [579, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.EWMAVariance.simulate": [[583, 2, 2, 0, "burn", "Number of additional observations to generate when initializing the simulation"], [583, 2, 2, 0, "initial_value", "Scalar or array of initial values to use when initializing the simulation"], [583, 2, 2, 0, "nobs", "Number of data points to simulate"], [583, 2, 2, 0, "parameters", "Parameters required to simulate the volatility model"], [583, 2, 2, 0, "rng", "Callable function that takes a single integer input and returns a vector of random numbers"]], "arch.univariate.EWMAVariance.starting_values": [[585, 2, 2, 0, "resids", "Array of (approximate) residuals to use when computing starting values"]], "arch.univariate.EWMAVariance.update": [[587, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [587, 2, 2, 0, "index", "The numerical index of the variance to compute"], [587, 2, 2, 0, "parameters", "The variance model parameters"], [587, 2, 2, 0, "resids", "The residual array."], [587, 2, 2, 0, "sigma2", "The array containing the variances."], [587, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.EWMAVariance.variance_bounds": [[589, 2, 2, 0, "power", "Power used in the model."], [589, 2, 2, 0, "resids", "Approximate residuals to use to compute the lower and upper bounds on the conditional variance"]], "arch.univariate.FIGARCH": [[591, 3, 1, 0, "backcast", "Construct values for backcasting to start the recursion"], [592, 3, 1, 0, "backcast_transform", "Transformation to apply to user-provided backcast values"], [593, 3, 1, 0, "bounds", "Returns bounds for parameters"], [594, 3, 1, 0, "compute_variance", "Compute the variance for the ARCH model"], [595, 3, 1, 0, "constraints", "Construct parameter constraints arrays for parameter estimation"], [596, 3, 1, 0, "forecast", "Forecast volatility from the model"], [597, 5, 1, 0, "name", "The name of the volatility process"], [598, 5, 1, 0, "num_params", "The number of parameters in the model"], [599, 3, 1, 0, "parameter_names", "Names of model parameters"], [600, 3, 1, 0, "simulate", "Simulate data from the model"], [601, 5, 1, 0, "start", "Index to use to start variance subarray selection"], [602, 3, 1, 0, "starting_values", "Returns starting values for the ARCH model"], [603, 5, 1, 0, "stop", "Index to use to stop variance subarray selection"], [604, 5, 1, 0, "truncation", "Truncation lag for the ARCH-infinity approximation"], [605, 3, 1, 0, "update", "Compute the variance for a single observation"], [606, 5, 1, 0, "updateable", "Flag indicating that the volatility process supports update"], [607, 3, 1, 0, "variance_bounds", "Construct loose bounds for conditional variances."], [608, 5, 1, 0, "volatility_updater", "Get the volatility updater associated with the volatility process"]], "arch.univariate.FIGARCH.__init__": [[434, 2, 2, 0, "p", "Order of the symmetric innovation"], [434, 2, 2, 0, "power", "Power to use with the innovations, abs(e) ** power."], [434, 2, 2, 0, "q", "Order of the lagged (transformed) conditional variance"], [434, 2, 2, 0, "truncation", "Truncation point to use in ARCH(\\infty) representation. Default is 1000."]], "arch.univariate.FIGARCH.backcast": [[591, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.FIGARCH.backcast_transform": [[592, 2, 2, 0, "backcast", "User-provided backcast that approximates sigma2[0]."]], "arch.univariate.FIGARCH.bounds": [[593, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.FIGARCH.compute_variance": [[594, 2, 2, 0, "backcast", "Value to use when initializing ARCH recursion."], [594, 2, 2, 0, "parameters", "Model parameters"], [594, 2, 2, 0, "resids", "Vector of mean zero residuals"], [594, 2, 2, 0, "sigma2", "Array with same size as resids to store the conditional variance"], [594, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.FIGARCH.forecast": [[596, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [596, 2, 2, 0, "horizon", "Forecast horizon."], [596, 2, 2, 0, "method", "Method to use when producing the forecast."], [596, 2, 2, 0, "parameters", "Parameters required to forecast the volatility model"], [596, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [596, 2, 2, 0, "resids", "Residuals to use in the recursion"], [596, 2, 2, 0, "rng", "Callable random number generator required if method is 'simulation'."], [596, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [596, 2, 2, 0, "start", "Index of the first observation to use as the starting point for the forecast."], [596, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.FIGARCH.simulate": [[600, 2, 2, 0, "burn", "Number of additional observations to generate when initializing the simulation"], [600, 2, 2, 0, "initial_value", "Scalar or array of initial values to use when initializing the simulation"], [600, 2, 2, 0, "nobs", "Number of data points to simulate"], [600, 2, 2, 0, "parameters", "Parameters required to simulate the volatility model"], [600, 2, 2, 0, "rng", "Callable function that takes a single integer input and returns a vector of random numbers"]], "arch.univariate.FIGARCH.starting_values": [[602, 2, 2, 0, "resids", "Array of (approximate) residuals to use when computing starting values"]], "arch.univariate.FIGARCH.update": [[605, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [605, 2, 2, 0, "index", "The numerical index of the variance to compute"], [605, 2, 2, 0, "parameters", "The variance model parameters"], [605, 2, 2, 0, "resids", "The residual array."], [605, 2, 2, 0, "sigma2", "The array containing the variances."], [605, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.FIGARCH.variance_bounds": [[607, 2, 2, 0, "power", "Power used in the model."], [607, 2, 2, 0, "resids", "Approximate residuals to use to compute the lower and upper bounds on the conditional variance"]], "arch.univariate.FixedVariance": [[609, 3, 1, 0, "backcast", "Construct values for backcasting to start the recursion"], [610, 3, 1, 0, "backcast_transform", "Transformation to apply to user-provided backcast values"], [611, 3, 1, 0, "bounds", "Returns bounds for parameters"], [612, 3, 1, 0, "compute_variance", "Compute the variance for the ARCH model"], [613, 3, 1, 0, "constraints", "Construct parameter constraints arrays for parameter estimation"], [614, 3, 1, 0, "forecast", "Forecast volatility from the model"], [615, 5, 1, 0, "name", "The name of the volatility process"], [616, 5, 1, 0, "num_params", "The number of parameters in the model"], [617, 3, 1, 0, "parameter_names", "Names of model parameters"], [618, 3, 1, 0, "simulate", "Simulate data from the model"], [619, 5, 1, 0, "start", "Index to use to start variance subarray selection"], [620, 3, 1, 0, "starting_values", "Returns starting values for the ARCH model"], [621, 5, 1, 0, "stop", "Index to use to stop variance subarray selection"], [622, 3, 1, 0, "update", "Compute the variance for a single observation"], [623, 5, 1, 0, "updateable", "Flag indicating that the volatility process supports update"], [624, 3, 1, 0, "variance_bounds", "Construct loose bounds for conditional variances."], [625, 5, 1, 0, "volatility_updater", "Get the volatility updater associated with the volatility process"]], "arch.univariate.FixedVariance.__init__": [[435, 2, 2, 0, "unit_scale", "Flag whether to enforce a unit scale."], [435, 2, 2, 0, "variance", "Array containing the variances to use."]], "arch.univariate.FixedVariance.backcast": [[609, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.FixedVariance.backcast_transform": [[610, 2, 2, 0, "backcast", "User-provided backcast that approximates sigma2[0]."]], "arch.univariate.FixedVariance.bounds": [[611, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.FixedVariance.compute_variance": [[612, 2, 2, 0, "backcast", "Value to use when initializing ARCH recursion."], [612, 2, 2, 0, "parameters", "Model parameters"], [612, 2, 2, 0, "resids", "Vector of mean zero residuals"], [612, 2, 2, 0, "sigma2", "Array with same size as resids to store the conditional variance"], [612, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.FixedVariance.forecast": [[614, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [614, 2, 2, 0, "horizon", "Forecast horizon."], [614, 2, 2, 0, "method", "Method to use when producing the forecast."], [614, 2, 2, 0, "parameters", "Parameters required to forecast the volatility model"], [614, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [614, 2, 2, 0, "resids", "Residuals to use in the recursion"], [614, 2, 2, 0, "rng", "Callable random number generator required if method is 'simulation'."], [614, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [614, 2, 2, 0, "start", "Index of the first observation to use as the starting point for the forecast."], [614, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.FixedVariance.simulate": [[618, 2, 2, 0, "burn", "Number of additional observations to generate when initializing the simulation"], [618, 2, 2, 0, "initial_value", "Scalar or array of initial values to use when initializing the simulation"], [618, 2, 2, 0, "nobs", "Number of data points to simulate"], [618, 2, 2, 0, "parameters", "Parameters required to simulate the volatility model"], [618, 2, 2, 0, "rng", "Callable function that takes a single integer input and returns a vector of random numbers"]], "arch.univariate.FixedVariance.starting_values": [[620, 2, 2, 0, "resids", "Array of (approximate) residuals to use when computing starting values"]], "arch.univariate.FixedVariance.update": [[622, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [622, 2, 2, 0, "index", "The numerical index of the variance to compute"], [622, 2, 2, 0, "parameters", "The variance model parameters"], [622, 2, 2, 0, "resids", "The residual array."], [622, 2, 2, 0, "sigma2", "The array containing the variances."], [622, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.FixedVariance.variance_bounds": [[624, 2, 2, 0, "power", "Power used in the model."], [624, 2, 2, 0, "resids", "Approximate residuals to use to compute the lower and upper bounds on the conditional variance"]], "arch.univariate.GARCH": [[626, 3, 1, 0, "backcast", "Construct values for backcasting to start the recursion"], [627, 3, 1, 0, "backcast_transform", "Transformation to apply to user-provided backcast values"], [628, 3, 1, 0, "bounds", "Returns bounds for parameters"], [629, 3, 1, 0, "compute_variance", "Compute the variance for the ARCH model"], [630, 3, 1, 0, "constraints", "Construct parameter constraints arrays for parameter estimation"], [631, 3, 1, 0, "forecast", "Forecast volatility from the model"], [632, 5, 1, 0, "name", "The name of the volatility process"], [633, 5, 1, 0, "num_params", "The number of parameters in the model"], [634, 3, 1, 0, "parameter_names", "Names of model parameters"], [635, 3, 1, 0, "simulate", "Simulate data from the model"], [636, 5, 1, 0, "start", "Index to use to start variance subarray selection"], [637, 3, 1, 0, "starting_values", "Returns starting values for the ARCH model"], [638, 5, 1, 0, "stop", "Index to use to stop variance subarray selection"], [639, 3, 1, 0, "update", "Compute the variance for a single observation"], [640, 5, 1, 0, "updateable", "Flag indicating that the volatility process supports update"], [641, 3, 1, 0, "variance_bounds", "Construct loose bounds for conditional variances."], [642, 5, 1, 0, "volatility_updater", "Get the volatility updater associated with the volatility process"]], "arch.univariate.GARCH.__init__": [[436, 2, 2, 0, "o", "Order of the asymmetric innovation"], [436, 2, 2, 0, "p", "Order of the symmetric innovation"], [436, 2, 2, 0, "power", "Power to use with the innovations, abs(e) ** power."], [436, 2, 2, 0, "q", "Order of the lagged (transformed) conditional variance"]], "arch.univariate.GARCH.backcast": [[626, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.GARCH.backcast_transform": [[627, 2, 2, 0, "backcast", "User-provided backcast that approximates sigma2[0]."]], "arch.univariate.GARCH.bounds": [[628, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.GARCH.compute_variance": [[629, 2, 2, 0, "backcast", "Value to use when initializing ARCH recursion."], [629, 2, 2, 0, "parameters", "Model parameters"], [629, 2, 2, 0, "resids", "Vector of mean zero residuals"], [629, 2, 2, 0, "sigma2", "Array with same size as resids to store the conditional variance"], [629, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.GARCH.forecast": [[631, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [631, 2, 2, 0, "horizon", "Forecast horizon."], [631, 2, 2, 0, "method", "Method to use when producing the forecast."], [631, 2, 2, 0, "parameters", "Parameters required to forecast the volatility model"], [631, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [631, 2, 2, 0, "resids", "Residuals to use in the recursion"], [631, 2, 2, 0, "rng", "Callable random number generator required if method is 'simulation'."], [631, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [631, 2, 2, 0, "start", "Index of the first observation to use as the starting point for the forecast."], [631, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.GARCH.simulate": [[635, 2, 2, 0, "burn", "Number of additional observations to generate when initializing the simulation"], [635, 2, 2, 0, "initial_value", "Scalar or array of initial values to use when initializing the simulation"], [635, 2, 2, 0, "nobs", "Number of data points to simulate"], [635, 2, 2, 0, "parameters", "Parameters required to simulate the volatility model"], [635, 2, 2, 0, "rng", "Callable function that takes a single integer input and returns a vector of random numbers"]], "arch.univariate.GARCH.starting_values": [[637, 2, 2, 0, "resids", "Array of (approximate) residuals to use when computing starting values"]], "arch.univariate.GARCH.update": [[639, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [639, 2, 2, 0, "index", "The numerical index of the variance to compute"], [639, 2, 2, 0, "parameters", "The variance model parameters"], [639, 2, 2, 0, "resids", "The residual array."], [639, 2, 2, 0, "sigma2", "The array containing the variances."], [639, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.GARCH.variance_bounds": [[641, 2, 2, 0, "power", "Power used in the model."], [641, 2, 2, 0, "resids", "Approximate residuals to use to compute the lower and upper bounds on the conditional variance"]], "arch.univariate.GeneralizedError": [[643, 3, 1, 0, "bounds", "Parameter bounds for use in optimization."], [644, 3, 1, 0, "cdf", "Cumulative distribution function"], [645, 3, 1, 0, "constraints", "Construct arrays to use in constrained optimization."], [646, 5, 1, 0, "generator", "The NumPy Generator or RandomState attached to the distribution"], [647, 3, 1, 0, "loglikelihood", "Computes the log-likelihood of assuming residuals are have a Generalized Error Distribution, conditional on the variance."], [648, 3, 1, 0, "moment", "Moment of order n"], [649, 5, 1, 0, "name", "The name of the distribution"], [650, 3, 1, 0, "parameter_names", "Names of distribution shape parameters"], [651, 3, 1, 0, "partial_moment", "Order n lower partial moment from -inf to z"], [652, 3, 1, 0, "ppf", "Inverse cumulative density function (ICDF)"], [653, 5, 1, 0, "random_state", "The NumPy RandomState attached to the distribution"], [654, 3, 1, 0, "simulate", "Simulates i.i.d. draws from the distribution"], [655, 3, 1, 0, "starting_values", "Construct starting values for use in optimization."]], "arch.univariate.GeneralizedError.__init__": [[437, 2, 2, 0, "random_state", "Deprecated since version 5.0: random_state is deprecated."], [437, 2, 2, 0, "seed", "Random number generator instance or int to use."]], "arch.univariate.GeneralizedError.bounds": [[643, 2, 2, 0, "resids", "Residuals to use when computing the bounds"]], "arch.univariate.GeneralizedError.cdf": [[644, 2, 2, 0, "parameters", "Distribution parameters."], [644, 2, 2, 0, "resids", "Values at which to evaluate the cdf"]], "arch.univariate.GeneralizedError.loglikelihood": [[647, 2, 2, 0, "individual", "Flag indicating whether to return the vector of individual log likelihoods (True) or the sum (False)"], [647, 2, 2, 0, "parameters", "Shape parameter of the GED distribution"], [647, 2, 2, 0, "resids", "The residuals to use in the log-likelihood calculation"], [647, 2, 2, 0, "sigma2", "Conditional variances of resids"]], "arch.univariate.GeneralizedError.moment": [[648, 2, 2, 0, "n", "Order of moment"], [648, 2, 2, 0, "parameters", "Distribution parameters."]], "arch.univariate.GeneralizedError.partial_moment": [[651, 2, 2, 0, "n", "Order of partial moment"], [651, 2, 2, 0, "parameters", "Distribution parameters."], [651, 2, 2, 0, "z", "Upper bound for partial moment integral"]], "arch.univariate.GeneralizedError.ppf": [[652, 2, 2, 0, "parameters", "Distribution parameters."], [652, 2, 2, 0, "pits", "Probability-integral-transformed values in the interval (0, 1)."]], "arch.univariate.GeneralizedError.simulate": [[654, 2, 2, 0, "parameters", "Distribution parameters"]], "arch.univariate.GeneralizedError.starting_values": [[655, 2, 2, 0, "std_resid", "Estimated standardized residuals to use in computing starting values for the shape parameter"]], "arch.univariate.HARCH": [[656, 3, 1, 0, "backcast", "Construct values for backcasting to start the recursion"], [657, 3, 1, 0, "backcast_transform", "Transformation to apply to user-provided backcast values"], [658, 3, 1, 0, "bounds", "Returns bounds for parameters"], [659, 3, 1, 0, "compute_variance", "Compute the variance for the ARCH model"], [660, 3, 1, 0, "constraints", "Construct parameter constraints arrays for parameter estimation"], [661, 3, 1, 0, "forecast", "Forecast volatility from the model"], [662, 5, 1, 0, "name", "The name of the volatility process"], [663, 5, 1, 0, "num_params", "The number of parameters in the model"], [664, 3, 1, 0, "parameter_names", "Names of model parameters"], [665, 3, 1, 0, "simulate", "Simulate data from the model"], [666, 5, 1, 0, "start", "Index to use to start variance subarray selection"], [667, 3, 1, 0, "starting_values", "Returns starting values for the ARCH model"], [668, 5, 1, 0, "stop", "Index to use to stop variance subarray selection"], [669, 3, 1, 0, "update", "Compute the variance for a single observation"], [670, 5, 1, 0, "updateable", "Flag indicating that the volatility process supports update"], [671, 3, 1, 0, "variance_bounds", "Construct loose bounds for conditional variances."], [672, 5, 1, 0, "volatility_updater", "Get the volatility updater associated with the volatility process"]], "arch.univariate.HARCH.__init__": [[438, 2, 2, 0, "lags", "List of lags to include in the model, or if scalar, includes all lags up the value"]], "arch.univariate.HARCH.backcast": [[656, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.HARCH.backcast_transform": [[657, 2, 2, 0, "backcast", "User-provided backcast that approximates sigma2[0]."]], "arch.univariate.HARCH.bounds": [[658, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.HARCH.compute_variance": [[659, 2, 2, 0, "backcast", "Value to use when initializing ARCH recursion."], [659, 2, 2, 0, "parameters", "Model parameters"], [659, 2, 2, 0, "resids", "Vector of mean zero residuals"], [659, 2, 2, 0, "sigma2", "Array with same size as resids to store the conditional variance"], [659, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.HARCH.forecast": [[661, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [661, 2, 2, 0, "horizon", "Forecast horizon."], [661, 2, 2, 0, "method", "Method to use when producing the forecast."], [661, 2, 2, 0, "parameters", "Parameters required to forecast the volatility model"], [661, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [661, 2, 2, 0, "resids", "Residuals to use in the recursion"], [661, 2, 2, 0, "rng", "Callable random number generator required if method is 'simulation'."], [661, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [661, 2, 2, 0, "start", "Index of the first observation to use as the starting point for the forecast."], [661, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.HARCH.simulate": [[665, 2, 2, 0, "burn", "Number of additional observations to generate when initializing the simulation"], [665, 2, 2, 0, "initial_value", "Scalar or array of initial values to use when initializing the simulation"], [665, 2, 2, 0, "nobs", "Number of data points to simulate"], [665, 2, 2, 0, "parameters", "Parameters required to simulate the volatility model"], [665, 2, 2, 0, "rng", "Callable function that takes a single integer input and returns a vector of random numbers"]], "arch.univariate.HARCH.starting_values": [[667, 2, 2, 0, "resids", "Array of (approximate) residuals to use when computing starting values"]], "arch.univariate.HARCH.update": [[669, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [669, 2, 2, 0, "index", "The numerical index of the variance to compute"], [669, 2, 2, 0, "parameters", "The variance model parameters"], [669, 2, 2, 0, "resids", "The residual array."], [669, 2, 2, 0, "sigma2", "The array containing the variances."], [669, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.HARCH.variance_bounds": [[671, 2, 2, 0, "power", "Power used in the model."], [671, 2, 2, 0, "resids", "Approximate residuals to use to compute the lower and upper bounds on the conditional variance"]], "arch.univariate.HARX": [[673, 3, 1, 0, "bounds", "Construct bounds for parameters to use in non-linear optimization"], [674, 3, 1, 0, "compute_param_cov", "Computes parameter covariances using numerical derivatives."], [675, 3, 1, 0, "constraints", "Construct linear constraint arrays  for use in non-linear optimization"], [676, 5, 1, 0, "distribution", "Set or gets the error distribution"], [677, 3, 1, 0, "fit", "Estimate model parameters"], [678, 3, 1, 0, "fix", "Allows an ARCHModelFixedResult to be constructed from fixed parameters."], [679, 3, 1, 0, "forecast", "Construct forecasts from estimated model"], [680, 5, 1, 0, "name", "The name of the model."], [681, 5, 1, 0, "num_params", "Returns the number of parameters"], [682, 3, 1, 0, "parameter_names", "List of parameters names"], [683, 3, 1, 0, "resids", "Compute model residuals"], [684, 3, 1, 0, "simulate", "Simulates data from a linear regression, AR or HAR models"], [685, 3, 1, 0, "starting_values", "Returns starting values for the mean model, often the same as the values returned from fit"], [686, 5, 1, 0, "volatility", "Set or gets the volatility process"], [687, 5, 1, 0, "x", "Gets the value of the exogenous regressors in the model"], [688, 5, 1, 0, "y", "Returns the dependent variable"]], "arch.univariate.HARX.__init__": [[439, 2, 2, 0, "constant", "Flag whether the model should include a constant"], [439, 2, 2, 0, "distribution", "Error distribution to use in the model"], [439, 2, 2, 0, "hold_back", "Number of observations at the start of the sample to exclude when estimating model parameters."], [439, 2, 2, 0, "lags", "Description of lag structure of the HAR."], [439, 2, 2, 0, "rescale", "Flag indicating whether to automatically rescale data if the scale of the data is likely to produce convergence issues when estimating model parameters. If False, the model is estimated on the data without transformation."], [439, 2, 2, 0, "use_rotated", "Flag indicating to use the alternative rotated form of the HAR where HAR lags do not overlap"], [439, 2, 2, 0, "volatility", "Volatility process to use in the model"], [439, 2, 2, 0, "x", "nobs by k element array containing exogenous regressors"], [439, 2, 2, 0, "y", "nobs element vector containing the dependent variable"]], "arch.univariate.HARX.compute_param_cov": [[674, 2, 2, 0, "backcast", "Value to use for pre-sample observations"], [674, 2, 2, 0, "params", "Model parameters"], [674, 2, 2, 0, "robust", "Flag indicating whether to use robust standard errors (True) or classic MLE (False)"]], "arch.univariate.HARX.fit": [[677, 2, 2, 0, "backcast", "Value to use as backcast."], [677, 2, 2, 0, "cov_type", "Estimation method of parameter covariance."], [677, 2, 2, 0, "disp", "Either 'final' to print optimization result or 'off' to display nothing."], [677, 2, 2, 0, "first_obs", "First observation to use when estimating model"], [677, 2, 2, 0, "last_obs", "Last observation to use when estimating model"], [677, 2, 2, 0, "options", "Options to pass to scipy.optimize.minimize."], [677, 2, 2, 0, "show_warning", "Flag indicating whether convergence warnings should be shown."], [677, 2, 2, 0, "starting_values", "Array of starting values to use."], [677, 2, 2, 0, "tol", "Tolerance for termination."], [677, 2, 2, 0, "update_freq", "Frequency of iteration updates."]], "arch.univariate.HARX.fix": [[678, 2, 2, 0, "first_obs", "First observation to use when fixing model"], [678, 2, 2, 0, "last_obs", "Last observation to use when fixing model"], [678, 2, 2, 0, "params", "User specified parameters to use when generating the result."]], "arch.univariate.HARX.forecast": [[679, 2, 2, 0, "align", "Either 'origin' or 'target'."], [679, 2, 2, 0, "horizon", "Number of steps to forecast"], [679, 2, 2, 0, "method", "Method to use when producing the forecast."], [679, 2, 2, 0, "params", "Parameters required to forecast."], [679, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [679, 2, 2, 0, "reindex", "Whether to reindex the forecasts to have the same dimension as the series being forecast."], [679, 2, 2, 0, "rng", "Custom random number generator to use in simulation-based forecasts. Must produce random samples using the syntax rng(size) where size the 2-element tuple (simulations, horizon)."], [679, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [679, 2, 2, 0, "start", "An integer, datetime or str indicating the first observation to produce the forecast for."], [679, 2, 2, 0, "x", "Values to use for exogenous regressors if any are included in the model."]], "arch.univariate.HARX.resids": [[683, 2, 2, 0, "params", "Model parameters"], [683, 2, 2, 0, "regressors", "Alternative regressor values to use when computing model residuals"], [683, 2, 2, 0, "y", "Alternative values to use when computing model residuals"]], "arch.univariate.HARX.simulate": [[684, 2, 2, 0, "burn", "Number of values to simulate to initialize the model and remove dependence on initial values."], [684, 2, 2, 0, "initial_value", "Either a scalar value or max(lags) array set of initial values to use when initializing the model."], [684, 2, 2, 0, "initial_value_vol", "An array or scalar to use when initializing the volatility process."], [684, 2, 2, 0, "nobs", "Length of series to simulate"], [684, 2, 2, 0, "params", "Parameters to use when simulating the model."], [684, 2, 2, 0, "x", "nobs + burn by k array of exogenous variables to include in the simulation."]], "arch.univariate.LS": [[689, 3, 1, 0, "bounds", "Construct bounds for parameters to use in non-linear optimization"], [690, 3, 1, 0, "compute_param_cov", "Computes parameter covariances using numerical derivatives."], [691, 3, 1, 0, "constraints", "Construct linear constraint arrays  for use in non-linear optimization"], [692, 5, 1, 0, "distribution", "Set or gets the error distribution"], [693, 3, 1, 0, "fit", "Estimate model parameters"], [694, 3, 1, 0, "fix", "Allows an ARCHModelFixedResult to be constructed from fixed parameters."], [695, 3, 1, 0, "forecast", "Construct forecasts from estimated model"], [696, 5, 1, 0, "name", "The name of the model."], [697, 5, 1, 0, "num_params", "Returns the number of parameters"], [698, 3, 1, 0, "parameter_names", "List of parameters names"], [699, 3, 1, 0, "resids", "Compute model residuals"], [700, 3, 1, 0, "simulate", "Simulates data from a linear regression, AR or HAR models"], [701, 3, 1, 0, "starting_values", "Returns starting values for the mean model, often the same as the values returned from fit"], [702, 5, 1, 0, "volatility", "Set or gets the volatility process"], [703, 5, 1, 0, "x", "Gets the value of the exogenous regressors in the model"], [704, 5, 1, 0, "y", "Returns the dependent variable"]], "arch.univariate.LS.__init__": [[440, 2, 2, 0, "constant", "Flag whether the model should include a constant"], [440, 2, 2, 0, "distribution", "Error distribution to use in the model"], [440, 2, 2, 0, "hold_back", "Number of observations at the start of the sample to exclude when estimating model parameters."], [440, 2, 2, 0, "rescale", "Flag indicating whether to automatically rescale data if the scale of the data is likely to produce convergence issues when estimating model parameters. If False, the model is estimated on the data without transformation."], [440, 2, 2, 0, "volatility", "Volatility process to use in the model"], [440, 2, 2, "arch.univariate.LS", "x", "Least squares model estimation and simulation"], [440, 2, 2, 0, "y", "nobs by k element array containing exogenous regressors"]], "arch.univariate.LS.compute_param_cov": [[690, 2, 2, 0, "backcast", "Value to use for pre-sample observations"], [690, 2, 2, 0, "params", "Model parameters"], [690, 2, 2, 0, "robust", "Flag indicating whether to use robust standard errors (True) or classic MLE (False)"]], "arch.univariate.LS.fit": [[693, 2, 2, 0, "backcast", "Value to use as backcast."], [693, 2, 2, 0, "cov_type", "Estimation method of parameter covariance."], [693, 2, 2, 0, "disp", "Either 'final' to print optimization result or 'off' to display nothing."], [693, 2, 2, 0, "first_obs", "First observation to use when estimating model"], [693, 2, 2, 0, "last_obs", "Last observation to use when estimating model"], [693, 2, 2, 0, "options", "Options to pass to scipy.optimize.minimize."], [693, 2, 2, 0, "show_warning", "Flag indicating whether convergence warnings should be shown."], [693, 2, 2, 0, "starting_values", "Array of starting values to use."], [693, 2, 2, 0, "tol", "Tolerance for termination."], [693, 2, 2, 0, "update_freq", "Frequency of iteration updates."]], "arch.univariate.LS.fix": [[694, 2, 2, 0, "first_obs", "First observation to use when fixing model"], [694, 2, 2, 0, "last_obs", "Last observation to use when fixing model"], [694, 2, 2, 0, "params", "User specified parameters to use when generating the result."]], "arch.univariate.LS.forecast": [[695, 2, 2, 0, "align", "Either 'origin' or 'target'."], [695, 2, 2, 0, "horizon", "Number of steps to forecast"], [695, 2, 2, 0, "method", "Method to use when producing the forecast."], [695, 2, 2, 0, "params", "Parameters required to forecast."], [695, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [695, 2, 2, 0, "reindex", "Whether to reindex the forecasts to have the same dimension as the series being forecast."], [695, 2, 2, 0, "rng", "Custom random number generator to use in simulation-based forecasts. Must produce random samples using the syntax rng(size) where size the 2-element tuple (simulations, horizon)."], [695, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [695, 2, 2, 0, "start", "An integer, datetime or str indicating the first observation to produce the forecast for."], [695, 2, 2, 0, "x", "Values to use for exogenous regressors if any are included in the model."]], "arch.univariate.LS.resids": [[699, 2, 2, 0, "params", "Model parameters"], [699, 2, 2, 0, "regressors", "Alternative regressor values to use when computing model residuals"], [699, 2, 2, 0, "y", "Alternative values to use when computing model residuals"]], "arch.univariate.LS.simulate": [[700, 2, 2, 0, "burn", "Number of values to simulate to initialize the model and remove dependence on initial values."], [700, 2, 2, 0, "initial_value", "Either a scalar value or max(lags) array set of initial values to use when initializing the model."], [700, 2, 2, 0, "initial_value_vol", "An array or scalar to use when initializing the volatility process."], [700, 2, 2, 0, "nobs", "Length of series to simulate"], [700, 2, 2, 0, "params", "Parameters to use when simulating the model."], [700, 2, 2, 0, "x", "nobs + burn by k array of exogenous variables to include in the simulation."]], "arch.univariate.MIDASHyperbolic": [[705, 3, 1, 0, "backcast", "Construct values for backcasting to start the recursion"], [706, 3, 1, 0, "backcast_transform", "Transformation to apply to user-provided backcast values"], [707, 3, 1, 0, "bounds", "Returns bounds for parameters"], [708, 3, 1, 0, "compute_variance", "Compute the variance for the ARCH model"], [709, 3, 1, 0, "constraints", "Constraints"], [710, 3, 1, 0, "forecast", "Forecast volatility from the model"], [711, 5, 1, 0, "name", "The name of the volatility process"], [712, 5, 1, 0, "num_params", "The number of parameters in the model"], [713, 3, 1, 0, "parameter_names", "Names of model parameters"], [714, 3, 1, 0, "simulate", "Simulate data from the model"], [715, 5, 1, 0, "start", "Index to use to start variance subarray selection"], [716, 3, 1, 0, "starting_values", "Returns starting values for the ARCH model"], [717, 5, 1, 0, "stop", "Index to use to stop variance subarray selection"], [718, 3, 1, 0, "update", "Compute the variance for a single observation"], [719, 5, 1, 0, "updateable", "Flag indicating that the volatility process supports update"], [720, 3, 1, 0, "variance_bounds", "Construct loose bounds for conditional variances."], [721, 5, 1, 0, "volatility_updater", "Get the volatility updater associated with the volatility process"]], "arch.univariate.MIDASHyperbolic.__init__": [[441, 2, 2, 0, "asym", "Flag indicating whether to include an asymmetric term"], [441, 2, 2, 0, "m", "Length of maximum lag to include in the model"]], "arch.univariate.MIDASHyperbolic.backcast": [[705, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.MIDASHyperbolic.backcast_transform": [[706, 2, 2, 0, "backcast", "User-provided backcast that approximates sigma2[0]."]], "arch.univariate.MIDASHyperbolic.bounds": [[707, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.MIDASHyperbolic.compute_variance": [[708, 2, 2, 0, "backcast", "Value to use when initializing ARCH recursion."], [708, 2, 2, 0, "parameters", "Model parameters"], [708, 2, 2, 0, "resids", "Vector of mean zero residuals"], [708, 2, 2, 0, "sigma2", "Array with same size as resids to store the conditional variance"], [708, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.MIDASHyperbolic.forecast": [[710, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [710, 2, 2, 0, "horizon", "Forecast horizon."], [710, 2, 2, 0, "method", "Method to use when producing the forecast."], [710, 2, 2, 0, "parameters", "Parameters required to forecast the volatility model"], [710, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [710, 2, 2, 0, "resids", "Residuals to use in the recursion"], [710, 2, 2, 0, "rng", "Callable random number generator required if method is 'simulation'."], [710, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [710, 2, 2, 0, "start", "Index of the first observation to use as the starting point for the forecast."], [710, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.MIDASHyperbolic.simulate": [[714, 2, 2, 0, "burn", "Number of additional observations to generate when initializing the simulation"], [714, 2, 2, 0, "initial_value", "Scalar or array of initial values to use when initializing the simulation"], [714, 2, 2, 0, "nobs", "Number of data points to simulate"], [714, 2, 2, 0, "parameters", "Parameters required to simulate the volatility model"], [714, 2, 2, 0, "rng", "Callable function that takes a single integer input and returns a vector of random numbers"]], "arch.univariate.MIDASHyperbolic.starting_values": [[716, 2, 2, 0, "resids", "Array of (approximate) residuals to use when computing starting values"]], "arch.univariate.MIDASHyperbolic.update": [[718, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [718, 2, 2, 0, "index", "The numerical index of the variance to compute"], [718, 2, 2, 0, "parameters", "The variance model parameters"], [718, 2, 2, 0, "resids", "The residual array."], [718, 2, 2, 0, "sigma2", "The array containing the variances."], [718, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.MIDASHyperbolic.variance_bounds": [[720, 2, 2, 0, "power", "Power used in the model."], [720, 2, 2, 0, "resids", "Approximate residuals to use to compute the lower and upper bounds on the conditional variance"]], "arch.univariate.Normal": [[722, 3, 1, 0, "bounds", "Parameter bounds for use in optimization."], [723, 3, 1, 0, "cdf", "Cumulative distribution function"], [724, 3, 1, 0, "constraints", "Construct arrays to use in constrained optimization."], [725, 5, 1, 0, "generator", "The NumPy Generator or RandomState attached to the distribution"], [726, 3, 1, 0, "loglikelihood", "Computes the log-likelihood of assuming residuals are normally distributed, conditional on the variance"], [727, 3, 1, 0, "moment", "Moment of order n"], [728, 5, 1, 0, "name", "The name of the distribution"], [729, 3, 1, 0, "parameter_names", "Names of distribution shape parameters"], [730, 3, 1, 0, "partial_moment", "Order n lower partial moment from -inf to z"], [731, 3, 1, 0, "ppf", "Inverse cumulative density function (ICDF)"], [732, 5, 1, 0, "random_state", "The NumPy RandomState attached to the distribution"], [733, 3, 1, 0, "simulate", "Simulates i.i.d. draws from the distribution"], [734, 3, 1, 0, "starting_values", "Construct starting values for use in optimization."]], "arch.univariate.Normal.__init__": [[442, 2, 2, 0, "random_state", "Deprecated since version 5.0: random_state is deprecated."], [442, 2, 2, 0, "seed", "Random number generator instance or int to use."]], "arch.univariate.Normal.bounds": [[722, 2, 2, 0, "resids", "Residuals to use when computing the bounds"]], "arch.univariate.Normal.cdf": [[723, 2, 2, 0, "parameters", "Distribution parameters."], [723, 2, 2, 0, "resids", "Values at which to evaluate the cdf"]], "arch.univariate.Normal.loglikelihood": [[726, 2, 2, 0, "individual", "Flag indicating whether to return the vector of individual log likelihoods (True) or the sum (False)"], [726, 2, 2, 0, "parameters", "The normal likelihood has no shape parameters."], [726, 2, 2, 0, "resids", "The residuals to use in the log-likelihood calculation"], [726, 2, 2, 0, "sigma2", "Conditional variances of resids"]], "arch.univariate.Normal.moment": [[727, 2, 2, 0, "n", "Order of moment"], [727, 2, 2, 0, "parameters", "Distribution parameters."]], "arch.univariate.Normal.partial_moment": [[730, 2, 2, 0, "n", "Order of partial moment"], [730, 2, 2, 0, "parameters", "Distribution parameters."], [730, 2, 2, 0, "z", "Upper bound for partial moment integral"]], "arch.univariate.Normal.ppf": [[731, 2, 2, 0, "parameters", "Distribution parameters."], [731, 2, 2, 0, "pits", "Probability-integral-transformed values in the interval (0, 1)."]], "arch.univariate.Normal.simulate": [[733, 2, 2, 0, "parameters", "Distribution parameters"]], "arch.univariate.Normal.starting_values": [[734, 2, 2, 0, "std_resid", "Estimated standardized residuals to use in computing starting values for the shape parameter"]], "arch.univariate.RiskMetrics2006": [[735, 3, 1, 0, "backcast", "Construct values for backcasting to start the recursion"], [736, 3, 1, 0, "backcast_transform", "Transformation to apply to user-provided backcast values"], [737, 3, 1, 0, "bounds", "Returns bounds for parameters"], [738, 3, 1, 0, "compute_variance", "Compute the variance for the ARCH model"], [739, 3, 1, 0, "constraints", "Construct parameter constraints arrays for parameter estimation"], [740, 3, 1, 0, "forecast", "Forecast volatility from the model"], [741, 5, 1, 0, "name", "The name of the volatility process"], [742, 5, 1, 0, "num_params", "The number of parameters in the model"], [743, 3, 1, 0, "parameter_names", "Names of model parameters"], [744, 3, 1, 0, "simulate", "Simulate data from the model"], [745, 5, 1, 0, "start", "Index to use to start variance subarray selection"], [746, 3, 1, 0, "starting_values", "Returns starting values for the ARCH model"], [747, 5, 1, 0, "stop", "Index to use to stop variance subarray selection"], [748, 3, 1, 0, "update", "Compute the variance for a single observation"], [749, 5, 1, 0, "updateable", "Flag indicating that the volatility process supports update"], [750, 3, 1, 0, "variance_bounds", "Construct loose bounds for conditional variances."], [751, 5, 1, 0, "volatility_updater", "Get the volatility updater associated with the volatility process"]], "arch.univariate.RiskMetrics2006.__init__": [[443, 2, 2, 0, "kmax", "Number of components."], [443, 2, 2, 0, "rho", "Relative scale of adjacent cycles."], [443, 2, 2, 0, "tau0", "Length of long cycle."], [443, 2, 2, 0, "tau1", "Length of short cycle."]], "arch.univariate.RiskMetrics2006.backcast": [[735, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.RiskMetrics2006.backcast_transform": [[736, 2, 2, 0, "backcast", "User-provided backcast that approximates sigma2[0]."]], "arch.univariate.RiskMetrics2006.bounds": [[737, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.RiskMetrics2006.compute_variance": [[738, 2, 2, 0, "backcast", "Value to use when initializing ARCH recursion."], [738, 2, 2, 0, "parameters", "Model parameters"], [738, 2, 2, 0, "resids", "Vector of mean zero residuals"], [738, 2, 2, 0, "sigma2", "Array with same size as resids to store the conditional variance"], [738, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.RiskMetrics2006.forecast": [[740, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [740, 2, 2, 0, "horizon", "Forecast horizon."], [740, 2, 2, 0, "method", "Method to use when producing the forecast."], [740, 2, 2, 0, "parameters", "Parameters required to forecast the volatility model"], [740, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [740, 2, 2, 0, "resids", "Residuals to use in the recursion"], [740, 2, 2, 0, "rng", "Callable random number generator required if method is 'simulation'."], [740, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [740, 2, 2, 0, "start", "Index of the first observation to use as the starting point for the forecast."], [740, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.RiskMetrics2006.simulate": [[744, 2, 2, 0, "burn", "Number of additional observations to generate when initializing the simulation"], [744, 2, 2, 0, "initial_value", "Scalar or array of initial values to use when initializing the simulation"], [744, 2, 2, 0, "nobs", "Number of data points to simulate"], [744, 2, 2, 0, "parameters", "Parameters required to simulate the volatility model"], [744, 2, 2, 0, "rng", "Callable function that takes a single integer input and returns a vector of random numbers"]], "arch.univariate.RiskMetrics2006.starting_values": [[746, 2, 2, 0, "resids", "Array of (approximate) residuals to use when computing starting values"]], "arch.univariate.RiskMetrics2006.update": [[748, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [748, 2, 2, 0, "index", "The numerical index of the variance to compute"], [748, 2, 2, 0, "parameters", "The variance model parameters"], [748, 2, 2, 0, "resids", "The residual array."], [748, 2, 2, 0, "sigma2", "The array containing the variances."], [748, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.RiskMetrics2006.variance_bounds": [[750, 2, 2, 0, "power", "Power used in the model."], [750, 2, 2, 0, "resids", "Approximate residuals to use to compute the lower and upper bounds on the conditional variance"]], "arch.univariate.SkewStudent": [[752, 3, 1, 0, "bounds", "Parameter bounds for use in optimization."], [753, 3, 1, 0, "cdf", "Cumulative distribution function"], [754, 3, 1, 0, "constraints", "Construct arrays to use in constrained optimization."], [755, 5, 1, 0, "generator", "The NumPy Generator or RandomState attached to the distribution"], [756, 3, 1, 0, "loglikelihood", "Computes the log-likelihood of assuming residuals are have a standardized (to have unit variance) Skew Student's t distribution, conditional on the variance."], [757, 3, 1, 0, "moment", "Moment of order n"], [758, 5, 1, 0, "name", "The name of the distribution"], [759, 3, 1, 0, "parameter_names", "Names of distribution shape parameters"], [760, 3, 1, 0, "partial_moment", "Order n lower partial moment from -inf to z"], [761, 3, 1, 0, "ppf", "Inverse cumulative density function (ICDF)"], [762, 5, 1, 0, "random_state", "The NumPy RandomState attached to the distribution"], [763, 3, 1, 0, "simulate", "Simulates i.i.d. draws from the distribution"], [764, 3, 1, 0, "starting_values", "Construct starting values for use in optimization."]], "arch.univariate.SkewStudent.__init__": [[444, 2, 2, 0, "random_state", "Deprecated since version 5.0: random_state is deprecated."], [444, 2, 2, 0, "seed", "Random number generator instance or int to use."]], "arch.univariate.SkewStudent.bounds": [[752, 2, 2, 0, "resids", "Residuals to use when computing the bounds"]], "arch.univariate.SkewStudent.cdf": [[753, 2, 2, 0, "parameters", "Distribution parameters."], [753, 2, 2, 0, "resids", "Values at which to evaluate the cdf"]], "arch.univariate.SkewStudent.loglikelihood": [[756, 2, 2, 0, "individual", "Flag indicating whether to return the vector of individual log likelihoods (True) or the sum (False)"], [756, 2, 2, 0, "parameters", "Shape parameter of the skew-t distribution"], [756, 2, 2, 0, "resids", "The residuals to use in the log-likelihood calculation"], [756, 2, 2, 0, "sigma2", "Conditional variances of resids"]], "arch.univariate.SkewStudent.moment": [[757, 2, 2, 0, "n", "Order of moment"], [757, 2, 2, 0, "parameters", "Distribution parameters."]], "arch.univariate.SkewStudent.partial_moment": [[760, 2, 2, 0, "n", "Order of partial moment"], [760, 2, 2, 0, "parameters", "Distribution parameters."], [760, 2, 2, 0, "z", "Upper bound for partial moment integral"]], "arch.univariate.SkewStudent.ppf": [[761, 2, 2, 0, "parameters", "Distribution parameters."], [761, 2, 2, 0, "pits", "Probability-integral-transformed values in the interval (0, 1)."]], "arch.univariate.SkewStudent.simulate": [[763, 2, 2, 0, "parameters", "Distribution parameters"]], "arch.univariate.SkewStudent.starting_values": [[764, 2, 2, 0, "std_resid", "Estimated standardized residuals to use in computing starting values for the shape parameter"]], "arch.univariate.StudentsT": [[765, 3, 1, 0, "bounds", "Parameter bounds for use in optimization."], [766, 3, 1, 0, "cdf", "Cumulative distribution function"], [767, 3, 1, 0, "constraints", "Construct arrays to use in constrained optimization."], [768, 5, 1, 0, "generator", "The NumPy Generator or RandomState attached to the distribution"], [769, 3, 1, 0, "loglikelihood", "Computes the log-likelihood of assuming residuals are have a standardized (to have unit variance) Student's t distribution, conditional on the variance."], [770, 3, 1, 0, "moment", "Moment of order n"], [771, 5, 1, 0, "name", "The name of the distribution"], [772, 3, 1, 0, "parameter_names", "Names of distribution shape parameters"], [773, 3, 1, 0, "partial_moment", "Order n lower partial moment from -inf to z"], [774, 3, 1, 0, "ppf", "Inverse cumulative density function (ICDF)"], [775, 5, 1, 0, "random_state", "The NumPy RandomState attached to the distribution"], [776, 3, 1, 0, "simulate", "Simulates i.i.d. draws from the distribution"], [777, 3, 1, 0, "starting_values", "Construct starting values for use in optimization."]], "arch.univariate.StudentsT.__init__": [[445, 2, 2, 0, "random_state", "Deprecated since version 5.0: random_state is deprecated."], [445, 2, 2, 0, "seed", "Random number generator instance or int to use."]], "arch.univariate.StudentsT.bounds": [[765, 2, 2, 0, "resids", "Residuals to use when computing the bounds"]], "arch.univariate.StudentsT.cdf": [[766, 2, 2, 0, "parameters", "Distribution parameters."], [766, 2, 2, 0, "resids", "Values at which to evaluate the cdf"]], "arch.univariate.StudentsT.loglikelihood": [[769, 2, 2, 0, "individual", "Flag indicating whether to return the vector of individual log likelihoods (True) or the sum (False)"], [769, 2, 2, 0, "parameters", "Shape parameter of the t distribution"], [769, 2, 2, 0, "resids", "The residuals to use in the log-likelihood calculation"], [769, 2, 2, 0, "sigma2", "Conditional variances of resids"]], "arch.univariate.StudentsT.moment": [[770, 2, 2, 0, "n", "Order of moment"], [770, 2, 2, 0, "parameters", "Distribution parameters."]], "arch.univariate.StudentsT.partial_moment": [[773, 2, 2, 0, "n", "Order of partial moment"], [773, 2, 2, 0, "parameters", "Distribution parameters."], [773, 2, 2, 0, "z", "Upper bound for partial moment integral"]], "arch.univariate.StudentsT.ppf": [[774, 2, 2, 0, "parameters", "Distribution parameters."], [774, 2, 2, 0, "pits", "Probability-integral-transformed values in the interval (0, 1)."]], "arch.univariate.StudentsT.simulate": [[776, 2, 2, 0, "parameters", "Distribution parameters"]], "arch.univariate.StudentsT.starting_values": [[777, 2, 2, 0, "std_resid", "Estimated standardized residuals to use in computing starting values for the shape parameter"]], "arch.univariate.ZeroMean": [[778, 3, 1, 0, "bounds", "Construct bounds for parameters to use in non-linear optimization"], [779, 3, 1, 0, "compute_param_cov", "Computes parameter covariances using numerical derivatives."], [780, 3, 1, 0, "constraints", "Construct linear constraint arrays  for use in non-linear optimization"], [781, 5, 1, 0, "distribution", "Set or gets the error distribution"], [782, 3, 1, 0, "fit", "Estimate model parameters"], [783, 3, 1, 0, "fix", "Allows an ARCHModelFixedResult to be constructed from fixed parameters."], [784, 3, 1, 0, "forecast", "Construct forecasts from estimated model"], [785, 5, 1, 0, "name", "The name of the model."], [786, 5, 1, 0, "num_params", "Returns the number of parameters"], [787, 3, 1, 0, "parameter_names", "List of parameters names"], [788, 3, 1, 0, "resids", "Compute model residuals"], [789, 3, 1, 0, "simulate", "Simulated data from a zero mean model"], [790, 3, 1, 0, "starting_values", "Returns starting values for the mean model, often the same as the values returned from fit"], [791, 5, 1, 0, "volatility", "Set or gets the volatility process"], [792, 5, 1, 0, "x", "Gets the value of the exogenous regressors in the model"], [793, 5, 1, 0, "y", "Returns the dependent variable"]], "arch.univariate.ZeroMean.__init__": [[446, 2, 2, 0, "distribution", "Error distribution to use in the model"], [446, 2, 2, 0, "hold_back", "Number of observations at the start of the sample to exclude when estimating model parameters."], [446, 2, 2, 0, "rescale", "Flag indicating whether to automatically rescale data if the scale of the data is likely to produce convergence issues when estimating model parameters. If False, the model is estimated on the data without transformation."], [446, 2, 2, 0, "volatility", "Volatility process to use in the model"], [446, 2, 2, 0, "y", "nobs element vector containing the dependent variable"]], "arch.univariate.ZeroMean.compute_param_cov": [[779, 2, 2, 0, "backcast", "Value to use for pre-sample observations"], [779, 2, 2, 0, "params", "Model parameters"], [779, 2, 2, 0, "robust", "Flag indicating whether to use robust standard errors (True) or classic MLE (False)"]], "arch.univariate.ZeroMean.fit": [[782, 2, 2, 0, "backcast", "Value to use as backcast."], [782, 2, 2, 0, "cov_type", "Estimation method of parameter covariance."], [782, 2, 2, 0, "disp", "Either 'final' to print optimization result or 'off' to display nothing."], [782, 2, 2, 0, "first_obs", "First observation to use when estimating model"], [782, 2, 2, 0, "last_obs", "Last observation to use when estimating model"], [782, 2, 2, 0, "options", "Options to pass to scipy.optimize.minimize."], [782, 2, 2, 0, "show_warning", "Flag indicating whether convergence warnings should be shown."], [782, 2, 2, 0, "starting_values", "Array of starting values to use."], [782, 2, 2, 0, "tol", "Tolerance for termination."], [782, 2, 2, 0, "update_freq", "Frequency of iteration updates."]], "arch.univariate.ZeroMean.fix": [[783, 2, 2, 0, "first_obs", "First observation to use when fixing model"], [783, 2, 2, 0, "last_obs", "Last observation to use when fixing model"], [783, 2, 2, 0, "params", "User specified parameters to use when generating the result."]], "arch.univariate.ZeroMean.forecast": [[784, 2, 2, 0, "align", "Either 'origin' or 'target'."], [784, 2, 2, 0, "horizon", "Number of steps to forecast"], [784, 2, 2, 0, "method", "Method to use when producing the forecast."], [784, 2, 2, 0, "params", "Parameters required to forecast."], [784, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [784, 2, 2, 0, "reindex", "Whether to reindex the forecasts to have the same dimension as the series being forecast."], [784, 2, 2, 0, "rng", "Custom random number generator to use in simulation-based forecasts. Must produce random samples using the syntax rng(size) where size the 2-element tuple (simulations, horizon)."], [784, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [784, 2, 2, 0, "start", "An integer, datetime or str indicating the first observation to produce the forecast for."], [784, 2, 2, 0, "x", "Values to use for exogenous regressors if any are included in the model."]], "arch.univariate.ZeroMean.resids": [[788, 2, 2, 0, "params", "Model parameters"], [788, 2, 2, 0, "regressors", "Alternative regressor values to use when computing model residuals"], [788, 2, 2, 0, "y", "Alternative values to use when computing model residuals"]], "arch.univariate.ZeroMean.simulate": [[789, 2, 2, 0, "burn", "Number of values to simulate to initialize the model and remove dependence on initial values."], [789, 2, 2, 0, "initial_value", "This value is not used."], [789, 2, 2, 0, "initial_value_vol", "An array or scalar to use when initializing the volatility process."], [789, 2, 2, 0, "nobs", "Length of series to simulate"], [789, 2, 2, 0, "params", "Parameters to use when simulating the model."], [789, 2, 2, 0, "x", "This value is not used."]], "arch.univariate.arch_model": [[892, 2, 2, 0, "dist", "Name of the error distribution."], [892, 2, 2, 0, "hold_back", "Number of observations at the start of the sample to exclude when estimating model parameters."], [892, 2, 2, 0, "lags", "Either a scalar integer value indicating lag length or a list of integers specifying lag locations."], [892, 2, 2, 0, "mean", "Name of the mean model."], [892, 2, 2, 0, "o", "Lag order of the asymmetric innovation"], [892, 2, 2, 0, "p", "Lag order of the symmetric innovation"], [892, 2, 2, 0, "power", "Power to use with GARCH and related models"], [892, 2, 2, 0, "q", "Lag order of lagged volatility or equivalent"], [892, 2, 2, 0, "rescale", "Flag indicating whether to automatically rescale data if the scale of the data is likely to produce convergence issues when estimating model parameters."], [892, 2, 2, 0, "vol", "Name of the volatility model."], [892, 2, 2, 0, "x", "Exogenous regressors."], [892, 2, 2, 0, "y", "The dependent variable"]], "arch.univariate.base": [[447, 1, 1, 0, "ARCHModel", "Abstract base class for mean models in ARCH processes.  Specifies the conditional mean process."], [448, 1, 1, 0, "ARCHModelFixedResult", "Results for fixed parameters for an ARCHModel model"], [449, 1, 1, 0, "ARCHModelForecast", "Container for forecasts from an ARCH Model"], [450, 1, 1, 0, "ARCHModelForecastSimulation", "Container for a simulation or bootstrap-based forecasts from an ARCH Model"], [451, 1, 1, 0, "ARCHModelResult", "Results from estimation of an ARCHModel model"]], "arch.univariate.base.ARCHModel": [[794, 3, 1, 0, "bounds", "Construct bounds for parameters to use in non-linear optimization"], [795, 3, 1, 0, "compute_param_cov", "Computes parameter covariances using numerical derivatives."], [796, 3, 1, 0, "constraints", "Construct linear constraint arrays  for use in non-linear optimization"], [797, 5, 1, 0, "distribution", "Set or gets the error distribution"], [798, 3, 1, 0, "fit", "Estimate model parameters"], [799, 3, 1, 0, "fix", "Allows an ARCHModelFixedResult to be constructed from fixed parameters."], [800, 3, 1, 0, "forecast", "Construct forecasts from estimated model"], [801, 5, 1, 0, "name", "The name of the model."], [802, 5, 1, 0, "num_params", "Number of parameters in the model"], [803, 3, 1, 0, "parameter_names", "List of parameters names"], [804, 3, 1, 0, "resids", "Compute model residuals"], [805, 3, 1, 0, "simulate", ""], [806, 3, 1, 0, "starting_values", "Returns starting values for the mean model, often the same as the values returned from fit"], [807, 5, 1, 0, "volatility", "Set or gets the volatility process"], [808, 5, 1, 0, "y", "Returns the dependent variable"]], "arch.univariate.base.ARCHModel.__init__": [[447, 2, 2, "arch.univariate.base.ARCHModel", "distribution", "Abstract base class for mean models in ARCH processes.  Specifies the conditional mean process."], [447, 2, 2, "arch.univariate.base.ARCHModel", "hold_back", "Abstract base class for mean models in ARCH processes.  Specifies the conditional mean process."], [447, 2, 2, "arch.univariate.base.ARCHModel", "rescale", "Abstract base class for mean models in ARCH processes.  Specifies the conditional mean process."], [447, 2, 2, "arch.univariate.base.ARCHModel", "volatility", "Abstract base class for mean models in ARCH processes.  Specifies the conditional mean process."], [447, 2, 2, "arch.univariate.base.ARCHModel", "y", "Abstract base class for mean models in ARCH processes.  Specifies the conditional mean process."]], "arch.univariate.base.ARCHModel.compute_param_cov": [[795, 2, 2, 0, "backcast", "Value to use for pre-sample observations"], [795, 2, 2, 0, "params", "Model parameters"], [795, 2, 2, 0, "robust", "Flag indicating whether to use robust standard errors (True) or classic MLE (False)"]], "arch.univariate.base.ARCHModel.fit": [[798, 2, 2, 0, "backcast", "Value to use as backcast."], [798, 2, 2, 0, "cov_type", "Estimation method of parameter covariance."], [798, 2, 2, 0, "disp", "Either 'final' to print optimization result or 'off' to display nothing."], [798, 2, 2, 0, "first_obs", "First observation to use when estimating model"], [798, 2, 2, 0, "last_obs", "Last observation to use when estimating model"], [798, 2, 2, 0, "options", "Options to pass to scipy.optimize.minimize."], [798, 2, 2, 0, "show_warning", "Flag indicating whether convergence warnings should be shown."], [798, 2, 2, 0, "starting_values", "Array of starting values to use."], [798, 2, 2, 0, "tol", "Tolerance for termination."], [798, 2, 2, 0, "update_freq", "Frequency of iteration updates."]], "arch.univariate.base.ARCHModel.fix": [[799, 2, 2, 0, "first_obs", "First observation to use when fixing model"], [799, 2, 2, 0, "last_obs", "Last observation to use when fixing model"], [799, 2, 2, 0, "params", "User specified parameters to use when generating the result."]], "arch.univariate.base.ARCHModel.forecast": [[800, 2, 2, 0, "align", "Either 'origin' or 'target'."], [800, 2, 2, 0, "horizon", "Number of steps to forecast"], [800, 2, 2, 0, "method", "Method to use when producing the forecast."], [800, 2, 2, 0, "params", "Parameters required to forecast."], [800, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [800, 2, 2, 0, "reindex", "Whether to reindex the forecasts to have the same dimension as the series being forecast."], [800, 2, 2, 0, "rng", "Custom random number generator to use in simulation-based forecasts. Must produce random samples using the syntax rng(size) where size the 2-element tuple (simulations, horizon)."], [800, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [800, 2, 2, 0, "start", "An integer, datetime or str indicating the first observation to produce the forecast for."], [800, 2, 2, 0, "x", "Values to use for exogenous regressors if any are included in the model."]], "arch.univariate.base.ARCHModel.resids": [[804, 2, 2, 0, "params", "Model parameters"], [804, 2, 2, 0, "regressors", "Alternative regressor values to use when computing model residuals"], [804, 2, 2, 0, "y", "Alternative values to use when computing model residuals"]], "arch.univariate.base.ARCHModel.simulate": [[805, 2, 2, "arch.univariate.base.ARCHModel.simulate", "burn", ""], [805, 2, 2, "arch.univariate.base.ARCHModel.simulate", "initial_value", ""], [805, 2, 2, "arch.univariate.base.ARCHModel.simulate", "initial_value_vol", ""], [805, 2, 2, "arch.univariate.base.ARCHModel.simulate", "nobs", ""], [805, 2, 2, "arch.univariate.base.ARCHModel.simulate", "params", ""], [805, 2, 2, "arch.univariate.base.ARCHModel.simulate", "x", ""]], "arch.univariate.base.ARCHModelFixedResult": [[809, 5, 1, 0, "aic", "Akaike Information Criteria"], [810, 3, 1, 0, "arch_lm_test", "ARCH LM test for conditional heteroskedasticity"], [811, 5, 1, 0, "bic", "Schwarz/Bayesian Information Criteria"], [812, 5, 1, 0, "conditional_volatility", "Estimated conditional volatility"], [813, 3, 1, 0, "forecast", "Construct forecasts from estimated model"], [814, 3, 1, 0, "hedgehog_plot", "Plot forecasts from estimated model"], [815, 5, 1, 0, "loglikelihood", "Model loglikelihood"], [816, 5, 1, 0, "model", "Model instance used to produce the fit"], [817, 5, 1, 0, "nobs", "Number of data points used to estimate model"], [818, 5, 1, 0, "num_params", "Number of parameters in model"], [819, 5, 1, 0, "params", "Model Parameters"], [820, 3, 1, 0, "plot", "Plot standardized residuals and conditional volatility"], [821, 5, 1, 0, "resid", "Model residuals"], [822, 5, 1, 0, "std_resid", "Residuals standardized by conditional volatility"], [823, 3, 1, 0, "summary", "Constructs a summary of the results from a fit model."]], "arch.univariate.base.ARCHModelFixedResult.__init__": [[448, 2, 2, 0, "dep_var", "Dependent variable"], [448, 2, 2, 0, "is_pandas", "Whether the original input was pandas"], [448, 2, 2, 0, "loglikelihood", "Loglikelihood at specified parameters"], [448, 2, 2, 0, "model", "The model object used to estimate the parameters"], [448, 2, 2, 0, "names", "Model parameter names"], [448, 2, 2, 0, "params", "Estimated parameters"], [448, 2, 2, 0, "resid", "Residuals from model."], [448, 2, 2, 0, "volatility", "Conditional volatility from model"]], "arch.univariate.base.ARCHModelFixedResult.arch_lm_test": [[810, 2, 2, 0, "lags", "Number of lags to include in the model."], [810, 2, 2, 0, "standardized", "Flag indicating to test the model residuals divided by their conditional standard deviations."]], "arch.univariate.base.ARCHModelFixedResult.forecast": [[813, 2, 2, 0, "align", "Either 'origin' or 'target'."], [813, 2, 2, 0, "horizon", "Number of steps to forecast"], [813, 2, 2, 0, "method", "Method to use when producing the forecast."], [813, 2, 2, 0, "params", "Alternative parameters to use."], [813, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [813, 2, 2, 0, "reindex", "Whether to reindex the forecasts to have the same dimension as the series being forecast."], [813, 2, 2, 0, "rng", "Custom random number generator to use in simulation-based forecasts. Must produce random samples using the syntax rng(size) where size the 2-element tuple (simulations, horizon)."], [813, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [813, 2, 2, 0, "start", "An integer, datetime or str indicating the first observation to produce the forecast for."], [813, 2, 2, 0, "x", "Values to use for exogenous regressors if any are included in the model."]], "arch.univariate.base.ARCHModelFixedResult.hedgehog_plot": [[814, 2, 2, 0, "horizon", "Number of steps to forecast"], [814, 2, 2, 0, "method", "Method to use when producing the forecast."], [814, 2, 2, 0, "params", "Alternative parameters to use."], [814, 2, 2, 0, "plot_type", "Quantity to plot, the forecast volatility or the forecast mean"], [814, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [814, 2, 2, 0, "start", "An integer, datetime or str indicating the first observation to produce the forecast for."], [814, 2, 2, 0, "step", "Non-negative number of forecasts to skip between spines"]], "arch.univariate.base.ARCHModelFixedResult.plot": [[820, 2, 2, 0, "annualize", "String containing frequency of data that indicates plot should contain annualized volatility."], [820, 2, 2, 0, "scale", "Value to use when scaling returns to annualize."]], "arch.univariate.base.ARCHModelForecast": [[824, 5, 1, 0, "mean", "Forecast values for the conditional mean of the process"], [825, 5, 1, 0, "residual_variance", "Forecast values for the conditional variance of the residuals"], [826, 5, 1, 0, "simulations", "Detailed simulation results if using a simulation-based method"], [827, 5, 1, 0, "variance", "Forecast values for the conditional variance of the process"]], "arch.univariate.base.ARCHModelForecast.__init__": [[449, 2, 2, 0, "align", ""], [449, 2, 2, 0, "index", ""], [449, 2, 2, 0, "mean", ""], [449, 2, 2, "arch.univariate.base.ARCHModelForecast", "reindex", "Container for forecasts from an ARCH Model"], [449, 2, 2, 0, "residual_variance", ""], [449, 2, 2, 0, "simulated_paths", ""], [449, 2, 2, 0, "simulated_residual_variances", ""], [449, 2, 2, 0, "simulated_residuals", ""], [449, 2, 2, 0, "simulated_variances", ""], [449, 2, 2, "arch.univariate.base.ARCHModelForecast", "start_index", "Container for forecasts from an ARCH Model"], [449, 2, 2, 0, "variance", ""]], "arch.univariate.base.ARCHModelForecastSimulation": [[828, 5, 1, 0, "index", "The index aligned to dimension 0 of the simulation paths"], [829, 5, 1, 0, "residual_variances", "Simulated variance of the residuals"], [830, 5, 1, 0, "residuals", "Simulated residuals used to produce the values"], [831, 5, 1, 0, "values", "The values of the process"], [832, 5, 1, 0, "variances", "Simulated variances of the values"]], "arch.univariate.base.ARCHModelForecastSimulation.__init__": [[450, 2, 2, 0, "index", ""], [450, 2, 2, 0, "residual_variances", ""], [450, 2, 2, 0, "residuals", ""], [450, 2, 2, 0, "values", ""], [450, 2, 2, 0, "variances", ""]], "arch.univariate.base.ARCHModelResult": [[833, 5, 1, 0, "aic", "Akaike Information Criteria"], [834, 3, 1, 0, "arch_lm_test", "ARCH LM test for conditional heteroskedasticity"], [835, 5, 1, 0, "bic", "Schwarz/Bayesian Information Criteria"], [836, 5, 1, 0, "conditional_volatility", "Estimated conditional volatility"], [837, 3, 1, 0, "conf_int", "Parameter confidence intervals"], [838, 5, 1, 0, "convergence_flag", "scipy.optimize.minimize result flag"], [839, 5, 1, 0, "fit_start", "Start of sample used to estimate parameters"], [840, 5, 1, 0, "fit_stop", "End of sample used to estimate parameters"], [841, 3, 1, 0, "forecast", "Construct forecasts from estimated model"], [842, 3, 1, 0, "hedgehog_plot", "Plot forecasts from estimated model"], [843, 5, 1, 0, "loglikelihood", "Model loglikelihood"], [844, 5, 1, 0, "model", "Model instance used to produce the fit"], [845, 5, 1, 0, "nobs", "Number of data points used to estimate model"], [846, 5, 1, 0, "num_params", "Number of parameters in model"], [847, 5, 1, 0, "optimization_result", "Information about the convergence of the loglikelihood optimization"], [848, 5, 1, 0, "param_cov", "Parameter covariance"], [849, 5, 1, 0, "params", "Model Parameters"], [850, 3, 1, 0, "plot", "Plot standardized residuals and conditional volatility"], [851, 5, 1, 0, "pvalues", "Array of p-values for the t-statistics"], [852, 5, 1, 0, "resid", "Model residuals"], [853, 5, 1, 0, "rsquared", "R-squared"], [854, 5, 1, 0, "rsquared_adj", "Degree of freedom adjusted R-squared"], [855, 5, 1, 0, "scale", "The scale applied to the original data before estimating the model."], [856, 5, 1, 0, "std_err", "Array of parameter standard errors"], [857, 5, 1, 0, "std_resid", "Residuals standardized by conditional volatility"], [858, 3, 1, 0, "summary", "Constructs a summary of the results from a fit model."], [859, 5, 1, 0, "tvalues", "Array of t-statistics testing the null that the coefficient are 0"]], "arch.univariate.base.ARCHModelResult.__init__": [[451, 2, 2, 0, "cov_type", "String describing the covariance estimator used"], [451, 2, 2, 0, "dep_var", "Dependent variable"], [451, 2, 2, 0, "fit_start", "Integer index of the first observation used to fit the model"], [451, 2, 2, 0, "fit_stop", "Integer index of the last observation used to fit the model using slice notation fit_start:fit_stop"], [451, 2, 2, 0, "is_pandas", "Whether the original input was pandas"], [451, 2, 2, 0, "loglikelihood", "Loglikelihood at estimated parameters"], [451, 2, 2, 0, "model", "The model object used to estimate the parameters"], [451, 2, 2, 0, "names", "Model parameter names"], [451, 2, 2, 0, "optim_output", "Result of log-likelihood optimization"], [451, 2, 2, 0, "param_cov", "Estimated variance-covariance matrix of params."], [451, 2, 2, 0, "params", "Estimated parameters"], [451, 2, 2, 0, "r2", "Model R-squared"], [451, 2, 2, 0, "resid", "Residuals from model."], [451, 2, 2, 0, "volatility", "Conditional volatility from model"]], "arch.univariate.base.ARCHModelResult.arch_lm_test": [[834, 2, 2, 0, "lags", "Number of lags to include in the model."], [834, 2, 2, 0, "standardized", "Flag indicating to test the model residuals divided by their conditional standard deviations."]], "arch.univariate.base.ARCHModelResult.conf_int": [[837, 2, 2, 0, "alpha", "Size (prob.) to use when constructing the confidence interval."]], "arch.univariate.base.ARCHModelResult.forecast": [[841, 2, 2, 0, "align", "Either 'origin' or 'target'."], [841, 2, 2, 0, "horizon", "Number of steps to forecast"], [841, 2, 2, 0, "method", "Method to use when producing the forecast."], [841, 2, 2, 0, "params", "Alternative parameters to use."], [841, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [841, 2, 2, 0, "reindex", "Whether to reindex the forecasts to have the same dimension as the series being forecast."], [841, 2, 2, 0, "rng", "Custom random number generator to use in simulation-based forecasts. Must produce random samples using the syntax rng(size) where size the 2-element tuple (simulations, horizon)."], [841, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [841, 2, 2, 0, "start", "An integer, datetime or str indicating the first observation to produce the forecast for."], [841, 2, 2, 0, "x", "Values to use for exogenous regressors if any are included in the model."]], "arch.univariate.base.ARCHModelResult.hedgehog_plot": [[842, 2, 2, 0, "horizon", "Number of steps to forecast"], [842, 2, 2, 0, "method", "Method to use when producing the forecast."], [842, 2, 2, 0, "params", "Alternative parameters to use."], [842, 2, 2, 0, "plot_type", "Quantity to plot, the forecast volatility or the forecast mean"], [842, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [842, 2, 2, 0, "start", "An integer, datetime or str indicating the first observation to produce the forecast for."], [842, 2, 2, 0, "step", "Non-negative number of forecasts to skip between spines"]], "arch.univariate.base.ARCHModelResult.plot": [[850, 2, 2, 0, "annualize", "String containing frequency of data that indicates plot should contain annualized volatility."], [850, 2, 2, 0, "scale", "Value to use when scaling returns to annualize."]], "arch.univariate.distribution": [[452, 1, 1, 0, "Distribution", "Template for subclassing only"]], "arch.univariate.distribution.Distribution": [[860, 3, 1, 0, "bounds", "Parameter bounds for use in optimization."], [861, 3, 1, 0, "cdf", "Cumulative distribution function"], [862, 3, 1, 0, "constraints", "Construct arrays to use in constrained optimization."], [863, 5, 1, 0, "generator", "The NumPy Generator or RandomState attached to the distribution"], [864, 3, 1, 0, "loglikelihood", "Loglikelihood evaluation."], [865, 3, 1, 0, "moment", "Moment of order n"], [866, 5, 1, 0, "name", "The name of the distribution"], [867, 3, 1, 0, "parameter_names", "Names of distribution shape parameters"], [868, 3, 1, 0, "partial_moment", "Order n lower partial moment from -inf to z"], [869, 3, 1, 0, "ppf", "Inverse cumulative density function (ICDF)"], [870, 5, 1, 0, "random_state", "The NumPy RandomState attached to the distribution"], [871, 3, 1, 0, "simulate", "Simulates i.i.d. draws from the distribution"], [872, 3, 1, 0, "starting_values", "Construct starting values for use in optimization."]], "arch.univariate.distribution.Distribution.__init__": [[452, 2, 2, "arch.univariate.distribution.Distribution", "random_state", "Template for subclassing only"], [452, 2, 2, "arch.univariate.distribution.Distribution", "seed", "Template for subclassing only"]], "arch.univariate.distribution.Distribution.bounds": [[860, 2, 2, 0, "resids", "Residuals to use when computing the bounds"]], "arch.univariate.distribution.Distribution.cdf": [[861, 2, 2, 0, "parameters", "Distribution parameters."], [861, 2, 2, 0, "resids", "Values at which to evaluate the cdf"]], "arch.univariate.distribution.Distribution.loglikelihood": [[864, 2, 2, 0, "individual", "Flag indicating whether to return the vector of individual log likelihoods (True) or the sum (False)"], [864, 2, 2, 0, "parameters", "Distribution shape parameters"], [864, 2, 2, 0, "resids", "nobs array of model residuals"], [864, 2, 2, 0, "sigma2", "nobs array of conditional variances"]], "arch.univariate.distribution.Distribution.moment": [[865, 2, 2, 0, "n", "Order of moment"], [865, 2, 2, 0, "parameters", "Distribution parameters."]], "arch.univariate.distribution.Distribution.partial_moment": [[868, 2, 2, 0, "n", "Order of partial moment"], [868, 2, 2, 0, "parameters", "Distribution parameters."], [868, 2, 2, 0, "z", "Upper bound for partial moment integral"]], "arch.univariate.distribution.Distribution.ppf": [[869, 2, 2, 0, "parameters", "Distribution parameters."], [869, 2, 2, 0, "pits", "Probability-integral-transformed values in the interval (0, 1)."]], "arch.univariate.distribution.Distribution.simulate": [[871, 2, 2, 0, "parameters", "Distribution parameters"]], "arch.univariate.distribution.Distribution.starting_values": [[872, 2, 2, 0, "std_resid", "Estimated standardized residuals to use in computing starting values for the shape parameter"]], "arch.univariate.recursions_python": [[453, 1, 1, 0, "VolatilityUpdater", "Base class that all volatility updaters must inherit from."]], "arch.univariate.recursions_python.VolatilityUpdater": [[873, 3, 1, 0, "initialize_update", "Initialize the recursion prior to calling update"], [874, 3, 1, 0, "update", "Update the current variance at location t"]], "arch.univariate.recursions_python.VolatilityUpdater.initialize_update": [[873, 2, 2, 0, "backcast", "The backcast value(s)."], [873, 2, 2, 0, "nobs", "The number of observations in the sample."], [873, 2, 2, 0, "parameters", "The model parameters."]], "arch.univariate.recursions_python.VolatilityUpdater.update": [[874, 2, 2, 0, "parameters", "Model parameters"], [874, 2, 2, 0, "resids", "Residuals to use in the recursion"], [874, 2, 2, 0, "sigma2", "Conditional variances with same shape as resids"], [874, 2, 2, 0, "t", "The index of the value of sigma2 to update."], [874, 2, 2, 0, "var_bounds", "nobs by 2-element array of upper and lower bounds for conditional variances for each time period"]], "arch.univariate.volatility": [[454, 1, 1, 0, "VolatilityProcess", "Abstract base class for ARCH models.  Allows the conditional mean model to be specified separately from the conditional variance, even though parameters are estimated jointly."]], "arch.univariate.volatility.VolatilityProcess": [[875, 3, 1, 0, "backcast", "Construct values for backcasting to start the recursion"], [876, 3, 1, 0, "backcast_transform", "Transformation to apply to user-provided backcast values"], [877, 3, 1, 0, "bounds", "Returns bounds for parameters"], [878, 3, 1, 0, "compute_variance", "Compute the variance for the ARCH model"], [879, 3, 1, 0, "constraints", "Construct parameter constraints arrays for parameter estimation"], [880, 3, 1, 0, "forecast", "Forecast volatility from the model"], [881, 5, 1, 0, "name", "The name of the volatility process"], [882, 5, 1, 0, "num_params", "The number of parameters in the model"], [883, 3, 1, 0, "parameter_names", "Names of model parameters"], [884, 3, 1, 0, "simulate", "Simulate data from the model"], [885, 5, 1, 0, "start", "Index to use to start variance subarray selection"], [886, 3, 1, 0, "starting_values", "Returns starting values for the ARCH model"], [887, 5, 1, 0, "stop", "Index to use to stop variance subarray selection"], [888, 3, 1, 0, "update", "Compute the variance for a single observation"], [889, 5, 1, 0, "updateable", "Flag indicating that the volatility process supports update"], [890, 3, 1, 0, "variance_bounds", "Construct loose bounds for conditional variances."], [891, 5, 1, 0, "volatility_updater", "Get the volatility updater associated with the volatility process"]], "arch.univariate.volatility.VolatilityProcess.backcast": [[875, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.volatility.VolatilityProcess.backcast_transform": [[876, 2, 2, 0, "backcast", "User-provided backcast that approximates sigma2[0]."]], "arch.univariate.volatility.VolatilityProcess.bounds": [[877, 2, 2, 0, "resids", "Vector of (approximate) residuals"]], "arch.univariate.volatility.VolatilityProcess.compute_variance": [[878, 2, 2, 0, "backcast", "Value to use when initializing ARCH recursion."], [878, 2, 2, 0, "parameters", "Model parameters"], [878, 2, 2, 0, "resids", "Vector of mean zero residuals"], [878, 2, 2, 0, "sigma2", "Array with same size as resids to store the conditional variance"], [878, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.volatility.VolatilityProcess.forecast": [[880, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [880, 2, 2, 0, "horizon", "Forecast horizon."], [880, 2, 2, 0, "method", "Method to use when producing the forecast."], [880, 2, 2, 0, "parameters", "Parameters required to forecast the volatility model"], [880, 2, 2, 0, "random_state", "NumPy RandomState instance to use when method is 'bootstrap'"], [880, 2, 2, 0, "resids", "Residuals to use in the recursion"], [880, 2, 2, 0, "rng", "Callable random number generator required if method is 'simulation'."], [880, 2, 2, 0, "simulations", "Number of simulations to run when computing the forecast using either simulation or bootstrap."], [880, 2, 2, 0, "start", "Index of the first observation to use as the starting point for the forecast."], [880, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.volatility.VolatilityProcess.simulate": [[884, 2, 2, 0, "burn", "Number of additional observations to generate when initializing the simulation"], [884, 2, 2, 0, "initial_value", "Scalar or array of initial values to use when initializing the simulation"], [884, 2, 2, 0, "nobs", "Number of data points to simulate"], [884, 2, 2, 0, "parameters", "Parameters required to simulate the volatility model"], [884, 2, 2, 0, "rng", "Callable function that takes a single integer input and returns a vector of random numbers"]], "arch.univariate.volatility.VolatilityProcess.starting_values": [[886, 2, 2, 0, "resids", "Array of (approximate) residuals to use when computing starting values"]], "arch.univariate.volatility.VolatilityProcess.update": [[888, 2, 2, 0, "backcast", "Value to use when initializing the recursion"], [888, 2, 2, 0, "index", "The numerical index of the variance to compute"], [888, 2, 2, 0, "parameters", "The variance model parameters"], [888, 2, 2, 0, "resids", "The residual array."], [888, 2, 2, 0, "sigma2", "The array containing the variances."], [888, 2, 2, 0, "var_bounds", "Array containing columns of lower and upper bounds"]], "arch.univariate.volatility.VolatilityProcess.variance_bounds": [[890, 2, 2, 0, "power", "Power used in the model."], [890, 2, 2, 0, "resids", "Approximate residuals to use to compute the lower and upper bounds on the conditional variance"]], "arch.utility": [[901, 0, 0, 1, "testing", ""]], "arch.utility.testing": [[901, 1, 1, 0, "WaldTestStatistic", "Test statistic holder for Wald-type tests"]], "arch.utility.testing.WaldTestStatistic": [[901, 5, 1, 0, "critical_values", "Critical values test for common test sizes"], [901, 5, 1, 0, "null", "Null hypothesis"], [901, 5, 1, 0, "pval", "P-value of test statistic"], [901, 5, 1, 0, "stat", "Test statistic"]], "arch.utility.testing.WaldTestStatistic.__init__": [[901, 2, 2, 0, "alternative", "A statement of the test's alternative hypothesis"], [901, 2, 2, 0, "df", "Degree of freedom."], [901, 2, 2, 0, "name", "Name of test"], [901, 2, 2, 0, "null", "A statement of the test's null hypothesis"], [901, 2, 2, 0, "stat", "The test statistic"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:parameter", "3": "py:method", "4": "py:attribute", "5": "py:property", "6": "py:function"}, "terms": {"": [3, 4, 5, 8, 10, 17, 21, 22, 23, 32, 36, 37, 38, 47, 51, 52, 53, 62, 66, 67, 68, 77, 81, 82, 83, 87, 88, 94, 101, 105, 106, 107, 108, 109, 110, 111, 112, 120, 130, 144, 154, 164, 174, 184, 194, 204, 214, 224, 234, 246, 247, 253, 256, 257, 260, 263, 264, 266, 274, 277, 278, 355, 369, 403, 421, 422, 425, 444, 445, 495, 512, 528, 677, 693, 756, 769, 782, 798, 873, 892, 897, 898, 901], "0": [3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 87, 88, 89, 94, 95, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 119, 129, 143, 153, 163, 173, 183, 193, 203, 213, 223, 233, 239, 241, 248, 250, 260, 263, 264, 265, 266, 267, 268, 270, 275, 276, 278, 355, 369, 403, 418, 421, 422, 425, 426, 428, 429, 432, 433, 434, 436, 437, 439, 441, 442, 444, 445, 456, 460, 472, 475, 478, 489, 493, 495, 497, 503, 510, 512, 514, 519, 526, 528, 530, 535, 541, 544, 555, 558, 561, 572, 575, 578, 589, 592, 595, 607, 610, 613, 624, 627, 630, 641, 645, 651, 652, 653, 657, 660, 671, 675, 677, 679, 684, 691, 693, 695, 700, 706, 709, 720, 724, 730, 731, 732, 736, 739, 750, 754, 760, 761, 762, 767, 773, 774, 775, 780, 782, 784, 789, 796, 798, 800, 814, 820, 828, 837, 842, 850, 855, 859, 862, 868, 869, 870, 874, 876, 879, 890, 892, 896, 897, 898, 899, 900], "00": [422, 898], "000": [260, 265, 421, 422, 892, 896, 897, 899, 900], "0000": [266, 899], "00000": 3, "000000": [3, 421, 422, 898], "000058": 3, "000066": 3, "000185": 421, "000360": 3, "000621": 421, "000668": 3, "001": [260, 422, 892, 897, 899], "00128526": 896, "001643": 3, "001e": 900, "002": 422, "00257053": 896, "002868": 898, "002906": 3, "002e": 899, "003": [260, 897], "003536": 3, "003e": 899, "004": 422, "005": 260, "00514106": 896, "005706": 3, "0059": 264, "006": 422, "007": [421, 422], "008276": 896, "009": [422, 897], "01": [421, 425, 439, 497, 503, 514, 519, 530, 535, 679, 684, 695, 700, 784, 800, 813, 814, 820, 841, 842, 850, 896, 898, 899, 900], "0100": 899, "010188": 898, "01028212": 896, "011": 260, "011e": 899, "012": [422, 896], "0128": 265, "013": 422, "013400": 900, "0143": 899, "014915": 3, "015": 899, "0152": 900, "0156": 892, "016716": 896, "017": [422, 899], "0175": 899, "018": 896, "0189": 899, "019497": 900, "019569": 3, "0196": 899, "02": [892, 896, 897, 899, 900], "020": 422, "020000": [3, 422], "0201": 899, "02056423": 896, "020830": 88, "02096168": 892, "0214": 900, "0216": 899, "021e": 896, "022412": 900, "023": 896, "0232": 899, "0235": 899, "0236": 899, "024": [422, 896], "0248": 422, "0249": 897, "024e": 900, "025": 422, "025626": 896, "0258": 899, "0262": 897, "026e": 899, "0271": 263, "028614": 900, "029": 422, "029365": 899, "029847": 896, "03": [422, 892, 896, 897, 898, 899, 900], "030": [422, 899], "030000": [3, 422], "030e": 899, "0318": 897, "0323": 899, "034509": 896, "036": 899, "036104": 899, "036986": 899, "0376": 900, "038": 422, "0383": 422, "038435": 896, "039": 260, "0393": 897, "039859": 3, "04": [425, 892, 896, 897, 898, 899, 900], "040": 422, "040928": 899, "04095499": 896, "04112846": 896, "041616": 899, "043704": 900, "0440": 422, "044344": 899, "044374": 899, "044580": 896, "0447": 264, "044e": 897, "045": [418, 899], "0451": 899, "046682": 899, "046e": 899, "047683": 899, "048516": 899, "049": 260, "0493": 897, "049454": 88, "0499": 897, "05": [3, 239, 241, 248, 250, 422, 425, 426, 789, 837, 896, 898, 899, 900], "050": 260, "050049": 900, "050102": 898, "0510": 422, "051295": 898, "051e": 899, "0525": 422, "0531": 892, "054077": 898, "055327": 898, "055806": 899, "056353": 898, "0564": 899, "056438": 899, "056773": 896, "056e": 897, "057943": 896, "058": 897, "058028": 898, "058e": 899, "059335": 898, "059e": 896, "06": [421, 422, 425, 896, 898, 899, 900], "0600": 899, "060000": [3, 422], "0612": 897, "0632": 897, "064889": 899, "064980": 899, "064e": [896, 897, 899], "065": 422, "067": 899, "068": 897, "069": 897, "07": [3, 503, 519, 535, 684, 700, 820, 850, 896, 898, 899, 900], "070000": [3, 422], "07138907": 892, "072e": 899, "0730": 899, "074": 260, "07474930802459016": 10, "076e": [897, 899], "077": [422, 899], "077415": 899, "077894": 896, "078": 896, "0788": 899, "079": [422, 899], "08": [896, 898, 899, 900], "081e": [897, 900], "0822": 263, "08225693": 896, "083e": 899, "084": 422, "084042": 900, "0843": 899, "084669": 898, "085": 439, "085003": 898, "085627": 899, "085678": 898, "085786": 898, "0859": 899, "085e": 899, "086e": 899, "0879": 892, "087e": 899, "088": 422, "088454": 898, "088783": 898, "089512": 898, "089593": 898, "09": [896, 897, 899, 900], "090": 422, "090088": 900, "090794": 896, "091224": 896, "091e": 899, "092216": 898, "092541": 898, "0931": 263, "093324": 898, "093378": 898, "0946": 896, "095": [422, 897], "095492": 896, "097192": 900, "0974": 896, "09760149": 892, "098e": 897, "099e": [896, 897], "0rc1": 98, "0th": [497, 514, 530, 679, 695, 784, 800, 813, 841], "0x202821906a0": 900, "1": [1, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 25, 29, 30, 40, 44, 45, 55, 59, 60, 70, 74, 75, 85, 87, 88, 89, 94, 101, 105, 106, 107, 108, 109, 110, 111, 112, 119, 121, 129, 131, 143, 145, 153, 155, 163, 165, 173, 175, 183, 185, 193, 195, 203, 205, 213, 215, 223, 225, 233, 235, 239, 240, 241, 248, 250, 260, 264, 265, 266, 267, 270, 272, 275, 278, 342, 363, 369, 382, 390, 399, 407, 418, 421, 422, 425, 426, 427, 428, 429, 432, 433, 434, 436, 438, 439, 441, 443, 444, 462, 479, 495, 497, 503, 512, 514, 519, 528, 530, 535, 545, 562, 579, 596, 614, 631, 647, 651, 652, 655, 661, 677, 679, 684, 693, 695, 700, 709, 710, 726, 730, 731, 740, 756, 760, 761, 769, 773, 774, 782, 784, 789, 798, 800, 812, 813, 814, 836, 841, 842, 855, 868, 869, 874, 880, 892, 893, 896, 897, 898, 899, 900], "10": [3, 10, 87, 237, 260, 268, 390, 407, 418, 421, 422, 425, 439, 497, 514, 530, 679, 695, 784, 800, 813, 814, 841, 842, 892, 896, 897, 898, 899, 900], "100": [4, 5, 6, 7, 8, 9, 11, 12, 26, 27, 41, 42, 56, 57, 71, 72, 87, 88, 89, 95, 260, 265, 266, 425, 428, 429, 430, 439, 440, 446, 497, 503, 514, 519, 530, 679, 684, 695, 700, 784, 800, 813, 841, 892, 896, 897, 898, 899, 900], "1000": [3, 4, 11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 85, 87, 89, 95, 239, 240, 241, 260, 434, 462, 479, 497, 503, 514, 519, 530, 535, 545, 562, 579, 596, 614, 631, 661, 679, 684, 695, 700, 710, 740, 784, 789, 800, 813, 814, 841, 842, 880, 896, 899], "100e": 899, "101": [260, 422], "102": [421, 497, 514, 530, 679, 695, 784, 800, 813, 841], "1022": 899, "102525": 3, "10290": 892, "102e": 897, "103": 899, "10315": 892, "103274": 896, "105": 899, "105762": 3, "10596": 899, "105e": 899, "106780": 899, "106860": 899, "1073": 896, "107e": 900, "1080": 10, "1081": 10, "109": 422, "109140": 896, "1097": [238, 240], "109e": [897, 900], "11": [3, 96, 260, 270, 275, 278, 421, 422, 892, 896, 898, 899, 900], "110": [892, 899], "110848": 898, "1109": [3, 422], "111": 422, "112205": 898, "1126": [238, 240], "113": [422, 897], "114": [421, 422], "1141": 1, "114497": 898, "115": 3, "115886": 898, "1164": 1, "117": 897, "118": 260, "118124": 898, "1186": 422, "119": 270, "1194": 422, "119545": 898, "11e": 422, "12": [3, 4, 9, 87, 88, 91, 97, 260, 263, 264, 265, 266, 267, 270, 275, 421, 422, 425, 820, 850, 892, 896, 897, 898, 899, 900], "120": [260, 266], "120028836": 10, "1204": 422, "121754": 896, "121e": 900, "1220": 899, "122126": 3, "1227": [263, 266], "1233": 897, "1234": [5, 6, 7, 8, 9, 439], "1237": [238, 241, 897], "124": [897, 899], "1244": 422, "124684": 900, "125": 899, "126": 899, "1265": 900, "128": 899, "1282": [238, 241], "129129894": 899, "129620": 3, "13": [3, 237, 260, 418, 421, 422, 896, 898, 899], "130": [422, 899], "130000": [3, 422], "133": 897, "1345": 899, "13456": 899, "13495": 899, "134e": 897, "1356": 266, "13608": 899, "136226": 899, "1363": 422, "13641": 899, "13655": 899, "13688": 899, "136e": 897, "1370": 267, "13829": 899, "13869": 899, "13881": 899, "139": 899, "13907": 899, "1391": 896, "14": [3, 88, 260, 421, 422, 443, 892, 896, 897, 898, 899, 900], "140": [260, 897], "140000": [3, 422], "140e": 892, "143": [270, 899], "145e": 899, "146": 896, "146083": 422, "147": [265, 268, 897], "1473": 265, "147641": 896, "148": 897, "148534": 88, "148903": 896, "148e": 900, "149": [896, 899], "149e": 899, "15": [3, 266, 268, 421, 422, 896, 898, 899], "150": 896, "150830": 896, "151": 896, "15117736426": 899, "1511833987915": 899, "152": 897, "153": [897, 899], "153279": 896, "154": 899, "154606": 896, "1547": 899, "154e": 899, "155": [892, 899], "155309": 899, "156": 897, "1560": 443, "156e": 899, "157": 897, "157e": 899, "158": 897, "158148": 900, "159": [265, 268], "16": [3, 260, 421, 422, 892, 896, 897, 898, 899, 900], "160": 260, "161e": 900, "163": 892, "163e": 899, "16403": 900, "16436": 900, "16451385": 896, "165": [278, 896], "165269": 899, "165799": 896, "166": [422, 900], "166759": 3, "167": [263, 266], "16804": 898, "1685": 422, "17": [3, 5, 421, 422, 896, 898, 899], "1707": 899, "171": 1, "1715": 899, "17165": 898, "172": 897, "1721": 899, "174416": 3, "17554847": 896, "175e": 896, "176459": 896, "176864": 898, "176e": 900, "177049": 896, "178": 265, "178523172141": 899, "178598": 899, "178613053096": 899, "178691": 898, "17896": 899, "179": 896, "17916": 899, "17919": 899, "1798": 899, "179e": 899, "18": [3, 237, 422, 497, 514, 530, 679, 695, 784, 800, 896, 898, 899], "180": 260, "180162": 898, "180e": 897, "18165": 899, "181810": 896, "182": 896, "182043": 898, "1831": 899, "183441": 898, "1838": 899, "183e": 892, "184": 897, "185": [1, 421], "185374": 898, "185e": 899, "186541": 899, "187233": 896, "188": 897, "189": [1, 897], "189201902": 899, "19": [1, 3, 264, 422, 497, 514, 530, 651, 679, 695, 730, 760, 773, 784, 800, 813, 841, 868, 896, 897, 898, 899], "190": [897, 899], "191132": [3, 422], "1919": 418, "1921": 899, "193": 278, "1932": 897, "1935": 897, "1936": 897, "194": 422, "1945": [497, 514, 530, 679, 695, 784, 800, 813, 814, 841, 842], "19450863": 3, "1951": [4, 87, 88], "1954": 899, "1959": 899, "1972": [651, 730, 760, 773, 868], "197763035331": 899, "198290": 896, "1987": [1, 266], "1988": [266, 899], "198880": 3, "1989": [265, 268, 275], "1990": [275, 278], "1991": [265, 269], "1992": [265, 268, 270, 272], "1993": 272, "1994": [1, 9, 263, 265, 266, 269, 444], "1996": [1, 264], "199647": 3, "1997": [1, 267], "1998": 265, "1999": [1, 900], "199e": 899, "1d": [89, 900], "1t": [270, 275], "2": [3, 4, 5, 6, 8, 9, 10, 11, 14, 26, 29, 41, 44, 48, 56, 59, 71, 74, 87, 98, 105, 106, 108, 109, 111, 238, 239, 240, 260, 263, 264, 265, 267, 272, 274, 275, 276, 278, 363, 382, 421, 422, 425, 427, 428, 432, 433, 434, 436, 438, 439, 440, 441, 443, 472, 489, 491, 497, 503, 508, 514, 519, 524, 530, 555, 572, 589, 607, 624, 641, 647, 671, 673, 679, 684, 689, 695, 700, 720, 726, 750, 756, 769, 778, 784, 794, 800, 809, 811, 813, 814, 833, 835, 841, 842, 874, 890, 892, 893, 896, 897, 898, 899, 900], "20": [3, 87, 260, 421, 422, 896, 898, 899, 900], "200": [3, 7, 260, 503, 519, 684, 700, 899], "2000": [1, 7, 238, 240, 259, 425, 439, 497, 514, 530, 679, 695, 784, 800, 814, 842, 892], "2004": [10, 265, 268], "2005": [238, 240, 241, 259, 421], "2006": [1, 443, 899], "2007": [96, 264], "2008": [421, 900], "2009": [10, 421, 425, 898], "2010": [263, 266, 267, 425, 898], "2011": [1, 238, 239, 259, 263, 898], "2013": [425, 441], "2014": [4, 87, 88, 418, 425, 892], "2015": 268, "2016": [892, 898], "2017": [898, 900], "2018": [441, 898, 899], "2019": 900, "202": 899, "2020": 267, "2021": [237, 497, 514, 530, 679, 695, 784, 800], "20210301": 896, "2022": 266, "2023": [896, 899, 900], "2024": [422, 897], "203893": 900, "205e": 899, "206": 422, "206555": [3, 422], "207": 899, "2075": 265, "208": 899, "21": [3, 275, 278, 418, 422, 896, 898], "2111": 263, "211281": 899, "2117": 899, "212": 1, "213": 899, "213584": 899, "214157": 3, "216": 260, "217": 897, "218": 897, "218e": 899, "219": 422, "22": [3, 270, 275, 278, 422, 429, 438, 439, 441, 497, 503, 514, 519, 530, 679, 684, 695, 700, 784, 800, 814, 842, 892, 896, 897, 898, 900], "220": [3, 260], "2202": 899, "2208": 900, "220e": 892, "2229": 422, "222e": 899, "223e": 899, "224722": 3, "225": 275, "2251": 900, "226": 896, "2267": 897, "227": [897, 899], "2280": [896, 899], "229": 899, "23": [10, 238, 240, 422, 897], "230": 422, "230000": [3, 422], "231197": 896, "232": 900, "2320": 900, "2326": 900, "232734": 899, "233": [896, 897], "2344": 900, "23456": 260, "235": 899, "2355": 897, "2357": 897, "24": [425, 892, 896], "240": 260, "24105141": 892, "241130": 896, "242": [896, 899], "242949": 899, "244627": 896, "248": 275, "25": [3, 96, 422, 434, 436, 897, 898, 899], "250": [260, 497, 514, 530, 679, 695, 784, 800, 814, 842, 896, 897, 900], "2500": [3, 260], "250338": 896, "251": 268, "251145": 898, "252": [820, 850, 897, 900], "2520": [820, 850], "253": 896, "253377": [3, 422], "253453": 898, "2538": 899, "254": 897, "254050": 898, "255468": 899, "255806977215": 897, "255e": 897, "256401": 898, "256936": 898, "258": 899, "259332": 898, "26": [425, 898, 899], "260": [260, 897, 899], "260000": 3, "260e": 892, "261e": 899, "262": [422, 897], "262848": 896, "263806": 896, "264": 897, "266e": 899, "27": [272, 421, 425, 898], "270": [260, 268], "270020": 900, "271": 899, "27211937": 896, "273945": 88, "274220": [3, 422], "2765831170655": 898, "276894": 3, "2779565773335": 899, "27798546": 896, "278e": 899, "279": 899, "2796": 896, "28": [10, 422, 425, 892, 896, 897, 898, 899], "280": [260, 422], "280000": [3, 422], "281": 900, "282e": 899, "2830": 896, "283e": 899, "284833": 899, "284e": 899, "285110045305": 898, "286380": 896, "287": 260, "2870": 265, "287e": 899, "2885": 897, "29": [3, 95, 422, 425, 898, 899], "291": 897, "2910": 897, "292e": 899, "294780": 896, "295": 422, "296": 897, "296939": 421, "299": 899, "29989336": 892, "29e": 422, "2_": [369, 425, 433, 892], "2_0": [495, 512, 528, 677, 693, 782, 798], "2_1": 278, "2_t": [425, 428, 892, 899], "2_u": 278, "2g": 10, "2q": [121, 131, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235], "2t": [270, 275], "3": [3, 4, 10, 15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 87, 88, 89, 98, 105, 109, 237, 260, 263, 265, 418, 421, 422, 425, 426, 444, 497, 503, 514, 519, 530, 647, 651, 679, 684, 695, 700, 730, 756, 760, 773, 784, 800, 813, 814, 841, 842, 868, 892, 893, 896, 897, 898, 899, 900], "30": [260, 425, 896, 899, 900], "300": [260, 789], "30149937": 896, "301873": 899, "301e": 899, "302": 896, "302e": 899, "305712": 896, "306": 899, "307394": 896, "308": 897, "308e": 896, "30e": 422, "31": [260, 267, 425, 892, 898, 899], "311": 899, "315e": 899, "3168": 899, "316e": 899, "317": 899, "3174": 899, "317500": 3, "32": [421, 896], "320": [260, 897], "320000": [3, 422], "322": 422, "322e": 899, "323e": 897, "325031": 896, "325649": 899, "3271": 266, "327524": [3, 422], "327e": 899, "328e": 899, "3290277": 896, "3299": 899, "329e": [896, 899], "330e": 900, "333": 268, "334": 899, "335": 266, "33845173251": 898, "34": [421, 898, 899], "340": 260, "341e": 899, "343e": 899, "344": 897, "345": [897, 899], "346": 266, "348": 897, "3486": 897, "349153": 899, "35": [3, 422, 444, 897, 898, 899, 900], "350": 899, "350000": [3, 422], "3503": 899, "350e": 899, "351": 899, "3516": 892, "3520": 892, "353e": 897, "354": 899, "356": 422, "357": 421, "358": 897, "359": [897, 899], "36": [3, 421, 422, 896, 897], "360": [260, 820, 850], "361e": 897, "362e": 899, "365": 240, "366": 899, "367": 897, "367662": 3, "368864": [3, 422], "37": [421, 896, 897], "370e": 899, "371370": 896, "372": 10, "374": 897, "374743": 899, "375": 10, "378519": 899, "379": 260, "38": [1, 3, 421, 422, 892], "380": [240, 260, 897], "380567": 3, "380e": 899, "381016": 899, "381757": 898, "381e": 899, "384e": 899, "386": [897, 899], "386034": 896, "386e": 899, "3879": 897, "3881": 897, "388209": 899, "388e": 897, "3899": 897, "389900": 3, "389e": 896, "39": [260, 421, 892, 897, 899], "3902": 897, "39023359": 892, "39023885": 892, "3907": 897, "390905": 898, "391": 421, "39212288": 892, "3922": 897, "392e": 892, "393": 422, "394e": 899, "395000": 3, "396": 897, "396828": 896, "397": 1, "397473": 3, "399988": 898, "4": [3, 10, 89, 91, 116, 126, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 237, 238, 240, 241, 260, 263, 265, 266, 278, 421, 422, 425, 426, 443, 497, 503, 514, 519, 530, 679, 684, 695, 700, 756, 784, 800, 813, 814, 841, 842, 892, 896, 897, 898, 899, 900], "40": [3, 260, 898], "400": [3, 260], "402421": 896, "402483": 898, "4027e": 899, "404109": 899, "407": 899, "407544": 425, "409008": 898, "409912": 900, "409e": 897, "41": [418, 421, 422, 896], "410e": 899, "411": 899, "411486": 898, "414": 899, "4142135623730951": 443, "415": 897, "415616": 425, "416653": 892, "417574": 899, "417964": 898, "4180": 899, "418255226": 3, "42": 896, "420": 260, "420245": 896, "420425": 898, "420554": 898, "420e": 897, "421528": 425, "422848": 425, "425": 422, "428416": 898, "429115": 3, "429301": 898, "429429": 898, "43": [422, 896], "430000": [3, 422], "430024": 425, "430246": 425, "436": 112, "437236": 898, "438": 896, "438115": 898, "438242": 898, "439451": 425, "439856": 425, "43e": 422, "44": [422, 897], "440": 260, "442891": 88, "442e": 900, "443": [260, 896], "444": 899, "445994": 898, "446": 899, "4462204215": 897, "446993": 898, "447054": 425, "447e": 899, "448": [418, 899], "448282": 425, "449407": 896, "449e": 897, "45": [260, 421, 892, 897, 899], "450638": 896, "451724": 898, "453": [238, 239], "454": [421, 897], "454254": 896, "4545": 897, "454575": 3, "454691": 898, "454875": 425, "455084": 3, "4555": 898, "455683": 898, "4571": 897, "4573": 896, "457368": 425, "457413": 3, "4578": 898, "458e": 899, "46": [110, 421, 422, 899], "460": 260, "460000": [3, 422], "4603": 896, "460381": 898, "4609": 896, "460e": 896, "462167": 425, "462828": 896, "463326": 898, "463e": 897, "464": 422, "466": 260, "466087": 3, "467515": 425, "467596e": 3, "468": 421, "468976": 898, "47": [3, 421], "471040": 3, "474691": 425, "475": 260, "47531817": 892, "475632": 425, "475e": 899, "476395": 896, "476e": 900, "477512": 898, "478": 899, "48": [421, 897], "480": 260, "480416": 425, "481761": 896, "482": 896, "482352": [3, 422], "483": 265, "483664": 425, "48500": 3, "485987": 898, "486701": 898, "486e": 899, "487": 899, "487e": 892, "488": 897, "489534": 425, "491932": 425, "492": 897, "492e": 899, "495": 899, "495087": 88, "495875": 425, "49587772": 896, "496611626368": 898, "496e": 896, "497": [238, 239], "49723719": 3, "49811376": 896, "4f": [263, 264, 265, 266, 267], "5": [3, 4, 5, 6, 8, 9, 10, 91, 109, 238, 240, 260, 390, 407, 418, 421, 422, 425, 427, 429, 432, 437, 438, 439, 442, 444, 445, 497, 503, 514, 519, 530, 653, 655, 679, 684, 695, 700, 709, 732, 762, 775, 784, 800, 814, 842, 870, 892, 896, 897, 898, 899, 900], "50": [3, 260, 422, 897, 899], "500": [4, 5, 6, 7, 8, 9, 87, 88, 260, 425, 466, 483, 503, 519, 535, 549, 566, 583, 600, 618, 635, 665, 684, 700, 714, 744, 789, 805, 884, 896, 898], "500834": 899, "501122": 425, "501e": 899, "502": 265, "502419": 425, "5029": [899, 900], "502e": 899, "5030": [899, 900], "504285": 896, "506": 260, "507": 897, "50716786": 896, "507739": 899, "507e": 897, "508540": 88, "509194": 425, "51": 899, "511": 897, "512e": 899, "513": [897, 899], "513621": 898, "513e": 896, "514": 897, "5141": 892, "5142": 892, "5143": 892, "5146": 892, "5152": 892, "515452": 900, "5156": 892, "5159": 892, "516": 422, "516536": 3, "516e": 896, "517502": 896, "518614": 425, "519": [896, 897], "52": [265, 421, 820, 850, 892], "520": 3, "523e": 892, "525e": 899, "526": 899, "527010": 896, "5281": 237, "528771": 900, "529": 899, "53": [10, 421, 897], "530046": 896, "530200": 899, "530906": 900, "531": 421, "53498654": 896, "534e": 899, "536": 260, "536242": 896, "53831759": 896, "54": [3, 110, 265], "540887": 898, "541": [897, 899], "542245": 896, "542302": 896, "542506": 900, "542658": 900, "543e": 899, "54496175": 896, "546183": 900, "547444": 896, "549": 900, "549e": 896, "55": [266, 896, 899, 900], "552": 896, "553": 422, "554": 897, "554e": 892, "555688": 900, "557059": 896, "557649": 900, "5579": 897, "5584": 897, "55948399": 896, "559684": 900, "560000": [3, 422], "5602": 897, "561": 896, "561282": 900, "561312": 900, "561360": 896, "561457": 899, "561637": 88, "564": 112, "564e": 896, "565514": 898, "565684": 898, "567": [896, 899], "567086": 900, "567297": 900, "568502": 898, "569": 892, "57": [1, 421, 422, 896, 899], "570280": 900, "570e": 899, "572212": 898, "572369": 898, "572616": 900, "573": 896, "575020": 898, "575065": 898, "576208": 900, "578": 897, "578869": 898, "5789": 897, "578e": 899, "579014": 898, "58": 422, "580": 3, "580434": 900, "581639": 898, "581756": 898, "581e": 892, "582": 422, "582153": 900, "58323938": 892, "583415": 900, "584948": 896, "585426": 900, "586099": 896, "586e": 422, "587": 3, "587410": 900, "587470": 899, "588217": 898, "588406": 898, "589e": 897, "59": [265, 422, 897], "590961": 900, "592e": 899, "593254": 237, "594855": 900, "595551": 900, "596301": 900, "59647": 898, "596837": 900, "596e": 899, "597387": 900, "597571": 900, "597e": 897, "599455": 900, "599561": 898, "599963": 898, "6": [3, 4, 109, 260, 421, 422, 439, 813, 841, 892, 896, 897, 898, 899, 900], "60": [260, 422, 892, 899], "600109": 898, "600417": 898, "600e": 899, "601": 421, "601e": 899, "602034": 900, "605136": 900, "605543": 900, "606051": 898, "606438": 898, "606595": 898, "606893": 898, "606e": [892, 896], "607e": 897, "60825322": 896, "608309": 898, "608487": 900, "608558": 898, "61": [265, 897, 899], "610000": [3, 422], "610493": 900, "611026": 900, "611352": 900, "612501": 898, "612874": 898, "612e": 899, "613040": 898, "613065": 900, "613329": 898, "613940": 900, "614748": 898, "614982": 898, "615314": 898, "616488": 900, "616836": 899, "616e": [896, 897], "617539": 900, "619": [1, 260], "619195": 900, "619957": 900, "620": 897, "620e": 899, "621148": 898, "621366": 898, "621743": 898, "621790": 900, "621835": 900, "622": [896, 897], "622224": 900, "622607": 3, "623295": 900, "625": 899, "625699": 900, "625e": 897, "628": 899, "628133": 898, "628257": 900, "629195": 900, "629696": 898, "629890": 898, "63": [898, 899], "630": [422, 899], "630455": 3, "630776": 900, "631": 265, "6335": 897, "634091": 900, "634205": 900, "634424": 898, "634503": 898, "635": 896, "6358": 899, "635838": 900, "635989": 898, "636180": 900, "636245": 898, "6369": 899, "637129": 899, "637251": 900, "637504": 900, "638180": 900, "638431": 3, "638678": 896, "639880": 900, "64": [264, 422, 899], "640706": 898, "640776": 898, "6408": 899, "6414": 899, "641971e": 3, "642": [422, 899], "642244": 898, "642408": 900, "642561": 898, "643": 896, "643916": 899, "643e": 899, "644534": 900, "64484999": 898, "644899": 900, "645237": 900, "646949": 898, "647011": 898, "647817": 900, "647824": 900, "647e": 897, "648": [421, 896], "648288": 900, "649343": 425, "64965918": 898, "649695": 900, "65": 897, "650287": 900, "651549": 900, "653": [265, 897], "653185": 900, "653222": 900, "653897": 900, "654048": 425, "655": [421, 897], "65536430": 897, "656397": 900, "656603": 900, "656e": 900, "657": 897, "65805541": 896, "658858": 900, "659350": 3, "659733": 900, "659946": [3, 422], "66": 441, "660": 3, "6609": 899, "661": 897, "661366": 900, "6632": 899, "663344": 900, "663746": 900, "664": [897, 899], "664055": 425, "665": 422, "665431": 900, "665995": 900, "665e": 899, "666057": 898, "666244": 898, "666e": 899, "667267": 900, "667753": 900, "668181": 900, "668273": 898, "6689e": 896, "669": 422, "669052": 899, "669e": 899, "67": [421, 892], "670000": 3, "670223": 900, "671e": 899, "672146": 898, "6722": 899, "672346": 898, "672511": 896, "672656": 900, "672742": 425, "6728": 899, "673404": 900, "674450": 896, "676081": 900, "676e": 899, "67711577": 896, "677e": 899, "678": 899, "678197": 898, "678411": 898, "678962": 899, "679154": 900, "679322": 3, "679835": 900, "6799": 899, "68": [238, 240, 898, 899], "680": 899, "681": 897, "681263": 425, "681448": 900, "6822": [898, 899], "6829": 899, "683890": 900, "683e": 899, "6846": 898, "684e": 900, "685911": 900, "686503": 900, "687": [896, 899], "687952": 900, "689831": 900, "6908": 899, "691225": 900, "691387": 900, "691471": 3, "691e": 899, "692": 899, "692300": 900, "692473212838": 897, "692717": 900, "692e": 897, "693": 897, "69307515": 3, "6936": [898, 899], "69379793": 897, "693e": 900, "6947": 896, "694735": 898, "694985": 900, "695074": 898, "695349": 425, "6970": [898, 899], "697133": 900, "697221": 900, "697399": 900, "699708": 900, "6z": 105, "7": [3, 8, 91, 260, 265, 268, 421, 422, 892, 896, 897, 898, 899, 900], "70": [10, 260], "700000": [3, 422], "700559": 900, "700656": 898, "701042": 898, "701208": 896, "702": [896, 899], "702488": 425, "703": 266, "705": 444, "706124": 900, "706541": 898, "706812": 425, "706974": 898, "707203": 900, "707369": 896, "707707": 900, "708": 266, "708327": 899, "709": 896, "7091": 897, "709956": 898, "70e": 422, "710": 892, "710453": 898, "710752": 900, "71321666": 896, "71329752255": 898, "713342": 425, "7135083370713": 897, "71428305": 896, "715": 899, "715791": 898, "716315": 898, "717701": 900, "718476988951": 899, "718476988985": 898, "718477482076": 899, "718477482658": 898, "718560": 900, "719": 899, "719376": 900, "72": 899, "721505": 900, "721591": 898, "721629": 425, "7217": 897, "722133": 896, "722142": 898, "722401": 896, "722954": 900, "723352": 898, "723950": 900, "725": 897, "726": [897, 899], "727": 422, "728217": 896, "729435": 88, "729465": 900, "73": [238, 241, 892], "730": 444, "730000": [3, 422], "732475": 900, "733e": [896, 897], "734322": 900, "735752": 3, "736509": 898, "737154": 898, "737691": 3, "738": 899, "738291": 896, "739303": 425, "7394": 896, "74": [422, 897], "740": 260, "740000": [3, 422], "741100": 425, "741206": 900, "741e": 899, "742193": 898, "742908": 898, "743119": 900, "744529": 425, "745": 899, "745202": 900, "745423": 900, "746940": 425, "747264": 896, "747842": 898, "74794163": 896, "748627": 898, "75": [3, 266, 422, 898, 900], "750169": 900, "751723": 898, "751747": 898, "751e": 899, "752": 896, "752402": 896, "752688": 425, "756": 899, "757321": 898, "757343": 898, "757398": 900, "758891": 900, "759810": 896, "76": [263, 266, 421, 892, 896, 899], "7611": 264, "762": 899, "762885": 898, "762905": 898, "762e": 899, "764077": 3, "766787": 3, "767149": 896, "769": 422, "7695": 896, "770": 899, "774e": 897, "775048": 900, "777860": 900, "777e": 899, "778286": 900, "779325": 900, "7796": 897, "779e": 899, "78": 421, "780": 421, "780547": 3, "781e": 897, "782": 897, "782e": 897, "783": 272, "783319": 900, "786": 422, "787": 896, "787697": 899, "79": [238, 239, 421, 892, 899], "791": 899, "791967": 896, "794e": 899, "799": 899, "7e": 422, "8": [3, 88, 260, 266, 272, 275, 421, 422, 789, 892, 896, 897, 898, 899, 900], "80": 260, "800": [3, 897], "802": 900, "802e": 899, "804": 897, "80764753": 896, "807e": 896, "8083": 896, "81": [421, 422], "810e": 897, "811486": 900, "812": 1, "813": 264, "815162e": 3, "816280": 900, "816663": 900, "816890": 896, "817": 265, "8196": 900, "82": [1, 900], "820": 272, "820788": 900, "820e": 899, "821112": 900, "825": 421, "826e": 899, "827018": 896, "827e": 899, "828189": 900, "829543": 896, "83": [422, 898], "830": 899, "830889": 896, "831e": 897, "832e": 896, "836": 264, "837": 421, "837196": 3, "837882": 896, "839e": 896, "84": [896, 899], "840": [260, 421, 897], "840369": 900, "840667": 900, "841": 899, "844": 896, "845656": 900, "846561": 896, "849680": 900, "849e": 896, "85": [892, 896], "8500": 899, "850000": [3, 422], "851104": 900, "852": 899, "853e": 899, "854e": 899, "855": 897, "855e": 899, "856175": 900, "856e": 899, "857": 897, "858": [265, 422, 897, 899], "858870": 899, "859": 897, "86": [422, 897, 899], "860107": 900, "861": 899, "861e": [899, 900], "86337547": 892, "864": 899, "864591": 900, "866": 897, "867": 897, "868": 421, "8696": 899, "87": [421, 899], "870000": [3, 422], "871672": 896, "871725": 3, "873865": 900, "873e": 899, "874696": 900, "875": 897, "876": 897, "876070": 896, "877539": 900, "877788388": 3, "878": 892, "88": 899, "880": 899, "880198": 3, "882823437632": 898, "883": 899, "883179368218": 898, "884e": 899, "885": 899, "8852": 899, "885242": 896, "886221": 900, "886289": 900, "887372": 896, "887791": 900, "887e": 899, "888": 900, "888417": 900, "889032": 900, "89": 897, "890002": 900, "890079": 896, "891": 899, "891488": 896, "8922": 899, "892380934": 899, "892e": 892, "893515": 896, "893986": 900, "894": 897, "894397": 900, "894e": 899, "895": 899, "895559": 900, "895e": 896, "896235": 896, "898": 422, "898202": 900, "899e": 897, "9": [1, 3, 91, 97, 260, 421, 422, 892, 896, 897, 898, 899, 900], "90": [3, 260, 421, 422, 896, 897, 898, 899, 900], "900": 422, "9014": 892, "902827": 896, "903": 896, "9036": 264, "903832": 896, "904": 896, "9043695": 896, "905": 899, "905952": 900, "906": 899, "907": 896, "909098": 899, "9098": 899, "909e": 897, "91": 896, "9100": 900, "912": [896, 899], "913039": 896, "9139": 899, "915208": 900, "917344": 896, "9180": 897, "918147": 896, "918574": 896, "919351": 3, "919e": 899, "92": [503, 519, 535, 684, 700, 820, 850, 896], "920": 896, "921": 899, "925": 892, "925e": 899, "926": 897, "926e": 897, "927": 899, "927950": 899, "928215": 899, "9287": 897, "929": 899, "93": [421, 897, 898, 899], "930291": 897, "930777": 900, "931": 897, "931280": 899, "931769": 421, "932": 900, "932e": [892, 897], "933": 899, "935e": 899, "936587": 900, "936e": 899, "9376": 897, "9381": 897, "9382": 899, "938636": 900, "938708": 900, "938e": 899, "939": [421, 896], "94": [264, 433, 899], "940": 897, "944": 897, "94446": 3, "944579": 896, "9447": 896, "945120": 900, "945167": 896, "9470515573437": 897, "9470521680555": 897, "948e": 899, "95": [4, 14, 29, 44, 59, 74, 421, 892, 896, 897, 899, 900], "952751": 898, "9527543235638": 897, "9528e": 899, "954167": 898, "954356": 896, "9549": 899, "955": 896, "955295": 900, "957245": 898, "957266": 900, "958215": 900, "958503": 3, "958725": 898, "958876": 3, "95980851": 896, "96": [422, 896, 897], "961424": 900, "961713": 898, "962": 421, "9620": 896, "963255": 898, "965540": 900, "965773": 896, "966432": 900, "966737": 900, "97": [418, 422, 899], "970000": [3, 422], "970796": 900, "9717": 896, "974248": 900, "975": 422, "977": 896, "977504": 900, "981": 899, "9813": 896, "982202": 900, "987e": 899, "9890437": 899, "989657335": 3, "989e": 899, "990": 896, "991": [896, 899], "992": 896, "992547": 900, "993": 896, "994": [896, 897], "994971": 896, "995": [260, 896], "995165345449": 899, "995e": [896, 899], "996": 896, "997": 896, "998": 896, "9986": 897, "999": 896, "9cb2d6": 898, "A": [1, 3, 4, 10, 23, 38, 53, 68, 83, 86, 87, 89, 101, 105, 106, 107, 108, 109, 110, 111, 112, 115, 125, 139, 149, 159, 169, 179, 189, 199, 209, 219, 229, 238, 239, 240, 259, 264, 265, 266, 267, 268, 272, 275, 367, 386, 421, 422, 424, 425, 428, 429, 438, 439, 441, 460, 478, 495, 497, 512, 514, 528, 530, 544, 561, 578, 595, 613, 630, 645, 660, 677, 679, 693, 695, 709, 724, 739, 754, 767, 782, 784, 798, 800, 813, 841, 862, 879, 892, 897, 899, 900, 901, 902], "As": [497, 514, 530, 679, 695, 784, 800, 900], "At": 89, "Be": 898, "By": [422, 425], "For": [89, 237, 497, 514, 530, 679, 695, 784, 800, 813, 841, 896, 899, 900], "If": [5, 6, 7, 8, 9, 20, 23, 35, 38, 50, 53, 65, 68, 80, 83, 95, 96, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 239, 240, 241, 263, 264, 265, 266, 267, 268, 272, 278, 355, 363, 369, 378, 382, 403, 425, 426, 428, 429, 430, 435, 437, 439, 440, 442, 444, 445, 446, 451, 462, 473, 479, 490, 495, 497, 503, 512, 514, 519, 528, 530, 545, 556, 562, 573, 579, 590, 596, 608, 614, 625, 631, 642, 661, 672, 677, 679, 684, 693, 695, 700, 710, 721, 740, 751, 782, 784, 798, 800, 810, 813, 814, 820, 834, 841, 842, 850, 855, 880, 891, 892, 896, 898], "In": [4, 89, 98, 239, 240, 241, 260, 418, 421, 425, 426, 432, 434, 436, 438, 441, 495, 497, 512, 514, 528, 530, 677, 679, 693, 695, 782, 784, 798, 800, 813, 814, 841, 842, 892, 893, 896, 897, 899, 900], "It": [90, 95, 259, 260, 363, 382, 422, 439, 896, 900], "No": [263, 266, 268, 270, 272, 274, 275, 276, 277, 278, 418, 421, 422, 651, 730, 760, 773, 868, 892, 896, 897, 898, 899, 900], "Not": [425, 497, 514, 530, 679, 695, 784, 800, 813, 814, 841, 842, 893], "One": [14, 29, 44, 59, 74, 422, 425], "That": [260, 898], "The": [1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 18, 25, 27, 28, 29, 30, 31, 33, 40, 42, 43, 44, 45, 46, 48, 55, 57, 58, 59, 60, 61, 63, 70, 72, 73, 74, 75, 76, 78, 85, 88, 89, 90, 92, 95, 96, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 118, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 220, 222, 223, 224, 225, 226, 227, 228, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 259, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 283, 284, 287, 292, 296, 297, 300, 305, 308, 309, 311, 316, 319, 320, 322, 323, 329, 333, 334, 338, 342, 344, 347, 348, 350, 355, 356, 357, 358, 360, 362, 363, 364, 365, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 388, 389, 391, 392, 393, 395, 396, 397, 398, 399, 400, 402, 403, 404, 406, 408, 411, 412, 413, 414, 415, 417, 418, 420, 421, 422, 425, 427, 428, 429, 430, 433, 434, 436, 439, 440, 443, 444, 446, 448, 451, 453, 458, 461, 462, 463, 464, 466, 470, 473, 479, 480, 481, 483, 487, 490, 497, 498, 499, 514, 515, 530, 531, 545, 546, 547, 549, 553, 556, 562, 563, 564, 566, 570, 573, 579, 580, 581, 583, 587, 590, 596, 597, 598, 600, 605, 608, 614, 615, 616, 618, 622, 625, 631, 632, 633, 635, 639, 642, 646, 647, 649, 651, 653, 661, 662, 663, 665, 669, 672, 679, 680, 695, 696, 710, 711, 712, 714, 718, 721, 725, 726, 728, 730, 732, 734, 740, 741, 742, 744, 748, 751, 755, 756, 758, 760, 762, 768, 769, 771, 773, 775, 784, 785, 800, 801, 812, 813, 814, 828, 831, 836, 841, 842, 855, 863, 866, 868, 870, 872, 873, 874, 880, 881, 882, 884, 888, 891, 892, 896, 897, 898, 899, 900, 901, 902], "Then": 3, "There": [260, 422, 535, 789, 893, 896, 899], "These": [3, 89, 261, 421, 422, 425, 472, 489, 555, 572, 589, 607, 624, 641, 671, 720, 750, 890, 896, 897, 898, 899, 900], "To": [5, 6, 7, 8, 9, 421, 423], "Will": 95, "_": [4, 270, 272, 275, 278, 363, 369, 382, 425, 439, 896], "_1": 275, "_2": 270, "__future__": [91, 95, 97], "__init__": [453, 900], "_b": 4, "_i": 10, "_r": 900, "_shock": 900, "_t": [121, 131, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 270, 275, 278, 363, 382, 425], "_u": 278, "_z": 278, "aaa": [418, 422], "ab": [434, 436, 896], "abil": [95, 238, 240], "about": [14, 29, 44, 59, 74, 497, 514, 530, 679, 695, 784, 800, 847, 898, 899], "abov": [3, 89, 260, 263, 264, 265, 266, 278, 421, 900], "absolut": [260, 899], "abstract": [447, 453, 454, 800, 803, 804, 805, 860, 861, 862, 864, 865, 867, 868, 869, 871, 872, 873, 874, 877, 878, 879, 883, 884, 886], "acceler": [14, 29, 44, 59, 74], "accept": [3, 89, 94, 96, 497, 514, 530, 679, 695, 784, 800, 813, 841, 896], "access": [5, 6, 7, 8, 9, 249, 260, 422, 899], "accessibli": [5, 6, 7, 8, 9], "accommod": [497, 514, 530, 679, 695, 784, 800, 813, 841], "accord": 441, "account": [89, 259, 266, 283, 296, 308, 319, 333, 347, 355, 363, 369, 382, 403, 896], "accur": [4, 896], "accuraci": 4, "acf": 422, "across": [3, 7, 14, 29, 44, 59, 74, 260, 422, 425], "act": 900, "activ": 254, "actual": [89, 260, 425, 898], "ad": [14, 29, 44, 59, 74, 91, 92, 93, 94, 95, 96, 97, 497, 514, 530, 679, 695, 784, 800, 813, 841, 899, 902], "add": [93, 96, 260, 899], "addit": [15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 237, 266, 422, 466, 483, 549, 566, 583, 600, 618, 635, 665, 714, 744, 884, 898, 899], "addition": [422, 425], "adequ": 899, "adf": [95, 264, 265, 266, 268, 274, 277, 278, 299, 399, 418, 420, 421, 422], "adj": [4, 87, 88, 422, 425, 428, 892, 896, 897, 898, 899, 900], "adjac": 443, "adjust": [101, 105, 106, 107, 108, 109, 110, 111, 112, 273, 355, 365, 369, 384, 403, 854], "administr": 421, "admiss": 3, "admit": 3, "adopt": [91, 97], "advanc": 275, "advantag": [425, 900], "affect": [91, 95, 96, 97, 270, 275, 278, 421, 497, 514, 530, 679, 695, 784, 800, 813, 814, 841, 842], "after": [5, 6, 7, 8, 9, 95, 96, 425, 497, 514, 530, 679, 695, 784, 800, 898], "against": [98, 265, 496, 513, 529, 678, 694, 783, 799], "agre": [421, 422], "ahead": [425, 497, 514, 530, 679, 695, 784, 800, 813, 841, 896, 898], "aic": [263, 264, 268, 272, 277, 422, 892, 896, 897, 899, 900], "aim": 893, "akaik": [263, 264, 268, 272, 809, 833], "al": [265, 651, 730, 760, 773, 868], "algorithm": [10, 263, 268, 902], "align": [425, 449, 497, 514, 530, 679, 695, 784, 800, 812, 813, 828, 836, 841, 898], "all": [2, 3, 4, 7, 10, 14, 29, 44, 59, 74, 87, 88, 95, 96, 240, 260, 267, 268, 272, 369, 373, 386, 418, 420, 421, 422, 424, 425, 426, 428, 429, 431, 438, 439, 447, 453, 462, 479, 497, 514, 530, 545, 562, 579, 596, 614, 631, 661, 679, 695, 710, 740, 784, 800, 813, 814, 841, 842, 880, 893, 894, 895, 896, 898, 899, 900, 902], "allow": [3, 4, 7, 14, 15, 25, 29, 30, 40, 44, 45, 55, 59, 60, 70, 74, 75, 85, 94, 95, 96, 259, 260, 261, 263, 267, 422, 435, 454, 496, 513, 529, 678, 694, 783, 799, 893, 896, 899, 900, 902], "almost": 900, "along": [898, 899], "alpha": [4, 121, 131, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 278, 421, 425, 441, 709, 837, 892, 896, 897, 898, 899, 900], "alpha_": [426, 427, 432, 436, 438], "alreadi": 898, "also": [3, 89, 90, 96, 259, 260, 265, 268, 422, 896, 898, 899], "alter": 422, "altern": [3, 14, 29, 44, 59, 74, 88, 94, 100, 103, 104, 240, 241, 259, 263, 264, 265, 266, 274, 276, 279, 292, 305, 316, 329, 344, 388, 404, 418, 420, 421, 422, 439, 497, 502, 514, 518, 530, 534, 679, 683, 695, 699, 784, 788, 800, 804, 813, 814, 841, 842, 892, 896, 899, 901], "although": [4, 89, 260, 421, 422, 425, 434, 436, 896, 899], "alwai": [87, 248, 260, 422, 425, 900], "am": [425, 497, 514, 530, 679, 695, 784, 800, 814, 820, 842, 850, 892, 898, 899], "american": 1, "amount": [260, 425], "an": [1, 3, 4, 5, 6, 7, 8, 9, 12, 14, 27, 29, 42, 44, 57, 59, 72, 74, 88, 89, 90, 95, 96, 101, 105, 106, 107, 108, 109, 110, 111, 112, 117, 127, 141, 151, 161, 171, 181, 191, 201, 211, 221, 231, 239, 240, 241, 258, 259, 260, 264, 265, 267, 268, 272, 277, 278, 355, 369, 403, 420, 421, 422, 424, 425, 429, 437, 438, 441, 442, 444, 445, 448, 449, 450, 451, 459, 477, 496, 497, 503, 513, 514, 519, 529, 530, 535, 543, 560, 577, 594, 612, 629, 659, 678, 679, 684, 694, 695, 700, 708, 738, 783, 784, 789, 799, 800, 813, 814, 820, 841, 842, 850, 878, 892, 897, 898, 899, 900], "analys": 420, "analysi": [3, 237, 263, 266], "analyt": [4, 14, 29, 44, 59, 74, 88, 462, 479, 497, 514, 530, 545, 562, 579, 596, 614, 631, 661, 679, 695, 710, 740, 784, 800, 813, 814, 841, 842, 880, 895, 900], "andrew": [10, 95, 109, 265, 267, 268, 269, 420], "ani": [3, 5, 6, 7, 8, 9, 11, 12, 14, 15, 17, 22, 23, 25, 26, 27, 29, 30, 32, 37, 38, 40, 41, 42, 44, 45, 47, 52, 53, 55, 56, 57, 59, 60, 62, 67, 68, 70, 71, 72, 74, 75, 77, 82, 83, 85, 260, 266, 272, 278, 355, 363, 369, 382, 403, 418, 422, 425, 447, 495, 497, 512, 514, 528, 530, 677, 679, 693, 695, 782, 784, 798, 800, 813, 841, 896, 898, 899, 900], "ann_infl": 899, "annual": [3, 4, 87, 820, 850, 899, 900], "anoth": 900, "anyth": 278, "aparch": [95, 892], "api": [3, 260, 263, 264, 265, 266, 422], "appear": [3, 95, 263, 264, 265, 266, 270, 275, 420, 421, 422, 428, 899], "append": [11, 14, 26, 29, 41, 44, 56, 59, 71, 74, 260, 896, 898], "appli": [3, 87, 95, 269, 456, 475, 495, 512, 528, 541, 558, 575, 592, 610, 627, 657, 677, 693, 706, 736, 782, 798, 855, 876], "applic": [1, 88, 89, 260, 267, 447, 892, 893, 900], "approach": [421, 896, 900], "appropri": [3, 4, 7, 14, 29, 44, 59, 74, 86, 239, 240, 241, 456, 475, 541, 558, 575, 592, 610, 627, 657, 706, 736, 876], "approxim": [14, 29, 44, 59, 74, 263, 266, 268, 272, 455, 456, 457, 468, 472, 474, 475, 476, 485, 489, 540, 541, 542, 551, 555, 557, 558, 559, 568, 572, 574, 575, 576, 585, 589, 591, 592, 593, 602, 604, 607, 609, 610, 611, 620, 624, 626, 627, 628, 637, 641, 656, 657, 658, 667, 671, 705, 706, 707, 716, 720, 735, 736, 737, 746, 750, 875, 876, 877, 886, 890], "ar": [3, 4, 7, 10, 11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 85, 89, 90, 91, 95, 96, 97, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 115, 125, 139, 149, 159, 169, 179, 189, 199, 209, 219, 229, 237, 239, 240, 241, 243, 244, 248, 259, 260, 261, 263, 264, 266, 267, 268, 270, 272, 275, 277, 278, 322, 325, 355, 369, 403, 418, 420, 421, 422, 425, 426, 428, 429, 432, 434, 436, 438, 439, 443, 447, 453, 454, 460, 462, 472, 478, 479, 489, 495, 496, 497, 503, 512, 513, 514, 519, 528, 529, 530, 544, 545, 555, 561, 562, 572, 578, 579, 589, 595, 596, 607, 613, 614, 624, 630, 631, 641, 647, 660, 661, 671, 677, 678, 679, 684, 693, 694, 695, 700, 709, 710, 720, 726, 739, 740, 750, 756, 769, 782, 783, 784, 789, 798, 799, 800, 812, 813, 814, 820, 836, 841, 842, 850, 859, 864, 879, 880, 890, 892, 893, 894, 896, 897, 898, 899, 900, 902], "arang": [12, 27, 42, 57, 72, 89, 896, 898, 900], "arbitrag": 421, "arbitrari": [3, 436], "arch": [3, 4, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 237, 259, 260, 418, 421, 422, 424, 425, 895, 896, 897, 898, 900, 901], "arch_lm_test": 95, "arch_model": [95, 96, 425, 497, 514, 530, 679, 695, 784, 800, 814, 820, 842, 850, 892, 895, 896, 898, 899, 900], "arch_no_binari": 96, "archinmean": [96, 902], "archmodel": [448, 451, 816, 844, 892, 893], "archmodelfixedresult": [496, 513, 529, 678, 694, 783, 799, 894], "archmodelforecast": [425, 497, 514, 530, 679, 695, 784, 800, 813, 841, 898], "archmodelforecastsimul": [826, 898], "archmodelresult": [495, 512, 528, 677, 693, 782, 798, 894, 900], "area": 1, "arg": [4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 25, 26, 28, 29, 30, 40, 41, 43, 44, 45, 55, 56, 58, 59, 60, 70, 71, 73, 74, 75, 85], "argument": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 25, 26, 27, 28, 29, 30, 40, 41, 42, 43, 44, 45, 48, 55, 56, 57, 58, 59, 60, 70, 71, 72, 73, 74, 75, 85, 87, 88, 89, 95, 96, 239, 240, 241, 437, 442, 444, 445, 654, 733, 763, 776, 871, 899], "aris": 86, "around": [5, 8, 9, 10, 90, 259, 421], "arrai": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 25, 26, 30, 40, 41, 45, 55, 56, 60, 70, 71, 75, 85, 87, 88, 89, 96, 101, 105, 106, 107, 108, 109, 110, 111, 112, 239, 240, 241, 254, 258, 260, 270, 275, 278, 418, 428, 429, 435, 439, 440, 459, 460, 462, 466, 468, 470, 472, 477, 478, 479, 483, 485, 487, 489, 493, 495, 497, 503, 510, 512, 514, 519, 526, 528, 530, 535, 543, 544, 545, 549, 551, 553, 555, 560, 561, 562, 566, 568, 570, 572, 577, 578, 579, 583, 585, 587, 589, 594, 595, 596, 600, 602, 605, 607, 612, 613, 614, 618, 620, 622, 624, 629, 630, 631, 635, 637, 639, 641, 645, 655, 659, 660, 661, 665, 667, 669, 671, 675, 677, 679, 684, 691, 693, 695, 700, 708, 710, 714, 716, 718, 720, 724, 738, 739, 740, 744, 746, 748, 750, 754, 764, 767, 777, 780, 782, 784, 789, 796, 798, 800, 812, 813, 836, 837, 841, 851, 856, 859, 862, 864, 874, 878, 879, 880, 884, 886, 888, 890, 898], "array_forecast": 896, "array_multi_forecast": 896, "arraylik": [5, 6, 7, 8, 9, 13, 28, 43], "arraylike1d": [10, 462], "arraylike2d": 10, "articl": [1, 238], "arx": [892, 896, 899], "as_text": 422, "asarrai": 900, "ask": 260, "aspect": 260, "assembl": [892, 899], "assert": 96, "asset": [820, 850, 899], "associ": [1, 473, 490, 556, 573, 590, 608, 625, 642, 672, 721, 751, 891], "assum": [89, 95, 277, 421, 422, 425, 495, 512, 528, 647, 677, 693, 726, 756, 769, 782, 798, 874, 896, 898, 899, 900], "assumpt": [421, 899, 900], "asym": 441, "asymmetr": [426, 432, 436, 441, 892, 899], "asymmetri": 426, "asymptot": [89, 263, 266, 278], "attach": [425, 646, 653, 725, 732, 755, 762, 768, 775, 863, 870, 898], "attempt": [259, 268, 462, 479, 545, 562, 579, 596, 614, 631, 661, 710, 740, 880, 898], "attribut": [5, 6, 7, 8, 9, 425, 898, 900], "augment": [93, 263, 277, 278, 392, 418, 420, 421], "auto_bandwidth": [95, 420], "autocorrel": [3, 10, 265, 266, 363, 369, 382, 422], "autocovari": [10, 278], "autolag": [263, 268], "automat": [10, 91, 95, 96, 97, 263, 264, 265, 266, 268, 269, 277, 282, 295, 418, 420, 422, 428, 429, 430, 439, 440, 446, 892], "autoregress": [264, 272, 429, 439, 444, 899], "avail": [5, 6, 7, 8, 9, 260, 263, 266, 422, 425, 453, 462, 479, 497, 514, 530, 545, 562, 579, 596, 614, 631, 661, 679, 695, 710, 740, 784, 800, 813, 841, 880, 898, 899, 900], "avar": 4, "avarch": 436, "averag": [3, 9, 15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 88, 260, 425, 433, 439, 443, 899, 900], "avg_model_loss": 260, "avgarch": 436, "ax": [396, 412, 421, 896, 897, 898, 899, 900], "axi": [15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 497, 514, 530, 679, 695, 784, 800, 813, 841, 899, 900], "b": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 25, 26, 27, 28, 29, 30, 40, 41, 42, 43, 44, 45, 55, 56, 57, 58, 59, 60, 70, 71, 72, 73, 74, 75, 85, 86, 87, 88, 89, 121, 131, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 260, 265, 266, 275, 425, 444, 460, 478, 493, 510, 526, 544, 561, 578, 595, 613, 630, 645, 660, 675, 691, 709, 724, 739, 754, 756, 767, 780, 796, 862, 879, 900], "b_cb": 10, "b_sb": 10, "ba": 269, "baa": [418, 422], "back": [91, 94, 97, 439], "backcast": [95, 456, 459, 462, 470, 475, 477, 479, 487, 492, 495, 509, 512, 525, 528, 541, 543, 545, 553, 558, 560, 562, 570, 575, 577, 579, 587, 592, 594, 596, 605, 610, 612, 614, 622, 627, 629, 631, 639, 657, 659, 661, 669, 674, 677, 690, 693, 706, 708, 710, 718, 736, 738, 740, 748, 779, 782, 795, 798, 873, 876, 878, 880, 888], "background": [2, 261, 895], "balanc": 421, "band": 10, "bandwidth": [95, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 117, 118, 121, 122, 124, 127, 128, 131, 132, 138, 141, 142, 145, 146, 148, 151, 152, 155, 156, 158, 161, 162, 165, 166, 168, 171, 172, 175, 176, 178, 181, 182, 185, 186, 188, 191, 192, 195, 196, 198, 201, 202, 205, 206, 208, 211, 212, 215, 216, 218, 221, 222, 225, 226, 228, 231, 232, 235, 236, 269, 278, 355, 369, 403, 420, 421], "bank": 441, "bar": [10, 422, 439], "bartlett": [95, 104, 269, 278, 355, 369, 403, 421], "base": [4, 89, 95, 261, 265, 266, 268, 278, 283, 296, 308, 319, 333, 347, 355, 369, 403, 421, 425, 453, 454, 497, 514, 530, 679, 695, 764, 777, 784, 895, 898, 900], "bashtag": 237, "basic": [3, 14, 29, 44, 59, 74, 260, 422, 497, 514, 530, 535, 679, 695, 784, 789, 800, 813, 841, 892], "baum": 268, "bayesian": [263, 264, 268, 272, 811, 835], "bb0000": 898, "bb00bb": 898, "bc": [14, 29, 44, 59, 74, 756], "bca": [14, 29, 44, 59, 74, 95], "been": [5, 6, 7, 8, 9, 20, 35, 50, 65, 80, 95, 96, 98, 268, 422, 438, 813, 841, 855, 874, 896, 900], "befor": [11, 14, 26, 29, 41, 44, 56, 59, 71, 74, 101, 105, 106, 107, 108, 109, 110, 111, 112, 249, 264, 422, 495, 512, 528, 677, 693, 782, 798, 855, 900], "begin": [101, 105, 106, 107, 108, 109, 110, 111, 112, 268, 270, 275, 278, 425, 892, 896], "behavior": 95, "being": [3, 95, 248, 259, 277, 421, 425, 497, 514, 530, 679, 695, 784, 800, 813, 841], "below": [3, 5, 6, 7, 8, 9, 260, 421, 898, 899], "benchmark": [240, 241, 248, 259, 260], "bera": 422, "best": [91, 94, 97, 259, 260, 268], "beta": [89, 260, 270, 272, 275, 277, 278, 421, 425, 434, 892, 896, 897, 899, 900], "beta_": [426, 432, 436], "beta_0": 896, "beta_1": 896, "better": [1, 259, 260, 421], "better_model": 260, "between": [14, 29, 44, 59, 74, 95, 259, 260, 418, 422, 428, 429, 439, 764, 777, 814, 842, 899, 900], "beyond": [4, 900], "bhansen": 444, "bia": [14, 29, 44, 59, 74, 275, 421], "bias": 422, "bic": [263, 264, 268, 272, 277, 422, 892, 896, 897, 899, 900], "big": 95, "bin": [3, 87], "binari": 3, "biometrika": 266, "bit": [421, 896], "bithel": 1, "block": [4, 5, 8, 9, 10, 88, 90, 239, 240, 241, 260, 267, 270, 275, 342, 422, 892, 900], "block_siz": [5, 8, 9, 239, 240, 241], "bm": [259, 260], "bm_beta": 260, "bm_factor": 260, "bm_loss": 260, "bollerslev": [495, 512, 528, 677, 693, 782, 798], "bond": [418, 422], "book": 1, "bool": [14, 15, 20, 25, 29, 30, 35, 40, 44, 45, 50, 55, 59, 60, 65, 70, 74, 75, 80, 85, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 117, 125, 127, 139, 141, 149, 151, 159, 161, 169, 171, 179, 181, 189, 191, 199, 201, 209, 211, 219, 221, 229, 231, 240, 241, 263, 264, 267, 271, 272, 273, 278, 331, 335, 337, 355, 369, 386, 403, 426, 428, 429, 430, 435, 439, 440, 441, 446, 447, 448, 449, 451, 458, 471, 488, 492, 495, 497, 509, 512, 514, 525, 528, 530, 554, 571, 588, 606, 623, 640, 647, 670, 674, 677, 679, 690, 693, 695, 719, 726, 749, 756, 769, 779, 782, 784, 795, 798, 800, 810, 813, 834, 841, 864, 889, 892], "boolean": [254, 495, 512, 528, 677, 693, 782, 798], "bootstrap": [1, 4, 86, 88, 92, 95, 237, 259, 260, 261, 263, 264, 266, 281, 283, 294, 296, 307, 308, 318, 319, 332, 333, 346, 347, 450, 462, 479, 497, 514, 530, 545, 562, 579, 596, 614, 631, 661, 679, 695, 710, 740, 784, 800, 813, 814, 841, 842, 880, 895], "bootstrp": 900, "boston": 268, "both": [2, 4, 5, 6, 7, 8, 9, 89, 260, 421, 895, 896, 898, 900], "bound": [14, 29, 44, 59, 74, 240, 251, 459, 462, 470, 472, 477, 479, 487, 489, 493, 510, 526, 543, 545, 553, 555, 560, 562, 570, 572, 577, 579, 587, 589, 594, 596, 605, 607, 612, 614, 622, 624, 629, 631, 639, 641, 651, 659, 661, 669, 671, 675, 691, 708, 710, 718, 720, 730, 738, 740, 748, 750, 760, 773, 780, 796, 868, 874, 878, 880, 888, 890], "break": [268, 421, 422], "brent": 421, "bs_forecast": 900, "bs_path": 900, "bs_x": [5, 6, 7, 8, 9], "bs_y": [5, 6, 7, 8, 9], "bs_z": [5, 6, 7, 8, 9], "bug": [91, 94, 95, 96, 97], "build": [3, 95, 892, 900], "built": 98, "bump": [91, 96, 97], "burn": [466, 483, 503, 519, 535, 549, 566, 583, 600, 618, 635, 665, 684, 700, 714, 744, 789, 805, 884, 896], "busi": [238, 240, 263, 265, 266, 268], "bx": 756, "c": [1, 96, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 418, 421, 422, 453, 647, 756, 898], "c_": 10, "c_i": 10, "c_k": [121, 131, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235], "cach": [91, 96, 97], "calcul": [12, 27, 42, 57, 72, 95, 114, 118, 119, 124, 128, 129, 138, 142, 143, 148, 152, 153, 158, 162, 163, 168, 172, 173, 178, 182, 183, 188, 192, 193, 198, 202, 203, 208, 212, 213, 218, 222, 223, 228, 232, 233, 265, 268, 647, 648, 726, 727, 756, 757, 769, 770, 865], "call": [3, 11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 89, 95, 96, 249, 259, 425, 451, 873, 874, 897, 898, 899, 902], "callabl": [11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 95, 259, 453, 462, 466, 479, 483, 497, 514, 530, 545, 549, 562, 566, 579, 583, 596, 600, 614, 618, 631, 635, 654, 661, 665, 679, 695, 710, 714, 733, 740, 744, 763, 776, 784, 800, 813, 841, 871, 880, 884], "cambridg": 1, "campbel": 267, "can": [3, 4, 5, 6, 7, 8, 9, 87, 88, 89, 92, 95, 240, 241, 260, 268, 418, 421, 422, 425, 434, 436, 453, 459, 477, 497, 514, 530, 543, 560, 577, 594, 612, 629, 659, 679, 695, 708, 738, 784, 800, 813, 814, 841, 842, 873, 878, 892, 895, 896, 897, 898, 899, 900, 902], "candid": 268, "cannot": [3, 5, 6, 8, 9, 96, 263, 264, 265, 266, 421], "canon": [270, 420], "canonicalcointegratingreg": [95, 420], "captur": [88, 453, 899, 902], "carefulli": 892, "carlo": [265, 268, 895], "carpent": 1, "carpenterbithel": 1, "case": [4, 89, 101, 105, 106, 107, 108, 109, 110, 111, 112, 260, 421, 438, 892], "cauchi": 106, "caus": 95, "caveat": 425, "cbb": [239, 240, 241], "cc": [270, 275, 278], "cdf": [4, 652, 731, 761, 774, 869], "cdot": [278, 428], "cdot2": 278, "cell": 899, "center": [15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 88, 95, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 240, 260, 266, 899], "certain": 95, "challeng": 88, "chang": [14, 29, 44, 59, 74, 93, 94, 95, 97, 98, 260, 421, 422, 453, 497, 514, 530, 679, 695, 784, 800, 813, 841, 873, 897, 898, 899, 900], "character": 268, "check": [95, 238, 240, 260, 422, 496, 513, 529, 678, 694, 783, 799, 874], "chernick": 1, "choic": [4, 278, 355, 369, 403, 425, 496, 513, 529, 678, 694, 783, 799, 899], "choos": 88, "chosen": [3, 4, 10, 239, 240, 241, 272], "ci": [3, 4, 14, 29, 44, 59, 74, 89, 837], "circular": [3, 8, 9, 10, 90, 239, 240, 241], "circularblockbootstrap": [8, 9, 10, 58, 73, 90], "circumst": [4, 89, 899, 900], "cite": 237, "class": [0, 3, 5, 6, 7, 8, 9, 12, 15, 25, 27, 30, 40, 42, 45, 55, 57, 60, 70, 72, 75, 85, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 239, 240, 241, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 462, 473, 479, 490, 545, 556, 562, 573, 579, 590, 596, 608, 614, 625, 631, 642, 661, 672, 710, 721, 740, 751, 880, 891, 892, 893, 894, 899, 900, 901, 902], "classic": [355, 369, 403, 492, 495, 509, 512, 525, 528, 674, 677, 690, 693, 779, 782, 795, 798], "claudia": 441, "clearli": [260, 421, 422], "close": [3, 4, 13, 28, 43, 58, 73, 87, 88, 259, 263, 266, 421, 425, 428, 892, 897, 898, 899, 900], "closer": [240, 900], "cm": [430, 535], "cm_param": 535, "cmd": 96, "co": [109, 110, 111, 112], "code": [3, 94, 95, 260, 421, 422, 425, 897, 898, 899], "coef": [422, 892, 896, 897, 899, 900], "coeffici": [266, 278, 399, 421, 503, 519, 684, 700, 859, 899], "cointegr": [95, 237, 263, 266], "cointegrating_vector": 421, "cointegrationaltern": 421, "cointegrationanalysisresult": [355, 403], "cointegrationdistribut": 421, "col": 260, "collect": 899, "colleg": 268, "color": [898, 900], "color_palett": 900, "column": [3, 10, 14, 29, 44, 59, 74, 87, 88, 102, 243, 244, 245, 248, 254, 258, 260, 422, 425, 439, 459, 462, 470, 472, 477, 479, 487, 489, 497, 503, 514, 519, 530, 535, 543, 545, 553, 555, 560, 562, 570, 572, 577, 579, 587, 589, 594, 596, 605, 607, 612, 614, 622, 624, 629, 631, 639, 641, 659, 661, 669, 671, 679, 684, 695, 700, 708, 710, 718, 720, 738, 740, 748, 750, 784, 789, 800, 813, 841, 878, 880, 888, 890, 898, 899, 900], "combin": [4, 89, 101, 105, 106, 107, 108, 109, 110, 111, 112, 421], "come": [90, 421], "common": [3, 7, 10, 95, 260, 272, 278, 355, 369, 403, 418, 422, 425, 426, 428, 429, 430, 438, 439, 440, 446, 892, 901], "common_asym": 426, "compar": [3, 14, 29, 44, 59, 74, 89, 261, 422, 428, 429, 430, 439, 440, 446, 892], "comparison": [93, 237, 239, 240, 241, 259, 422, 897], "compat": [91, 96, 97, 98], "compet": 260, "compil": [92, 96], "complet": [89, 260, 374, 423, 892, 900], "complex": [497, 514, 530, 679, 695, 784, 800, 813, 841], "complic": 899, "compon": [3, 263, 264, 265, 266, 268, 424, 443, 459, 477, 495, 512, 528, 543, 560, 577, 594, 612, 629, 659, 677, 693, 708, 735, 738, 782, 798, 878, 892, 900], "comput": [3, 4, 10, 11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 87, 88, 89, 95, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 121, 131, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 240, 241, 248, 250, 254, 260, 265, 266, 278, 283, 296, 308, 319, 333, 347, 422, 425, 451, 459, 462, 468, 470, 472, 477, 479, 485, 487, 489, 492, 495, 497, 502, 509, 512, 514, 518, 525, 528, 530, 534, 543, 545, 551, 553, 555, 560, 562, 568, 570, 572, 577, 579, 585, 587, 589, 594, 596, 602, 605, 607, 612, 614, 620, 622, 624, 629, 631, 637, 639, 641, 643, 647, 655, 659, 661, 667, 669, 671, 674, 677, 679, 683, 690, 693, 695, 699, 708, 710, 716, 718, 720, 722, 726, 734, 738, 740, 746, 748, 750, 752, 756, 764, 765, 769, 777, 779, 782, 784, 788, 795, 798, 800, 804, 812, 813, 814, 836, 841, 842, 860, 872, 873, 878, 880, 886, 888, 890, 896, 898, 899, 900], "concat": [260, 899, 900], "concaten": [503, 519, 535, 684, 700, 896], "conceptu": 4, "conclus": [421, 422], "cond": 422, "cond_mean": 898, "cond_var": 898, "conda": 95, "condit": [4, 95, 267, 422, 425, 426, 428, 432, 434, 436, 444, 446, 447, 448, 451, 454, 459, 472, 477, 489, 498, 503, 519, 535, 543, 555, 560, 572, 577, 589, 594, 607, 612, 624, 629, 641, 647, 659, 671, 684, 700, 708, 720, 726, 738, 750, 756, 769, 789, 810, 812, 820, 822, 824, 825, 827, 834, 836, 850, 857, 864, 874, 878, 890, 893, 896, 898, 899], "conditional_volatil": [897, 898, 899, 900], "conduct": 89, "conf": [892, 896, 897, 899, 900], "conf_int": [3, 4, 89, 92], "confid": [1, 2, 3, 14, 29, 44, 59, 74, 89, 95, 238, 239, 242, 837], "configur": 892, "confirm": 422, "conflict": [11, 26, 41, 56, 71], "consecut": 10, "conserv": 10, "consid": [89, 259, 272, 277, 896], "consider": 896, "consist": [98, 240, 241, 248, 250, 251, 260, 265, 266, 369, 421, 896, 897, 899, 900], "const": [3, 421, 422, 896, 897, 899], "constant": [10, 95, 118, 121, 128, 131, 142, 145, 152, 155, 162, 165, 172, 175, 182, 185, 192, 195, 202, 205, 212, 215, 222, 225, 232, 235, 263, 264, 265, 266, 268, 270, 272, 275, 277, 278, 418, 421, 422, 425, 428, 429, 430, 431, 439, 440, 497, 503, 514, 519, 530, 535, 679, 684, 695, 700, 756, 784, 789, 800, 814, 842, 892, 897, 900], "constantcrit": 421, "constantmean": [892, 899, 900], "constrain": [645, 724, 754, 767, 862], "constraint": [496, 513, 529, 678, 694, 783, 799], "construct": [2, 3, 4, 5, 6, 8, 9, 89, 96, 260, 425, 434, 455, 460, 472, 474, 478, 489, 491, 493, 495, 496, 497, 508, 510, 512, 513, 514, 524, 526, 528, 529, 530, 540, 544, 555, 557, 561, 572, 574, 578, 589, 591, 595, 607, 609, 613, 624, 626, 630, 641, 645, 655, 656, 660, 671, 673, 675, 677, 678, 679, 689, 691, 693, 694, 695, 705, 720, 724, 734, 735, 739, 750, 754, 764, 767, 777, 778, 780, 782, 783, 784, 794, 796, 798, 799, 800, 813, 823, 837, 841, 858, 862, 872, 875, 879, 890, 892, 896, 899, 900], "constructor": [96, 899], "contain": [0, 2, 3, 4, 5, 6, 7, 8, 9, 12, 14, 15, 17, 22, 23, 25, 27, 29, 30, 32, 37, 38, 40, 42, 44, 45, 47, 48, 52, 53, 55, 57, 59, 60, 62, 67, 68, 70, 72, 74, 75, 77, 82, 83, 85, 87, 89, 90, 95, 96, 116, 126, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 237, 239, 245, 250, 258, 260, 261, 272, 280, 288, 293, 301, 306, 312, 317, 324, 330, 339, 345, 351, 367, 386, 390, 401, 407, 416, 418, 420, 421, 422, 425, 428, 429, 430, 435, 439, 440, 446, 448, 449, 450, 451, 459, 462, 470, 472, 477, 479, 487, 489, 495, 496, 497, 503, 512, 513, 514, 519, 528, 529, 530, 535, 543, 545, 553, 555, 560, 562, 570, 572, 577, 579, 587, 589, 594, 596, 605, 607, 612, 614, 622, 624, 629, 631, 639, 641, 643, 655, 659, 661, 669, 671, 677, 678, 679, 684, 693, 694, 695, 700, 708, 710, 718, 720, 722, 738, 740, 748, 750, 752, 764, 765, 777, 782, 783, 784, 789, 798, 799, 800, 812, 813, 820, 823, 826, 836, 837, 841, 850, 858, 860, 878, 880, 888, 890, 896, 898, 899, 900], "contamin": 260, "contemporan": 272, "continu": [89, 237], "control": [3, 122, 132, 146, 156, 166, 176, 186, 196, 206, 216, 226, 236, 241, 259, 260, 261, 444, 899], "converg": [95, 421, 428, 429, 430, 439, 440, 446, 495, 512, 528, 677, 693, 782, 798, 847, 892, 897, 899, 900], "convergencewarn": [495, 512, 528, 677, 693, 782, 798], "convers": 900, "convert": [497, 514, 530, 679, 695, 784, 800, 813, 814, 841, 842], "copi": [95, 96, 422, 896, 898], "core": [3, 425, 899], "core_cpi": 899, "corpor": 422, "correct": [10, 14, 29, 44, 59, 74, 260, 496, 513, 529, 678, 694, 783, 799], "correctli": [95, 422, 899], "correl": [3, 4, 260, 266, 267, 268], "correspond": [11, 14, 26, 29, 41, 44, 56, 59, 71, 74, 240, 251, 260, 472, 489, 495, 497, 512, 514, 528, 530, 555, 572, 589, 607, 624, 641, 671, 677, 679, 693, 695, 720, 750, 782, 784, 798, 800, 813, 841, 890, 898, 899], "could": 900, "count": [3, 422, 892, 897, 898, 899], "cousin": 89, "cov": [3, 14, 29, 44, 59, 74, 88, 92, 271, 273], "cov_typ": [273, 369, 451, 495, 512, 528, 677, 693, 782, 798], "covari": [2, 3, 4, 14, 15, 25, 29, 30, 40, 44, 45, 55, 59, 60, 70, 74, 75, 85, 91, 95, 97, 237, 265, 266, 270, 273, 275, 278, 322, 355, 356, 357, 358, 359, 369, 370, 371, 372, 373, 375, 378, 403, 405, 409, 421, 422, 451, 492, 495, 509, 512, 525, 528, 674, 677, 690, 693, 779, 782, 795, 798, 848, 892, 896, 897, 899, 900], "covarianceestim": [116, 126, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 271, 273, 276], "coverag": [14, 29, 44, 59, 74], "cpi": [263, 264, 265, 266, 899], "cpilfesl": 899, "craig": 267, "crash": 268, "crc": 1, "creat": [3, 5, 6, 7, 8, 9, 24, 39, 54, 69, 84, 96, 239, 240, 241, 899], "creation": [1, 238], "crisi": [421, 900], "crit_val": [250, 274, 276], "criteria": [809, 811, 833, 835], "criterion": 272, "critic": [248, 250, 263, 264, 265, 266, 274, 277, 280, 288, 293, 301, 306, 312, 317, 324, 330, 339, 345, 351, 390, 401, 407, 416, 418, 421, 422, 901], "critical_valu": 901, "cross": [7, 274, 277, 278, 369, 421], "crude": 421, "crude_ret": 899, "csv": [367, 386], "ct": [263, 264, 265, 266, 268, 270, 271, 272, 273, 275, 277, 278, 418, 421, 422], "ctt": [263, 270, 271, 272, 273, 275, 277, 278, 418, 421, 422], "cumul": [644, 652, 723, 731, 753, 761, 766, 774, 861, 869], "current": [18, 33, 48, 63, 78, 95, 266, 874, 892, 897, 898, 899], "cush": 421, "custom": [497, 514, 530, 679, 695, 784, 800, 813, 841], "cycl": 443, "cython": [91, 96, 97, 453], "d": [1, 2, 4, 10, 15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 263, 265, 266, 268, 418, 425, 428, 429, 434, 439, 497, 514, 530, 654, 679, 695, 733, 763, 776, 784, 800, 813, 814, 820, 841, 842, 850, 871, 896, 897, 899], "d_": [10, 270, 275], "d_t": [272, 277, 278, 421], "dai": [425, 820, 850, 900], "daili": [433, 443, 820, 850], "dark": 900, "darkgrid": [3, 260, 421, 422, 896, 897, 898, 899, 900], "data": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 25, 26, 27, 28, 29, 30, 40, 41, 42, 43, 44, 45, 55, 56, 57, 58, 59, 60, 70, 71, 72, 73, 74, 75, 85, 87, 88, 89, 90, 91, 95, 96, 97, 101, 105, 106, 107, 108, 109, 110, 111, 112, 115, 125, 139, 149, 159, 169, 179, 189, 199, 209, 219, 229, 237, 238, 239, 240, 241, 250, 260, 263, 264, 265, 266, 267, 268, 269, 270, 275, 278, 283, 291, 296, 304, 308, 315, 319, 328, 333, 343, 347, 354, 355, 369, 403, 418, 420, 421, 422, 425, 428, 429, 430, 435, 439, 440, 441, 446, 448, 451, 466, 483, 497, 503, 514, 519, 530, 535, 549, 566, 583, 600, 618, 635, 647, 665, 679, 684, 695, 700, 714, 726, 744, 756, 769, 784, 789, 800, 812, 813, 814, 817, 820, 836, 841, 842, 845, 850, 855, 864, 884, 892, 899, 900], "datafram": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 58, 59, 60, 70, 71, 72, 73, 74, 75, 85, 87, 88, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 133, 134, 135, 136, 239, 240, 241, 245, 248, 258, 260, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 275, 277, 278, 291, 304, 315, 328, 343, 354, 357, 371, 373, 418, 422, 425, 428, 429, 430, 439, 440, 446, 447, 497, 502, 503, 506, 507, 514, 518, 519, 522, 523, 530, 534, 535, 538, 539, 647, 679, 683, 684, 687, 688, 695, 699, 700, 703, 704, 726, 756, 769, 784, 788, 789, 792, 793, 800, 804, 805, 808, 813, 824, 825, 827, 837, 841, 848, 864, 892, 898, 899], "dataread": [4, 87, 88, 418, 892], "dataset": [3, 263, 264, 265, 266], "date": [5, 6, 7, 8, 9, 91, 97, 422, 425, 497, 514, 530, 679, 695, 784, 800, 813, 814, 841, 842, 892, 896, 897, 898, 899, 900], "date_rang": [4, 87, 88, 439, 497, 514, 530, 679, 695, 784, 800, 814, 842], "datetim": [4, 87, 88, 418, 425, 495, 496, 497, 512, 513, 514, 528, 529, 530, 677, 678, 679, 693, 694, 695, 782, 783, 784, 798, 799, 800, 813, 814, 841, 842, 892, 899], "datetime64": [425, 495, 496, 497, 512, 513, 514, 528, 529, 530, 677, 678, 679, 693, 694, 695, 782, 783, 784, 798, 799, 800, 813, 814, 841, 842], "davidson": 1, "davidsonmackinnon": 1, "davison": 1, "dcoilwtico": 899, "de": 422, "debias": [14, 29, 44, 59, 74, 267, 278], "dec": 892, "decemb": 425, "decis": 240, "def": [3, 4, 11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 87, 88, 89, 896, 900], "default": [4, 14, 15, 20, 25, 29, 30, 35, 40, 44, 45, 50, 55, 59, 60, 65, 70, 74, 75, 80, 85, 91, 95, 97, 239, 240, 241, 260, 263, 264, 265, 266, 267, 268, 269, 418, 422, 425, 426, 433, 434, 436, 443, 462, 472, 479, 489, 497, 514, 530, 545, 555, 562, 572, 579, 589, 596, 607, 614, 624, 631, 641, 655, 661, 671, 679, 695, 710, 720, 740, 750, 784, 800, 813, 814, 841, 842, 880, 890, 892, 896, 898, 899, 900], "default_data": 422, "default_rng": [3, 5, 6, 8, 9, 96, 239, 240, 241, 260, 437, 442, 444, 445], "defin": [4, 94, 102, 260, 270, 275, 278, 363, 382, 418], "degre": [95, 101, 105, 106, 107, 108, 109, 110, 111, 112, 273, 365, 384, 764, 777, 854, 899, 901], "delta": [4, 270, 272, 275, 399, 421, 426, 458], "delta_": 434, "delta_1": 434, "delta_i": 399, "delta_j": 434, "demean": [101, 105, 106, 107, 108, 109, 110, 111, 112, 115, 125, 139, 149, 159, 169, 179, 189, 199, 209, 219, 229, 900], "demo": 3, "demonstr": [87, 497, 514, 530, 679, 695, 784, 800, 813, 841, 892], "denomin": 421, "densiti": [444, 652, 731, 761, 774, 869, 898], "dep": [422, 892, 896, 897, 899, 900], "dep_var": [448, 451], "depart": 268, "depend": [3, 7, 10, 12, 27, 42, 57, 72, 86, 88, 91, 95, 96, 97, 121, 131, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 250, 259, 265, 266, 422, 428, 429, 430, 439, 440, 446, 448, 451, 503, 507, 519, 523, 535, 539, 684, 688, 700, 704, 734, 789, 793, 808, 872, 892, 896, 898], "deprec": [5, 6, 8, 9, 92, 93, 96, 437, 442, 444, 445, 653, 732, 762, 775, 870], "dept": [263, 266], "deriv": [492, 509, 525, 674, 690, 779, 795], "describ": [3, 10, 263, 422, 425, 428, 429, 430, 439, 440, 446, 451], "descript": [4, 274, 428, 429, 439], "design": 261, "desir": [89, 900], "detail": [4, 239, 240, 241, 260, 270, 272, 275, 278, 651, 730, 760, 773, 826, 868, 898], "determin": [121, 122, 131, 132, 145, 146, 155, 156, 165, 166, 175, 176, 185, 186, 195, 196, 205, 206, 215, 216, 225, 226, 235, 236, 260, 268, 277, 420, 443, 651, 730, 760, 773, 868], "determinist": [270, 272, 275, 277, 278, 280, 289, 293, 302, 306, 313, 317, 326, 330, 340, 345, 352, 369, 421, 896], "detrend": [96, 264, 278, 422], "devel": 237, "develop": 237, "deviat": [3, 4, 87, 88, 260, 810, 834, 896, 900], "devic": 896, "df": [281, 294, 307, 318, 332, 346, 418, 422, 892, 896, 897, 899, 900, 901], "df_adjust": [100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 271, 273, 355, 363, 369, 378, 382, 403], "dfgl": [96, 420, 422], "diag": [3, 4], "diciccio": 1, "diciccioefron": 1, "dickei": [93, 95, 263, 264, 277, 278, 392, 399, 418, 420, 421], "dict": [5, 6, 7, 8, 9, 11, 12, 14, 15, 17, 18, 22, 23, 25, 26, 27, 29, 30, 32, 33, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 52, 53, 54, 55, 56, 57, 59, 60, 62, 63, 67, 68, 70, 71, 72, 74, 75, 77, 78, 82, 83, 85, 280, 293, 306, 317, 330, 345, 495, 497, 512, 514, 528, 530, 677, 679, 693, 695, 782, 784, 798, 800, 813, 841, 901], "dictionari": [3, 5, 6, 7, 8, 9, 12, 15, 17, 22, 23, 25, 27, 30, 32, 37, 38, 40, 42, 45, 47, 48, 52, 53, 55, 57, 60, 62, 67, 68, 70, 72, 75, 77, 82, 83, 85, 87, 280, 293, 306, 317, 330, 345, 497, 514, 530, 679, 695, 784, 800, 813, 841, 896], "did": 95, "diff": [263, 264, 265, 266, 355, 403, 418, 422], "differ": [2, 3, 13, 14, 28, 29, 43, 44, 58, 59, 73, 74, 86, 89, 96, 240, 259, 260, 264, 270, 272, 275, 277, 278, 418, 422, 425, 428, 429, 430, 439, 440, 446, 892, 898, 899], "differenc": [355, 403, 434], "differenti": [240, 241], "difficulti": [495, 512, 528, 677, 693, 782, 798], "dim0": 896, "dimens": [274, 497, 514, 530, 679, 695, 784, 800, 813, 828, 841, 896], "dimension": [10, 15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 89, 896, 897], "dimitri": 10, "direct": [14, 29, 44, 59, 74, 441, 899], "directli": [4, 5, 6, 7, 8, 9, 87, 89, 422, 810, 834, 892, 897], "disabl": [96, 495, 512, 528, 677, 693, 782, 798], "discard": 267, "disp": [3, 429, 495, 512, 528, 677, 693, 782, 798, 820, 850, 896, 897, 898, 899, 900], "displai": [495, 512, 528, 677, 693, 782, 798], "dist": [425, 892, 898, 899, 900], "distinct": [278, 421, 896], "distribut": [2, 4, 5, 8, 9, 10, 89, 90, 94, 95, 96, 240, 263, 266, 274, 278, 421, 425, 428, 429, 430, 437, 439, 440, 442, 444, 445, 446, 447, 496, 503, 513, 519, 529, 535, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 678, 684, 694, 700, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 783, 789, 799, 892, 895, 896, 897, 898, 900], "diverg": 421, "divid": [87, 101, 105, 106, 107, 108, 109, 110, 111, 112, 810, 834, 892, 899], "djia": [267, 892], "do": [10, 12, 27, 42, 57, 72, 270, 275, 425, 439, 497, 514, 530, 679, 695, 784, 800, 813, 814, 841, 842, 873, 898, 901], "doc": [95, 96, 237], "document": [4, 237, 425], "doe": [12, 27, 42, 57, 72, 90, 260, 278, 363, 382, 422, 472, 489, 495, 512, 528, 555, 572, 589, 607, 624, 641, 671, 677, 693, 720, 750, 782, 798, 874, 890, 892, 898], "doi": [10, 237], "dol": 272, "done": 4, "dot": [4, 89, 260, 460, 478, 493, 510, 526, 544, 561, 578, 595, 613, 630, 645, 660, 675, 691, 709, 724, 739, 754, 767, 780, 796, 862, 879], "download": [3, 4, 422, 899], "downstream": 96, "dpi": [3, 260, 421, 422, 896, 897, 898, 899, 900], "dramat": 899, "draw": [425, 654, 733, 763, 776, 871, 900], "drawn": [425, 900], "drift": 267, "drop": [95, 422, 898], "dropna": [3, 4, 87, 88, 425, 428, 892, 897, 898, 899, 900], "dt": [4, 87, 88, 418, 425, 892, 899], "dtype": [3, 88, 260, 421, 898, 899, 900], "due": [96, 283, 296, 308, 319, 333, 347, 421, 425, 497, 514, 530, 679, 695, 784, 800, 813, 841, 897, 900], "dummi": 268, "durbin": 422, "dure": [425, 900], "dx": [651, 730, 760, 773, 868], "dynam": [272, 273, 369, 420, 425, 426, 427, 432, 433, 434, 436, 438, 443, 896, 898, 899], "dynamicol": [95, 420], "dynamicolsresult": 369, "e": [3, 86, 89, 94, 95, 96, 259, 260, 268, 270, 275, 369, 425, 434, 436, 444, 892, 898], "e1": 4, "e2": 4, "e_": [425, 432, 896], "e_t": [95, 425, 892, 898, 899], "each": [3, 4, 7, 11, 14, 26, 29, 41, 44, 48, 56, 59, 71, 74, 86, 260, 268, 425, 453, 457, 460, 476, 478, 497, 514, 530, 542, 544, 559, 561, 576, 578, 593, 595, 611, 613, 628, 630, 658, 660, 679, 695, 707, 735, 737, 739, 784, 800, 813, 841, 873, 874, 877, 879, 896], "earch": 432, "earliest": [814, 842], "easi": 897, "easili": [260, 425, 898, 900], "econom": [238, 240, 263, 264, 265, 266, 268, 444, 899], "econometr": [1, 10, 263, 265, 267, 270, 272, 275, 278, 441], "econometrica": [238, 239, 240, 241, 264, 265, 266, 270, 272, 278], "edu": 444, "effect": [89, 900], "effici": 264, "efron": 1, "efrontibshirani": 1, "eg": 421, "eg_test": 421, "egarch": [425, 497, 514, 530, 679, 695, 784, 800, 813, 814, 841, 842, 892, 893], "either": [4, 14, 20, 29, 35, 44, 50, 59, 65, 74, 80, 86, 239, 270, 275, 369, 462, 479, 495, 497, 503, 512, 514, 519, 528, 530, 545, 562, 579, 596, 614, 631, 661, 677, 679, 684, 693, 695, 700, 710, 740, 782, 784, 798, 800, 813, 814, 841, 842, 880, 892, 895, 896, 898, 899, 900], "element": [4, 5, 6, 7, 8, 9, 48, 87, 101, 105, 106, 107, 108, 109, 110, 111, 112, 240, 241, 260, 418, 428, 429, 430, 439, 440, 446, 457, 472, 476, 489, 497, 514, 530, 542, 555, 559, 572, 576, 589, 593, 607, 611, 624, 628, 641, 658, 671, 679, 695, 707, 720, 737, 750, 784, 800, 812, 813, 836, 841, 874, 877, 890], "elif": [15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 898], "elimin": [14, 29, 44, 59, 74, 239], "elliott": 264, "els": [896, 898], "empir": [4, 898], "empti": [726, 896], "empty_lik": 897, "en": 899, "enabl": [92, 95], "encount": 89, "end": [0, 4, 5, 87, 88, 90, 101, 105, 106, 107, 108, 109, 110, 111, 112, 267, 268, 270, 275, 278, 418, 425, 497, 514, 530, 679, 695, 784, 800, 813, 840, 841, 892], "end_loc": 898, "endog": 3, "energi": 421, "enforc": 435, "engl": [95, 274, 277, 278, 369, 420, 421], "engle_grang": [95, 278, 369, 420, 421], "englegrangertestresult": 277, "enhanc": [91, 97], "ensur": [5, 6, 7, 8, 9, 89, 278, 437, 442, 444, 445, 472, 489, 555, 572, 589, 607, 624, 641, 671, 720, 750, 890], "enter": [5, 6, 7, 8, 9, 12, 27, 42, 57, 72, 893], "entir": [898, 900], "entri": [495, 512, 528, 677, 693, 782, 798], "entropi": [3, 5, 6, 8, 9, 437, 442, 444, 445], "env": 96, "environ": [95, 98], "environment": 96, "ep": [495, 512, 528, 677, 693, 782, 798], "epsilon": [363, 382, 425, 433], "epsilon_": [270, 275, 425, 426, 427, 432, 434, 436, 438, 441, 892, 898, 899], "epsilon_t": [272, 277, 369, 399, 421, 425, 428, 429, 430, 434, 439, 440, 446, 892, 896, 899], "eqnarrai": [425, 892], "equal": [248, 260, 272, 495, 512, 528, 677, 693, 782, 798], "equat": [425, 428, 434], "equiti": 3, "equival": [6, 260, 369, 428, 439, 497, 514, 530, 679, 695, 784, 800, 813, 841, 892, 900], "err": [422, 892, 896, 897, 899, 900], "error": [3, 4, 14, 29, 44, 59, 74, 95, 241, 259, 260, 261, 266, 366, 367, 369, 385, 386, 422, 428, 429, 430, 437, 439, 440, 446, 492, 494, 497, 503, 509, 511, 514, 519, 525, 527, 530, 535, 647, 674, 676, 679, 684, 690, 692, 695, 700, 779, 781, 784, 789, 795, 797, 800, 812, 813, 836, 841, 856, 892, 896], "especi": 95, "essenti": [0, 259], "estim": [2, 4, 5, 8, 9, 10, 14, 15, 25, 29, 30, 40, 44, 45, 55, 59, 60, 70, 74, 75, 85, 89, 91, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 120, 121, 122, 123, 125, 126, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 159, 160, 164, 165, 166, 167, 169, 170, 174, 175, 176, 177, 179, 180, 184, 185, 186, 187, 189, 190, 194, 195, 196, 197, 199, 200, 204, 205, 206, 207, 209, 210, 214, 215, 216, 217, 219, 220, 224, 225, 226, 227, 229, 230, 234, 235, 236, 237, 251, 260, 265, 266, 269, 270, 272, 273, 275, 277, 278, 281, 286, 294, 299, 307, 318, 332, 335, 337, 346, 355, 356, 357, 358, 359, 360, 363, 367, 369, 370, 371, 372, 375, 378, 379, 382, 386, 389, 399, 403, 405, 406, 409, 420, 421, 422, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 439, 440, 444, 446, 448, 451, 453, 454, 458, 460, 461, 472, 478, 489, 491, 495, 497, 508, 512, 514, 524, 528, 530, 544, 555, 561, 572, 578, 589, 595, 607, 613, 624, 630, 641, 655, 660, 671, 673, 677, 679, 689, 693, 695, 720, 734, 739, 750, 764, 777, 778, 782, 784, 794, 798, 800, 810, 812, 813, 814, 817, 834, 836, 839, 840, 841, 842, 845, 855, 872, 879, 890, 892, 894, 896, 898, 899, 900, 902], "estimator_typ": 271, "et": [265, 651, 730, 760, 773, 868], "eta": [270, 275, 444, 756, 899], "eta_": [270, 275], "eta_t": [270, 275], "etc": [10, 425, 899], "evalu": [260, 497, 514, 530, 644, 679, 695, 723, 753, 766, 784, 800, 813, 841, 861, 864, 873, 892, 897, 898, 899], "even": [87, 248, 421, 454, 899], "everi": [495, 512, 528, 677, 693, 782, 798], "evid": [268, 421], "evolv": [425, 441, 472, 489, 497, 514, 530, 555, 572, 589, 607, 624, 641, 671, 679, 695, 720, 750, 784, 800, 813, 814, 841, 842, 890, 899], "ewma": [95, 433, 443, 735, 899], "ewmavari": 899, "ex": [503, 519, 684, 700], "exact": [4, 89, 267, 421, 422], "exactli": 896, "examin": 260, "exampl": [2, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 85, 87, 88, 89, 95, 237, 260, 261, 263, 264, 265, 266, 267, 420, 422, 426, 427, 428, 429, 430, 432, 433, 434, 436, 438, 439, 440, 441, 443, 446, 453, 497, 503, 514, 519, 530, 535, 679, 684, 695, 700, 784, 789, 800, 813, 814, 820, 841, 842, 850, 892, 895, 896, 897, 898, 899, 900, 902], "exceed": 898, "except": [95, 96, 259, 422, 425, 497, 514, 530, 679, 695, 784, 800, 813, 841, 898, 899, 900], "excess": [3, 422], "excess_market": [3, 422], "exclud": [260, 268, 428, 429, 430, 439, 440, 446, 892], "exit": [892, 897, 898, 899], "exog": [3, 497, 514, 530, 679, 695, 784, 800, 813, 841, 896], "exog_fcast": 896, "exogen": [95, 96, 428, 429, 439, 440, 497, 503, 506, 514, 519, 522, 530, 538, 679, 684, 687, 695, 700, 703, 784, 792, 800, 813, 841, 892, 895, 899], "exp": [5, 8, 10], "expand": 237, "expect": [259, 260, 418, 896, 898], "expens": [89, 873], "experi": [3, 7], "experiment": 86, "explain": 425, "explicit": 3, "exploit": [3, 425], "expon": 9, "exponenti": [90, 432, 433, 899], "export": [96, 367, 386, 823, 858], "expos": [421, 899, 900, 902], "express": 278, "extend": [96, 420], "extens": [95, 96, 265], "extern": 900, "extra": [11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 240, 241], "extra_kwarg": [3, 11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 95], "extrem": 3, "f": [268, 422, 428, 644, 651, 723, 726, 730, 753, 760, 766, 773, 861, 868, 896], "facilit": [89, 823, 858], "fact": 259, "factor": [3, 260], "fail": 95, "fairli": 899, "fals": [14, 15, 20, 25, 29, 30, 35, 40, 44, 45, 50, 55, 59, 60, 65, 70, 74, 75, 80, 85, 88, 91, 95, 97, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 240, 241, 267, 272, 278, 355, 369, 386, 403, 422, 426, 428, 429, 430, 435, 439, 440, 441, 446, 449, 492, 495, 509, 512, 514, 525, 528, 530, 647, 674, 677, 679, 690, 693, 695, 726, 756, 769, 779, 782, 784, 795, 798, 800, 810, 813, 834, 841, 864, 892, 896, 898, 900], "fama": 3, "famili": [3, 241, 260, 421, 422, 896, 897, 898, 899, 900], "familywis": [259, 260, 261], "faster": 900, "favor": [96, 421], "fcast": [896, 898], "featur": [95, 896, 899], "feder": 899, "few": 425, "ff": [3, 422], "ffill": [4, 87, 88], "fh": 900, "fiarch": 434, "fiavarch": 434, "fiavgarch": 434, "fig": [3, 260, 421, 422, 497, 514, 530, 679, 695, 784, 800, 814, 820, 842, 850, 898, 899, 900], "figarch": [91, 95, 96, 97, 892], "figsiz": [3, 260, 421, 422, 896, 897, 898, 899, 900], "figur": [3, 260, 396, 412, 421, 422, 814, 820, 842, 850, 896, 897, 898, 899, 900], "fill": [425, 497, 514, 530, 679, 695, 784, 800, 813, 841, 897], "filter": [897, 900], "final": [4, 260, 278, 420, 422, 424, 425, 439, 495, 497, 512, 514, 528, 530, 677, 679, 693, 695, 782, 784, 798, 800, 813, 841, 896, 898, 899, 900], "financ": [88, 899], "financi": [237, 267, 421, 422, 899, 900], "find": [3, 260, 495, 512, 528, 677, 693, 782, 798, 900], "finit": 264, "firmli": 421, "first": [3, 5, 6, 7, 8, 9, 10, 15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 87, 89, 260, 278, 418, 420, 421, 422, 425, 439, 451, 462, 479, 495, 496, 497, 512, 513, 514, 528, 529, 530, 545, 562, 579, 596, 614, 631, 661, 677, 678, 679, 693, 694, 695, 710, 740, 782, 783, 784, 798, 799, 800, 813, 814, 841, 842, 880, 896, 897, 898, 899, 900], "first_ob": [94, 95, 495, 496, 512, 513, 528, 529, 677, 678, 693, 694, 782, 783, 798, 799, 898], "fit": [94, 95, 260, 273, 425, 428, 429, 430, 433, 439, 440, 446, 451, 497, 504, 514, 520, 530, 536, 679, 685, 695, 701, 784, 790, 800, 806, 813, 814, 816, 820, 823, 841, 842, 844, 850, 858, 892, 897, 898, 899, 900, 901], "fit_start": 451, "fit_stop": 451, "fix": [89, 90, 91, 94, 95, 96, 97, 422, 425, 426, 433, 435, 443, 448, 894, 895, 902], "fixed_r": 899, "fixedvari": 95, "flag": [14, 20, 29, 35, 44, 50, 59, 65, 74, 80, 101, 105, 106, 107, 108, 109, 110, 111, 112, 115, 117, 125, 127, 139, 141, 149, 151, 159, 161, 169, 171, 179, 181, 189, 191, 199, 201, 209, 211, 219, 221, 229, 231, 240, 241, 263, 272, 386, 428, 429, 430, 435, 439, 440, 441, 446, 471, 488, 492, 495, 509, 512, 525, 528, 554, 571, 588, 606, 623, 640, 647, 670, 674, 677, 690, 693, 719, 726, 749, 756, 769, 779, 782, 795, 798, 810, 834, 838, 864, 889, 892], "float": [14, 15, 17, 22, 23, 25, 29, 30, 32, 37, 38, 40, 44, 45, 47, 52, 53, 55, 59, 60, 62, 67, 68, 70, 74, 75, 77, 82, 83, 85, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 121, 122, 123, 124, 128, 131, 132, 137, 138, 142, 145, 146, 147, 148, 152, 155, 156, 157, 158, 162, 165, 166, 167, 168, 172, 175, 176, 177, 178, 182, 185, 186, 187, 188, 192, 195, 196, 197, 198, 202, 205, 206, 207, 208, 212, 215, 216, 217, 218, 222, 225, 226, 227, 228, 232, 235, 236, 239, 241, 248, 250, 268, 269, 271, 274, 276, 280, 285, 287, 293, 298, 300, 306, 310, 311, 317, 321, 323, 330, 336, 338, 342, 345, 349, 350, 355, 356, 359, 363, 364, 365, 370, 378, 382, 383, 384, 397, 399, 400, 403, 405, 413, 415, 426, 428, 433, 434, 436, 443, 448, 451, 455, 456, 457, 459, 461, 462, 466, 470, 472, 474, 475, 476, 477, 479, 483, 487, 489, 491, 492, 495, 496, 498, 503, 508, 509, 512, 513, 519, 524, 525, 528, 529, 535, 540, 541, 542, 543, 545, 549, 553, 555, 557, 558, 559, 560, 562, 566, 570, 572, 574, 575, 576, 577, 579, 583, 587, 589, 591, 592, 593, 594, 596, 600, 605, 607, 609, 610, 611, 612, 614, 618, 622, 624, 626, 627, 628, 629, 631, 635, 639, 641, 643, 644, 647, 648, 651, 652, 654, 656, 657, 658, 659, 661, 665, 669, 671, 673, 674, 677, 678, 684, 689, 690, 693, 694, 700, 705, 706, 707, 708, 710, 714, 718, 720, 722, 723, 726, 727, 730, 731, 733, 735, 736, 737, 738, 740, 744, 748, 750, 752, 753, 756, 757, 760, 761, 763, 765, 766, 769, 770, 773, 774, 776, 778, 779, 782, 783, 789, 794, 795, 798, 799, 805, 809, 811, 815, 820, 833, 835, 837, 843, 850, 853, 854, 855, 860, 861, 864, 865, 868, 869, 871, 873, 875, 876, 877, 878, 880, 884, 888, 890, 892, 896, 901], "float64": [3, 88, 260, 421, 898, 899, 900], "float64arrai": [449, 450, 462], "flush": 898, "fo": 896, "follow": [268, 436, 453, 892, 896, 898, 900], "font": [3, 260, 421, 422, 896, 897, 898, 899, 900], "forc": [101, 105, 106, 107, 108, 109, 110, 111, 112, 278, 355, 369, 403], "force_int": [100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 278, 355, 369, 403], "forecast": [91, 94, 95, 96, 97, 259, 260, 449, 450, 814, 824, 825, 827, 842, 895, 900], "forecast_1d": 896, "forecast_2d": 896, "forecastingmethod": 462, "form": [4, 89, 90, 260, 270, 272, 275, 425, 428, 439, 460, 478, 544, 561, 578, 595, 613, 630, 660, 739, 879, 898, 899], "formal": [238, 241, 259], "format": [263, 264, 265, 266, 267, 418, 497, 514, 530, 679, 695, 784, 800, 813, 841, 896], "formula": 4, "foroni": 441, "forward": 425, "four": [420, 421], "frac": [4, 10, 101, 105, 106, 107, 108, 109, 110, 111, 112, 121, 131, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 272, 278, 425, 434, 438, 647, 726, 756, 769], "fraction": [95, 434], "frameon": [896, 898, 900], "framework": [92, 422], "franc": 265, "fred": [418, 422, 897, 899], "free": 896, "freedom": [95, 101, 105, 106, 107, 108, 109, 110, 111, 112, 273, 365, 384, 764, 777, 854, 899, 901], "french": [3, 422], "frenchdata": [3, 422], "freq": [4, 87, 88, 439], "frequenc": [441, 495, 512, 528, 677, 693, 782, 798, 820, 850, 899], "fresh": [5, 6, 8, 9, 13, 28, 43, 58, 73], "fri": 892, "from": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 85, 87, 88, 89, 91, 94, 95, 96, 97, 102, 239, 243, 259, 260, 263, 264, 265, 266, 267, 268, 270, 272, 273, 275, 277, 278, 286, 299, 355, 369, 378, 398, 399, 403, 414, 418, 421, 422, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 438, 439, 440, 441, 443, 446, 448, 449, 450, 451, 453, 454, 462, 466, 479, 483, 496, 497, 503, 504, 513, 514, 519, 520, 529, 530, 535, 536, 545, 549, 562, 566, 579, 583, 596, 600, 614, 618, 631, 635, 651, 654, 661, 665, 678, 679, 684, 685, 694, 695, 700, 701, 710, 714, 730, 733, 740, 744, 760, 763, 773, 776, 783, 784, 789, 790, 799, 800, 806, 813, 814, 820, 823, 841, 842, 847, 850, 858, 868, 871, 880, 884, 892, 893, 896, 897, 898, 900, 902], "front": 268, "ftol": [495, 512, 528, 677, 693, 782, 798], "full": [3, 98, 386], "fuller": [93, 95, 263, 264, 277, 278, 392, 399, 418, 420, 421], "fulli": [89, 275, 420], "fullymodifiedol": [95, 420], "func": [11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 892, 897, 898, 899], "function": [0, 4, 11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 87, 88, 89, 92, 93, 95, 260, 263, 266, 269, 428, 441, 453, 466, 483, 549, 566, 583, 600, 618, 635, 644, 647, 652, 665, 714, 723, 731, 744, 753, 756, 761, 766, 769, 774, 861, 869, 873, 884, 892, 897, 898, 899, 900], "functool": 89, "further": [268, 270, 272, 275, 898], "futur": [91, 92, 95, 97, 98, 237, 497, 514, 530, 679, 695, 784, 800], "fv": 897, "fwer": 241, "g": [1, 3, 4, 10, 86, 94, 95, 96, 263, 264, 265, 266, 268, 425, 428, 892, 898], "gallant": 269, "gamma": [272, 275, 277, 278, 399, 421, 428, 429, 439, 440, 441, 647, 709, 756, 769, 897, 899, 900], "gamma_": [10, 426, 432, 436], "gamma_0": 102, "gamma_1": [270, 275], "gamma_2": [270, 275], "gamma_i": 426, "garch": [95, 425, 428, 429, 503, 519, 535, 684, 700, 789, 892, 893, 896, 897, 898, 900], "garch_param": [503, 519, 535, 684, 700], "gaussian": 892, "gca": 898, "ged": [647, 892], "gen": 260, "gener": [2, 3, 5, 6, 7, 8, 9, 12, 13, 15, 17, 19, 21, 22, 23, 25, 27, 28, 30, 32, 34, 36, 37, 38, 40, 42, 43, 45, 47, 49, 51, 52, 53, 55, 57, 58, 60, 62, 64, 66, 67, 68, 70, 72, 73, 75, 77, 79, 81, 82, 83, 85, 89, 92, 95, 96, 239, 240, 241, 247, 253, 257, 260, 265, 425, 437, 438, 442, 444, 445, 452, 462, 466, 479, 483, 495, 496, 497, 512, 513, 514, 528, 529, 530, 545, 549, 562, 566, 579, 583, 596, 600, 614, 618, 631, 635, 647, 653, 661, 665, 677, 678, 679, 693, 694, 695, 710, 714, 732, 740, 744, 762, 775, 782, 783, 784, 798, 799, 800, 813, 814, 841, 842, 870, 880, 884, 892, 896, 899], "geometr": 107, "geq": [259, 260, 425, 426], "get": [16, 17, 19, 23, 31, 32, 34, 38, 46, 47, 49, 53, 61, 62, 64, 68, 76, 77, 79, 83, 281, 282, 289, 294, 295, 302, 307, 313, 318, 325, 326, 331, 332, 335, 337, 340, 346, 352, 394, 410, 418, 473, 490, 494, 505, 506, 511, 521, 522, 527, 537, 538, 556, 573, 590, 608, 625, 642, 672, 676, 686, 687, 692, 702, 703, 721, 751, 781, 791, 792, 797, 807, 891], "get_ax": 421, "get_data_fr": [267, 892], "get_data_yahoo": 425, "get_loc": 900, "get_stat": [96, 899], "gh156": 95, "gh195": 95, "gh225": 95, "gh233": 95, "gh248": 95, "gh259": 95, "gh260": 95, "gh261": 95, "gh262": 95, "gh286": 95, "gh288": 95, "gh290": 95, "gh292": 95, "gh303": 95, "gh313": 95, "gh315": 95, "gh317": 95, "gh322": 95, "gh326": 95, "gh329": 95, "gh331": 95, "gh334": 95, "gh338": 95, "gh339": 95, "gh341": 95, "gh342": 95, "gh343": 95, "gh345": 95, "gh346": 95, "gh353": 95, "gh354": 95, "gh356": 95, "gh359": 95, "gh360": 95, "gh364": 95, "gh366": 95, "gh395": 95, "gh417": 95, "gh437": 95, "gh438": 95, "gh443": 95, "gh458": 95, "gh551": 96, "gh565": 96, "gh569": 96, "gh572": 96, "gh606": [91, 97], "gh687": [91, 97], "gim": 428, "git": 422, "give": 94, "given": [260, 443, 496, 513, 529, 678, 694, 756, 783, 799, 899], "gjr": [436, 897, 900], "gl": [93, 96, 264, 420, 435, 897], "good": [4, 260, 422, 900], "gpa": 3, "gradient": [892, 897, 898, 899], "granger": [95, 274, 277, 278, 369, 420, 421], "gre": 3, "great": 268, "green": 263, "ground": 900, "group": 3, "grow": 900, "gspc": [4, 87, 88, 425, 892], "gt": [422, 896, 897, 899, 900], "guid": 1, "h": [10, 95, 101, 105, 106, 107, 108, 109, 110, 111, 112, 238, 240, 263, 264, 265, 270, 272, 275, 425, 497, 514, 530, 679, 695, 784, 800, 813, 841, 896, 898, 900], "h0": 268, "h_": 434, "h_0": [259, 260], "h_1": 259, "h_t": 434, "ha": [5, 6, 7, 8, 9, 20, 35, 50, 65, 80, 95, 96, 260, 268, 420, 422, 425, 431, 433, 443, 726, 813, 841, 874, 896, 898, 899, 900], "hac": 369, "had": [497, 514, 530, 679, 695, 784, 800, 813, 841], "halbert": 10, "half": 260, "hall": 263, "ham": 110, "hamilton": [263, 266], "han": 111, "hand": [270, 272, 275, 277, 278], "handbook": 1, "handl": [95, 814, 820, 842, 850], "hannan": 272, "hansen": [94, 238, 239, 240, 259, 275, 444], "hansenlundenason": 238, "happen": [421, 900], "har": [91, 97, 428, 429, 439, 497, 503, 514, 519, 530, 679, 684, 695, 700, 784, 800, 814, 842, 892, 897], "harch": [425, 441, 892, 899], "harx": [95, 503, 519, 700, 892, 897, 899], "harx_1": 439, "harx_2": 439, "harx_3": 439, "harx_4": 439, "harx_param": [503, 519, 684, 700], "hashabl": [243, 244, 248, 258, 497, 514, 530, 679, 695, 784, 800, 813, 841], "hat": [4, 10, 121, 131, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 270, 272, 275, 278, 363, 369, 382, 399, 425], "have": [2, 4, 7, 15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 86, 95, 96, 98, 101, 105, 106, 107, 108, 109, 110, 111, 112, 260, 420, 421, 422, 425, 426, 435, 438, 448, 451, 496, 497, 503, 513, 514, 519, 529, 530, 647, 678, 679, 684, 694, 695, 700, 756, 769, 783, 784, 799, 800, 813, 814, 841, 842, 855, 896, 897, 898, 899, 900, 902], "he": 421, "head": [898, 899, 900], "heavi": 899, "heavier": 655, "heavili": 899, "hedgehog": [94, 900], "hedgehog_plot": [497, 514, 530, 679, 695, 784, 800], "held": 94, "help": [95, 896, 900], "here": [3, 4, 260, 421, 422, 896, 900], "heterogen": [438, 439, 899], "heteroskedast": [265, 266, 267, 337, 369, 810, 834, 897, 899], "high": [1, 2, 4, 87, 88, 92, 895, 897], "higher": [4, 87, 260, 272, 896], "highli": [4, 420, 422, 899], "highlight": 898, "hist": [3, 87], "histor": 900, "histori": 900, "hml": [3, 422], "hobijn": 265, "hold": [396, 412, 439, 495, 512, 528, 677, 693, 782, 798, 900], "hold_back": [94, 428, 429, 430, 439, 440, 446, 447, 892], "holder": 901, "homoskedast": 369, "horizon": [425, 462, 479, 497, 514, 530, 545, 562, 579, 596, 614, 631, 661, 679, 695, 710, 740, 784, 800, 813, 814, 841, 842, 880, 896, 898, 900], "how": [3, 87, 421, 425, 453, 900], "howev": [3, 899, 900], "hqic": 272, "html": [263, 266, 823, 858], "http": [237, 263, 266, 444], "hyperbol": [95, 441], "hypothesi": [260, 263, 264, 265, 266, 267, 268, 274, 277, 279, 284, 292, 297, 305, 309, 316, 320, 329, 334, 344, 348, 388, 391, 395, 404, 408, 411, 418, 421, 422, 901], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 20, 23, 25, 26, 27, 29, 30, 35, 38, 40, 41, 42, 44, 45, 50, 53, 55, 56, 57, 59, 60, 65, 68, 70, 71, 72, 74, 75, 80, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 115, 117, 121, 125, 127, 131, 139, 141, 145, 149, 151, 155, 159, 161, 165, 169, 171, 175, 179, 181, 185, 189, 191, 195, 199, 201, 205, 209, 211, 215, 219, 221, 225, 229, 231, 235, 237, 239, 240, 241, 245, 248, 254, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 270, 272, 275, 277, 278, 281, 294, 307, 318, 332, 346, 355, 363, 369, 378, 382, 399, 403, 418, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 451, 453, 457, 458, 460, 461, 462, 470, 473, 476, 478, 479, 487, 490, 495, 497, 503, 512, 514, 519, 528, 530, 535, 542, 544, 545, 553, 556, 559, 561, 562, 570, 573, 576, 578, 579, 587, 590, 593, 595, 596, 605, 608, 611, 613, 614, 622, 625, 628, 630, 631, 639, 642, 647, 651, 652, 653, 654, 655, 658, 660, 661, 669, 672, 677, 679, 684, 693, 695, 700, 707, 710, 718, 721, 726, 730, 731, 732, 733, 737, 739, 740, 748, 751, 756, 760, 761, 762, 763, 769, 773, 774, 775, 776, 782, 784, 789, 798, 800, 812, 813, 814, 820, 836, 841, 842, 850, 868, 869, 870, 871, 873, 877, 879, 880, 888, 891, 892, 894, 896, 897, 898, 899, 900, 902], "i_": [426, 899], "ic": [263, 264, 268], "icdf": [652, 731, 761, 774, 869], "id": 900, "idea": [263, 266, 900], "ideal": 260, "ident": [2, 4, 14, 29, 44, 59, 74, 260, 264, 278, 421, 425, 438, 444, 497, 514, 530, 679, 695, 784, 800, 813, 814, 841, 842, 898, 899, 900], "identifi": [259, 260], "idx": [898, 900], "ier_94": 444, "ignor": [14, 29, 44, 59, 74, 422, 820, 850, 892, 896], "iid": [4, 900], "iidbootstrap": [3, 4, 7, 11, 12, 14, 15, 25, 41, 42, 43, 44, 45, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 85, 86, 87, 89, 96], "illustr": [897, 900], "iloc": [3, 260, 422, 896, 898, 900], "immateri": 96, "immut": 96, "implement": [3, 4, 10, 89, 239, 241, 263, 277, 422, 453, 897, 898, 900], "impli": 655, "import": [3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 85, 87, 88, 89, 91, 95, 97, 260, 263, 264, 265, 266, 267, 418, 421, 422, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 438, 439, 440, 441, 443, 446, 497, 503, 514, 519, 530, 535, 679, 684, 695, 700, 784, 789, 800, 814, 820, 842, 850, 892, 893, 896, 897, 898, 899, 900], "impos": 897, "improv": [4, 95, 96, 98, 259, 264, 422, 453, 899], "inappropri": 7, "incl": 373, "includ": [1, 3, 89, 95, 119, 129, 143, 153, 163, 173, 183, 193, 203, 213, 223, 233, 237, 238, 260, 263, 264, 265, 266, 268, 270, 272, 273, 275, 277, 278, 280, 293, 306, 317, 330, 345, 369, 374, 376, 377, 386, 418, 421, 422, 425, 428, 429, 438, 439, 440, 441, 495, 497, 503, 512, 514, 519, 528, 530, 677, 679, 684, 693, 695, 700, 782, 784, 798, 800, 810, 813, 834, 841, 896, 899], "inclus": 245, "incorrect": 95, "incorrectli": 95, "increas": [98, 260, 899, 900], "increment": 267, "independ": [2, 3, 7, 95, 425, 896], "independentsamplesbootstrap": [3, 6, 86, 95], "index": [3, 4, 87, 88, 102, 245, 260, 421, 422, 425, 439, 449, 450, 451, 462, 467, 469, 470, 479, 484, 486, 487, 497, 514, 530, 545, 550, 552, 553, 562, 567, 569, 570, 579, 584, 586, 587, 596, 601, 603, 605, 614, 619, 621, 622, 631, 636, 638, 639, 661, 666, 668, 669, 679, 695, 710, 715, 717, 718, 740, 745, 747, 748, 784, 800, 813, 814, 841, 842, 874, 880, 885, 887, 888, 896, 897, 898, 899, 900], "indic": [14, 20, 24, 29, 35, 39, 44, 48, 50, 54, 59, 65, 69, 74, 80, 84, 101, 105, 106, 107, 108, 109, 110, 111, 112, 115, 117, 125, 127, 139, 141, 149, 151, 159, 161, 169, 171, 179, 181, 189, 191, 199, 201, 209, 211, 219, 221, 229, 231, 240, 241, 243, 244, 248, 254, 258, 260, 263, 267, 272, 331, 335, 337, 386, 421, 422, 425, 428, 429, 430, 439, 440, 441, 446, 471, 488, 492, 495, 497, 503, 509, 512, 514, 519, 525, 528, 530, 554, 571, 588, 606, 623, 640, 647, 670, 674, 677, 679, 684, 690, 693, 695, 700, 719, 726, 749, 756, 769, 779, 782, 784, 795, 798, 800, 810, 813, 814, 820, 834, 841, 842, 850, 864, 889, 892, 899], "indistinguish": 260, "individu": [647, 726, 756, 769, 864, 892], "inequ": [460, 478, 544, 561, 578, 595, 613, 630, 660, 739, 879], "inf": [14, 29, 44, 59, 74, 651, 730, 760, 773, 868], "infeas": 95, "infer": [95, 267, 275, 899], "infin": 604, "inflat": [263, 264, 265, 266, 899], "inform": [272, 421, 453, 495, 512, 528, 677, 693, 782, 798, 809, 811, 812, 833, 835, 836, 847, 898, 899], "infti": [270, 275, 434, 651, 730, 756, 760, 773, 868, 900], "inherit": [424, 453, 893, 902], "initi": [3, 5, 6, 7, 8, 9, 11, 20, 26, 35, 41, 50, 56, 65, 71, 80, 89, 94, 95, 96, 246, 248, 252, 256, 264, 278, 422, 459, 462, 466, 470, 477, 479, 483, 487, 503, 519, 535, 543, 545, 549, 553, 560, 562, 566, 570, 577, 579, 583, 587, 594, 596, 600, 605, 612, 614, 618, 622, 629, 631, 635, 639, 659, 661, 665, 669, 684, 700, 708, 710, 714, 718, 738, 740, 744, 748, 789, 873, 878, 880, 884, 888, 892, 896, 898, 899], "initial_valu": [466, 483, 503, 519, 535, 549, 566, 583, 600, 618, 635, 665, 684, 700, 714, 744, 789, 805, 884], "initial_value_vol": [503, 519, 535, 684, 700, 789, 805], "initialize_upd": 453, "inlin": [95, 896, 899, 900], "inner": [4, 14, 29, 44, 59, 74, 101, 105, 106, 107, 108, 109, 110, 111, 112, 278], "innov": [426, 427, 432, 434, 436, 892], "inplac": 874, "input": [3, 4, 5, 6, 7, 8, 9, 15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 87, 89, 91, 95, 97, 260, 418, 425, 448, 451, 462, 466, 479, 483, 497, 514, 530, 545, 549, 562, 566, 579, 583, 596, 600, 614, 618, 631, 635, 661, 665, 679, 695, 710, 714, 740, 744, 784, 800, 812, 813, 814, 836, 841, 842, 864, 880, 884, 892, 898, 899], "insid": [10, 896], "inspect": 439, "instal": [91, 97], "instanc": [5, 7, 8, 9, 13, 16, 19, 28, 31, 34, 43, 46, 49, 58, 61, 64, 73, 76, 79, 87, 89, 95, 96, 116, 126, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 273, 274, 355, 367, 386, 396, 403, 412, 437, 442, 444, 445, 462, 479, 497, 514, 530, 545, 562, 579, 596, 614, 631, 661, 679, 695, 710, 740, 784, 800, 813, 816, 823, 841, 844, 858, 880, 899], "instead": [4, 5, 6, 8, 9, 94, 422, 437, 442, 444, 445, 653, 732, 762, 775, 870, 896, 900], "int": [3, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 17, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47, 51, 52, 53, 55, 56, 57, 58, 59, 60, 62, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 81, 82, 83, 85, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 239, 240, 241, 247, 253, 257, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 276, 277, 278, 281, 282, 283, 294, 295, 296, 307, 308, 318, 319, 332, 333, 346, 347, 369, 376, 377, 391, 392, 393, 408, 426, 427, 428, 429, 430, 432, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 451, 452, 462, 464, 466, 467, 469, 470, 479, 481, 483, 484, 486, 487, 495, 496, 497, 498, 500, 503, 512, 513, 514, 516, 519, 528, 529, 530, 532, 535, 545, 547, 549, 550, 552, 553, 562, 564, 566, 567, 569, 570, 579, 581, 583, 584, 586, 587, 596, 598, 600, 601, 603, 604, 605, 614, 616, 618, 619, 621, 622, 631, 633, 635, 636, 638, 639, 648, 651, 654, 661, 663, 665, 666, 668, 669, 677, 678, 679, 681, 684, 693, 694, 695, 697, 700, 710, 712, 714, 715, 717, 718, 727, 730, 733, 740, 742, 744, 745, 747, 748, 757, 760, 763, 770, 773, 776, 782, 783, 784, 786, 789, 798, 799, 800, 802, 805, 810, 813, 814, 817, 818, 834, 838, 839, 840, 841, 842, 845, 846, 865, 868, 871, 873, 874, 880, 882, 884, 885, 887, 888, 892, 896, 897, 899, 900, 901], "int_": [651, 730, 760, 773, 868], "integ": [6, 94, 96, 101, 105, 106, 107, 108, 109, 110, 111, 112, 117, 127, 141, 151, 161, 171, 181, 191, 201, 211, 221, 231, 239, 240, 241, 247, 253, 257, 260, 278, 355, 369, 403, 422, 425, 451, 466, 483, 497, 514, 530, 549, 566, 583, 600, 618, 635, 665, 679, 695, 714, 744, 784, 800, 813, 814, 841, 842, 884, 892], "integr": [89, 95, 272, 651, 652, 730, 731, 760, 761, 773, 774, 868, 869], "intent": [4, 422], "intercept": 900, "interest": [15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 899], "interfac": 2, "intermedi": [421, 899], "intern": [2, 87, 254, 444, 900], "internet": 3, "interpret": 428, "interv": [1, 2, 3, 14, 29, 44, 59, 74, 89, 95, 652, 731, 761, 774, 837, 869], "introduc": 95, "introduct": [1, 420, 895, 899], "invalidlengthwarn": 422, "invers": [652, 731, 761, 774, 869], "investig": [265, 268, 421], "invoc": 899, "ipython": [3, 94, 260, 421, 422, 897, 898, 899], "irrespect": 94, "is_panda": [448, 451], "isin": 260, "issu": [95, 96, 428, 429, 430, 439, 440, 446, 892, 897], "iter": [11, 12, 24, 26, 27, 39, 41, 42, 54, 56, 57, 69, 71, 72, 84, 92, 453, 495, 512, 528, 677, 693, 782, 798, 892, 897, 898, 899], "ith": 837, "its": [10, 20, 35, 50, 65, 80, 252, 259, 260, 369, 421, 422, 899], "j": [1, 238, 239, 241, 260, 263, 264, 266, 270, 272, 432, 434, 436, 438, 439, 441, 497, 503, 514, 519, 530, 679, 684, 695, 700, 784, 800, 813, 841, 896], "jackknif": [4, 95], "jarqu": 422, "jb": 422, "jersei": 263, "jim": 95, "jit": 92, "john": [1, 267], "join": 896, "jointli": [95, 426, 433, 454], "journal": [1, 238, 240, 263, 265, 266, 268, 270, 272, 278], "jth": [503, 519, 684, 700], "judg": [263, 266], "just": 260, "k": [10, 239, 240, 241, 260, 265, 266, 268, 272, 355, 369, 403, 426, 428, 429, 432, 436, 439, 440, 503, 519, 684, 700, 900], "k_n": 10, "kappa": [270, 278, 428, 899], "kappa_i": 272, "kde": 899, "kei": [12, 27, 42, 57, 72, 390, 407, 418, 497, 514, 530, 679, 695, 784, 800, 813, 841, 896], "ken": 422, "kernel": [95, 269, 278, 355, 369, 378, 403, 421], "kernel_est": [271, 273, 276], "kevin": [237, 441], "keyword": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 25, 26, 27, 28, 29, 30, 40, 41, 42, 43, 44, 45, 48, 55, 56, 57, 58, 59, 60, 70, 71, 72, 73, 74, 75, 85, 87, 88, 89, 95, 96], "khrapov": 94, "kind": [422, 899], "kmax": 443, "known": [240, 260, 278, 355, 369, 403, 462, 479, 545, 562, 579, 596, 614, 631, 661, 710, 740, 880, 899], "kpss": [93, 95, 420], "kurtosi": [422, 764, 777], "kw": 87, "kw_data": [5, 6, 7, 8, 9], "kwarg": [4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 25, 26, 28, 29, 30, 40, 41, 43, 44, 45, 55, 56, 58, 59, 60, 70, 71, 73, 74, 75, 85], "kwdata": [12, 27, 42, 57, 72], "kwiatkowski": 265, "l": [4, 434, 892, 899], "l1": 422, "l2": 422, "l3": 422, "l4": 422, "l5": 422, "l_": [259, 260, 428, 429, 438, 439], "l_i": [259, 260], "label": [102, 449, 450, 898, 900], "lack": 894, "lag": [91, 95, 96, 97, 122, 132, 146, 156, 166, 176, 186, 196, 206, 216, 226, 236, 263, 264, 265, 266, 267, 268, 272, 273, 274, 277, 282, 283, 295, 296, 308, 319, 322, 333, 342, 347, 369, 373, 374, 393, 418, 421, 426, 428, 429, 430, 432, 434, 436, 438, 439, 440, 441, 446, 497, 503, 514, 519, 530, 604, 679, 684, 695, 700, 784, 800, 810, 814, 834, 842, 892, 896, 897, 899], "lam": 433, "lambda": [270, 275, 433, 436, 444, 756, 899], "lambda_": 434, "lambda_0": [102, 270, 275], "lambda_1": [102, 434], "lambda_i": 434, "lambda_j": [272, 434], "larg": [1, 91, 95, 97, 260, 270, 275, 418, 421, 422, 899], "larger": [260, 425, 434, 436, 462, 479, 545, 562, 579, 596, 614, 631, 661, 710, 740, 880, 896, 898, 900], "last": [20, 35, 50, 65, 80, 267, 270, 275, 425, 451, 495, 496, 512, 513, 528, 529, 677, 678, 693, 694, 782, 783, 798, 799, 896], "last_ob": [94, 95, 425, 495, 496, 512, 513, 528, 529, 677, 678, 693, 694, 782, 783, 798, 799, 896, 898], "later": [91, 97, 98, 899], "latest": [94, 237], "latex": [367, 386, 823, 858], "lceil": 10, "ldot": [101, 105, 106, 107, 108, 109, 110, 111, 112, 425], "lead": [1, 260, 272, 273, 369, 373, 374], "least": [86, 267, 270, 275, 369, 422, 440], "leav": [4, 95], "left": [4, 10, 101, 105, 109, 121, 131, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 270, 272, 275, 277, 278, 425, 426, 432, 436, 438, 441, 647, 726, 756, 769, 899], "leg": 898, "legaci": 96, "legend": [896, 898, 900], "len": [462, 479, 545, 562, 579, 596, 614, 631, 661, 710, 740, 880, 900], "length": [5, 7, 8, 9, 10, 90, 91, 95, 96, 97, 239, 240, 241, 263, 264, 266, 268, 272, 277, 282, 295, 393, 421, 422, 425, 428, 429, 430, 438, 439, 440, 441, 443, 446, 497, 503, 514, 519, 530, 535, 679, 684, 695, 700, 784, 789, 800, 813, 841, 892, 898], "leq": [105, 260], "leq1": [101, 105, 106, 107, 108, 110, 111, 112], "less": [95, 264, 899], "let": 278, "letter": 264, "level": [2, 92, 95, 422, 895], "lie": 426, "like": [4, 10, 88, 89, 259, 421, 425, 428, 429, 430, 439, 440, 446, 497, 514, 530, 679, 695, 784, 800, 813, 841, 892, 897, 899, 900], "likelihood": [422, 451, 453, 472, 489, 555, 572, 589, 607, 624, 641, 647, 671, 720, 726, 750, 756, 769, 847, 864, 873, 890, 892, 896, 897, 899, 900], "limit": [4, 260, 900], "linalg": 89, "line": [260, 270, 275, 898], "linear": [263, 264, 265, 266, 268, 270, 272, 275, 277, 278, 418, 422, 425, 460, 478, 491, 493, 495, 503, 508, 510, 512, 519, 524, 526, 528, 544, 561, 578, 595, 613, 630, 660, 673, 675, 677, 684, 689, 691, 693, 700, 739, 778, 780, 782, 794, 796, 798, 879], "linear_model": 369, "linspac": 260, "linux": 96, "liquid": 899, "list": [0, 18, 21, 33, 36, 39, 48, 51, 54, 63, 66, 78, 81, 95, 102, 243, 244, 247, 248, 253, 254, 257, 258, 289, 290, 302, 303, 313, 314, 326, 327, 340, 341, 352, 353, 428, 429, 438, 448, 449, 450, 451, 457, 465, 476, 482, 491, 501, 508, 517, 524, 533, 542, 548, 559, 565, 576, 582, 593, 599, 611, 617, 628, 634, 643, 650, 658, 664, 673, 682, 689, 698, 707, 713, 722, 729, 737, 743, 752, 759, 765, 772, 778, 787, 794, 803, 860, 867, 877, 883, 892], "literatur": [495, 512, 528, 677, 693, 782, 798], "littl": [4, 422], "ll": [647, 726, 756, 769, 899], "llf": [892, 897, 898, 899], "lm": [95, 810, 834], "ln": [272, 432, 647, 726, 756, 769], "ln2": [647, 726], "lo": 267, "load": [3, 263, 264, 265, 266, 421, 422, 428, 460, 478, 493, 510, 526, 544, 561, 578, 595, 613, 630, 645, 660, 675, 691, 724, 739, 754, 767, 780, 796, 862, 879, 897, 898, 899, 900], "loc": [3, 260, 898, 900], "locat": [92, 93, 237, 448, 451, 470, 487, 497, 514, 530, 553, 570, 587, 605, 622, 639, 669, 679, 695, 718, 748, 784, 800, 813, 841, 874, 888, 892], "log": [240, 263, 264, 265, 266, 267, 421, 422, 428, 451, 472, 489, 498, 555, 572, 589, 607, 624, 641, 647, 671, 720, 726, 750, 756, 769, 811, 835, 847, 864, 890, 892, 896, 897, 899, 900], "log_": 10, "log_pric": 421, "logical_not": 260, "loglikelihood": [448, 451, 809, 811, 833, 835, 847, 899], "long": [3, 91, 95, 97, 102, 133, 237, 263, 265, 266, 270, 275, 278, 281, 294, 307, 318, 332, 335, 342, 346, 355, 359, 369, 378, 403, 405, 409, 421, 422, 443, 896], "long_run": [102, 116, 126, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230], "longer": [441, 898], "look": 421, "loop": [453, 896], "loos": [472, 489, 555, 572, 589, 607, 624, 641, 671, 720, 750, 890], "loss": [239, 240, 241, 259, 260, 283, 296, 308, 319, 333, 347], "low": [2, 4, 88, 92, 95, 263, 895], "low_memori": [263, 264], "lower": [3, 4, 14, 29, 44, 59, 74, 95, 240, 248, 250, 251, 260, 422, 457, 459, 462, 470, 472, 476, 477, 479, 487, 489, 493, 510, 526, 542, 543, 545, 553, 555, 559, 560, 562, 570, 572, 576, 577, 579, 587, 589, 593, 594, 596, 605, 607, 611, 612, 614, 622, 624, 628, 629, 631, 639, 641, 643, 651, 658, 659, 661, 669, 671, 675, 691, 707, 708, 710, 718, 720, 722, 730, 737, 738, 740, 748, 750, 752, 760, 765, 773, 780, 796, 860, 868, 874, 877, 878, 880, 888, 890, 899], "lowest": 87, "lt": 896, "lund": [238, 239, 259], "m": [1, 4, 10, 87, 88, 238, 239, 241, 265, 267, 272, 363, 378, 382, 438, 439, 441, 820, 850], "m_": 278, "mackinlai": 267, "mackinnon": [1, 263, 266], "macrodata": [263, 264, 265, 266], "mad": 260, "made": [91, 97, 260, 268, 425, 497, 514, 530, 679, 695, 784, 800, 813, 841, 896, 900], "magnitud": [899, 900], "mai": [4, 86, 89, 95, 277, 425, 896, 897, 899, 900, 902], "main": [4, 898], "make": [3, 4, 14, 29, 44, 59, 74, 87, 89, 260, 422, 425, 896, 898, 899, 900], "manag": [651, 730, 760, 773, 868], "mani": [4, 260, 420, 425, 896, 899], "manner": 89, "manual": [439, 892], "manuscript": 441, "map": [17, 23, 32, 38, 47, 53, 62, 68, 77, 83], "marcellino": 441, "march": 237, "marker": 898, "market": [3, 267, 422, 898, 899], "massimiliano": 441, "match": [4, 10, 91, 97, 497, 514, 530, 679, 695, 784, 800, 813, 841, 896], "mathemat": 4, "mathrm": 278, "matlab": 10, "matplotlib": [3, 260, 396, 412, 421, 422, 896, 897, 898, 899, 900], "matric": [270, 275], "matrix": [3, 265, 266, 270, 275, 322, 421, 422, 451, 495, 512, 528, 677, 693, 782, 798], "max": [3, 4, 10, 87, 88, 91, 95, 97, 239, 421, 422, 503, 519, 684, 700, 896, 899], "max_i": [259, 260], "max_lag": [263, 264, 268, 272, 277, 422], "max_lead": 272, "maximum": [10, 263, 264, 268, 272, 277, 282, 295, 393, 425, 441, 892, 896, 897, 899, 900], "maxit": [495, 512, 528, 677, 693, 782, 798], "maxlag": 263, "mbb": [239, 240, 241], "mc": [94, 95, 260], "mcp": 259, "mean": [3, 4, 11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 87, 88, 94, 95, 96, 260, 267, 421, 422, 425, 428, 430, 435, 446, 447, 449, 454, 459, 477, 496, 497, 498, 501, 503, 504, 513, 514, 517, 519, 520, 529, 530, 533, 535, 536, 543, 560, 577, 594, 612, 629, 659, 678, 679, 682, 684, 685, 694, 695, 698, 700, 701, 708, 738, 783, 784, 787, 789, 790, 799, 800, 803, 806, 813, 814, 841, 842, 878, 892, 895, 896, 898, 900, 902], "mean_diff": 3, "meaning": 898, "meaningfulli": 89, "measur": [3, 260, 421, 495, 512, 528, 677, 693, 782, 798], "medic": 1, "medicin": 1, "memori": [95, 263], "metaclass": 453, "method": [1, 3, 5, 6, 7, 8, 9, 14, 29, 44, 59, 74, 87, 88, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 239, 240, 241, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 367, 386, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 462, 479, 495, 497, 512, 514, 528, 530, 545, 562, 579, 596, 614, 631, 661, 677, 679, 693, 695, 710, 740, 782, 784, 798, 800, 813, 814, 826, 841, 842, 880, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902], "methodologi": [250, 369, 899], "michael": 95, "mida": [95, 441], "midashyperbol": 95, "might": [421, 422, 899, 900], "mimic": 95, "min": [3, 4, 10, 87, 88, 421, 422, 898, 899], "min_i": 259, "minim": [95, 272, 422, 425, 495, 512, 528, 677, 693, 782, 798, 838], "minimum": [89, 91, 96, 97, 98, 263, 264, 268], "minor": 95, "minu": [101, 105, 106, 107, 108, 109, 110, 111, 112, 267, 425], "miss": 897, "mix": [4, 441], "mkt": [3, 422], "mle": [89, 492, 509, 525, 674, 690, 779, 795], "mod": [3, 439, 896, 897, 900], "mode": [425, 892, 897, 898, 899], "model": [89, 91, 93, 94, 95, 97, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 254, 255, 258, 261, 268, 272, 273, 274, 275, 277, 281, 286, 294, 299, 307, 318, 332, 346, 355, 362, 363, 364, 367, 369, 373, 376, 377, 378, 381, 382, 383, 386, 403, 418, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 456, 458, 459, 461, 462, 464, 465, 466, 468, 470, 472, 475, 477, 479, 481, 482, 483, 485, 487, 489, 492, 495, 496, 497, 499, 501, 502, 503, 504, 506, 509, 512, 513, 514, 515, 517, 518, 519, 520, 522, 525, 528, 529, 530, 531, 533, 534, 535, 536, 538, 541, 543, 545, 547, 548, 549, 551, 553, 555, 558, 560, 562, 564, 565, 566, 568, 570, 572, 575, 577, 579, 581, 582, 583, 585, 587, 589, 592, 594, 596, 598, 599, 600, 602, 605, 607, 610, 612, 614, 616, 617, 618, 620, 622, 624, 627, 629, 631, 633, 634, 635, 637, 639, 641, 657, 659, 661, 663, 664, 665, 667, 669, 671, 674, 677, 678, 679, 680, 682, 683, 684, 685, 687, 690, 693, 694, 695, 696, 698, 699, 700, 701, 703, 706, 708, 710, 712, 713, 714, 716, 718, 720, 736, 738, 740, 742, 743, 744, 746, 748, 750, 779, 782, 783, 784, 785, 787, 788, 789, 790, 792, 795, 798, 799, 800, 801, 802, 803, 804, 806, 810, 813, 814, 815, 817, 818, 819, 821, 823, 834, 841, 842, 843, 845, 846, 849, 852, 855, 858, 864, 873, 874, 876, 878, 880, 882, 883, 884, 886, 888, 890, 898, 900, 902], "model_beta": 260, "model_factor": 260, "model_loss": 260, "modif": [259, 264], "modifi": [3, 4, 260, 270, 275, 420, 421, 453], "modul": [1, 2, 95, 237, 238, 261, 268, 420], "moment": [4, 95, 651, 730, 760, 764, 773, 777, 868], "momentum": 422, "mont": [265, 268, 895], "month": [267, 422], "monthli": [4, 87, 88, 820, 850], "monthly_d": [4, 87, 88], "more": [3, 4, 89, 95, 260, 263, 264, 268, 425, 438, 651, 730, 760, 773, 868, 899, 900], "most": [3, 89, 418, 422, 425, 497, 514, 530, 679, 695, 784, 800, 813, 820, 841, 850, 892, 896, 899, 900], "move": [90, 92, 239, 240, 241, 433, 899], "movingblockbootstrap": 90, "mse": 260, "mu": [3, 4, 88, 425, 428, 429, 430, 439, 440, 535, 892, 898, 899, 900], "mu_": 898, "much": [896, 899, 900], "multi": [96, 267, 422, 425], "multi_forecast": 896, "multicollinear": 422, "multipl": [3, 14, 29, 44, 59, 74, 87, 93, 237, 238, 241, 267, 420, 422, 459, 477, 543, 560, 577, 594, 612, 629, 659, 708, 738, 878], "multipli": [355, 369, 403], "multivari": 421, "must": [3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 24, 25, 26, 29, 30, 39, 40, 41, 44, 45, 54, 55, 56, 59, 60, 69, 70, 71, 74, 75, 84, 85, 89, 98, 101, 105, 106, 107, 108, 109, 110, 111, 112, 249, 267, 270, 272, 275, 424, 426, 428, 453, 462, 479, 494, 496, 497, 505, 511, 513, 514, 521, 527, 529, 530, 537, 545, 562, 579, 596, 614, 631, 661, 676, 678, 679, 686, 692, 694, 695, 702, 710, 740, 781, 783, 784, 791, 797, 799, 800, 807, 813, 814, 841, 842, 880, 893, 896, 902], "mutat": 95, "n": [1, 3, 10, 263, 266, 267, 270, 271, 272, 273, 275, 277, 278, 421, 425, 439, 648, 651, 727, 730, 757, 760, 770, 773, 865, 868, 896, 899, 900], "name": [2, 3, 12, 15, 25, 27, 30, 40, 42, 45, 55, 57, 60, 70, 72, 75, 85, 95, 100, 103, 104, 243, 244, 245, 248, 258, 260, 278, 355, 369, 403, 409, 422, 428, 439, 448, 451, 465, 482, 497, 501, 514, 517, 530, 533, 548, 565, 582, 599, 617, 634, 650, 664, 679, 682, 695, 698, 713, 729, 743, 759, 772, 784, 787, 800, 803, 813, 841, 867, 883, 892, 896, 897, 898, 900, 901], "nan": [94, 260, 425, 448, 451, 458, 461, 472, 489, 497, 514, 530, 555, 572, 589, 607, 624, 641, 671, 679, 695, 720, 750, 784, 800, 813, 841, 890, 899], "nasdaq": 900, "nason": [238, 239, 259], "natur": [3, 86, 896], "nc": [418, 422], "ncol": 898, "ndarrai": [11, 12, 14, 15, 17, 18, 21, 22, 23, 24, 25, 26, 27, 29, 30, 32, 33, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 84, 85, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 119, 129, 133, 134, 135, 136, 143, 153, 163, 173, 183, 193, 203, 213, 223, 233, 239, 240, 241, 247, 248, 253, 254, 257, 263, 264, 265, 266, 267, 268, 269, 270, 272, 275, 277, 278, 291, 304, 315, 328, 343, 354, 428, 429, 430, 435, 439, 440, 446, 447, 448, 451, 455, 456, 457, 459, 460, 466, 468, 470, 472, 474, 475, 476, 477, 478, 479, 483, 485, 487, 489, 492, 493, 495, 496, 497, 502, 503, 504, 506, 507, 509, 510, 512, 513, 514, 518, 519, 520, 522, 523, 525, 526, 528, 529, 530, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 549, 551, 553, 555, 557, 558, 559, 560, 561, 562, 566, 568, 570, 572, 574, 575, 576, 577, 578, 579, 583, 585, 587, 589, 591, 592, 593, 594, 595, 596, 600, 602, 605, 607, 609, 610, 611, 612, 613, 614, 618, 620, 622, 624, 626, 627, 628, 629, 630, 631, 635, 637, 639, 641, 643, 644, 645, 647, 648, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 665, 667, 669, 671, 674, 675, 677, 678, 679, 683, 684, 685, 687, 688, 690, 691, 693, 694, 695, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 714, 716, 718, 720, 722, 723, 724, 726, 727, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 744, 746, 748, 750, 752, 753, 754, 756, 757, 760, 761, 763, 764, 765, 766, 767, 769, 770, 773, 774, 776, 777, 779, 780, 782, 783, 784, 788, 789, 790, 792, 793, 795, 796, 798, 799, 800, 804, 805, 806, 808, 812, 813, 814, 821, 822, 829, 830, 831, 832, 836, 841, 842, 852, 857, 860, 861, 862, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 886, 888, 890, 892, 896], "nearli": 898, "necessari": [4, 89, 896], "need": [14, 29, 44, 59, 74, 89, 278, 421, 896, 898, 900], "neerlandica": 265, "neg": [422, 425, 814, 842, 892, 897, 898, 899], "nep": 95, "nest": [4, 14, 29, 44, 59, 74, 240, 241], "never": 240, "new": [24, 39, 54, 69, 84, 95, 263, 428, 429, 430, 439, 440, 446, 892], "new_idx": 900, "newei": [101, 265, 266, 269, 278, 322, 355, 369, 403, 422], "next": [3, 24, 39, 54, 69, 84, 260, 439, 896, 898, 899, 900], "nforecast": [497, 514, 530, 679, 695, 784, 800, 813, 841], "ng": 264, "nj": 267, "nob": [265, 266, 428, 429, 430, 439, 440, 446, 466, 483, 497, 503, 514, 519, 530, 535, 549, 566, 583, 600, 618, 635, 665, 679, 684, 695, 700, 714, 744, 784, 789, 800, 805, 811, 812, 813, 835, 836, 841, 864, 873, 874, 884, 896, 899], "nois": [260, 422], "non": [4, 89, 95, 265, 267, 422, 425, 439, 491, 493, 495, 508, 510, 512, 524, 526, 528, 673, 675, 677, 689, 691, 693, 778, 780, 782, 789, 794, 796, 798, 814, 842, 899], "none": [3, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 20, 21, 22, 25, 26, 27, 28, 29, 30, 35, 36, 37, 40, 41, 42, 43, 44, 45, 50, 51, 52, 55, 56, 57, 58, 59, 60, 65, 66, 67, 70, 71, 72, 73, 74, 75, 80, 81, 82, 85, 89, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 239, 240, 241, 242, 246, 247, 249, 252, 253, 254, 255, 256, 257, 263, 264, 265, 266, 268, 270, 272, 274, 275, 276, 277, 278, 282, 295, 355, 369, 393, 396, 403, 412, 418, 426, 428, 429, 430, 433, 437, 439, 440, 442, 444, 445, 446, 447, 449, 450, 451, 452, 462, 466, 479, 483, 492, 495, 496, 497, 502, 503, 506, 507, 509, 512, 513, 514, 518, 519, 522, 523, 525, 528, 529, 530, 534, 535, 538, 539, 545, 549, 562, 566, 579, 583, 596, 600, 614, 618, 631, 635, 644, 648, 651, 652, 661, 665, 674, 677, 678, 679, 683, 684, 687, 688, 690, 693, 694, 695, 699, 700, 703, 704, 710, 714, 723, 727, 730, 731, 740, 744, 753, 757, 760, 761, 766, 770, 773, 774, 779, 782, 783, 784, 788, 789, 792, 793, 795, 798, 799, 800, 804, 805, 808, 810, 813, 814, 820, 829, 830, 831, 832, 834, 841, 842, 850, 861, 865, 868, 869, 873, 874, 880, 884, 892, 896, 898, 899], "nonparametr": [14, 29, 44, 59, 74, 89], "nonrobust": [95, 422], "norg": 441, "norm": [14, 29, 44, 59, 74], "normal": [14, 29, 44, 59, 74, 89, 96, 260, 425, 441, 655, 892, 896, 897, 898, 899, 900], "notabl": 95, "notat": 451, "note": [5, 6, 7, 8, 9, 10, 11, 14, 26, 29, 41, 44, 56, 59, 71, 74, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 121, 131, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 239, 240, 241, 248, 249, 259, 263, 264, 265, 266, 267, 268, 270, 272, 275, 277, 278, 363, 369, 378, 382, 399, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 443, 444, 446, 453, 460, 462, 478, 479, 493, 495, 496, 497, 510, 512, 513, 514, 526, 528, 529, 530, 544, 545, 561, 562, 578, 579, 595, 596, 613, 614, 630, 631, 645, 647, 651, 655, 660, 661, 675, 677, 678, 679, 691, 693, 694, 695, 709, 710, 724, 726, 730, 734, 739, 740, 754, 756, 760, 764, 767, 769, 773, 777, 780, 782, 783, 784, 796, 798, 799, 800, 813, 841, 862, 864, 868, 872, 873, 874, 879, 880, 892, 896, 898, 900], "notebook": [3, 91, 94, 97, 260, 421, 422, 497, 514, 530, 679, 695, 784, 800, 813, 841, 896, 897, 898, 899], "noth": [495, 512, 528, 677, 693, 782, 798], "notimplementederror": [447, 462, 473, 479, 490, 545, 556, 562, 573, 579, 590, 596, 608, 614, 625, 631, 642, 661, 672, 710, 721, 740, 751, 880, 891], "now": [94, 95, 96, 497, 514, 530, 679, 695, 784, 800], "np": [3, 4, 5, 6, 8, 9, 11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 85, 87, 88, 89, 260, 263, 264, 265, 266, 267, 421, 428, 429, 430, 437, 439, 440, 442, 444, 445, 446, 503, 519, 535, 684, 700, 789, 896, 897, 898, 899, 900], "nparam": [11, 26, 41, 56, 71], "nu": [647, 769, 899], "null": [259, 260, 263, 264, 265, 266, 267, 274, 276, 277, 278, 284, 297, 309, 320, 334, 348, 391, 395, 408, 411, 418, 420, 421, 422, 859, 901], "num_param": [809, 811, 833, 835], "num_x": [271, 273], "numba": [91, 92, 97], "number": [1, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 17, 21, 22, 25, 26, 27, 29, 30, 32, 36, 37, 40, 41, 42, 44, 45, 47, 51, 52, 55, 56, 57, 59, 60, 62, 66, 67, 70, 71, 72, 74, 75, 77, 81, 82, 85, 89, 94, 95, 96, 101, 105, 106, 107, 108, 109, 110, 111, 112, 122, 132, 146, 156, 166, 176, 186, 196, 206, 216, 226, 236, 239, 240, 241, 247, 253, 257, 260, 263, 264, 265, 266, 267, 268, 272, 273, 274, 277, 280, 281, 283, 293, 294, 296, 306, 307, 308, 317, 318, 319, 322, 330, 332, 333, 345, 346, 347, 355, 363, 369, 376, 377, 378, 382, 391, 392, 393, 403, 408, 418, 420, 425, 428, 429, 430, 437, 439, 440, 442, 443, 444, 445, 446, 460, 462, 464, 466, 472, 478, 479, 481, 483, 489, 493, 496, 497, 500, 503, 510, 513, 514, 516, 519, 526, 529, 530, 532, 535, 544, 545, 547, 549, 555, 561, 562, 564, 566, 572, 578, 579, 581, 583, 589, 595, 596, 598, 600, 607, 613, 614, 616, 618, 624, 630, 631, 633, 635, 641, 660, 661, 663, 665, 671, 675, 678, 679, 681, 684, 691, 694, 695, 697, 700, 710, 712, 714, 720, 739, 740, 742, 744, 750, 780, 783, 784, 786, 789, 796, 799, 800, 802, 810, 813, 814, 817, 818, 834, 841, 842, 845, 846, 873, 879, 880, 882, 884, 890, 892, 896, 898, 899, 900], "numer": [95, 267, 421, 422, 470, 487, 492, 509, 525, 553, 570, 587, 605, 622, 639, 669, 674, 690, 718, 748, 779, 795, 847, 888, 897], "numpi": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 19, 25, 26, 27, 29, 30, 34, 40, 41, 42, 44, 45, 49, 55, 56, 57, 59, 60, 64, 70, 71, 72, 74, 75, 79, 85, 87, 89, 91, 95, 96, 97, 98, 119, 129, 143, 153, 163, 173, 183, 193, 203, 213, 223, 233, 239, 240, 241, 260, 263, 264, 265, 266, 421, 428, 429, 430, 439, 440, 446, 460, 462, 466, 468, 472, 478, 479, 483, 485, 489, 493, 497, 502, 503, 504, 510, 514, 518, 519, 520, 526, 530, 534, 535, 536, 544, 545, 549, 551, 555, 561, 562, 566, 568, 572, 578, 579, 583, 585, 589, 595, 596, 600, 602, 607, 613, 614, 618, 620, 624, 630, 631, 635, 637, 641, 644, 645, 646, 653, 655, 660, 661, 665, 667, 671, 675, 679, 683, 684, 685, 691, 695, 699, 700, 701, 710, 714, 716, 720, 723, 724, 725, 732, 734, 735, 739, 740, 744, 746, 750, 753, 754, 755, 762, 764, 766, 767, 768, 775, 777, 780, 784, 788, 789, 790, 796, 800, 804, 806, 813, 841, 861, 862, 863, 870, 872, 879, 880, 884, 886, 890, 896, 897, 898, 899, 900], "nvar": [101, 105, 106, 107, 108, 109, 110, 111, 112], "nw": 269, "o": [260, 425, 426, 432, 436, 789, 892, 897, 898, 899, 900], "object": [95, 418, 425, 448, 451, 495, 496, 512, 513, 528, 529, 677, 678, 693, 694, 782, 783, 798, 799, 823, 858, 894, 897, 898, 899, 900], "observ": [3, 7, 90, 94, 101, 105, 106, 107, 108, 109, 110, 111, 112, 260, 265, 267, 278, 280, 283, 293, 296, 306, 308, 317, 319, 330, 333, 345, 347, 422, 425, 428, 429, 430, 439, 440, 446, 451, 462, 466, 470, 479, 483, 487, 492, 495, 496, 497, 509, 512, 513, 514, 525, 528, 529, 530, 545, 549, 553, 562, 566, 570, 579, 583, 587, 596, 600, 605, 614, 618, 622, 631, 635, 639, 661, 665, 669, 674, 677, 678, 679, 690, 693, 694, 695, 710, 714, 718, 740, 744, 748, 779, 782, 783, 784, 795, 798, 799, 800, 813, 814, 841, 842, 873, 880, 884, 888, 892, 896, 897, 898, 899, 900], "obtain": [263, 266], "occur": [91, 97, 421, 497, 514, 530, 679, 695, 784, 800, 874], "oct": [422, 897], "off": [268, 429, 495, 512, 528, 677, 693, 782, 798, 820, 850, 896, 897, 898, 899, 900], "offer": [4, 899], "often": [95, 504, 520, 536, 685, 701, 790, 806, 899], "oil": [268, 421], "ok": 421, "ol": [89, 96, 260, 264, 272, 273, 274, 275, 286, 299, 322, 355, 369, 403, 420, 422], "old": [92, 265], "ols_para": 89, "ols_parti": 89, "ols_semi_v2": 89, "omega": [102, 270, 275, 278, 425, 426, 427, 432, 434, 436, 438, 441, 709, 892, 896, 897, 899, 900], "omega_": [270, 275], "omega_112": 271, "omit": [263, 264, 265, 266, 268, 503, 519, 684, 700], "omnibu": 422, "onc": 873, "one": [4, 10, 95, 102, 134, 135, 260, 266, 270, 275, 278, 422, 425, 460, 478, 535, 544, 561, 578, 595, 613, 630, 660, 739, 879, 898, 899, 900], "one_sid": [102, 116, 126, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230], "one_sided_strict": [102, 116, 126, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230], "ones": 3, "onli": [2, 3, 4, 7, 89, 94, 95, 240, 260, 265, 266, 267, 363, 382, 386, 421, 422, 425, 452, 470, 487, 497, 514, 530, 553, 570, 587, 605, 622, 639, 669, 679, 695, 718, 748, 784, 800, 813, 814, 841, 842, 888, 892, 896, 898, 899, 900], "oom": 265, "op": [91, 97], "oper": [10, 434], "opt": [3, 10], "optim": [5, 8, 9, 10, 95, 101, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 121, 122, 123, 124, 128, 131, 132, 137, 138, 142, 145, 146, 147, 148, 152, 155, 156, 157, 158, 162, 165, 166, 167, 168, 172, 175, 176, 177, 178, 182, 185, 186, 187, 188, 192, 195, 196, 197, 198, 202, 205, 206, 207, 208, 212, 215, 216, 217, 218, 222, 225, 226, 227, 228, 232, 235, 236, 269, 272, 278, 355, 369, 403, 451, 491, 493, 495, 508, 510, 512, 524, 526, 528, 643, 645, 655, 673, 675, 677, 689, 691, 693, 722, 724, 734, 752, 754, 764, 765, 767, 777, 778, 780, 782, 794, 796, 798, 838, 847, 860, 862, 872, 892, 897, 898, 899, 900], "optim_output": 451, "optim_result": 847, "optimal_block_length": [3, 5, 8, 9], "optimization_result": 95, "optimizeresult": [451, 847], "optimum": [495, 512, 528, 677, 693, 782, 798], "option": [16, 31, 46, 61, 76, 89, 95, 239, 240, 241, 260, 263, 278, 422, 429, 439, 447, 495, 497, 512, 514, 528, 530, 677, 679, 693, 695, 782, 784, 798, 800, 892, 893, 899, 902], "order": [4, 5, 6, 7, 8, 9, 87, 98, 272, 274, 276, 421, 426, 427, 432, 434, 436, 503, 519, 535, 648, 651, 684, 700, 727, 730, 757, 760, 770, 773, 789, 865, 868, 892, 896], "ordereddict": 899, "ordin": 369, "org": [3, 237, 263, 266], "origin": [3, 4, 15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 88, 89, 95, 260, 268, 425, 448, 449, 451, 497, 514, 530, 679, 695, 784, 800, 813, 841, 855, 896, 897], "osx": 96, "other": [3, 4, 89, 91, 93, 95, 97, 259, 260, 278, 421, 422, 426, 433, 434, 436, 896, 899, 900, 901], "otherwis": [23, 38, 53, 68, 83, 855], "ouliari": [95, 277, 278, 420], "out": [4, 94, 95, 425, 893, 898, 900], "outer": 4, "outperform": 260, "output": [12, 27, 42, 57, 72, 88, 260, 495, 512, 528, 654, 677, 693, 733, 763, 776, 782, 798, 871, 892, 898, 899], "over": [12, 27, 42, 57, 72, 94, 900], "overflowerror": 95, "overlap": [95, 267, 422, 439], "overli": 96, "overrid": [447, 820, 850], "overridden": [24, 39, 54, 69, 84, 422, 447], "p": [1, 4, 87, 88, 96, 238, 239, 240, 241, 245, 248, 250, 251, 254, 259, 260, 263, 264, 265, 266, 272, 275, 278, 285, 288, 298, 301, 310, 312, 321, 324, 336, 339, 349, 351, 361, 363, 380, 382, 397, 399, 401, 413, 416, 418, 421, 422, 425, 426, 427, 428, 429, 432, 434, 436, 439, 503, 519, 684, 700, 789, 851, 892, 896, 897, 898, 899, 900, 901], "p_u": 421, "p_z": 421, "pa": 269, "packag": [90, 95, 98, 237, 897], "page": [0, 901], "palgrav": 1, "panda": [2, 3, 4, 5, 6, 7, 8, 9, 10, 87, 88, 91, 95, 96, 97, 98, 245, 250, 251, 260, 390, 407, 418, 422, 439, 448, 451, 497, 503, 514, 519, 530, 535, 679, 684, 695, 700, 784, 789, 800, 813, 814, 837, 841, 842, 896, 898, 899, 900], "pandas_dataread": [4, 87, 88, 267, 418, 425, 892], "panel": [497, 514, 530, 679, 695, 784, 800, 813, 841], "paper": [260, 263, 266, 268, 444], "param": [3, 4, 11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 88, 89, 260, 271, 273, 425, 448, 451, 492, 496, 497, 502, 503, 509, 513, 514, 518, 519, 525, 529, 530, 534, 535, 674, 678, 679, 683, 684, 690, 694, 695, 699, 700, 779, 783, 784, 788, 789, 795, 799, 800, 804, 805, 813, 814, 841, 842, 896, 898, 899], "param_cov": [88, 451], "paramet": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 85, 88, 89, 94, 95, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 239, 240, 241, 247, 248, 250, 253, 254, 257, 260, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 277, 278, 355, 356, 357, 359, 360, 361, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 380, 385, 386, 387, 396, 403, 412, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 453, 454, 455, 456, 457, 459, 460, 462, 464, 465, 466, 468, 470, 472, 474, 475, 476, 477, 478, 479, 481, 482, 483, 485, 487, 489, 491, 492, 493, 495, 496, 497, 500, 501, 502, 503, 508, 509, 510, 512, 513, 514, 516, 517, 518, 519, 524, 525, 526, 528, 529, 530, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 547, 548, 549, 551, 553, 555, 557, 558, 559, 560, 561, 562, 564, 565, 566, 568, 570, 572, 574, 575, 576, 577, 578, 579, 581, 582, 583, 585, 587, 589, 591, 592, 593, 594, 595, 596, 598, 599, 600, 602, 605, 607, 609, 610, 611, 612, 613, 614, 616, 617, 618, 620, 622, 624, 626, 627, 628, 629, 630, 631, 633, 634, 635, 637, 639, 641, 643, 644, 645, 647, 648, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 667, 669, 671, 673, 674, 675, 677, 678, 679, 681, 682, 683, 684, 689, 690, 691, 693, 694, 695, 697, 698, 699, 700, 705, 706, 707, 708, 709, 710, 712, 713, 714, 716, 718, 720, 722, 723, 724, 726, 727, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 746, 748, 750, 752, 753, 754, 756, 757, 759, 760, 761, 763, 764, 765, 766, 767, 769, 770, 772, 773, 774, 776, 777, 778, 779, 780, 782, 783, 784, 786, 787, 788, 789, 794, 795, 796, 798, 799, 800, 802, 803, 804, 810, 813, 814, 818, 819, 820, 834, 837, 839, 840, 841, 842, 846, 848, 849, 850, 855, 856, 860, 861, 862, 864, 865, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 886, 888, 890, 892, 894, 896, 897, 898, 900, 901, 902], "parameterless": [644, 648, 651, 652, 723, 727, 730, 731, 753, 757, 760, 761, 766, 770, 773, 774, 861, 865, 868, 869, 899], "parametr": [2, 14, 15, 25, 29, 30, 40, 44, 45, 55, 59, 60, 70, 74, 75, 85, 439], "park": 270, "part": 95, "partial": [95, 651, 730, 760, 773, 868], "partial_mo": 95, "particular": [425, 497, 514, 530, 679, 695, 784, 800, 813, 814, 841, 842, 892, 900], "partit": [270, 275], "parzen": [95, 103, 106, 107, 108, 112, 269, 278, 355, 369, 403], "pass": [3, 5, 6, 7, 8, 9, 12, 13, 15, 25, 27, 28, 30, 40, 42, 43, 45, 55, 57, 58, 60, 70, 72, 73, 75, 85, 87, 89, 95, 96, 437, 442, 444, 445, 495, 497, 512, 514, 528, 530, 677, 679, 693, 695, 782, 784, 798, 800, 813, 841, 896, 898, 899], "path": [425, 462, 479, 545, 562, 579, 596, 614, 631, 661, 710, 740, 828, 880, 896, 898], "patter": 4, "pattern": 900, "patton": 10, "pct_chang": [4, 87, 88, 425, 428, 892, 898, 899, 900], "pd": [3, 4, 10, 87, 88, 260, 422, 449, 450, 497, 514, 530, 679, 695, 784, 800, 814, 842, 896, 898, 899, 900], "pdf": 444, "pdr": 267, "peak": 899, "per": [3, 268, 873], "percentag": 268, "percentil": [3, 14, 29, 44, 59, 74, 89], "perform": [89, 91, 95, 97, 259, 260, 268, 274, 453], "period": [267, 268, 335, 342, 421, 422, 425, 431, 439, 441, 497, 514, 530, 679, 695, 784, 800, 813, 814, 841, 842, 874, 896, 900], "permit": 892, "perron": [93, 96, 264, 266, 277, 278, 420, 421], "persist": [4, 420, 422], "pessimist": 268, "phi": [4, 278, 434], "phi0": 896, "phi1": 896, "phi_": [428, 429, 439, 441], "phi_0": 896, "phi_1": 896, "phi_i": 441, "phillip": [93, 95, 265, 266, 275, 277, 278, 420], "phillips_ouliari": [95, 277, 420, 421], "phillipsouliaristestresult": 278, "phillipsperron": [95, 277, 278, 420, 422], "pi": [109, 110, 111, 112, 432, 726, 756, 769], "pick": 422, "pinv": 89, "pit": [652, 731, 761, 774, 869], "place": 95, "plain": 89, "plan": 237, "pleas": [497, 514, 530, 679, 695, 784, 800, 813, 841], "plot": [94, 260, 421, 422, 425, 814, 842, 897, 898, 899, 900], "plot_typ": [814, 842], "plt": [3, 260, 421, 422, 896, 897, 898, 899, 900], "plu": [267, 503, 519, 684, 700], "pm": 10, "po": 87, "po_pu_test": 421, "po_pz_test": 421, "po_za_test": 421, "po_zt_test": 421, "point": [434, 462, 466, 479, 483, 497, 503, 514, 519, 530, 545, 549, 562, 566, 579, 583, 596, 600, 614, 618, 631, 635, 647, 661, 665, 679, 684, 695, 700, 710, 714, 726, 740, 744, 756, 769, 784, 800, 813, 817, 841, 845, 880, 884, 896, 900], "politi": [1, 5, 8, 9, 10], "politisromanowolf": 1, "poor": 453, "poorli": 95, "popular": 892, "portfolio": 418, "pos_data": [5, 6, 7, 8, 9], "posdata": [12, 27, 42, 57, 72], "posit": [5, 6, 7, 8, 9, 12, 13, 27, 28, 42, 43, 48, 57, 58, 72, 73, 87, 119, 129, 143, 153, 163, 173, 183, 193, 203, 213, 223, 233, 260, 266, 267, 422, 425, 434, 436, 497, 514, 530, 679, 695, 784, 800, 812, 813, 836, 841, 896], "possibl": [95, 421, 422, 896], "possibli": 267, "potenti": 259, "power": [95, 96, 114, 124, 138, 148, 158, 168, 178, 188, 198, 208, 218, 228, 268, 422, 426, 434, 436, 472, 489, 555, 572, 589, 607, 624, 641, 671, 720, 750, 890, 892, 896, 898, 899], "powershel": 96, "pp": [266, 421, 422], "ppf": 898, "practic": [1, 91, 97], "practition": 1, "pre": [95, 421, 425, 436, 492, 509, 525, 674, 690, 779, 795, 873], "precis": 900, "precomput": 453, "predict": [238, 240, 422], "predictor": 260, "prefer": 260, "preliminari": 900, "premium": [418, 422], "prentic": 263, "presenc": [267, 268], "present": 89, "preserv": 95, "press": [1, 263, 266, 267], "prevent": 95, "previou": [3, 89, 422, 497, 514, 530, 679, 695, 784, 800, 813, 841, 896, 897], "previous": [14, 29, 44, 59, 74, 94, 897, 899, 900], "price": [268, 421], "primari": 260, "primarili": 254, "prime": [102, 275], "princeton": [263, 266, 267], "print": [3, 260, 263, 264, 265, 266, 267, 418, 422, 425, 439, 495, 512, 528, 677, 693, 782, 798, 892, 896, 897, 898, 899, 900], "prior": [425, 497, 514, 530, 679, 695, 784, 800, 873], "privat": [447, 893], "prng": [13, 16, 28, 31, 43, 46, 58, 61, 73, 76], "prob": [422, 837], "probabl": [259, 260, 652, 731, 761, 774, 869], "probit_wrap": 3, "probit_wrap_start_param": 3, "problem": [12, 27, 42, 57, 72, 89, 96, 422], "procedur": [93, 237, 240, 241, 259, 260], "process": [95, 96, 267, 268, 278, 418, 420, 421, 422, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 443, 446, 447, 463, 471, 473, 480, 488, 490, 503, 505, 519, 521, 535, 537, 546, 554, 556, 563, 571, 573, 580, 588, 590, 597, 606, 608, 615, 623, 625, 632, 640, 642, 662, 670, 672, 684, 686, 700, 702, 711, 719, 721, 741, 749, 751, 789, 791, 807, 824, 827, 831, 881, 889, 891, 892, 893, 895, 896, 898], "produc": [4, 12, 16, 27, 31, 42, 46, 57, 61, 72, 76, 89, 95, 96, 259, 260, 278, 355, 369, 403, 425, 428, 429, 430, 434, 436, 439, 440, 446, 453, 462, 472, 479, 489, 497, 514, 530, 545, 555, 562, 572, 579, 589, 596, 607, 614, 624, 631, 641, 661, 671, 679, 695, 710, 720, 740, 750, 764, 777, 784, 800, 813, 814, 816, 820, 830, 841, 842, 844, 850, 880, 890, 892, 894, 895, 898, 899, 900], "product": [101, 105, 106, 107, 108, 109, 110, 111, 112, 278], "program": 10, "project": 96, "properti": [5, 6, 7, 8, 9, 16, 18, 19, 23, 31, 33, 34, 38, 46, 48, 49, 53, 61, 63, 64, 68, 76, 78, 79, 83, 91, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 243, 244, 245, 251, 258, 263, 264, 265, 266, 267, 268, 271, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 417, 421, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 458, 461, 463, 464, 467, 469, 471, 473, 480, 481, 484, 486, 488, 490, 494, 497, 498, 499, 500, 505, 506, 507, 511, 514, 515, 516, 521, 522, 523, 527, 530, 531, 532, 537, 538, 539, 546, 547, 550, 552, 554, 556, 563, 564, 567, 569, 571, 573, 580, 581, 584, 586, 588, 590, 597, 598, 601, 603, 604, 606, 608, 615, 616, 619, 621, 623, 625, 632, 633, 636, 638, 640, 642, 646, 649, 653, 662, 663, 666, 668, 670, 672, 676, 679, 680, 681, 686, 687, 688, 692, 695, 696, 697, 702, 703, 704, 711, 712, 715, 717, 719, 721, 725, 728, 732, 741, 742, 745, 747, 749, 751, 755, 758, 762, 768, 771, 775, 781, 784, 785, 786, 791, 792, 793, 797, 800, 801, 802, 807, 808, 809, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 859, 863, 866, 870, 881, 882, 885, 887, 889, 891, 893, 894, 899, 901], "property_cach": 95, "proport": 435, "propto": 441, "provid": [2, 3, 5, 6, 8, 9, 11, 14, 20, 26, 29, 35, 41, 44, 50, 56, 59, 65, 71, 74, 80, 89, 95, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 123, 137, 147, 157, 167, 177, 187, 197, 207, 217, 227, 239, 240, 241, 272, 278, 355, 369, 403, 424, 425, 426, 433, 437, 442, 444, 445, 456, 475, 495, 497, 512, 514, 528, 530, 541, 558, 575, 592, 610, 627, 657, 677, 679, 693, 695, 706, 736, 782, 784, 798, 800, 813, 814, 820, 841, 842, 850, 876, 893, 895, 896, 897, 899, 900, 902], "pseudo": [3, 16, 31, 46, 61, 76, 89], "pu": [278, 421], "public": [424, 447, 893, 902], "pure": [422, 453], "purpos": [92, 896, 902], "push": [91, 97], "pval": [251, 901], "pvalu": [94, 248, 249, 250, 260, 263, 264, 265, 266, 267, 274, 276, 418], "pvalue_typ": 248, "py": 422, "pyplot": [3, 260, 421, 422, 896, 897, 898, 899, 900], "pyproject": 95, "python": [91, 92, 95, 96, 97, 453, 898], "pyx": 453, "pz": [278, 421], "p\u1d64": 278, "q": [121, 131, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 269, 272, 363, 382, 425, 426, 432, 434, 436, 789, 892, 897, 898, 899, 900], "q_": 898, "qed": [263, 266], "qu": [96, 264], "quad": 756, "quadrat": [109, 263, 269, 270, 272, 275, 277, 278, 355, 369, 403, 418, 421], "quadraticspectr": 100, "qualiti": 1, "quantil": [4, 898], "quantiti": [3, 421, 814, 842, 899], "quartil": 3, "queen": [263, 266], "question": 260, "quickli": [899, 900], "quinn": 272, "quit": [421, 896], "r": [1, 3, 5, 7, 8, 9, 88, 238, 239, 240, 264, 422, 451, 853, 854, 892, 896, 897, 899, 900], "r2": [439, 451], "r_": [89, 898], "r_t": [425, 892, 899], "rabba": 95, "rais": [95, 96, 447, 462, 473, 479, 490, 495, 497, 512, 514, 528, 530, 545, 556, 562, 573, 579, 590, 596, 608, 614, 625, 631, 642, 661, 672, 677, 679, 693, 695, 710, 721, 740, 751, 782, 784, 798, 800, 880, 891], "rand": 87, "randint": 900, "randn": [11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 85, 87, 89, 260, 429, 430, 439, 440, 446, 503, 519, 684, 700], "random": [3, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 19, 21, 22, 25, 26, 27, 29, 30, 31, 32, 34, 36, 37, 40, 41, 42, 44, 45, 46, 47, 49, 51, 52, 55, 56, 57, 59, 60, 61, 62, 64, 66, 67, 70, 71, 72, 74, 75, 76, 77, 79, 81, 82, 85, 87, 89, 95, 96, 247, 253, 257, 260, 267, 422, 425, 429, 430, 437, 439, 440, 442, 444, 445, 446, 462, 466, 479, 483, 497, 503, 514, 519, 530, 545, 549, 562, 566, 579, 583, 596, 600, 614, 618, 631, 635, 661, 665, 679, 684, 695, 700, 710, 714, 740, 744, 784, 800, 813, 841, 880, 884, 896, 899], "random_st": [5, 6, 7, 8, 9, 95, 96, 437, 442, 444, 445, 452, 462, 479, 497, 514, 530, 545, 562, 579, 596, 614, 631, 661, 679, 695, 710, 740, 784, 800, 813, 841, 880, 900], "randomst": [3, 5, 6, 7, 8, 9, 13, 16, 19, 23, 28, 31, 34, 38, 43, 46, 49, 53, 58, 61, 64, 68, 73, 76, 79, 83, 89, 95, 96, 239, 240, 241, 437, 439, 442, 444, 445, 452, 462, 479, 497, 514, 530, 545, 562, 579, 596, 614, 631, 646, 653, 661, 679, 695, 710, 725, 732, 740, 755, 762, 768, 775, 784, 800, 813, 841, 863, 870, 880, 896, 899, 900], "rang": [260, 268, 422, 896, 897, 898, 900], "rank": [3, 95], "rapidli": 900, "rare": 89, "rate": [121, 131, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 241, 259, 260, 261, 421, 422], "rather": [10, 96, 259, 260, 264, 268, 425, 898, 899], "ratio": [4, 87, 88, 93, 267, 278, 331, 342, 420, 421], "ravel": 89, "rc": [3, 260, 421, 422, 896, 897, 898, 899, 900], "rceil": 10, "re": [240, 260, 266, 421, 425, 428, 429, 430, 439, 440, 446, 497, 514, 530, 679, 695, 784, 800, 814, 820, 842, 850, 892, 896, 898, 899, 900], "real": 260, "realist": 438, "realiti": [238, 240, 260], "realitycheck": [259, 260], "realiz": [260, 497, 514, 530, 679, 695, 784, 800, 813, 841], "reason": [3, 90, 260, 422, 900], "recent": [15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 88, 237, 240, 278], "recommend": [90, 447, 453], "recurs": [92, 425, 434, 453, 455, 459, 462, 470, 474, 477, 479, 487, 495, 512, 528, 540, 543, 545, 553, 557, 560, 562, 570, 574, 577, 579, 587, 591, 594, 596, 605, 609, 612, 614, 622, 626, 629, 631, 639, 656, 659, 661, 669, 677, 693, 705, 708, 710, 718, 735, 738, 740, 748, 782, 798, 873, 874, 875, 878, 880, 888, 896], "redefin": 94, "reduc": 95, "reduct": 268, "refactor": 92, "refer": [2, 10, 239, 240, 241, 261, 263, 264, 265, 266, 267, 268, 270, 272, 275, 278, 441, 444, 651, 730, 760, 773, 868, 895], "refin": 4, "reflect": [91, 97, 897, 900], "reg_r": 422, "reg_result": 273, "regard": 260, "regress": [89, 95, 260, 263, 264, 266, 268, 270, 272, 273, 274, 275, 277, 278, 281, 283, 294, 296, 307, 308, 318, 319, 332, 333, 346, 347, 355, 363, 369, 378, 382, 392, 398, 399, 402, 403, 414, 417, 420, 421, 503, 519, 684, 700], "regressand": 89, "regressionresult": [273, 274, 276, 286, 299, 322], "regressor": [3, 89, 95, 355, 363, 369, 378, 382, 403, 421, 428, 429, 439, 440, 497, 502, 503, 506, 514, 518, 519, 522, 530, 534, 538, 679, 683, 684, 687, 695, 699, 700, 703, 784, 788, 792, 800, 804, 813, 841, 892, 899], "reindex": [4, 87, 88, 91, 95, 97, 449, 497, 514, 530, 679, 695, 784, 800, 813, 841], "reiniti": 3, "reisz": 108, "reject": [248, 260, 263, 264, 265, 266, 267, 421, 422], "rel": [89, 443], "relat": [7, 95, 96, 98, 259, 434, 436, 892, 899], "relationship": [421, 425, 764, 777], "releas": 237, "relev": [237, 240, 892, 894], "reload": 95, "remain": [10, 896], "remaind": 900, "remov": [91, 93, 94, 95, 96, 97, 101, 105, 106, 107, 108, 109, 110, 111, 112, 503, 519, 535, 684, 700, 789], "rep": [11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 85, 239, 240, 241, 260], "repeat": [3, 95, 260, 896, 897], "repec": [263, 266], "repetit": 897, "replac": [96, 421, 425, 434, 900], "replic": [4, 11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 85, 87, 239, 240, 241, 260, 265], "report": [95, 428, 429, 430, 439, 440, 446, 892], "represent": 434, "repro_mod": 899, "reproduc": [5, 6, 7, 8, 9, 89, 95, 260, 437, 442, 444, 445, 899], "requir": [3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 85, 89, 91, 95, 97, 98, 240, 241, 260, 263, 267, 421, 422, 425, 462, 466, 479, 483, 497, 503, 514, 519, 530, 545, 549, 562, 566, 579, 583, 596, 600, 614, 618, 631, 635, 661, 665, 679, 684, 695, 700, 710, 714, 740, 744, 784, 800, 813, 841, 880, 884, 897, 898, 899], "rerun": [14, 29, 44, 59, 74, 421], "res_norm": 899, "res_skewt": 899, "res_t": 899, "resampl": [4, 6, 7, 267], "rescal": [91, 95, 97, 363, 378, 382, 428, 429, 430, 439, 440, 446, 447, 855, 892], "rese": [21, 36, 51, 66, 81], "research": 1, "reserv": [5, 6, 7, 8, 9, 899], "reset": [3, 899, 900], "resid": [89, 271, 273, 422, 448, 451, 455, 457, 459, 462, 466, 468, 470, 472, 474, 476, 477, 479, 483, 485, 487, 489, 540, 542, 543, 545, 549, 551, 553, 555, 557, 559, 560, 562, 566, 568, 570, 572, 574, 576, 577, 579, 583, 585, 587, 589, 591, 593, 594, 596, 600, 602, 605, 607, 609, 611, 612, 614, 618, 620, 622, 624, 626, 628, 629, 631, 635, 637, 639, 641, 643, 644, 647, 656, 658, 659, 661, 665, 667, 669, 671, 705, 707, 708, 710, 714, 716, 718, 720, 722, 723, 726, 735, 737, 738, 740, 744, 746, 748, 750, 752, 753, 756, 765, 766, 769, 860, 861, 864, 874, 875, 877, 878, 880, 884, 886, 888, 890, 896, 897, 899, 900], "resid_mod": 896, "residu": [4, 89, 95, 270, 273, 275, 277, 278, 355, 362, 363, 378, 381, 382, 396, 398, 403, 412, 414, 421, 422, 425, 448, 450, 451, 455, 457, 459, 462, 466, 468, 470, 472, 474, 476, 477, 479, 483, 485, 487, 489, 502, 518, 534, 540, 542, 543, 545, 549, 551, 553, 555, 557, 559, 560, 562, 566, 568, 570, 572, 574, 576, 577, 579, 583, 585, 587, 589, 591, 593, 594, 596, 600, 602, 605, 607, 609, 611, 612, 614, 618, 620, 622, 624, 626, 628, 629, 631, 635, 637, 639, 641, 643, 647, 655, 656, 658, 659, 661, 665, 667, 669, 671, 683, 699, 705, 707, 708, 710, 714, 716, 718, 720, 722, 726, 734, 735, 737, 738, 740, 744, 746, 748, 750, 752, 756, 764, 765, 769, 777, 788, 804, 810, 820, 821, 822, 825, 829, 834, 850, 852, 857, 860, 864, 872, 874, 875, 877, 878, 880, 884, 886, 888, 890, 892, 895, 896, 897, 898, 899, 900], "residual_vari": [425, 449, 450, 497, 514, 530, 679, 695, 784, 800, 813, 841, 898, 900], "respect": [248, 820, 850], "restor": [95, 422, 899], "restrict": [117, 127, 141, 151, 161, 171, 181, 191, 201, 211, 221, 231, 272, 426, 438, 896], "result": [3, 5, 6, 8, 9, 11, 14, 26, 29, 41, 44, 56, 59, 71, 74, 95, 268, 273, 274, 277, 278, 286, 299, 322, 355, 369, 403, 418, 421, 422, 425, 428, 429, 430, 439, 440, 446, 448, 451, 495, 496, 512, 513, 528, 529, 677, 678, 693, 694, 782, 783, 798, 799, 810, 823, 826, 834, 838, 847, 858, 892, 895, 896, 897, 898, 899, 900], "ret": [428, 900], "retain": [5, 6, 7, 8, 9], "rets_2018": 898, "return": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 83, 85, 87, 88, 89, 95, 102, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 243, 244, 245, 248, 250, 251, 258, 259, 269, 277, 278, 285, 286, 291, 298, 299, 304, 310, 315, 321, 322, 325, 328, 335, 336, 343, 349, 354, 355, 363, 367, 369, 378, 382, 386, 390, 396, 399, 403, 407, 412, 418, 422, 425, 428, 455, 456, 457, 460, 462, 465, 466, 468, 470, 472, 473, 474, 475, 476, 478, 479, 482, 483, 485, 487, 489, 490, 491, 493, 495, 496, 497, 500, 501, 502, 503, 504, 507, 508, 510, 512, 513, 514, 516, 517, 518, 519, 520, 523, 524, 526, 528, 529, 530, 532, 533, 534, 535, 536, 539, 540, 541, 542, 544, 545, 548, 549, 551, 553, 555, 556, 557, 558, 559, 561, 562, 565, 566, 568, 570, 572, 573, 574, 575, 576, 578, 579, 582, 583, 585, 587, 589, 590, 591, 592, 593, 595, 596, 599, 600, 602, 605, 607, 608, 609, 610, 611, 613, 614, 617, 618, 620, 622, 624, 625, 626, 627, 628, 630, 631, 634, 635, 637, 639, 641, 642, 643, 644, 645, 647, 648, 650, 651, 652, 654, 655, 656, 657, 658, 660, 661, 664, 665, 667, 669, 671, 672, 673, 675, 677, 678, 679, 681, 682, 683, 684, 685, 688, 689, 691, 693, 694, 695, 697, 698, 699, 700, 701, 704, 705, 706, 707, 710, 713, 714, 716, 718, 720, 721, 722, 723, 724, 726, 727, 729, 730, 731, 733, 734, 735, 736, 737, 739, 740, 743, 744, 746, 748, 750, 751, 752, 753, 754, 756, 757, 759, 760, 761, 763, 764, 765, 766, 767, 769, 770, 772, 773, 774, 776, 777, 778, 780, 782, 783, 784, 786, 787, 788, 789, 790, 793, 794, 796, 798, 799, 800, 803, 804, 806, 808, 810, 812, 813, 814, 820, 823, 826, 834, 836, 837, 841, 842, 847, 850, 858, 860, 861, 862, 864, 865, 867, 868, 869, 871, 872, 875, 876, 877, 879, 880, 883, 884, 886, 888, 890, 891, 892, 894, 896, 898, 899, 900], "reus": [3, 14, 29, 44, 59, 74], "revers": 896, "review": [10, 265, 444], "revis": 268, "rf": [3, 422], "rho": [266, 276, 325, 421, 422, 443], "right": [4, 10, 101, 105, 109, 121, 131, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 270, 272, 275, 277, 278, 425, 426, 432, 436, 438, 441, 647, 726, 756, 769, 899], "risk": [3, 895], "riskmetr": [433, 443, 899], "riskmetrics2006": 899, "river": 263, "rm": [433, 443], "rng": [89, 462, 466, 479, 483, 497, 514, 530, 545, 549, 562, 566, 579, 583, 596, 600, 614, 618, 631, 635, 661, 665, 679, 695, 710, 714, 740, 744, 784, 800, 813, 841, 880, 884, 896, 900], "rngtype": 462, "robust": [267, 355, 369, 403, 492, 495, 509, 512, 525, 528, 674, 677, 690, 693, 779, 782, 795, 798, 892, 896, 897, 899, 900], "roll": 94, "romano": [1, 5, 8, 9, 10, 238, 241, 259], "romanowolf": 238, "root": [91, 93, 95, 97, 237, 263, 264, 265, 266, 268, 277, 278, 287, 300, 311, 323, 338, 350, 418, 421, 428, 812, 836], "rot": 260, "rotat": 439, "rothenberg": 264, "routin": [92, 237, 420], "row": [11, 14, 26, 29, 41, 44, 56, 59, 71, 74, 425, 497, 514, 530, 679, 695, 784, 800, 813, 837, 841, 896], "rsquar": [271, 439], "rsquared_adj": 271, "rule": [260, 898], "run": [3, 14, 29, 44, 59, 74, 91, 95, 97, 102, 133, 136, 237, 254, 260, 264, 265, 266, 268, 270, 275, 278, 281, 294, 307, 318, 332, 346, 355, 359, 363, 369, 378, 382, 403, 405, 409, 421, 422, 462, 479, 497, 514, 530, 545, 562, 579, 596, 614, 631, 661, 679, 695, 710, 740, 784, 800, 813, 814, 841, 842, 880, 896, 897, 898, 899, 900], "r\u00b2": [364, 365, 383, 384], "s437301": 268, "saddl": 263, "saikkonen": 272, "same": [2, 3, 4, 5, 6, 7, 8, 9, 14, 29, 44, 59, 74, 259, 260, 272, 322, 378, 421, 422, 426, 431, 435, 448, 451, 459, 472, 477, 489, 497, 504, 514, 520, 530, 536, 543, 555, 560, 572, 577, 589, 594, 607, 612, 624, 629, 641, 659, 671, 679, 685, 695, 701, 708, 720, 738, 750, 784, 790, 800, 806, 813, 841, 874, 878, 890, 892, 894, 896, 897, 899, 900], "sampl": [2, 4, 7, 10, 14, 15, 25, 29, 30, 40, 44, 45, 55, 59, 60, 70, 74, 75, 85, 88, 89, 90, 94, 95, 121, 131, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 264, 265, 274, 425, 428, 429, 430, 439, 440, 446, 462, 479, 492, 497, 509, 514, 525, 530, 545, 562, 579, 596, 614, 631, 661, 674, 679, 690, 695, 710, 740, 779, 784, 795, 800, 813, 839, 840, 841, 873, 880, 892, 898, 900], "san": [3, 260, 421, 422, 896, 897, 898, 899, 900], "satisfi": [4, 267, 426, 493, 510, 526, 645, 675, 691, 724, 754, 767, 780, 796, 862], "save": [3, 260, 899], "savefig": [3, 260, 421, 422, 896, 897, 898, 899, 900], "sb": [239, 240, 241], "scalar": [428, 429, 438, 439, 466, 483, 503, 519, 535, 549, 566, 583, 600, 618, 635, 665, 684, 700, 714, 744, 789, 884, 892], "scale": [14, 29, 44, 59, 74, 95, 260, 428, 429, 430, 435, 439, 440, 443, 446, 456, 475, 541, 558, 575, 592, 610, 627, 657, 706, 736, 820, 850, 876, 892, 897, 899, 900], "scatter": 898, "scenario": [497, 514, 530, 679, 695, 784, 800, 813, 841, 895], "scenario_bootstrap": 900, "scenario_forecast": 900, "scenario_rng": 900, "scenariobootstraprng": 900, "scheme": [2, 425], "schmidt": 265, "schwartz": 272, "schwarz": [263, 264, 268, 811, 835], "schwert": [265, 268], "scienc": [1, 651, 730, 760, 773, 868], "scipi": [91, 95, 96, 97, 495, 512, 528, 677, 693, 782, 798, 838], "score": [3, 369], "se": 3, "seaborn": [3, 87, 260, 421, 422, 896, 897, 898, 899, 900], "search": [91, 97], "second": [3, 5, 6, 7, 8, 9, 87, 89, 260], "section": [7, 274, 277, 278, 369, 421], "see": [3, 4, 11, 14, 26, 29, 41, 44, 56, 59, 71, 74, 95, 239, 260, 265, 270, 272, 275, 289, 302, 313, 326, 340, 352, 421, 453, 497, 514, 530, 651, 679, 695, 730, 760, 773, 784, 800, 813, 841, 868, 895, 896, 899, 902], "seed": [3, 5, 6, 7, 8, 9, 13, 16, 20, 28, 31, 35, 43, 46, 50, 58, 61, 65, 73, 76, 80, 96, 239, 240, 241, 260, 437, 442, 444, 445, 452, 899, 900], "sel": 898, "select": [10, 95, 96, 122, 132, 146, 156, 166, 176, 186, 196, 206, 216, 226, 236, 241, 263, 264, 265, 268, 269, 272, 274, 277, 282, 295, 393, 418, 420, 422, 467, 469, 484, 486, 550, 552, 567, 569, 584, 586, 601, 603, 619, 621, 636, 638, 666, 668, 715, 717, 745, 747, 885, 887], "selector": 254, "self": 900, "semi": [14, 29, 44, 59, 74, 89], "semidefinit": 266, "semiparametr": [2, 4, 14, 29, 44, 59, 74], "sens": [425, 896, 900], "separ": [3, 95, 454, 899], "septemb": [497, 514, 530, 679, 695, 784, 800], "sequenc": [269, 438, 439, 466, 483, 496, 503, 513, 519, 529, 535, 549, 566, 583, 600, 618, 635, 644, 647, 648, 651, 652, 654, 665, 678, 684, 694, 700, 714, 723, 726, 727, 730, 731, 733, 744, 753, 756, 757, 760, 761, 763, 766, 769, 770, 773, 774, 776, 783, 789, 799, 805, 861, 864, 865, 868, 869, 871, 884, 898], "sequenti": 260, "seri": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 58, 59, 60, 70, 71, 72, 73, 74, 75, 85, 88, 91, 95, 97, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 240, 241, 250, 251, 260, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 291, 304, 315, 328, 343, 354, 360, 361, 362, 366, 368, 374, 379, 380, 381, 385, 387, 389, 390, 398, 406, 407, 414, 418, 420, 421, 422, 428, 429, 430, 439, 440, 446, 447, 448, 451, 466, 479, 483, 495, 496, 497, 502, 503, 507, 512, 513, 514, 518, 519, 523, 528, 529, 530, 534, 535, 539, 545, 549, 562, 566, 579, 583, 596, 600, 614, 618, 631, 635, 644, 647, 648, 651, 652, 654, 661, 665, 677, 678, 679, 683, 684, 688, 693, 694, 695, 699, 700, 704, 710, 714, 723, 726, 727, 730, 731, 733, 740, 744, 753, 756, 757, 760, 761, 763, 766, 769, 770, 773, 774, 776, 782, 783, 784, 788, 789, 793, 798, 799, 800, 804, 805, 808, 812, 813, 814, 819, 821, 822, 836, 841, 842, 849, 851, 852, 856, 857, 859, 861, 864, 865, 868, 869, 871, 880, 884, 892, 896, 899], "serial": [3, 4, 86, 266, 267, 268], "serif": [3, 260, 421, 422, 896, 897, 898, 899, 900], "serv": 260, "set": [3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 16, 19, 20, 22, 23, 26, 29, 31, 34, 35, 37, 38, 41, 44, 46, 49, 50, 52, 53, 56, 59, 61, 64, 65, 67, 68, 71, 74, 76, 79, 80, 82, 83, 86, 91, 95, 96, 97, 238, 239, 242, 248, 254, 255, 261, 264, 265, 266, 277, 278, 281, 282, 289, 294, 295, 302, 307, 313, 318, 325, 326, 331, 332, 335, 337, 340, 346, 352, 355, 369, 374, 394, 403, 410, 418, 421, 425, 433, 435, 437, 442, 444, 445, 494, 495, 497, 503, 505, 511, 512, 514, 519, 521, 527, 528, 530, 537, 676, 677, 679, 684, 686, 692, 693, 695, 700, 702, 781, 782, 784, 791, 797, 798, 800, 807, 813, 814, 841, 842, 898, 899, 900], "set_label": 898, "set_stat": [96, 899], "set_styl": [3, 260, 421, 422, 896, 897, 898, 899, 900], "set_titl": [421, 898, 900], "set_xlim": [421, 896, 898, 899, 900], "set_xtick": [898, 900], "set_ylim": 900, "setup": [2, 3, 260, 421, 896, 898], "sgn": 756, "shape": [3, 4, 89, 435, 439, 444, 448, 451, 460, 462, 478, 479, 497, 514, 530, 544, 545, 561, 562, 578, 579, 595, 596, 613, 614, 630, 631, 647, 650, 655, 660, 661, 679, 695, 710, 726, 729, 734, 739, 740, 756, 759, 764, 769, 772, 777, 784, 800, 813, 814, 841, 842, 864, 867, 872, 874, 879, 880, 896, 897, 900], "share": [418, 426], "sharp": [4, 87, 88], "sharp_ratio": 87, "sharpe_ratio": [3, 4, 87, 88], "sharpe_ratio_s": 4, "sheppard": [237, 441], "shift": [898, 900], "shin": 265, "shock": [268, 425, 892, 896, 899, 900], "short": [95, 102, 136, 363, 382, 443], "short_run": [102, 116, 126, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230], "should": [3, 4, 12, 15, 25, 27, 30, 40, 42, 45, 55, 57, 60, 70, 72, 75, 85, 89, 101, 105, 106, 107, 108, 109, 110, 111, 112, 237, 239, 240, 241, 260, 263, 266, 272, 428, 429, 434, 435, 436, 439, 440, 447, 495, 512, 528, 677, 693, 782, 798, 820, 850, 893, 896, 897, 900], "show": [3, 12, 27, 42, 57, 72, 418, 421, 896, 897, 898, 899, 900], "show_warn": [495, 512, 528, 677, 693, 782, 798], "shown": [495, 512, 528, 677, 693, 782, 798], "side": [4, 102, 134, 135, 270, 272, 275, 277, 278, 422], "sigma": [3, 4, 10, 88, 270, 272, 278, 363, 369, 382, 425, 428, 495, 512, 528, 647, 677, 693, 726, 756, 769, 782, 798, 892, 899], "sigma2": [89, 456, 459, 470, 475, 477, 487, 541, 543, 553, 558, 560, 570, 575, 577, 587, 592, 594, 605, 610, 612, 622, 627, 629, 639, 647, 657, 659, 669, 706, 708, 718, 726, 736, 738, 748, 756, 769, 864, 874, 876, 878, 888, 897, 899], "sigma_": [425, 426, 432, 433, 436, 438, 441, 898, 899], "sigma_t": [425, 427, 428, 433, 892, 899], "signatur": [15, 25, 30, 40, 45, 55, 60, 70, 75, 85], "signific": [263, 266, 268, 899], "silent": 892, "sim": [425, 898, 899, 900], "sim_ar1": 896, "sim_data": [497, 503, 514, 519, 530, 535, 679, 684, 695, 700, 784, 789, 800, 814, 820, 842, 850, 899], "sim_fixedx": 896, "sim_forecast": 900, "sim_mod": 899, "sim_path": 900, "similar": [260, 261, 421, 422, 425, 444, 898, 900], "similarli": [14, 29, 44, 59, 74], "simpl": [3, 4, 264, 266, 272, 421, 422, 439, 892, 896, 899], "simplefilt": 422, "simpler": 89, "simplest": [4, 892, 899], "simpli": [88, 94, 897], "simplic": 89, "simplifi": [94, 95, 497, 514, 530, 679, 695, 784, 800, 813, 841, 896], "simul": [4, 14, 15, 25, 29, 30, 40, 44, 45, 55, 59, 60, 70, 74, 75, 85, 87, 89, 95, 96, 260, 265, 275, 428, 429, 430, 439, 440, 446, 450, 462, 479, 497, 514, 530, 545, 562, 579, 596, 614, 631, 661, 679, 695, 710, 740, 784, 800, 813, 814, 820, 828, 829, 830, 832, 841, 842, 850, 880, 895, 900], "simulated_data": [503, 519, 535, 684, 700, 789], "simulated_path": 449, "simulated_residu": 449, "simulated_residual_vari": 449, "simulated_vari": 449, "sin": 109, "sinc": [3, 4, 5, 6, 8, 9, 10, 89, 240, 241, 260, 421, 422, 425, 433, 437, 442, 443, 444, 445, 453, 495, 497, 512, 514, 528, 530, 653, 677, 679, 693, 695, 726, 732, 762, 775, 782, 784, 798, 800, 813, 841, 870, 896, 897, 899, 900], "singl": [268, 418, 420, 422, 425, 462, 466, 470, 479, 483, 487, 497, 514, 530, 545, 549, 553, 562, 566, 570, 579, 583, 587, 596, 600, 605, 614, 618, 622, 631, 635, 639, 643, 647, 654, 661, 665, 669, 679, 695, 710, 714, 718, 722, 726, 733, 740, 744, 748, 752, 756, 763, 765, 769, 776, 784, 800, 813, 841, 860, 871, 880, 884, 888, 897, 900], "singleton": 87, "singular": 421, "site": 899, "size": [3, 4, 5, 8, 9, 10, 14, 29, 44, 59, 74, 86, 88, 95, 121, 131, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 239, 241, 245, 259, 260, 261, 263, 264, 265, 266, 268, 274, 421, 422, 459, 477, 497, 514, 530, 543, 560, 577, 594, 612, 629, 654, 659, 679, 695, 708, 733, 734, 738, 763, 776, 784, 800, 813, 837, 841, 871, 872, 878, 897, 898, 899, 900, 901], "skew": [4, 94, 422, 444, 756, 892, 899], "skewstud": [95, 892, 899], "skewt": [892, 898, 899], "skip": [814, 842], "slice": 451, "slightli": [3, 268, 898], "slow": [4, 240, 241], "slower": 263, "slowli": 900, "slsqp": [495, 512, 528, 677, 693, 782, 798], "sm": [3, 260, 263, 264, 265, 266, 422], "small": [93, 95, 96, 259, 260, 897], "smaller": [259, 260], "smallest": 245, "smb": [3, 422], "smooth": [95, 433, 443], "sn": [898, 900], "snoop": [238, 240, 241], "snooper": [240, 260], "so": [3, 7, 12, 15, 25, 27, 30, 40, 42, 45, 55, 57, 60, 70, 72, 75, 85, 89, 90, 91, 94, 95, 96, 97, 259, 260, 270, 275, 278, 421, 422, 425, 428, 435, 439, 441, 497, 514, 530, 679, 695, 784, 800, 812, 813, 836, 841, 896, 897, 898, 899, 900, 902], "societi": [270, 272, 278], "softwar": 268, "some": [4, 7, 10, 259, 260, 267, 422, 425, 894, 896, 899, 900, 902], "someth": [12, 27, 42, 57, 72], "somewhat": 899, "son": 1, "sort": 260, "sourc": [5, 6, 7, 8, 9, 10, 13, 24, 26, 27, 28, 29, 30, 32, 35, 36, 37, 39, 40, 50, 54, 69, 84, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 239, 240, 241, 242, 248, 249, 250, 252, 254, 255, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 355, 369, 386, 401, 403, 416, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 465, 466, 468, 485, 497, 502, 504, 533, 534, 535, 540, 541, 542, 543, 544, 548, 549, 551, 557, 558, 559, 560, 561, 565, 566, 568, 572, 576, 577, 578, 582, 583, 585, 591, 592, 593, 594, 595, 599, 600, 602, 607, 609, 611, 612, 613, 617, 618, 620, 626, 627, 628, 629, 630, 634, 635, 637, 641, 643, 644, 645, 647, 648, 650, 651, 652, 654, 655, 658, 659, 660, 664, 665, 667, 679, 682, 683, 684, 707, 708, 709, 713, 714, 716, 722, 723, 724, 726, 727, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 743, 744, 746, 750, 752, 753, 754, 756, 757, 759, 760, 761, 763, 764, 765, 766, 767, 769, 770, 772, 773, 774, 776, 777, 787, 788, 789, 794, 795, 796, 798, 799, 800, 803, 804, 805, 806, 810, 813, 814, 820, 823, 837, 858, 860, 861, 862, 864, 865, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 884, 886, 888, 890, 892, 901], "sp500": [4, 87, 88, 425, 428, 892, 898, 899], "spa": 241, "space": 897, "special": [4, 438, 902], "specif": [3, 89, 95, 96, 272, 274, 278, 280, 293, 306, 317, 322, 330, 345, 425, 453, 495, 496, 512, 513, 528, 529, 677, 678, 693, 694, 782, 783, 798, 799, 892, 893, 898, 900], "specifi": [89, 91, 94, 95, 97, 421, 422, 425, 428, 434, 436, 439, 447, 448, 454, 496, 513, 529, 678, 694, 783, 799, 810, 834, 892, 893, 895, 896, 898, 900], "spectral": [109, 269, 278, 355, 369, 403], "sphinx": 96, "spine": [814, 842], "split": 260, "split_dat": 425, "spot": 421, "sqrt": [3, 4, 10, 87, 88, 89, 239, 240, 241, 278, 425, 432, 443, 756, 898, 900], "squar": [3, 4, 260, 369, 422, 425, 428, 440, 451, 472, 489, 497, 514, 530, 555, 572, 589, 607, 624, 641, 671, 679, 695, 720, 750, 784, 800, 812, 813, 814, 836, 841, 842, 853, 854, 890, 892, 896, 897, 899, 900], "squeez": [3, 418], "sr": [3, 4, 87, 88], "ssc": 444, "st": 899, "stabil": 421, "stabl": 237, "standard": [3, 4, 14, 29, 44, 59, 74, 86, 87, 88, 95, 263, 366, 385, 422, 425, 426, 432, 434, 436, 439, 442, 444, 445, 472, 489, 492, 509, 525, 555, 572, 589, 607, 624, 641, 655, 671, 674, 690, 720, 726, 734, 750, 756, 764, 769, 777, 779, 795, 810, 820, 822, 834, 850, 856, 857, 872, 890, 892, 896, 898, 899, 900], "standard_norm": [3, 5, 6, 7, 8, 9, 89, 896, 900], "stanislav": 94, "star": [4, 275], "star_": [270, 275], "star_t": [270, 275], "start": [3, 4, 5, 87, 88, 90, 267, 418, 420, 425, 428, 429, 430, 439, 440, 446, 455, 462, 468, 474, 479, 485, 495, 497, 504, 512, 514, 520, 528, 530, 536, 540, 545, 551, 557, 562, 568, 574, 579, 585, 591, 596, 602, 609, 614, 620, 626, 631, 637, 655, 656, 661, 667, 677, 679, 685, 693, 695, 701, 705, 710, 716, 734, 735, 740, 746, 764, 777, 782, 784, 790, 798, 800, 806, 813, 814, 839, 841, 842, 872, 875, 880, 886, 892, 893, 896, 898, 900], "start_index": 449, "start_loc": 898, "start_param": 3, "starting_valu": [495, 512, 528, 677, 693, 782, 798], "stat": [3, 15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 263, 264, 265, 266, 268, 274, 276, 277, 325, 418, 421, 899, 901], "stata": 268, "state": [3, 17, 19, 20, 22, 32, 34, 35, 37, 47, 49, 50, 52, 62, 64, 65, 67, 77, 79, 80, 82, 89, 96, 246, 252, 256, 899, 900], "statement": 901, "stationar": [265, 422], "stationari": [3, 10, 88, 90, 239, 240, 241, 265, 418, 420, 421, 422], "stationarybootstrap": [3, 5, 8, 10, 88, 90, 96], "statist": [1, 4, 7, 15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 95, 238, 240, 260, 263, 265, 266, 267, 268, 274, 278, 283, 285, 287, 288, 291, 296, 298, 300, 301, 304, 308, 310, 311, 312, 315, 319, 321, 322, 323, 324, 328, 333, 336, 338, 339, 343, 347, 349, 350, 351, 354, 368, 387, 390, 397, 400, 401, 407, 413, 415, 416, 418, 421, 422, 851, 859, 901], "statistica": 265, "statistician": 1, "statsmodel": [91, 96, 97, 260, 263, 264, 265, 266, 273, 369, 422], "stattool": 422, "statu": 260, "std": [3, 367, 386, 422, 892, 896, 897, 899, 900], "std_err_func": [4, 14, 29, 44, 59, 74], "std_resid": [95, 96, 655, 734, 764, 777, 872, 899], "std_ret": 898, "std_shock": 900, "stdout": 898, "step": [3, 12, 27, 42, 57, 72, 89, 95, 96, 264, 278, 420, 421, 425, 497, 514, 530, 679, 695, 784, 800, 813, 814, 841, 842, 896, 897, 898], "stepm": [240, 254], "stepwis": [238, 241], "still": [434, 497, 514, 530, 679, 695, 784, 800, 813, 841], "stochast": [274, 277, 391, 408], "stock": [264, 272], "store": [459, 470, 477, 487, 543, 553, 560, 570, 577, 587, 594, 605, 612, 622, 629, 639, 659, 669, 708, 718, 738, 748, 878, 888], "str": [11, 12, 14, 15, 17, 18, 22, 23, 25, 26, 27, 29, 30, 32, 33, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 52, 53, 54, 55, 56, 57, 59, 60, 62, 63, 67, 68, 70, 71, 72, 74, 75, 77, 78, 82, 83, 85, 102, 120, 130, 144, 154, 164, 174, 184, 194, 204, 214, 224, 234, 260, 271, 273, 274, 276, 278, 279, 280, 284, 289, 290, 292, 293, 297, 303, 305, 306, 309, 313, 314, 316, 317, 320, 325, 326, 327, 329, 330, 334, 340, 341, 344, 345, 348, 352, 353, 355, 358, 369, 372, 375, 388, 394, 395, 396, 402, 403, 404, 409, 410, 411, 412, 417, 448, 451, 463, 465, 480, 482, 495, 496, 497, 499, 501, 512, 513, 514, 515, 517, 528, 529, 530, 531, 533, 546, 548, 563, 565, 580, 582, 597, 599, 615, 617, 632, 634, 649, 650, 662, 664, 677, 678, 679, 680, 682, 693, 694, 695, 696, 698, 711, 713, 728, 729, 741, 743, 758, 759, 771, 772, 782, 783, 784, 785, 787, 798, 799, 800, 801, 803, 813, 814, 820, 841, 842, 850, 866, 867, 881, 883, 901], "strategi": [897, 900], "strict": [102, 135, 278], "strictli": [434, 436], "string": [248, 278, 355, 369, 403, 425, 428, 451, 497, 514, 530, 679, 695, 784, 800, 813, 814, 820, 841, 842, 850], "strong": 422, "stronger": 3, "structur": [7, 89, 268, 418, 421, 422, 425, 428, 429, 439, 896], "student": [3, 14, 29, 44, 59, 74, 95, 240, 241, 260, 425, 444, 445, 756, 769, 892], "studentize_rep": [14, 29, 44, 59, 74], "studentst": [96, 892, 899], "studi": [96, 265, 268, 275], "style": 260, "su": 260, "subarrai": [467, 469, 484, 486, 550, 552, 567, 569, 584, 586, 601, 603, 619, 621, 636, 638, 666, 668, 715, 717, 745, 747, 885, 887], "subclass": [447, 452, 453, 494, 505, 511, 521, 527, 537, 676, 686, 692, 702, 781, 791, 797, 807], "subplot": [898, 899, 900], "subsampl": 1, "subsequ": 268, "subset": 248, "substanti": [95, 899], "subtli": 95, "subtract": 278, "successfulli": [892, 897, 898, 899], "suffici": 422, "sum": [272, 363, 382, 441, 647, 726, 756, 769, 864], "sum_": [10, 270, 272, 275, 278, 399, 425, 426, 427, 428, 429, 432, 434, 436, 438, 439, 441], "summari": [418, 421, 422, 892, 896, 897, 899], "superior": [238, 240, 248, 255, 258], "superior_model": 260, "suppli": 896, "support": [5, 6, 7, 8, 9, 91, 95, 96, 97, 278, 289, 302, 313, 326, 340, 352, 367, 386, 418, 425, 462, 471, 479, 488, 495, 497, 512, 514, 528, 530, 545, 554, 562, 571, 579, 588, 596, 606, 614, 623, 631, 640, 661, 670, 677, 679, 693, 695, 710, 719, 740, 749, 782, 784, 798, 800, 813, 814, 820, 841, 842, 850, 880, 889, 892, 893, 896, 900], "suppos": [95, 900], "suppress": 899, "surfac": [263, 266], "surg": 421, "surpris": 900, "survei": 441, "sv": [468, 485, 504, 520, 536, 551, 568, 585, 602, 620, 637, 655, 667, 685, 701, 716, 734, 746, 764, 777, 790, 806, 872, 886], "switch": 96, "sy": 898, "symmetr": [426, 427, 432, 434, 436, 892, 899], "syntax": [5, 6, 7, 8, 9, 497, 514, 530, 679, 695, 784, 800, 813, 841], "system": [5, 6, 8, 9, 272, 437, 442, 444, 445], "systemat": [90, 899], "t": [1, 3, 4, 89, 94, 95, 121, 131, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 239, 240, 241, 260, 263, 264, 266, 268, 270, 272, 275, 277, 278, 355, 363, 368, 369, 378, 382, 387, 399, 403, 421, 422, 425, 426, 427, 428, 429, 432, 433, 434, 436, 438, 439, 441, 444, 497, 514, 530, 679, 695, 756, 769, 784, 800, 812, 813, 836, 841, 851, 859, 874, 892, 896, 897, 898, 900], "tabl": [263, 266, 418, 823, 858, 896], "tail": [14, 29, 44, 59, 74, 425, 444, 655, 896, 899], "take": [3, 15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 260, 444, 462, 466, 479, 483, 545, 549, 562, 566, 579, 583, 596, 600, 614, 618, 631, 635, 654, 661, 665, 710, 714, 733, 740, 744, 763, 776, 871, 880, 884, 899], "taken": 10, "tarch": [436, 497, 514, 530, 679, 695, 784, 800, 813, 814, 841, 842, 892], "target": [425, 449, 497, 514, 530, 679, 695, 784, 800, 813, 841, 898], "tau": [266, 278, 325, 422], "tau0": 443, "tau1": 443, "technic": 260, "temp": 898, "templat": 452, "term": [4, 266, 270, 272, 275, 277, 278, 280, 289, 290, 293, 302, 303, 306, 313, 314, 317, 326, 327, 330, 340, 341, 345, 352, 353, 369, 421, 425, 426, 441, 899], "termin": [495, 512, 528, 677, 693, 782, 798, 892, 897, 898, 899], "test": [3, 86, 91, 93, 95, 96, 97, 237, 238, 239, 240, 241, 261, 263, 264, 265, 266, 267, 268, 272, 274, 277, 278, 280, 283, 285, 287, 288, 289, 291, 293, 296, 298, 300, 301, 302, 304, 306, 308, 310, 311, 312, 313, 315, 317, 319, 321, 322, 323, 324, 325, 326, 328, 330, 333, 336, 338, 339, 340, 343, 345, 347, 349, 350, 351, 352, 354, 369, 390, 394, 397, 399, 400, 401, 407, 410, 413, 415, 416, 418, 810, 834, 859], "test_typ": [266, 276, 278, 421, 422], "texa": [421, 899], "text": [367, 386, 823, 858], "th": [497, 514, 530, 679, 695, 784, 800, 812, 813, 836, 841], "than": [3, 4, 10, 89, 95, 96, 240, 248, 259, 260, 263, 264, 268, 278, 425, 428, 429, 430, 434, 436, 439, 440, 446, 655, 892, 898, 899, 900], "thei": [89, 259, 260, 264, 425, 439, 898, 900, 902], "theme": 96, "theori": 272, "theta": [4, 275, 441, 709], "thi": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 24, 25, 27, 29, 30, 39, 40, 42, 44, 45, 54, 55, 57, 59, 60, 69, 70, 72, 74, 75, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 237, 238, 239, 240, 241, 254, 259, 260, 261, 263, 267, 268, 278, 418, 420, 421, 422, 425, 426, 432, 433, 434, 436, 443, 453, 462, 479, 497, 514, 530, 535, 545, 562, 579, 596, 614, 631, 661, 679, 695, 710, 740, 784, 789, 800, 813, 841, 873, 880, 892, 896, 897, 898, 899, 900], "third": 439, "those": [89, 259, 898, 900], "though": 454, "three": [4, 90, 95, 240, 251, 260, 390, 407, 422, 425, 497, 514, 530, 679, 695, 784, 800, 813, 841, 892, 898, 899], "through": [89, 263, 266, 421], "throughout": 260, "thu": [422, 897], "tibshirani": 1, "tild": 278, "time": [2, 3, 4, 10, 95, 260, 263, 264, 265, 266, 267, 268, 277, 278, 418, 420, 421, 422, 425, 497, 514, 530, 679, 695, 784, 800, 812, 813, 814, 836, 841, 842, 874, 892, 896, 897, 899, 900, 902], "timedelta": 425, "timestamp": [425, 495, 496, 497, 512, 513, 514, 528, 529, 530, 677, 678, 679, 693, 694, 695, 782, 783, 784, 798, 799, 800, 813, 814, 841, 842], "titl": [396, 412, 421, 422, 897, 898, 900], "tol": [495, 512, 528, 677, 693, 782, 798], "toler": [495, 512, 528, 677, 693, 782, 798], "toml": 95, "too": [95, 260], "toolbox": 237, "total": 86, "toward": 900, "tr": 278, "trace": 278, "track": 896, "tractabl": [425, 895], "trade": [260, 268, 820, 850], "tradit": 88, "transform": [426, 428, 429, 430, 432, 434, 436, 439, 440, 446, 456, 475, 495, 512, 528, 541, 558, 575, 592, 610, 627, 652, 657, 677, 693, 706, 731, 736, 761, 774, 782, 798, 869, 873, 876, 892, 893, 899], "treat": [433, 896], "treatment": 3, "trend": [96, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 290, 293, 303, 306, 314, 317, 327, 330, 341, 345, 353, 391, 408, 418, 421, 422], "trigger": 418, "trim": 268, "trivial": 789, "true": [3, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 91, 95, 97, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 240, 241, 260, 267, 277, 355, 363, 369, 378, 382, 386, 403, 426, 428, 429, 430, 435, 439, 440, 441, 446, 492, 495, 509, 512, 525, 528, 647, 674, 677, 690, 693, 726, 756, 769, 779, 782, 795, 798, 864, 892, 893, 897, 899], "truncat": 434, "tsa": 422, "tue": [896, 899, 900], "tukei": [110, 111, 112], "tune": 10, "tupl": [5, 6, 7, 8, 9, 12, 17, 18, 22, 23, 27, 32, 33, 37, 38, 39, 42, 47, 48, 52, 53, 54, 57, 62, 63, 67, 68, 72, 77, 78, 82, 83, 87, 457, 460, 466, 476, 478, 479, 483, 491, 493, 497, 508, 510, 514, 524, 526, 530, 542, 544, 545, 549, 559, 561, 562, 566, 576, 578, 579, 583, 593, 595, 596, 600, 611, 613, 614, 618, 628, 630, 631, 635, 643, 645, 654, 658, 660, 661, 665, 673, 675, 679, 689, 691, 695, 707, 709, 710, 714, 722, 724, 733, 737, 739, 740, 744, 752, 754, 763, 765, 767, 776, 778, 780, 784, 794, 796, 800, 813, 841, 860, 862, 871, 877, 879, 880, 884], "twice": 900, "two": [3, 4, 5, 6, 7, 8, 9, 10, 14, 29, 44, 59, 74, 87, 270, 275, 421, 422, 444, 893, 896, 897, 898, 899, 900], "type": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 83, 85, 86, 95, 96, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 243, 244, 245, 248, 250, 251, 258, 269, 273, 277, 278, 281, 294, 307, 318, 325, 332, 346, 355, 363, 367, 369, 372, 378, 382, 386, 390, 396, 399, 403, 407, 412, 422, 425, 455, 456, 457, 462, 465, 468, 470, 472, 473, 474, 475, 476, 479, 482, 485, 487, 489, 490, 491, 495, 496, 497, 501, 502, 503, 504, 508, 512, 513, 514, 517, 518, 519, 520, 524, 528, 529, 530, 533, 534, 535, 536, 540, 541, 542, 545, 548, 551, 553, 555, 556, 557, 558, 559, 562, 565, 568, 570, 572, 573, 574, 575, 576, 579, 582, 585, 587, 589, 590, 591, 592, 593, 596, 599, 602, 605, 607, 608, 609, 610, 611, 614, 617, 620, 622, 624, 625, 626, 627, 628, 631, 634, 637, 639, 641, 642, 643, 644, 647, 648, 650, 651, 652, 654, 655, 656, 657, 658, 661, 664, 667, 669, 671, 672, 673, 677, 678, 679, 682, 683, 684, 685, 689, 693, 694, 695, 698, 699, 700, 701, 705, 706, 707, 710, 713, 716, 718, 720, 721, 722, 723, 726, 727, 729, 730, 731, 733, 734, 735, 736, 737, 740, 743, 746, 748, 750, 751, 752, 753, 756, 757, 759, 760, 761, 763, 764, 765, 766, 769, 770, 772, 773, 774, 776, 777, 778, 782, 783, 784, 787, 788, 789, 790, 794, 798, 799, 800, 803, 804, 806, 810, 812, 813, 814, 820, 823, 826, 834, 836, 837, 841, 842, 847, 850, 858, 860, 861, 865, 867, 868, 869, 871, 872, 875, 876, 877, 880, 883, 886, 888, 890, 891, 892, 898, 900, 901], "typing_extens": 95, "typo": 94, "typograph": 93, "u": [3, 4, 278, 421], "u_t": 278, "ultim": 89, "unadjust": [355, 369, 403], "under": [90, 278, 391, 408, 421], "underli": [421, 899], "unequ": 7, "uneven": 95, "uniform": 6, "uniformli": 900, "uniqu": 898, "unit": [3, 91, 93, 95, 97, 237, 263, 264, 265, 266, 268, 277, 278, 287, 300, 311, 323, 338, 350, 418, 421, 435, 756, 769, 897, 899, 900], "unit_scal": [435, 897], "unit_var_resid": 899, "unitroot": [418, 421, 422], "univarait": 895, "univari": [91, 92, 95, 97, 237, 268, 421, 892, 893, 896, 897, 899, 900], "univers": [1, 3, 263, 266, 267], "unlik": 266, "unstandard": 899, "until": [91, 97, 425, 897], "up": [11, 14, 26, 29, 41, 44, 56, 59, 71, 74, 268, 422, 425, 438, 497, 514, 530, 679, 695, 784, 800, 813, 841, 896, 898, 900], "updat": [24, 39, 54, 69, 84, 91, 94, 95, 97, 263, 266, 428, 453, 473, 490, 495, 512, 528, 556, 573, 590, 608, 625, 642, 672, 677, 693, 721, 751, 782, 798, 873, 891, 893], "update_freq": [429, 495, 512, 528, 677, 693, 782, 798, 820, 850, 898, 899], "upper": [3, 4, 14, 29, 44, 59, 74, 240, 248, 250, 251, 260, 263, 457, 459, 462, 470, 472, 476, 477, 479, 487, 489, 542, 543, 545, 553, 555, 559, 560, 562, 570, 572, 576, 577, 579, 587, 589, 593, 594, 596, 605, 607, 611, 612, 614, 622, 624, 628, 629, 631, 639, 641, 643, 651, 658, 659, 661, 669, 671, 707, 708, 710, 718, 720, 722, 730, 737, 738, 740, 748, 750, 752, 760, 765, 773, 860, 868, 874, 877, 878, 880, 888, 890], "us": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 53, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 83, 85, 87, 88, 90, 91, 92, 95, 96, 97, 98, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 119, 122, 123, 124, 128, 129, 132, 137, 138, 142, 143, 146, 147, 148, 152, 153, 156, 157, 158, 162, 163, 166, 167, 168, 172, 173, 176, 177, 178, 182, 183, 186, 187, 188, 192, 193, 196, 197, 198, 202, 203, 206, 207, 208, 212, 213, 216, 217, 218, 222, 223, 226, 227, 228, 232, 233, 236, 237, 238, 239, 240, 241, 247, 248, 250, 253, 254, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 277, 278, 281, 282, 283, 289, 291, 294, 295, 296, 302, 304, 307, 308, 313, 315, 318, 319, 322, 326, 328, 331, 332, 333, 335, 337, 340, 343, 346, 347, 352, 354, 355, 356, 358, 359, 369, 370, 372, 375, 378, 392, 393, 402, 403, 405, 417, 418, 421, 422, 425, 426, 428, 429, 430, 434, 435, 436, 437, 438, 439, 440, 442, 444, 445, 446, 448, 451, 453, 455, 459, 460, 462, 466, 467, 468, 469, 470, 472, 474, 477, 478, 479, 483, 484, 485, 486, 487, 489, 491, 492, 493, 495, 496, 497, 502, 503, 508, 509, 510, 512, 513, 514, 518, 519, 524, 525, 526, 528, 529, 530, 534, 535, 540, 543, 544, 545, 549, 550, 551, 552, 553, 555, 557, 560, 561, 562, 566, 567, 568, 569, 570, 572, 574, 577, 578, 579, 583, 584, 585, 586, 587, 589, 591, 594, 595, 596, 600, 601, 602, 603, 605, 607, 609, 612, 613, 614, 618, 619, 620, 621, 622, 624, 626, 629, 630, 631, 635, 636, 637, 638, 639, 641, 643, 644, 645, 647, 648, 651, 652, 653, 655, 656, 659, 660, 661, 665, 666, 667, 668, 669, 671, 673, 674, 675, 677, 678, 679, 683, 684, 689, 690, 691, 693, 694, 695, 699, 700, 705, 708, 710, 714, 715, 716, 717, 718, 720, 722, 723, 724, 726, 727, 730, 731, 732, 734, 738, 739, 740, 744, 745, 746, 747, 748, 750, 752, 753, 754, 756, 757, 760, 761, 762, 764, 765, 766, 767, 769, 770, 773, 774, 775, 777, 778, 779, 780, 782, 783, 784, 788, 789, 794, 795, 796, 798, 799, 800, 804, 812, 813, 814, 816, 817, 820, 826, 830, 836, 837, 839, 840, 841, 842, 844, 845, 850, 860, 861, 862, 865, 868, 869, 870, 872, 873, 874, 875, 878, 879, 880, 884, 885, 886, 887, 888, 890, 892, 894, 895, 898, 899, 900, 902], "usag": 902, "use_rot": 439, "use_se": [20, 35, 50, 65, 80], "user": [0, 89, 94, 95, 113, 123, 137, 147, 157, 167, 177, 187, 197, 207, 217, 227, 426, 456, 475, 496, 513, 529, 541, 558, 575, 592, 610, 627, 657, 678, 694, 706, 736, 783, 799, 876, 899], "usign": 96, "usual": [4, 259, 260, 422, 434, 436, 820, 850, 899, 900], "util": 895, "v4": 237, "vale": 896, "valid": [290, 303, 314, 325, 327, 341, 353, 495, 497, 512, 514, 528, 530, 677, 679, 693, 695, 782, 784, 798, 800, 813, 841], "valid_trend": [289, 302, 313, 326, 340, 352], "valu": [3, 5, 6, 8, 9, 10, 11, 13, 14, 16, 21, 23, 26, 28, 29, 31, 36, 38, 41, 43, 44, 46, 51, 53, 56, 58, 59, 61, 66, 68, 71, 73, 74, 76, 81, 83, 89, 91, 94, 95, 97, 114, 118, 124, 128, 138, 142, 148, 152, 158, 162, 168, 172, 178, 182, 188, 192, 198, 202, 208, 212, 218, 222, 228, 232, 239, 240, 241, 245, 247, 248, 250, 251, 253, 254, 257, 259, 260, 263, 264, 265, 266, 267, 272, 274, 277, 278, 280, 285, 288, 293, 298, 301, 306, 310, 312, 317, 321, 324, 325, 330, 336, 339, 345, 349, 351, 361, 380, 390, 397, 399, 401, 407, 413, 416, 418, 421, 422, 425, 426, 428, 429, 438, 439, 448, 450, 451, 453, 455, 456, 458, 459, 460, 461, 462, 466, 468, 470, 472, 474, 475, 477, 478, 479, 483, 485, 487, 489, 492, 495, 497, 502, 503, 504, 506, 509, 512, 514, 518, 519, 520, 522, 525, 528, 530, 534, 535, 536, 538, 540, 541, 543, 544, 545, 549, 551, 553, 555, 557, 558, 560, 561, 562, 566, 568, 570, 572, 574, 575, 577, 578, 579, 583, 585, 587, 589, 591, 592, 594, 595, 596, 600, 602, 605, 607, 609, 610, 612, 613, 614, 618, 620, 622, 624, 626, 627, 629, 630, 631, 635, 637, 639, 641, 644, 645, 652, 655, 656, 657, 659, 660, 661, 665, 667, 669, 671, 674, 677, 679, 683, 684, 685, 687, 690, 693, 695, 699, 700, 701, 703, 705, 706, 708, 710, 714, 716, 718, 720, 723, 724, 731, 734, 735, 736, 738, 739, 740, 744, 746, 748, 750, 753, 754, 761, 764, 766, 767, 774, 777, 779, 782, 784, 788, 789, 790, 792, 795, 798, 800, 804, 806, 812, 813, 820, 824, 825, 827, 830, 832, 836, 841, 850, 851, 861, 862, 869, 872, 873, 874, 875, 876, 878, 879, 880, 884, 886, 888, 890, 892, 895, 897, 899, 900, 901], "valuabl": 425, "value_at_risk": 898, "valueerror": [462, 479, 545, 562, 579, 596, 614, 631, 661, 710, 740, 880, 898], "valuer": [655, 764, 777], "var": [3, 14, 15, 29, 30, 44, 45, 59, 60, 74, 75, 87, 88, 278, 428, 498], "var_": 898, "var_2016": 898, "var_bound": [459, 462, 470, 472, 477, 479, 487, 489, 543, 545, 553, 555, 560, 562, 570, 572, 577, 579, 587, 589, 594, 596, 605, 607, 612, 614, 622, 624, 629, 631, 639, 641, 659, 661, 669, 671, 708, 710, 718, 720, 738, 740, 748, 750, 874, 878, 880, 888, 890], "varanelli": 95, "vari": [418, 902], "variabl": [3, 5, 6, 7, 8, 9, 86, 91, 95, 96, 97, 260, 266, 270, 272, 275, 277, 278, 418, 421, 422, 428, 429, 430, 439, 440, 446, 448, 451, 465, 482, 497, 501, 503, 507, 514, 517, 519, 523, 530, 533, 539, 548, 565, 582, 599, 617, 634, 664, 679, 682, 684, 688, 695, 698, 700, 704, 713, 743, 784, 787, 793, 800, 803, 808, 813, 841, 883, 892, 895, 897, 899, 900], "varianc": [3, 15, 25, 30, 40, 45, 55, 60, 70, 75, 85, 89, 93, 95, 122, 132, 146, 156, 166, 176, 186, 196, 206, 216, 226, 236, 240, 241, 266, 267, 278, 281, 294, 307, 318, 331, 332, 335, 337, 342, 346, 359, 363, 369, 378, 382, 420, 421, 425, 426, 427, 428, 431, 432, 433, 434, 435, 436, 438, 441, 443, 449, 450, 451, 454, 459, 462, 466, 467, 469, 470, 472, 477, 479, 483, 484, 486, 487, 489, 495, 497, 498, 512, 514, 528, 530, 543, 545, 549, 550, 552, 553, 555, 560, 562, 566, 567, 569, 570, 572, 577, 579, 583, 584, 586, 587, 589, 594, 596, 600, 601, 603, 605, 607, 612, 614, 618, 619, 621, 622, 624, 629, 631, 635, 636, 638, 639, 641, 647, 659, 661, 665, 666, 668, 669, 671, 677, 679, 693, 695, 708, 710, 714, 715, 717, 718, 720, 726, 738, 740, 744, 745, 747, 748, 750, 756, 769, 782, 784, 798, 800, 812, 813, 814, 820, 825, 829, 836, 841, 842, 850, 864, 874, 878, 880, 884, 885, 887, 888, 890, 893, 895, 896, 898, 899, 900], "varianceforecast": [462, 479, 545, 562, 579, 596, 614, 631, 661, 710, 740, 880], "varianceratio": [95, 420, 422], "variat": 896, "varieti": [3, 90], "variou": 260, "vcv": 4, "vector": [4, 14, 29, 44, 59, 74, 89, 95, 101, 105, 106, 107, 108, 109, 110, 111, 112, 119, 129, 143, 153, 163, 173, 183, 193, 203, 213, 223, 233, 270, 272, 275, 278, 355, 357, 360, 361, 366, 368, 369, 371, 379, 380, 385, 386, 387, 389, 403, 406, 420, 421, 428, 429, 430, 439, 440, 446, 455, 457, 459, 466, 474, 476, 477, 483, 497, 514, 530, 540, 542, 543, 549, 557, 559, 560, 566, 574, 576, 577, 583, 591, 593, 594, 600, 609, 611, 612, 618, 626, 628, 629, 635, 647, 656, 658, 659, 665, 679, 695, 705, 707, 708, 714, 726, 735, 737, 738, 744, 756, 769, 784, 800, 813, 841, 864, 875, 877, 878, 884], "vendor": 95, "veri": [95, 263, 421, 898], "verifi": [421, 439], "version": [4, 5, 6, 8, 9, 11, 14, 26, 29, 41, 44, 56, 59, 71, 74, 89, 237, 259, 267, 422, 437, 442, 444, 445, 497, 514, 530, 653, 679, 695, 732, 762, 775, 784, 800, 813, 841, 870, 899], "versu": 422, "via": 92, "violat": [260, 898], "virtual": [425, 900], "visual": 899, "vix": 897, "vix_data": 897, "vol": [1, 425, 428, 497, 498, 514, 530, 651, 679, 695, 730, 760, 773, 784, 800, 814, 842, 868, 892, 896, 897, 898, 899, 900], "vol_mod": 897, "vol_r": 897, "volatil": [91, 94, 95, 97, 237, 426, 428, 429, 430, 431, 435, 439, 440, 441, 446, 447, 448, 451, 453, 455, 462, 463, 466, 471, 473, 474, 479, 480, 483, 488, 490, 496, 497, 503, 513, 514, 519, 529, 530, 535, 540, 545, 546, 549, 554, 556, 557, 562, 563, 566, 571, 573, 574, 579, 580, 583, 588, 590, 591, 596, 597, 600, 606, 608, 609, 614, 615, 618, 623, 625, 626, 631, 632, 635, 640, 642, 656, 661, 662, 665, 670, 672, 678, 679, 684, 694, 695, 700, 705, 710, 711, 714, 719, 721, 740, 741, 744, 749, 751, 783, 784, 789, 799, 800, 812, 813, 814, 820, 822, 836, 841, 842, 850, 857, 892, 893, 896], "volatility_updat": 96, "volatilityprocess": [96, 428, 429, 430, 439, 440, 446, 447, 505, 521, 537, 686, 702, 791, 807, 902], "volatilityupdat": [96, 473, 490, 556, 573, 590, 608, 625, 642, 672, 721, 751, 891, 902], "volatilti": 95, "vr": [267, 422], "vstack": 4, "w": [101, 105, 106, 107, 108, 109, 110, 111, 112, 263, 265, 266, 267, 268, 272, 820, 850], "wa": [5, 6, 7, 8, 9, 91, 94, 95, 96, 97, 422, 448, 451, 497, 514, 530, 679, 695, 784, 800, 896], "wai": [5, 6, 7, 8, 9, 899], "wald": 901, "waldteststatist": [810, 834, 901], "walk": [267, 422], "want": 900, "warn": [91, 92, 95, 97, 422, 495, 497, 512, 514, 528, 530, 677, 679, 693, 695, 782, 784, 798, 800, 813, 841, 896], "watson": [272, 422], "we": [3, 278, 421, 422, 896, 897, 898, 899], "weakli": [265, 418, 421, 422], "web": [4, 87, 88, 418, 425, 892], "websit": [3, 86], "weekli": [820, 850], "weight": [95, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 119, 129, 143, 153, 163, 173, 183, 193, 203, 213, 223, 233, 433, 434, 443, 897, 899], "well": [4, 260, 422, 899, 900, 901], "were": [265, 497, 514, 530, 679, 695, 784, 800, 813, 841, 900], "west": [101, 265, 266, 269, 278, 322, 355, 369, 403, 421, 422, 899], "what": [1, 900], "wheel": 96, "when": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 24, 25, 26, 27, 29, 30, 39, 40, 41, 42, 44, 45, 54, 55, 56, 57, 59, 60, 69, 70, 71, 72, 74, 75, 84, 85, 87, 89, 91, 95, 96, 97, 101, 105, 106, 107, 108, 109, 110, 111, 112, 239, 240, 241, 248, 250, 254, 260, 263, 264, 266, 268, 272, 277, 278, 281, 282, 283, 294, 295, 296, 307, 308, 318, 319, 332, 333, 346, 347, 369, 421, 422, 425, 428, 429, 430, 433, 434, 435, 439, 440, 444, 446, 451, 453, 459, 462, 466, 468, 470, 477, 479, 483, 485, 487, 495, 496, 497, 502, 503, 512, 513, 514, 518, 519, 528, 529, 530, 534, 535, 543, 545, 549, 551, 553, 560, 562, 566, 568, 570, 577, 579, 583, 585, 587, 594, 596, 600, 602, 605, 612, 614, 618, 620, 622, 629, 631, 635, 637, 639, 643, 659, 661, 665, 667, 669, 677, 678, 679, 683, 684, 693, 694, 695, 699, 700, 708, 710, 714, 716, 718, 722, 738, 740, 744, 746, 748, 752, 765, 782, 783, 784, 788, 789, 798, 799, 800, 804, 813, 814, 820, 837, 841, 842, 850, 860, 878, 880, 884, 886, 888, 892, 894, 895, 896, 897, 898, 899, 900], "whenev": [425, 898], "where": [4, 7, 10, 11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 86, 87, 88, 95, 96, 101, 105, 106, 107, 108, 109, 110, 111, 112, 121, 131, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 245, 259, 260, 270, 272, 275, 277, 278, 355, 363, 369, 378, 382, 403, 421, 425, 428, 432, 434, 436, 438, 439, 441, 443, 447, 457, 476, 497, 503, 514, 519, 530, 542, 559, 576, 593, 611, 628, 647, 658, 679, 684, 695, 700, 707, 737, 756, 769, 784, 800, 813, 837, 841, 864, 877, 896, 897, 898, 899, 900], "whether": [14, 15, 20, 25, 29, 30, 35, 40, 44, 45, 50, 55, 59, 60, 65, 70, 74, 75, 80, 85, 101, 105, 106, 107, 108, 109, 110, 111, 112, 115, 117, 125, 127, 139, 141, 149, 151, 159, 161, 169, 171, 179, 181, 189, 191, 199, 201, 209, 211, 219, 221, 229, 231, 259, 260, 263, 266, 267, 273, 278, 355, 369, 386, 403, 418, 420, 422, 428, 429, 430, 435, 439, 440, 441, 446, 448, 451, 492, 495, 497, 509, 512, 514, 525, 528, 530, 647, 674, 677, 679, 690, 693, 695, 726, 756, 769, 779, 782, 784, 795, 798, 800, 813, 841, 864, 892, 899], "which": [1, 3, 4, 10, 89, 90, 92, 94, 95, 248, 254, 259, 260, 261, 267, 269, 418, 422, 425, 434, 436, 438, 453, 495, 497, 512, 514, 528, 530, 644, 655, 677, 679, 693, 695, 723, 753, 766, 782, 784, 798, 800, 812, 813, 820, 836, 841, 850, 861, 896, 897, 898, 899, 900], "while": [4, 259, 260, 261, 267, 421, 425, 892, 896, 898, 900], "white": [10, 238, 240, 259, 278, 355, 369, 403, 422, 897, 899], "wilei": 1, "window": [3, 10, 94, 239, 240, 241], "winkler": [651, 730, 760, 773, 868], "wisc": 444, "wise": 241, "wish": 896, "within": [3, 277, 278], "without": [8, 14, 29, 44, 59, 74, 89, 428, 429, 430, 439, 440, 446, 892], "wolf": [1, 238, 241, 259], "wooldridg": [495, 512, 528, 677, 693, 782, 798], "work": [260, 263, 266], "wors": [240, 248, 259, 260], "would": [96, 260, 900], "wpaper": [263, 266], "wrap": [5, 8, 9, 10, 90], "wrapper": [89, 259], "write": [96, 453, 898], "written": [3, 95, 453], "wrong": 95, "wti": 421, "www": 444, "x": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 25, 26, 27, 29, 30, 40, 41, 42, 44, 45, 55, 56, 57, 59, 60, 70, 71, 72, 74, 75, 85, 87, 89, 95, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 260, 270, 272, 275, 277, 278, 428, 429, 439, 440, 497, 503, 514, 519, 530, 535, 647, 651, 679, 684, 695, 700, 726, 730, 756, 760, 769, 773, 784, 789, 800, 805, 813, 841, 868, 892, 898, 900], "x0": 896, "x0_oo": 896, "x0_sim": 896, "x1": 896, "x1_oo": 896, "x1_sim": 896, "x_": [10, 95, 272, 896], "x_0": 896, "x_1": 896, "x_k": 10, "x_mod": 896, "x_orig": 89, "x_param": [503, 519, 684, 700], "x_t": [270, 272, 275, 277, 278, 421, 428, 429, 439, 440], "x_trend": [270, 275], "xi_": 278, "xi_t": 278, "xl": [421, 898], "xlim": [899, 900], "xsection": [274, 276], "xstar": 87, "y": [3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 25, 26, 29, 30, 40, 41, 44, 45, 55, 56, 59, 60, 70, 71, 74, 75, 85, 87, 89, 260, 263, 264, 265, 266, 267, 268, 269, 270, 272, 275, 277, 278, 422, 428, 429, 430, 439, 440, 446, 447, 497, 502, 514, 518, 530, 534, 679, 683, 695, 699, 784, 788, 800, 804, 813, 841, 855, 892, 896], "y_": [399, 421, 428, 429, 896], "y_star": 89, "y_t": [270, 272, 275, 277, 278, 399, 421, 428, 429, 430, 439, 440, 446, 896], "yahoo": [4, 87, 88, 892, 898, 899], "year": [425, 820, 850], "yield": [418, 422, 892], "you": [5, 6, 7, 8, 9, 896, 900], "ystar": [87, 89], "z": [5, 6, 7, 8, 9, 87, 96, 101, 105, 106, 107, 108, 109, 110, 111, 112, 264, 278, 369, 422, 651, 730, 760, 773, 868], "z_": [4, 278, 421], "z_1": 278, "z_t": [275, 277, 278, 369, 421], "z_tz": 275, "za": [276, 278, 421, 422], "zag": [95, 902], "zandrew": 268, "zenodo": 237, "zero": [95, 260, 267, 421, 446, 459, 477, 543, 560, 577, 594, 612, 629, 659, 708, 738, 789, 878, 892, 896, 897, 899], "zeromean": [95, 896, 897, 899], "zig": [95, 902], "zivot": [95, 268, 420], "zivotandrew": [95, 420, 422], "zm": [446, 789], "zstar": 87, "zt": [278, 421], "zz": [278, 369], "z\u03b1": 278, "\u03b3": 421, "\u03c1": 421}, "titles": ["API Reference", "References", "Bootstrapping", "Bootstrap Examples", "Confidence Intervals", "arch.bootstrap.CircularBlockBootstrap", "arch.bootstrap.IIDBootstrap", "arch.bootstrap.IndependentSamplesBootstrap", "arch.bootstrap.MovingBlockBootstrap", "arch.bootstrap.StationaryBootstrap", "arch.bootstrap.optimal_block_length", "arch.bootstrap.CircularBlockBootstrap.apply", "arch.bootstrap.CircularBlockBootstrap.bootstrap", "arch.bootstrap.CircularBlockBootstrap.clone", "arch.bootstrap.CircularBlockBootstrap.conf_int", "arch.bootstrap.CircularBlockBootstrap.cov", "arch.bootstrap.CircularBlockBootstrap.generator", "arch.bootstrap.CircularBlockBootstrap.get_state", "arch.bootstrap.CircularBlockBootstrap.index", "arch.bootstrap.CircularBlockBootstrap.random_state", "arch.bootstrap.CircularBlockBootstrap.reset", "arch.bootstrap.CircularBlockBootstrap.seed", "arch.bootstrap.CircularBlockBootstrap.set_state", "arch.bootstrap.CircularBlockBootstrap.state", "arch.bootstrap.CircularBlockBootstrap.update_indices", "arch.bootstrap.CircularBlockBootstrap.var", "arch.bootstrap.IIDBootstrap.apply", "arch.bootstrap.IIDBootstrap.bootstrap", "arch.bootstrap.IIDBootstrap.clone", "arch.bootstrap.IIDBootstrap.conf_int", "arch.bootstrap.IIDBootstrap.cov", "arch.bootstrap.IIDBootstrap.generator", "arch.bootstrap.IIDBootstrap.get_state", "arch.bootstrap.IIDBootstrap.index", "arch.bootstrap.IIDBootstrap.random_state", "arch.bootstrap.IIDBootstrap.reset", "arch.bootstrap.IIDBootstrap.seed", "arch.bootstrap.IIDBootstrap.set_state", "arch.bootstrap.IIDBootstrap.state", "arch.bootstrap.IIDBootstrap.update_indices", "arch.bootstrap.IIDBootstrap.var", "arch.bootstrap.IndependentSamplesBootstrap.apply", "arch.bootstrap.IndependentSamplesBootstrap.bootstrap", "arch.bootstrap.IndependentSamplesBootstrap.clone", "arch.bootstrap.IndependentSamplesBootstrap.conf_int", "arch.bootstrap.IndependentSamplesBootstrap.cov", "arch.bootstrap.IndependentSamplesBootstrap.generator", "arch.bootstrap.IndependentSamplesBootstrap.get_state", "arch.bootstrap.IndependentSamplesBootstrap.index", "arch.bootstrap.IndependentSamplesBootstrap.random_state", "arch.bootstrap.IndependentSamplesBootstrap.reset", "arch.bootstrap.IndependentSamplesBootstrap.seed", "arch.bootstrap.IndependentSamplesBootstrap.set_state", "arch.bootstrap.IndependentSamplesBootstrap.state", "arch.bootstrap.IndependentSamplesBootstrap.update_indices", "arch.bootstrap.IndependentSamplesBootstrap.var", "arch.bootstrap.MovingBlockBootstrap.apply", "arch.bootstrap.MovingBlockBootstrap.bootstrap", "arch.bootstrap.MovingBlockBootstrap.clone", "arch.bootstrap.MovingBlockBootstrap.conf_int", "arch.bootstrap.MovingBlockBootstrap.cov", "arch.bootstrap.MovingBlockBootstrap.generator", "arch.bootstrap.MovingBlockBootstrap.get_state", "arch.bootstrap.MovingBlockBootstrap.index", "arch.bootstrap.MovingBlockBootstrap.random_state", "arch.bootstrap.MovingBlockBootstrap.reset", "arch.bootstrap.MovingBlockBootstrap.seed", "arch.bootstrap.MovingBlockBootstrap.set_state", "arch.bootstrap.MovingBlockBootstrap.state", "arch.bootstrap.MovingBlockBootstrap.update_indices", "arch.bootstrap.MovingBlockBootstrap.var", "arch.bootstrap.StationaryBootstrap.apply", "arch.bootstrap.StationaryBootstrap.bootstrap", "arch.bootstrap.StationaryBootstrap.clone", "arch.bootstrap.StationaryBootstrap.conf_int", "arch.bootstrap.StationaryBootstrap.cov", "arch.bootstrap.StationaryBootstrap.generator", "arch.bootstrap.StationaryBootstrap.get_state", "arch.bootstrap.StationaryBootstrap.index", "arch.bootstrap.StationaryBootstrap.random_state", "arch.bootstrap.StationaryBootstrap.reset", "arch.bootstrap.StationaryBootstrap.seed", "arch.bootstrap.StationaryBootstrap.set_state", "arch.bootstrap.StationaryBootstrap.state", "arch.bootstrap.StationaryBootstrap.update_indices", "arch.bootstrap.StationaryBootstrap.var", "Independent, Identical Distributed Data (i.i.d.)", "Low-level Interfaces", "Covariance Estimation", "Semiparametric Bootstraps", "Time-series Bootstraps", "Change Logs", "Version 1", "Version 2", "Version 3", "Version 4", "Version 5", "Version 6", "Version 7", "Long-run Covariance Estimation", "arch.covariance.kernel.Andrews", "arch.covariance.kernel.Bartlett", "arch.covariance.kernel.CovarianceEstimate", "arch.covariance.kernel.Gallant", "arch.covariance.kernel.NeweyWest", "arch.covariance.kernel.Parzen", "arch.covariance.kernel.ParzenCauchy", "arch.covariance.kernel.ParzenGeometric", "arch.covariance.kernel.ParzenRiesz", "arch.covariance.kernel.QuadraticSpectral", "arch.covariance.kernel.TukeyHamming", "arch.covariance.kernel.TukeyHanning", "arch.covariance.kernel.TukeyParzen", "arch.covariance.kernel.Andrews.bandwidth", "arch.covariance.kernel.Andrews.bandwidth_scale", "arch.covariance.kernel.Andrews.centered", "arch.covariance.kernel.Andrews.cov", "arch.covariance.kernel.Andrews.force_int", "arch.covariance.kernel.Andrews.kernel_const", "arch.covariance.kernel.Andrews.kernel_weights", "arch.covariance.kernel.Andrews.name", "arch.covariance.kernel.Andrews.opt_bandwidth", "arch.covariance.kernel.Andrews.rate", "arch.covariance.kernel.Bartlett.bandwidth", "arch.covariance.kernel.Bartlett.bandwidth_scale", "arch.covariance.kernel.Bartlett.centered", "arch.covariance.kernel.Bartlett.cov", "arch.covariance.kernel.Bartlett.force_int", "arch.covariance.kernel.Bartlett.kernel_const", "arch.covariance.kernel.Bartlett.kernel_weights", "arch.covariance.kernel.Bartlett.name", "arch.covariance.kernel.Bartlett.opt_bandwidth", "arch.covariance.kernel.Bartlett.rate", "arch.covariance.kernel.CovarianceEstimate.long_run", "arch.covariance.kernel.CovarianceEstimate.one_sided", "arch.covariance.kernel.CovarianceEstimate.one_sided_strict", "arch.covariance.kernel.CovarianceEstimate.short_run", "arch.covariance.kernel.Gallant.bandwidth", "arch.covariance.kernel.Gallant.bandwidth_scale", "arch.covariance.kernel.Gallant.centered", "arch.covariance.kernel.Gallant.cov", "arch.covariance.kernel.Gallant.force_int", "arch.covariance.kernel.Gallant.kernel_const", "arch.covariance.kernel.Gallant.kernel_weights", "arch.covariance.kernel.Gallant.name", "arch.covariance.kernel.Gallant.opt_bandwidth", "arch.covariance.kernel.Gallant.rate", "arch.covariance.kernel.NeweyWest.bandwidth", "arch.covariance.kernel.NeweyWest.bandwidth_scale", "arch.covariance.kernel.NeweyWest.centered", "arch.covariance.kernel.NeweyWest.cov", "arch.covariance.kernel.NeweyWest.force_int", "arch.covariance.kernel.NeweyWest.kernel_const", "arch.covariance.kernel.NeweyWest.kernel_weights", "arch.covariance.kernel.NeweyWest.name", "arch.covariance.kernel.NeweyWest.opt_bandwidth", "arch.covariance.kernel.NeweyWest.rate", "arch.covariance.kernel.Parzen.bandwidth", "arch.covariance.kernel.Parzen.bandwidth_scale", "arch.covariance.kernel.Parzen.centered", "arch.covariance.kernel.Parzen.cov", "arch.covariance.kernel.Parzen.force_int", "arch.covariance.kernel.Parzen.kernel_const", "arch.covariance.kernel.Parzen.kernel_weights", "arch.covariance.kernel.Parzen.name", "arch.covariance.kernel.Parzen.opt_bandwidth", "arch.covariance.kernel.Parzen.rate", "arch.covariance.kernel.ParzenCauchy.bandwidth", "arch.covariance.kernel.ParzenCauchy.bandwidth_scale", "arch.covariance.kernel.ParzenCauchy.centered", "arch.covariance.kernel.ParzenCauchy.cov", "arch.covariance.kernel.ParzenCauchy.force_int", "arch.covariance.kernel.ParzenCauchy.kernel_const", "arch.covariance.kernel.ParzenCauchy.kernel_weights", "arch.covariance.kernel.ParzenCauchy.name", "arch.covariance.kernel.ParzenCauchy.opt_bandwidth", "arch.covariance.kernel.ParzenCauchy.rate", "arch.covariance.kernel.ParzenGeometric.bandwidth", "arch.covariance.kernel.ParzenGeometric.bandwidth_scale", "arch.covariance.kernel.ParzenGeometric.centered", "arch.covariance.kernel.ParzenGeometric.cov", "arch.covariance.kernel.ParzenGeometric.force_int", "arch.covariance.kernel.ParzenGeometric.kernel_const", "arch.covariance.kernel.ParzenGeometric.kernel_weights", "arch.covariance.kernel.ParzenGeometric.name", "arch.covariance.kernel.ParzenGeometric.opt_bandwidth", "arch.covariance.kernel.ParzenGeometric.rate", "arch.covariance.kernel.ParzenRiesz.bandwidth", "arch.covariance.kernel.ParzenRiesz.bandwidth_scale", "arch.covariance.kernel.ParzenRiesz.centered", "arch.covariance.kernel.ParzenRiesz.cov", "arch.covariance.kernel.ParzenRiesz.force_int", "arch.covariance.kernel.ParzenRiesz.kernel_const", "arch.covariance.kernel.ParzenRiesz.kernel_weights", "arch.covariance.kernel.ParzenRiesz.name", "arch.covariance.kernel.ParzenRiesz.opt_bandwidth", "arch.covariance.kernel.ParzenRiesz.rate", "arch.covariance.kernel.QuadraticSpectral.bandwidth", "arch.covariance.kernel.QuadraticSpectral.bandwidth_scale", "arch.covariance.kernel.QuadraticSpectral.centered", "arch.covariance.kernel.QuadraticSpectral.cov", "arch.covariance.kernel.QuadraticSpectral.force_int", "arch.covariance.kernel.QuadraticSpectral.kernel_const", "arch.covariance.kernel.QuadraticSpectral.kernel_weights", "arch.covariance.kernel.QuadraticSpectral.name", "arch.covariance.kernel.QuadraticSpectral.opt_bandwidth", "arch.covariance.kernel.QuadraticSpectral.rate", "arch.covariance.kernel.TukeyHamming.bandwidth", "arch.covariance.kernel.TukeyHamming.bandwidth_scale", "arch.covariance.kernel.TukeyHamming.centered", "arch.covariance.kernel.TukeyHamming.cov", "arch.covariance.kernel.TukeyHamming.force_int", "arch.covariance.kernel.TukeyHamming.kernel_const", "arch.covariance.kernel.TukeyHamming.kernel_weights", "arch.covariance.kernel.TukeyHamming.name", "arch.covariance.kernel.TukeyHamming.opt_bandwidth", "arch.covariance.kernel.TukeyHamming.rate", "arch.covariance.kernel.TukeyHanning.bandwidth", "arch.covariance.kernel.TukeyHanning.bandwidth_scale", "arch.covariance.kernel.TukeyHanning.centered", "arch.covariance.kernel.TukeyHanning.cov", "arch.covariance.kernel.TukeyHanning.force_int", "arch.covariance.kernel.TukeyHanning.kernel_const", "arch.covariance.kernel.TukeyHanning.kernel_weights", "arch.covariance.kernel.TukeyHanning.name", "arch.covariance.kernel.TukeyHanning.opt_bandwidth", "arch.covariance.kernel.TukeyHanning.rate", "arch.covariance.kernel.TukeyParzen.bandwidth", "arch.covariance.kernel.TukeyParzen.bandwidth_scale", "arch.covariance.kernel.TukeyParzen.centered", "arch.covariance.kernel.TukeyParzen.cov", "arch.covariance.kernel.TukeyParzen.force_int", "arch.covariance.kernel.TukeyParzen.kernel_const", "arch.covariance.kernel.TukeyParzen.kernel_weights", "arch.covariance.kernel.TukeyParzen.name", "arch.covariance.kernel.TukeyParzen.opt_bandwidth", "arch.covariance.kernel.TukeyParzen.rate", "Introduction", "References", "arch.bootstrap.MCS", "arch.bootstrap.SPA", "arch.bootstrap.StepM", "arch.bootstrap.MCS.compute", "arch.bootstrap.MCS.excluded", "arch.bootstrap.MCS.included", "arch.bootstrap.MCS.pvalues", "arch.bootstrap.MCS.reset", "arch.bootstrap.MCS.seed", "arch.bootstrap.SPA.better_models", "arch.bootstrap.SPA.compute", "arch.bootstrap.SPA.critical_values", "arch.bootstrap.SPA.pvalues", "arch.bootstrap.SPA.reset", "arch.bootstrap.SPA.seed", "arch.bootstrap.SPA.subset", "arch.bootstrap.StepM.compute", "arch.bootstrap.StepM.reset", "arch.bootstrap.StepM.seed", "arch.bootstrap.StepM.superior_models", "Module Reference", "Multiple Comparisons", "Multiple Comparison Procedures", "Cointegration Tests", "arch.unitroot.ADF", "arch.unitroot.DFGLS", "arch.unitroot.KPSS", "arch.unitroot.PhillipsPerron", "arch.unitroot.VarianceRatio", "arch.unitroot.ZivotAndrews", "arch.unitroot.auto_bandwidth", "arch.unitroot.cointegration.CanonicalCointegratingReg", "arch.unitroot.cointegration.CointegrationAnalysisResults", "arch.unitroot.cointegration.DynamicOLS", "arch.unitroot.cointegration.DynamicOLSResults", "arch.unitroot.cointegration.EngleGrangerTestResults", "arch.unitroot.cointegration.FullyModifiedOLS", "arch.unitroot.cointegration.PhillipsOuliarisTestResults", "arch.unitroot.cointegration.engle_granger", "arch.unitroot.cointegration.phillips_ouliaris", "arch.unitroot.ADF.alternative_hypothesis", "arch.unitroot.ADF.critical_values", "arch.unitroot.ADF.lags", "arch.unitroot.ADF.max_lags", "arch.unitroot.ADF.nobs", "arch.unitroot.ADF.null_hypothesis", "arch.unitroot.ADF.pvalue", "arch.unitroot.ADF.regression", "arch.unitroot.ADF.stat", "arch.unitroot.ADF.summary", "arch.unitroot.ADF.trend", "arch.unitroot.ADF.valid_trends", "arch.unitroot.ADF.y", "arch.unitroot.DFGLS.alternative_hypothesis", "arch.unitroot.DFGLS.critical_values", "arch.unitroot.DFGLS.lags", "arch.unitroot.DFGLS.max_lags", "arch.unitroot.DFGLS.nobs", "arch.unitroot.DFGLS.null_hypothesis", "arch.unitroot.DFGLS.pvalue", "arch.unitroot.DFGLS.regression", "arch.unitroot.DFGLS.stat", "arch.unitroot.DFGLS.summary", "arch.unitroot.DFGLS.trend", "arch.unitroot.DFGLS.valid_trends", "arch.unitroot.DFGLS.y", "arch.unitroot.KPSS.alternative_hypothesis", "arch.unitroot.KPSS.critical_values", "arch.unitroot.KPSS.lags", "arch.unitroot.KPSS.nobs", "arch.unitroot.KPSS.null_hypothesis", "arch.unitroot.KPSS.pvalue", "arch.unitroot.KPSS.stat", "arch.unitroot.KPSS.summary", "arch.unitroot.KPSS.trend", "arch.unitroot.KPSS.valid_trends", "arch.unitroot.KPSS.y", "arch.unitroot.PhillipsPerron.alternative_hypothesis", "arch.unitroot.PhillipsPerron.critical_values", "arch.unitroot.PhillipsPerron.lags", "arch.unitroot.PhillipsPerron.nobs", "arch.unitroot.PhillipsPerron.null_hypothesis", "arch.unitroot.PhillipsPerron.pvalue", "arch.unitroot.PhillipsPerron.regression", "arch.unitroot.PhillipsPerron.stat", "arch.unitroot.PhillipsPerron.summary", "arch.unitroot.PhillipsPerron.test_type", "arch.unitroot.PhillipsPerron.trend", "arch.unitroot.PhillipsPerron.valid_trends", "arch.unitroot.PhillipsPerron.y", "arch.unitroot.VarianceRatio.alternative_hypothesis", "arch.unitroot.VarianceRatio.critical_values", "arch.unitroot.VarianceRatio.debiased", "arch.unitroot.VarianceRatio.lags", "arch.unitroot.VarianceRatio.nobs", "arch.unitroot.VarianceRatio.null_hypothesis", "arch.unitroot.VarianceRatio.overlap", "arch.unitroot.VarianceRatio.pvalue", "arch.unitroot.VarianceRatio.robust", "arch.unitroot.VarianceRatio.stat", "arch.unitroot.VarianceRatio.summary", "arch.unitroot.VarianceRatio.trend", "arch.unitroot.VarianceRatio.valid_trends", "arch.unitroot.VarianceRatio.vr", "arch.unitroot.VarianceRatio.y", "arch.unitroot.ZivotAndrews.alternative_hypothesis", "arch.unitroot.ZivotAndrews.critical_values", "arch.unitroot.ZivotAndrews.lags", "arch.unitroot.ZivotAndrews.nobs", "arch.unitroot.ZivotAndrews.null_hypothesis", "arch.unitroot.ZivotAndrews.pvalue", "arch.unitroot.ZivotAndrews.stat", "arch.unitroot.ZivotAndrews.summary", "arch.unitroot.ZivotAndrews.trend", "arch.unitroot.ZivotAndrews.valid_trends", "arch.unitroot.ZivotAndrews.y", "arch.unitroot.cointegration.CanonicalCointegratingReg.fit", "arch.unitroot.cointegration.CointegrationAnalysisResults.bandwidth", "arch.unitroot.cointegration.CointegrationAnalysisResults.cov", "arch.unitroot.cointegration.CointegrationAnalysisResults.kernel", "arch.unitroot.cointegration.CointegrationAnalysisResults.long_run_variance", "arch.unitroot.cointegration.CointegrationAnalysisResults.params", "arch.unitroot.cointegration.CointegrationAnalysisResults.pvalues", "arch.unitroot.cointegration.CointegrationAnalysisResults.resid", "arch.unitroot.cointegration.CointegrationAnalysisResults.residual_variance", "arch.unitroot.cointegration.CointegrationAnalysisResults.rsquared", "arch.unitroot.cointegration.CointegrationAnalysisResults.rsquared_adj", "arch.unitroot.cointegration.CointegrationAnalysisResults.std_errors", "arch.unitroot.cointegration.CointegrationAnalysisResults.summary", "arch.unitroot.cointegration.CointegrationAnalysisResults.tvalues", "arch.unitroot.cointegration.DynamicOLS.fit", "arch.unitroot.cointegration.DynamicOLSResults.bandwidth", "arch.unitroot.cointegration.DynamicOLSResults.cov", "arch.unitroot.cointegration.DynamicOLSResults.cov_type", "arch.unitroot.cointegration.DynamicOLSResults.full_cov", "arch.unitroot.cointegration.DynamicOLSResults.full_params", "arch.unitroot.cointegration.DynamicOLSResults.kernel", "arch.unitroot.cointegration.DynamicOLSResults.lags", "arch.unitroot.cointegration.DynamicOLSResults.leads", "arch.unitroot.cointegration.DynamicOLSResults.long_run_variance", "arch.unitroot.cointegration.DynamicOLSResults.params", "arch.unitroot.cointegration.DynamicOLSResults.pvalues", "arch.unitroot.cointegration.DynamicOLSResults.resid", "arch.unitroot.cointegration.DynamicOLSResults.residual_variance", "arch.unitroot.cointegration.DynamicOLSResults.rsquared", "arch.unitroot.cointegration.DynamicOLSResults.rsquared_adj", "arch.unitroot.cointegration.DynamicOLSResults.std_errors", "arch.unitroot.cointegration.DynamicOLSResults.summary", "arch.unitroot.cointegration.DynamicOLSResults.tvalues", "arch.unitroot.cointegration.EngleGrangerTestResults.alternative_hypothesis", "arch.unitroot.cointegration.EngleGrangerTestResults.cointegrating_vector", "arch.unitroot.cointegration.EngleGrangerTestResults.critical_values", "arch.unitroot.cointegration.EngleGrangerTestResults.distribution_order", "arch.unitroot.cointegration.EngleGrangerTestResults.lags", "arch.unitroot.cointegration.EngleGrangerTestResults.max_lags", "arch.unitroot.cointegration.EngleGrangerTestResults.name", "arch.unitroot.cointegration.EngleGrangerTestResults.null_hypothesis", "arch.unitroot.cointegration.EngleGrangerTestResults.plot", "arch.unitroot.cointegration.EngleGrangerTestResults.pvalue", "arch.unitroot.cointegration.EngleGrangerTestResults.resid", "arch.unitroot.cointegration.EngleGrangerTestResults.rho", "arch.unitroot.cointegration.EngleGrangerTestResults.stat", "arch.unitroot.cointegration.EngleGrangerTestResults.summary", "arch.unitroot.cointegration.EngleGrangerTestResults.trend", "arch.unitroot.cointegration.FullyModifiedOLS.fit", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.alternative_hypothesis", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.bandwidth", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.cointegrating_vector", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.critical_values", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.distribution_order", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.kernel", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.name", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.null_hypothesis", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.plot", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.pvalue", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.resid", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.stat", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.summary", "arch.unitroot.cointegration.PhillipsOuliarisTestResults.trend", "Introduction", "The Unit Root Tests", "Unit Root Testing", "Cointegration Testing", "Unit Root Testing", "Theoretical Background", "Distributions", "Forecasting", "arch.univariate.APARCH", "arch.univariate.ARCH", "arch.univariate.ARCHInMean", "arch.univariate.ARX", "arch.univariate.ConstantMean", "arch.univariate.ConstantVariance", "arch.univariate.EGARCH", "arch.univariate.EWMAVariance", "arch.univariate.FIGARCH", "arch.univariate.FixedVariance", "arch.univariate.GARCH", "arch.univariate.GeneralizedError", "arch.univariate.HARCH", "arch.univariate.HARX", "arch.univariate.LS", "arch.univariate.MIDASHyperbolic", "arch.univariate.Normal", "arch.univariate.RiskMetrics2006", "arch.univariate.SkewStudent", "arch.univariate.StudentsT", "arch.univariate.ZeroMean", "arch.univariate.base.ARCHModel", "arch.univariate.base.ARCHModelFixedResult", "arch.univariate.base.ARCHModelForecast", "arch.univariate.base.ARCHModelForecastSimulation", "arch.univariate.base.ARCHModelResult", "arch.univariate.distribution.Distribution", "arch.univariate.recursions_python.VolatilityUpdater", "arch.univariate.volatility.VolatilityProcess", "arch.univariate.APARCH.backcast", "arch.univariate.APARCH.backcast_transform", "arch.univariate.APARCH.bounds", "arch.univariate.APARCH.common_asym", "arch.univariate.APARCH.compute_variance", "arch.univariate.APARCH.constraints", "arch.univariate.APARCH.delta", "arch.univariate.APARCH.forecast", "arch.univariate.APARCH.name", "arch.univariate.APARCH.num_params", "arch.univariate.APARCH.parameter_names", "arch.univariate.APARCH.simulate", "arch.univariate.APARCH.start", "arch.univariate.APARCH.starting_values", "arch.univariate.APARCH.stop", "arch.univariate.APARCH.update", "arch.univariate.APARCH.updateable", "arch.univariate.APARCH.variance_bounds", "arch.univariate.APARCH.volatility_updater", "arch.univariate.ARCH.backcast", "arch.univariate.ARCH.backcast_transform", "arch.univariate.ARCH.bounds", "arch.univariate.ARCH.compute_variance", "arch.univariate.ARCH.constraints", "arch.univariate.ARCH.forecast", "arch.univariate.ARCH.name", "arch.univariate.ARCH.num_params", "arch.univariate.ARCH.parameter_names", "arch.univariate.ARCH.simulate", "arch.univariate.ARCH.start", "arch.univariate.ARCH.starting_values", "arch.univariate.ARCH.stop", "arch.univariate.ARCH.update", "arch.univariate.ARCH.updateable", "arch.univariate.ARCH.variance_bounds", "arch.univariate.ARCH.volatility_updater", "arch.univariate.ARCHInMean.bounds", "arch.univariate.ARCHInMean.compute_param_cov", "arch.univariate.ARCHInMean.constraints", "arch.univariate.ARCHInMean.distribution", "arch.univariate.ARCHInMean.fit", "arch.univariate.ARCHInMean.fix", "arch.univariate.ARCHInMean.forecast", "arch.univariate.ARCHInMean.form", "arch.univariate.ARCHInMean.name", "arch.univariate.ARCHInMean.num_params", "arch.univariate.ARCHInMean.parameter_names", "arch.univariate.ARCHInMean.resids", "arch.univariate.ARCHInMean.simulate", "arch.univariate.ARCHInMean.starting_values", "arch.univariate.ARCHInMean.volatility", "arch.univariate.ARCHInMean.x", "arch.univariate.ARCHInMean.y", "arch.univariate.ARX.bounds", "arch.univariate.ARX.compute_param_cov", "arch.univariate.ARX.constraints", "arch.univariate.ARX.distribution", "arch.univariate.ARX.fit", "arch.univariate.ARX.fix", "arch.univariate.ARX.forecast", "arch.univariate.ARX.name", "arch.univariate.ARX.num_params", "arch.univariate.ARX.parameter_names", "arch.univariate.ARX.resids", "arch.univariate.ARX.simulate", "arch.univariate.ARX.starting_values", "arch.univariate.ARX.volatility", "arch.univariate.ARX.x", "arch.univariate.ARX.y", "arch.univariate.ConstantMean.bounds", "arch.univariate.ConstantMean.compute_param_cov", "arch.univariate.ConstantMean.constraints", "arch.univariate.ConstantMean.distribution", "arch.univariate.ConstantMean.fit", "arch.univariate.ConstantMean.fix", "arch.univariate.ConstantMean.forecast", "arch.univariate.ConstantMean.name", "arch.univariate.ConstantMean.num_params", "arch.univariate.ConstantMean.parameter_names", "arch.univariate.ConstantMean.resids", "arch.univariate.ConstantMean.simulate", "arch.univariate.ConstantMean.starting_values", "arch.univariate.ConstantMean.volatility", "arch.univariate.ConstantMean.x", "arch.univariate.ConstantMean.y", "arch.univariate.ConstantVariance.backcast", "arch.univariate.ConstantVariance.backcast_transform", "arch.univariate.ConstantVariance.bounds", "arch.univariate.ConstantVariance.compute_variance", "arch.univariate.ConstantVariance.constraints", "arch.univariate.ConstantVariance.forecast", "arch.univariate.ConstantVariance.name", "arch.univariate.ConstantVariance.num_params", "arch.univariate.ConstantVariance.parameter_names", "arch.univariate.ConstantVariance.simulate", "arch.univariate.ConstantVariance.start", "arch.univariate.ConstantVariance.starting_values", "arch.univariate.ConstantVariance.stop", "arch.univariate.ConstantVariance.update", "arch.univariate.ConstantVariance.updateable", "arch.univariate.ConstantVariance.variance_bounds", "arch.univariate.ConstantVariance.volatility_updater", "arch.univariate.EGARCH.backcast", "arch.univariate.EGARCH.backcast_transform", "arch.univariate.EGARCH.bounds", "arch.univariate.EGARCH.compute_variance", "arch.univariate.EGARCH.constraints", "arch.univariate.EGARCH.forecast", "arch.univariate.EGARCH.name", "arch.univariate.EGARCH.num_params", "arch.univariate.EGARCH.parameter_names", "arch.univariate.EGARCH.simulate", "arch.univariate.EGARCH.start", "arch.univariate.EGARCH.starting_values", "arch.univariate.EGARCH.stop", "arch.univariate.EGARCH.update", "arch.univariate.EGARCH.updateable", "arch.univariate.EGARCH.variance_bounds", "arch.univariate.EGARCH.volatility_updater", "arch.univariate.EWMAVariance.backcast", "arch.univariate.EWMAVariance.backcast_transform", "arch.univariate.EWMAVariance.bounds", "arch.univariate.EWMAVariance.compute_variance", "arch.univariate.EWMAVariance.constraints", "arch.univariate.EWMAVariance.forecast", "arch.univariate.EWMAVariance.name", "arch.univariate.EWMAVariance.num_params", "arch.univariate.EWMAVariance.parameter_names", "arch.univariate.EWMAVariance.simulate", "arch.univariate.EWMAVariance.start", "arch.univariate.EWMAVariance.starting_values", "arch.univariate.EWMAVariance.stop", "arch.univariate.EWMAVariance.update", "arch.univariate.EWMAVariance.updateable", "arch.univariate.EWMAVariance.variance_bounds", "arch.univariate.EWMAVariance.volatility_updater", "arch.univariate.FIGARCH.backcast", "arch.univariate.FIGARCH.backcast_transform", "arch.univariate.FIGARCH.bounds", "arch.univariate.FIGARCH.compute_variance", "arch.univariate.FIGARCH.constraints", "arch.univariate.FIGARCH.forecast", "arch.univariate.FIGARCH.name", "arch.univariate.FIGARCH.num_params", "arch.univariate.FIGARCH.parameter_names", "arch.univariate.FIGARCH.simulate", "arch.univariate.FIGARCH.start", "arch.univariate.FIGARCH.starting_values", "arch.univariate.FIGARCH.stop", "arch.univariate.FIGARCH.truncation", "arch.univariate.FIGARCH.update", "arch.univariate.FIGARCH.updateable", "arch.univariate.FIGARCH.variance_bounds", "arch.univariate.FIGARCH.volatility_updater", "arch.univariate.FixedVariance.backcast", "arch.univariate.FixedVariance.backcast_transform", "arch.univariate.FixedVariance.bounds", "arch.univariate.FixedVariance.compute_variance", "arch.univariate.FixedVariance.constraints", "arch.univariate.FixedVariance.forecast", "arch.univariate.FixedVariance.name", "arch.univariate.FixedVariance.num_params", "arch.univariate.FixedVariance.parameter_names", "arch.univariate.FixedVariance.simulate", "arch.univariate.FixedVariance.start", "arch.univariate.FixedVariance.starting_values", "arch.univariate.FixedVariance.stop", "arch.univariate.FixedVariance.update", "arch.univariate.FixedVariance.updateable", "arch.univariate.FixedVariance.variance_bounds", "arch.univariate.FixedVariance.volatility_updater", "arch.univariate.GARCH.backcast", "arch.univariate.GARCH.backcast_transform", "arch.univariate.GARCH.bounds", "arch.univariate.GARCH.compute_variance", "arch.univariate.GARCH.constraints", "arch.univariate.GARCH.forecast", "arch.univariate.GARCH.name", "arch.univariate.GARCH.num_params", "arch.univariate.GARCH.parameter_names", "arch.univariate.GARCH.simulate", "arch.univariate.GARCH.start", "arch.univariate.GARCH.starting_values", "arch.univariate.GARCH.stop", "arch.univariate.GARCH.update", "arch.univariate.GARCH.updateable", "arch.univariate.GARCH.variance_bounds", "arch.univariate.GARCH.volatility_updater", "arch.univariate.GeneralizedError.bounds", "arch.univariate.GeneralizedError.cdf", "arch.univariate.GeneralizedError.constraints", "arch.univariate.GeneralizedError.generator", "arch.univariate.GeneralizedError.loglikelihood", "arch.univariate.GeneralizedError.moment", "arch.univariate.GeneralizedError.name", "arch.univariate.GeneralizedError.parameter_names", "arch.univariate.GeneralizedError.partial_moment", "arch.univariate.GeneralizedError.ppf", "arch.univariate.GeneralizedError.random_state", "arch.univariate.GeneralizedError.simulate", "arch.univariate.GeneralizedError.starting_values", "arch.univariate.HARCH.backcast", "arch.univariate.HARCH.backcast_transform", "arch.univariate.HARCH.bounds", "arch.univariate.HARCH.compute_variance", "arch.univariate.HARCH.constraints", "arch.univariate.HARCH.forecast", "arch.univariate.HARCH.name", "arch.univariate.HARCH.num_params", "arch.univariate.HARCH.parameter_names", "arch.univariate.HARCH.simulate", "arch.univariate.HARCH.start", "arch.univariate.HARCH.starting_values", "arch.univariate.HARCH.stop", "arch.univariate.HARCH.update", "arch.univariate.HARCH.updateable", "arch.univariate.HARCH.variance_bounds", "arch.univariate.HARCH.volatility_updater", "arch.univariate.HARX.bounds", "arch.univariate.HARX.compute_param_cov", "arch.univariate.HARX.constraints", "arch.univariate.HARX.distribution", "arch.univariate.HARX.fit", "arch.univariate.HARX.fix", "arch.univariate.HARX.forecast", "arch.univariate.HARX.name", "arch.univariate.HARX.num_params", "arch.univariate.HARX.parameter_names", "arch.univariate.HARX.resids", "arch.univariate.HARX.simulate", "arch.univariate.HARX.starting_values", "arch.univariate.HARX.volatility", "arch.univariate.HARX.x", "arch.univariate.HARX.y", "arch.univariate.LS.bounds", "arch.univariate.LS.compute_param_cov", "arch.univariate.LS.constraints", "arch.univariate.LS.distribution", "arch.univariate.LS.fit", "arch.univariate.LS.fix", "arch.univariate.LS.forecast", "arch.univariate.LS.name", "arch.univariate.LS.num_params", "arch.univariate.LS.parameter_names", "arch.univariate.LS.resids", "arch.univariate.LS.simulate", "arch.univariate.LS.starting_values", "arch.univariate.LS.volatility", "arch.univariate.LS.x", "arch.univariate.LS.y", "arch.univariate.MIDASHyperbolic.backcast", "arch.univariate.MIDASHyperbolic.backcast_transform", "arch.univariate.MIDASHyperbolic.bounds", "arch.univariate.MIDASHyperbolic.compute_variance", "arch.univariate.MIDASHyperbolic.constraints", "arch.univariate.MIDASHyperbolic.forecast", "arch.univariate.MIDASHyperbolic.name", "arch.univariate.MIDASHyperbolic.num_params", "arch.univariate.MIDASHyperbolic.parameter_names", "arch.univariate.MIDASHyperbolic.simulate", "arch.univariate.MIDASHyperbolic.start", "arch.univariate.MIDASHyperbolic.starting_values", "arch.univariate.MIDASHyperbolic.stop", "arch.univariate.MIDASHyperbolic.update", "arch.univariate.MIDASHyperbolic.updateable", "arch.univariate.MIDASHyperbolic.variance_bounds", "arch.univariate.MIDASHyperbolic.volatility_updater", "arch.univariate.Normal.bounds", "arch.univariate.Normal.cdf", "arch.univariate.Normal.constraints", "arch.univariate.Normal.generator", "arch.univariate.Normal.loglikelihood", "arch.univariate.Normal.moment", "arch.univariate.Normal.name", "arch.univariate.Normal.parameter_names", "arch.univariate.Normal.partial_moment", "arch.univariate.Normal.ppf", "arch.univariate.Normal.random_state", "arch.univariate.Normal.simulate", "arch.univariate.Normal.starting_values", "arch.univariate.RiskMetrics2006.backcast", "arch.univariate.RiskMetrics2006.backcast_transform", "arch.univariate.RiskMetrics2006.bounds", "arch.univariate.RiskMetrics2006.compute_variance", "arch.univariate.RiskMetrics2006.constraints", "arch.univariate.RiskMetrics2006.forecast", "arch.univariate.RiskMetrics2006.name", "arch.univariate.RiskMetrics2006.num_params", "arch.univariate.RiskMetrics2006.parameter_names", "arch.univariate.RiskMetrics2006.simulate", "arch.univariate.RiskMetrics2006.start", "arch.univariate.RiskMetrics2006.starting_values", "arch.univariate.RiskMetrics2006.stop", "arch.univariate.RiskMetrics2006.update", "arch.univariate.RiskMetrics2006.updateable", "arch.univariate.RiskMetrics2006.variance_bounds", "arch.univariate.RiskMetrics2006.volatility_updater", "arch.univariate.SkewStudent.bounds", "arch.univariate.SkewStudent.cdf", "arch.univariate.SkewStudent.constraints", "arch.univariate.SkewStudent.generator", "arch.univariate.SkewStudent.loglikelihood", "arch.univariate.SkewStudent.moment", "arch.univariate.SkewStudent.name", "arch.univariate.SkewStudent.parameter_names", "arch.univariate.SkewStudent.partial_moment", "arch.univariate.SkewStudent.ppf", "arch.univariate.SkewStudent.random_state", "arch.univariate.SkewStudent.simulate", "arch.univariate.SkewStudent.starting_values", "arch.univariate.StudentsT.bounds", "arch.univariate.StudentsT.cdf", "arch.univariate.StudentsT.constraints", "arch.univariate.StudentsT.generator", "arch.univariate.StudentsT.loglikelihood", "arch.univariate.StudentsT.moment", "arch.univariate.StudentsT.name", "arch.univariate.StudentsT.parameter_names", "arch.univariate.StudentsT.partial_moment", "arch.univariate.StudentsT.ppf", "arch.univariate.StudentsT.random_state", "arch.univariate.StudentsT.simulate", "arch.univariate.StudentsT.starting_values", "arch.univariate.ZeroMean.bounds", "arch.univariate.ZeroMean.compute_param_cov", "arch.univariate.ZeroMean.constraints", "arch.univariate.ZeroMean.distribution", "arch.univariate.ZeroMean.fit", "arch.univariate.ZeroMean.fix", "arch.univariate.ZeroMean.forecast", "arch.univariate.ZeroMean.name", "arch.univariate.ZeroMean.num_params", "arch.univariate.ZeroMean.parameter_names", "arch.univariate.ZeroMean.resids", "arch.univariate.ZeroMean.simulate", "arch.univariate.ZeroMean.starting_values", "arch.univariate.ZeroMean.volatility", "arch.univariate.ZeroMean.x", "arch.univariate.ZeroMean.y", "arch.univariate.base.ARCHModel.bounds", "arch.univariate.base.ARCHModel.compute_param_cov", "arch.univariate.base.ARCHModel.constraints", "arch.univariate.base.ARCHModel.distribution", "arch.univariate.base.ARCHModel.fit", "arch.univariate.base.ARCHModel.fix", "arch.univariate.base.ARCHModel.forecast", "arch.univariate.base.ARCHModel.name", "arch.univariate.base.ARCHModel.num_params", "arch.univariate.base.ARCHModel.parameter_names", "arch.univariate.base.ARCHModel.resids", "arch.univariate.base.ARCHModel.simulate", "arch.univariate.base.ARCHModel.starting_values", "arch.univariate.base.ARCHModel.volatility", "arch.univariate.base.ARCHModel.y", "arch.univariate.base.ARCHModelFixedResult.aic", "arch.univariate.base.ARCHModelFixedResult.arch_lm_test", "arch.univariate.base.ARCHModelFixedResult.bic", "arch.univariate.base.ARCHModelFixedResult.conditional_volatility", "arch.univariate.base.ARCHModelFixedResult.forecast", "arch.univariate.base.ARCHModelFixedResult.hedgehog_plot", "arch.univariate.base.ARCHModelFixedResult.loglikelihood", "arch.univariate.base.ARCHModelFixedResult.model", "arch.univariate.base.ARCHModelFixedResult.nobs", "arch.univariate.base.ARCHModelFixedResult.num_params", "arch.univariate.base.ARCHModelFixedResult.params", "arch.univariate.base.ARCHModelFixedResult.plot", "arch.univariate.base.ARCHModelFixedResult.resid", "arch.univariate.base.ARCHModelFixedResult.std_resid", "arch.univariate.base.ARCHModelFixedResult.summary", "arch.univariate.base.ARCHModelForecast.mean", "arch.univariate.base.ARCHModelForecast.residual_variance", "arch.univariate.base.ARCHModelForecast.simulations", "arch.univariate.base.ARCHModelForecast.variance", "arch.univariate.base.ARCHModelForecastSimulation.index", "arch.univariate.base.ARCHModelForecastSimulation.residual_variances", "arch.univariate.base.ARCHModelForecastSimulation.residuals", "arch.univariate.base.ARCHModelForecastSimulation.values", "arch.univariate.base.ARCHModelForecastSimulation.variances", "arch.univariate.base.ARCHModelResult.aic", "arch.univariate.base.ARCHModelResult.arch_lm_test", "arch.univariate.base.ARCHModelResult.bic", "arch.univariate.base.ARCHModelResult.conditional_volatility", "arch.univariate.base.ARCHModelResult.conf_int", "arch.univariate.base.ARCHModelResult.convergence_flag", "arch.univariate.base.ARCHModelResult.fit_start", "arch.univariate.base.ARCHModelResult.fit_stop", "arch.univariate.base.ARCHModelResult.forecast", "arch.univariate.base.ARCHModelResult.hedgehog_plot", "arch.univariate.base.ARCHModelResult.loglikelihood", "arch.univariate.base.ARCHModelResult.model", "arch.univariate.base.ARCHModelResult.nobs", "arch.univariate.base.ARCHModelResult.num_params", "arch.univariate.base.ARCHModelResult.optimization_result", "arch.univariate.base.ARCHModelResult.param_cov", "arch.univariate.base.ARCHModelResult.params", "arch.univariate.base.ARCHModelResult.plot", "arch.univariate.base.ARCHModelResult.pvalues", "arch.univariate.base.ARCHModelResult.resid", "arch.univariate.base.ARCHModelResult.rsquared", "arch.univariate.base.ARCHModelResult.rsquared_adj", "arch.univariate.base.ARCHModelResult.scale", "arch.univariate.base.ARCHModelResult.std_err", "arch.univariate.base.ARCHModelResult.std_resid", "arch.univariate.base.ARCHModelResult.summary", "arch.univariate.base.ARCHModelResult.tvalues", "arch.univariate.distribution.Distribution.bounds", "arch.univariate.distribution.Distribution.cdf", "arch.univariate.distribution.Distribution.constraints", "arch.univariate.distribution.Distribution.generator", "arch.univariate.distribution.Distribution.loglikelihood", "arch.univariate.distribution.Distribution.moment", "arch.univariate.distribution.Distribution.name", "arch.univariate.distribution.Distribution.parameter_names", "arch.univariate.distribution.Distribution.partial_moment", "arch.univariate.distribution.Distribution.ppf", "arch.univariate.distribution.Distribution.random_state", "arch.univariate.distribution.Distribution.simulate", "arch.univariate.distribution.Distribution.starting_values", "arch.univariate.recursions_python.VolatilityUpdater.initialize_update", "arch.univariate.recursions_python.VolatilityUpdater.update", "arch.univariate.volatility.VolatilityProcess.backcast", "arch.univariate.volatility.VolatilityProcess.backcast_transform", "arch.univariate.volatility.VolatilityProcess.bounds", "arch.univariate.volatility.VolatilityProcess.compute_variance", "arch.univariate.volatility.VolatilityProcess.constraints", "arch.univariate.volatility.VolatilityProcess.forecast", "arch.univariate.volatility.VolatilityProcess.name", "arch.univariate.volatility.VolatilityProcess.num_params", "arch.univariate.volatility.VolatilityProcess.parameter_names", "arch.univariate.volatility.VolatilityProcess.simulate", "arch.univariate.volatility.VolatilityProcess.start", "arch.univariate.volatility.VolatilityProcess.starting_values", "arch.univariate.volatility.VolatilityProcess.stop", "arch.univariate.volatility.VolatilityProcess.update", "arch.univariate.volatility.VolatilityProcess.updateable", "arch.univariate.volatility.VolatilityProcess.variance_bounds", "arch.univariate.volatility.VolatilityProcess.volatility_updater", "Introduction to ARCH Models", "Mean Models", "Model Results", "Univariate Volatility Models", "Forecasting with Exogenous Regressors", "Using the Fixed Variance process", "Volatility Forecasting", "ARCH Modeling", "Volatility Scenarios", "Utilities", "Volatility Processes"], "titleterms": {"": 899, "0": [91, 96, 97, 98], "1": [91, 92, 93, 95, 96, 97], "10": 95, "11": 95, "12": 95, "13": 95, "14": 95, "15": 95, "16": 95, "17": 95, "18": 95, "19": 95, "2": [91, 93, 95, 96, 97], "3": [91, 94, 95, 96, 97], "4": [95, 96], "5": [95, 96], "6": [91, 95, 97], "7": [95, 98], "8": 95, "9": 95, "The": [3, 87, 260, 419], "abil": [259, 260], "acceler": 4, "across": 900, "adf": [263, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291], "aic": [809, 833], "also": [5, 6, 7, 8, 9, 10, 100, 103, 104, 116, 126, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 241, 277, 278, 369], "altern": [89, 898], "alternative_hypothesi": [279, 292, 305, 316, 329, 344, 388, 404], "an": 896, "analysi": 420, "analyt": [425, 898], "andrew": [100, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 422], "aparch": [426, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473], "api": 0, "appli": [11, 26, 41, 56, 71], "approxim": 4, "arch": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 899], "arch_lm_test": [810, 834], "archinmean": [428, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507], "archmodel": [447, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808], "archmodelfixedresult": [448, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823], "archmodelforecast": [449, 824, 825, 826, 827], "archmodelforecastsimul": [450, 828, 829, 830, 831, 832], "archmodelresult": [451, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859], "arrai": 896, "arx": [429, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523], "asymptot": 4, "augment": 422, "auto_bandwidth": 269, "automat": 419, "backcast": [455, 474, 540, 557, 574, 591, 609, 626, 656, 705, 735, 875], "backcast_transform": [456, 475, 541, 558, 575, 592, 610, 627, 657, 706, 736, 876], "background": 423, "bandwidth": [113, 123, 137, 147, 157, 167, 177, 187, 197, 207, 217, 227, 356, 370, 405, 419], "bandwidth_scal": [114, 124, 138, 148, 158, 168, 178, 188, 198, 208, 218, 228], "bartlett": [101, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132], "base": [447, 448, 449, 450, 451, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859], "basic": [4, 418, 898], "bc": 4, "bca": 4, "better_model": 248, "bia": 4, "bic": [811, 835], "block": [0, 3], "bootstrap": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 89, 90, 96, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 425, 898, 900], "bound": [457, 476, 491, 508, 524, 542, 559, 576, 593, 611, 628, 643, 658, 673, 689, 707, 722, 737, 752, 765, 778, 794, 860, 877], "build": 899, "canonicalcointegratingreg": [270, 355], "case": 896, "cdf": [644, 723, 753, 766, 861], "center": [115, 125, 139, 149, 159, 169, 179, 189, 199, 209, 219, 229], "chang": [91, 96], "check": 259, "circularblockbootstrap": [5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "citat": 237, "class": [262, 425], "clone": [13, 28, 43, 58, 73], "cointegr": [0, 262, 270, 271, 272, 273, 274, 275, 276, 277, 278, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421], "cointegrating_vector": [389, 406], "cointegrationanalysisresult": [271, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368], "common": 899, "common_asym": 458, "compar": 900, "comparison": [0, 260, 261], "compon": 899, "comput": [242, 249, 255], "compute_param_cov": [492, 509, 525, 674, 690, 779, 795], "compute_vari": [459, 477, 543, 560, 577, 594, 612, 629, 659, 708, 738, 878], "conditional_volatil": [812, 836], "conf_int": [14, 29, 44, 59, 74, 837], "confid": [4, 259, 260], "constant": 899, "constantmean": [430, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539], "constantvari": [431, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556], "constraint": [460, 478, 493, 510, 526, 544, 561, 578, 595, 613, 630, 645, 660, 675, 691, 709, 724, 739, 754, 767, 780, 796, 862, 879], "construct": 87, "constructor": 892, "convergence_flag": 838, "correct": 4, "cov": [4, 15, 30, 45, 60, 75, 116, 126, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 357, 371], "cov_typ": 372, "covari": [0, 88, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236], "covarianceestim": [102, 133, 134, 135, 136], "critical_valu": [250, 280, 293, 306, 317, 330, 345, 390, 407], "crude": 899, "custom": 900, "d": 86, "data": [86, 896, 897, 898], "datafram": 896, "debias": [4, 331], "delta": 461, "design": 260, "determinist": 422, "dfgl": [264, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], "dickei": 422, "dict": 896, "differ": 900, "direct": 897, "directli": 3, "distribut": [0, 86, 424, 452, 494, 511, 527, 676, 692, 781, 797, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 899], "distribution_ord": [391, 408], "dynamicol": [272, 369], "dynamicolsresult": [273, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387], "egarch": [432, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573], "engle_grang": 277, "englegrangertestresult": [274, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402], "error": 899, "estim": [0, 3, 87, 88, 99, 262, 897], "ewmavari": [433, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590], "exampl": [3, 418], "exclud": 243, "exogen": 896, "extra_kwarg": 89, "figarch": [434, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608], "filter": 898, "fit": [3, 355, 369, 403, 495, 512, 528, 677, 693, 782, 798, 896], "fit_start": 839, "fit_stop": 840, "fix": [496, 513, 529, 678, 694, 783, 799, 897, 898, 899], "fixedvari": [435, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 897, 902], "force_int": [117, 127, 141, 151, 161, 171, 181, 191, 201, 211, 221, 231], "forecast": [425, 462, 479, 497, 514, 530, 545, 562, 579, 596, 614, 631, 661, 679, 695, 710, 740, 784, 800, 813, 841, 880, 896, 898], "form": 498, "from": 899, "full_cov": 373, "full_param": 374, "fuller": 422, "fullymodifiedol": [275, 403], "function": 3, "g": 893, "gallant": [103, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146], "garch": [436, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 899], "gener": [16, 31, 46, 61, 76, 646, 725, 755, 768, 863, 898, 900], "generalizederror": [437, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655], "get_stat": [17, 32, 47, 62, 77], "gjr": 899, "gl": 422, "hac": 0, "harch": [438, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672], "harx": [439, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688], "hedgehog_plot": [814, 842], "high": 0, "histor": 898, "i": 86, "ident": 86, "iidbootstrap": [6, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "includ": 244, "independ": 86, "independentsamplesbootstrap": [7, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "index": [18, 33, 48, 63, 78, 237, 828], "initi": 897, "initialize_upd": 873, "input": 896, "instead": 89, "interfac": 87, "interv": 4, "introduct": [237, 418, 892], "iter": 87, "kernel": [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 358, 375, 409], "kernel_const": [118, 128, 142, 152, 162, 172, 182, 192, 202, 212, 222, 232], "kernel_weight": [119, 129, 143, 153, 163, 173, 183, 193, 203, 213, 223, 233], "kpss": [265, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 422], "l": [440, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704], "lag": [281, 294, 307, 318, 332, 346, 376, 392, 422], "lead": 377, "length": [0, 3], "level": [0, 87], "log": 91, "loglikelihood": [647, 726, 756, 769, 815, 843, 864], "long": [0, 99], "long_run": 133, "long_run_vari": [359, 378], "low": 87, "max_lag": [282, 295, 393], "mc": [239, 242, 243, 244, 245, 246, 247, 259], "mean": [0, 824, 893, 897, 899], "method": [4, 89], "midashyperbol": [441, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721], "model": [0, 3, 96, 259, 260, 816, 844, 892, 893, 894, 895, 896, 897, 899], "modul": 259, "moment": [648, 727, 757, 770, 865], "movingblockbootstrap": [8, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], "multipl": [0, 259, 260, 261, 896], "name": [120, 130, 144, 154, 164, 174, 184, 194, 204, 214, 224, 234, 394, 410, 463, 480, 499, 515, 531, 546, 563, 580, 597, 615, 632, 649, 662, 680, 696, 711, 728, 741, 758, 771, 785, 801, 866, 881], "new": [424, 893, 902], "neweywest": [104, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156], "nob": [283, 296, 308, 319, 333, 347, 817, 845], "nonparametr": 4, "norm": 4, "normal": [4, 442, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734], "note": [4, 12, 15, 25, 27, 30, 40, 42, 45, 55, 57, 60, 70, 72, 75, 85, 88, 89, 98, 237], "null_hypothesi": [284, 297, 309, 320, 334, 348, 395, 411], "num_param": [464, 481, 500, 516, 532, 547, 564, 581, 598, 616, 633, 663, 681, 697, 712, 742, 786, 802, 818, 846, 882], "number": 422, "one_sid": 134, "one_sided_strict": 135, "opt_bandwidth": [121, 131, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235], "optim": 3, "optimal_block_length": 10, "optimization_result": 847, "option": 425, "ouliari": 421, "out": 896, "output": [422, 425], "overlap": 335, "param": [360, 379, 819, 849], "param_cov": 848, "paramet": [87, 899], "parameter_nam": [465, 482, 501, 517, 533, 548, 565, 582, 599, 617, 634, 650, 664, 682, 698, 713, 729, 743, 759, 772, 787, 803, 867, 883], "parameterless": 902, "parametr": [4, 89, 898], "partial": 89, "partial_mo": [651, 730, 760, 773, 868], "parzen": [105, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166], "parzencauchi": [106, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176], "parzengeometr": [107, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186], "parzenriesz": [108, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196], "past": 91, "path": 900, "percentil": 4, "perron": 422, "phillip": [421, 422], "phillips_ouliari": 278, "phillipsouliaristestresult": [276, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417], "phillipsperron": [266, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328], "plot": [396, 412, 820, 850, 896], "power": 260, "ppf": [652, 731, 761, 774, 869], "predict": [259, 260], "probit": 3, "procedur": 261, "process": [0, 897, 899, 902], "produc": 896, "pvalu": [245, 251, 285, 298, 310, 321, 336, 349, 361, 380, 397, 413, 851], "quadraticspectr": [109, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], "random": 900, "random_st": [19, 34, 49, 64, 79, 653, 732, 762, 775, 870], "rate": [122, 132, 146, 156, 166, 176, 186, 196, 206, 216, 226, 236], "ratio": [3, 422], "re": 897, "realiti": 259, "recurs": 898, "recursions_python": [453, 873, 874], "refer": [0, 1, 238, 259], "regress": [286, 299, 322, 422], "regressor": 896, "relationship": 0, "releas": [91, 95, 96, 97, 98], "reproduc": 3, "requir": 893, "reset": [20, 35, 50, 65, 80, 246, 252, 256], "resid": [362, 381, 398, 414, 502, 518, 534, 683, 699, 788, 804, 821, 852], "residu": 830, "residual_vari": [363, 382, 825, 829], "result": [99, 262, 894, 901], "rho": 399, "risk": 898, "riskmetrics2006": [443, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751], "robust": 337, "roll": 898, "root": [0, 96, 419, 420, 422], "rsquar": [364, 383, 853], "rsquared_adj": [365, 384, 854], "run": [0, 99], "sampl": [3, 86, 896], "scale": 855, "scenario": 900, "scheme": 898, "see": [5, 6, 7, 8, 9, 10, 100, 103, 104, 116, 126, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 241, 277, 278, 369], "seed": [21, 36, 51, 66, 81, 247, 253, 257], "select": [0, 419], "semi": 4, "semiparametr": 89, "seri": 90, "set": [259, 260, 422], "set_stat": [22, 37, 52, 67, 82], "setup": [4, 96, 422, 897, 899], "sharp": 3, "shock": 0, "short_run": 136, "simul": [425, 466, 483, 503, 519, 535, 549, 566, 583, 600, 618, 635, 654, 665, 684, 700, 714, 733, 744, 763, 776, 789, 805, 826, 871, 884, 896, 898, 899], "sinc": 96, "singl": 896, "size": 896, "skewstud": [444, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764], "spa": [240, 248, 249, 250, 251, 252, 253, 254, 259, 260], "special": [893, 896], "specif": 0, "specifi": 899, "speed": 3, "start": [467, 484, 550, 567, 584, 601, 619, 636, 666, 715, 745, 885], "starting_valu": [468, 485, 504, 520, 536, 551, 568, 585, 602, 620, 637, 655, 667, 685, 701, 716, 734, 746, 764, 777, 790, 806, 872, 886], "stat": [287, 300, 311, 323, 338, 350, 400, 415], "state": [23, 38, 53, 68, 83], "static": 896, "stationarybootstrap": [9, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85], "statsmodel": 3, "std_err": 856, "std_error": [366, 385], "std_resid": [822, 857], "stepm": [241, 255, 256, 257, 258, 259, 260], "stepwis": [259, 260], "stop": [469, 486, 552, 569, 586, 603, 621, 638, 668, 717, 747, 887], "student": [4, 899], "studentst": [445, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777], "studi": 260, "subset": 254, "summari": [288, 301, 312, 324, 339, 351, 367, 386, 401, 416, 823, 858], "superior": [259, 260], "superior_model": 258, "t": 899, "tarch": [898, 899], "term": 422, "test": [0, 259, 260, 262, 419, 420, 421, 422, 901], "test_typ": 325, "theoret": 423, "thing": 3, "time": 90, "trend": [289, 302, 313, 326, 340, 352, 402, 417], "truncat": 604, "tukeyham": [110, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "tukeyhan": [111, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "tukeyparzen": [112, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236], "tvalu": [368, 387, 859], "type": 4, "understand": 425, "uneven": 3, "unit": [0, 96, 419, 420, 422], "unitroot": [263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417], "univari": [426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 895], "up": 3, "updat": [470, 471, 487, 488, 553, 554, 570, 571, 587, 588, 605, 606, 622, 623, 639, 640, 669, 670, 718, 719, 748, 749, 874, 888, 889], "update_indic": [24, 39, 54, 69, 84], "us": [89, 896, 897], "util": 901, "valid_trend": [290, 303, 314, 327, 341, 353], "valu": [831, 896, 898], "var": [4, 25, 40, 55, 70, 85, 898], "variabl": 896, "varianc": [422, 827, 832, 897, 902], "variance_bound": [472, 489, 555, 572, 589, 607, 624, 641, 671, 720, 750, 890], "varianceratio": [267, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], "vector": 262, "version": [91, 92, 93, 94, 95, 96, 97, 98], "visual": 900, "volatil": [0, 96, 454, 505, 521, 537, 686, 702, 791, 807, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 895, 897, 898, 899, 900, 902], "volatility_updat": [473, 490, 556, 573, 590, 608, 625, 642, 672, 721, 751, 891], "volatilityprocess": [454, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891], "volatilityupdat": [453, 873, 874], "vr": 342, "warn": [3, 89], "window": 898, "wrapper": 3, "write": [424, 893, 902], "wti": 899, "x": [506, 522, 538, 687, 703, 792, 896], "y": [291, 304, 315, 328, 343, 354, 507, 523, 539, 688, 704, 793, 808], "year": 900, "zag": 897, "zarch": 899, "zeromean": [446, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793], "zig": 897, "zivot": 422, "zivotandrew": [268, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354]}})