dist: xenial
sudo: required

language: python

services:
  - xvfb

env:
  global:
    - COVERAGE=false
    - USE_NUMBA=true
    - STATSMODELS_MASTER=false
    - DOCBUILD=false
    - PYTEST_PATTERN="(not slow)"
    - secure: "dCvSzHmiqumrvQDQJXaPukd2TEituoUJTRJeBrLfEg0f1ZtAkoEcCudXuissODo1s/e+zClEhn3GRMGZc9QxKI0w8VHWeyMDHjFhyl4wubi35biUpXijYgs6IMqqdIo5oKcnMR6jG8uzuzPGDCpZh49+DgGU5E7rGHBgJ5Tdo8s="


matrix:
  fast_finish: true
  include:
  - python: 3.7
    env:
      - PYTHON=3.7
      - MATPLOTLIB=3
      - COVERAGE=true
      - ARCH_CYTHON_COVERAGE=true
  - python: 3.6
    env:
      - PYTHON=3.6
      - USE_NUMBA=false
      - MATPLOTLIB=3
      - COVERAGE=true
      - PYTEST_PATTERN="(slow or not slow)"
  - python: 3.5
    env:
      - PYTHON=3.5
      - COVERAGE=true
      - MATPLOTLIB=2
      - NUMPY=1.13
      - SCIPY=0.19
  - python: 3.6
    env:
      - PYTHON=3.6
      - NUMBA=0.38
      - NUMPY=1.14
      - SCIPY=1.0
      - MATPLOTLIB=2
      - PANDAS=0.22
      - STATSMODELS_MASTER=true
  - python: 3.6
    env:
      - PYTHON=3.6
      - DOCBUILD=true
      - MATPLOTLIB=3

before_install:
  - git fetch --tags
  - sudo apt-get -y install pandoc
  - wget http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda3.sh -nv
  - chmod +x miniconda3.sh
  - ./miniconda3.sh -b
  - export PATH=/home/travis/miniconda3/bin:$PATH
  - conda config --set always_yes true
  - conda update --all --quiet
  # Avoid noise from matplotlib
  - mkdir -p $HOME/.config/matplotlib
  # Build package list to avoid empty package=versions
  - PKGS="python=${PYTHON}"
  - PKGS="${PKGS} numpy"; if [[ -n ${NUMPY} ]]; then PKGS="${PKGS}=${NUMPY}"; fi;
  - PKGS="${PKGS} scipy"; if [[ -n ${SCIPY} ]]; then PKGS="${PKGS}=${SCIPY}"; fi;
  - PKGS="${PKGS} patsy"; if [[ -n ${PATSY} ]]; then PKGS="${PKGS}=${PATSY}"; fi;
  - PKGS="${PKGS} pandas"; if [[ -n ${PANDAS} ]]; then PKGS="${PKGS}=${PANDAS}"; fi;
  - PKGS="${PKGS} Cython"; if [[ -n ${CYTHON} ]]; then PKGS="${PKGS}=${CYTHON}"; fi;
  - if [[  -n ${MATPLOTLIB} ]]; then PKGS="${PKGS} matplotlib=${MATPLOTLIB} seaborn"; fi;
  - PKGS="${PKGS} statsmodels"; if [[ -n ${STATSMODELS} ]]; then PKGS="${PKGS}=${STATSMODELS}"; fi;
  - if [[ ${USE_NUMBA} = true ]]; then PKGS="${PKGS} numba"; if [[ -n ${NUMBA} ]]; then PKGS="${PKGS}=${NUMBA}";  fi; fi;
  - echo conda create --yes --quiet -n arch-test ${PKGS}
  - conda create --yes --quiet -n arch-test ${PKGS}
  - source activate arch-test
  - pip install cached_property flake8 pytest pytest-xdist pytest-cov coverage coveralls codecov nbformat nbconvert!=5.4 jupyter_client ipython jupyter -q
  - if [[ "$STATSMODELS_MASTER" == true ]]; then sh ./ci/statsmodels-master.sh; fi;
  - |
    if [[ "$DOCBUILD" == true ]]; then
      conda install sphinx ipython numpydoc jupyter seaborn
      pip install doctr nbsphinx sphinx_material -q
      sudo apt-get install -y enchant
      pip install sphinxcontrib-spelling
    fi
  - export SRCDIR="$PWD"
  - conda list
  - export PYTHONHASHSEED=0
  - export MKL_NUM_THREADS=1
  - if [[ "$COVERAGE" == true ]]; then export COVERAGE_OPTS="--cov-config .coveragerc --cov=arch"; fi

install:
  - |
    if [[ "$COVERAGE" == true ]]; then
      python setup.py develop
    else
      pip install .
    fi

script:
  - set -e
  - python ci/performance.py
  - |
    if [[ "$COVERAGE" == true ]]; then
      echo pytest -r a -m "$PYTEST_PATTERN" ${COVERAGE_OPTS} --durations=25 arch
      pytest -r a -m "$PYTEST_PATTERN" ${COVERAGE_OPTS} --durations=25 arch
    else
      mkdir test
      cd test
      python -c "import arch; arch.test(['-r a','-m (not slow)','--durations=25'])"
      cd ..
    fi
  - |
    if [[ "$DOCBUILD" = true ]]; then
      python setup.py install
      cd doc
      make spelling
      make html
      cd ..
      if [[ "$TRAVIS_BRANCH" = "master" || ! -z "$TRAVIS_TAG" ]]; then
        doctr deploy doc --build-tags
      fi
    fi
  - flake8 arch

after_success:
  - if [[ "$COVERAGE" = true ]]; then codecov; coveralls --rcfile="$SRCDIR"/.coveragerc; fi
