dist: bionic
sudo: required

language: python

services:
  - xvfb

env:
  global:
    - COVERAGE=true
    - USE_NUMBA=true
    - USE_PIP=false
    - STATSMODELS_MASTER=false
    - DOCBUILD=false
    - PYTEST_PATTERN="(not slow)"
    - PYTHONHASHSEED=0
    - MKL_NUM_THREADS=1
    - OMP_NUM_THREADS=1
    - VML_NUM_THREADS=1
    - secure: "dCvSzHmiqumrvQDQJXaPukd2TEituoUJTRJeBrLfEg0f1ZtAkoEcCudXuissODo1s/e+zClEhn3GRMGZc9QxKI0w8VHWeyMDHjFhyl4wubi35biUpXijYgs6IMqqdIo5oKcnMR6jG8uzuzPGDCpZh49+DgGU5E7rGHBgJ5Tdo8s="


matrix:
  fast_finish: true
  include:
  - python: 3.7
    env:
      - PYTHON=3.7
      - ARCH_CYTHON_COVERAGE=true
  - python: 3.7
    env:
      - PYTHON=3.7
      - NUMPY=1.16
      - SCIPY=1.2
      - MATPLOTLIB=2
      - PANDAS=0.23
      - STATSMODELS_MASTER=true
  - python: 3.7
    env:
      - USE_PIP=true
      - USE_NUMBA=true
      - MATPLOTLIB=3
      - PYTEST_PATTERN="(slow or not slow)"
  - python: 3.7
    env:
      - PYTHON=3.7
      - DOCBUILD=true
      - MATPLOTLIB=3
      - NUMPY=1.17
  - python: 3.6
    env:
      - PYTHON=3.6
      - MATPLOTLIB=2
      - NUMPY=1.15
      - SCIPY=1
      - PYTEST_PATTERN="(slow or not slow)"
  - python: 3.7
    env:
      - PYTHON=3.7
      - USE_NUMBA=false
      - MATPLOTLIB=3
      - PYTEST_PATTERN="(slow or not slow)"
  - python: 3.6
    env:
      - PYTHON=3.6
      - NUMBA=0.35
  - python: 3.8
    env:
      - USE_PIP=true
      - NUMPY=1.18
      - USE_NUMBA=false
      - PYTEST_PATTERN="(slow or not slow)"

before_install:
  - git fetch --tags
  - sudo apt-get -y install pandoc
  # Avoid noise from matplotlib
  - mkdir -p $HOME/.config/matplotlib
  # Build package list to avoid empty package=versions
  - |
    if [[ "$USE_PIP" == true ]]; then
      source ci/use-pip.sh
    else
      source ci/use-conda.sh
    fi
  -  if [[ "$STATSMODELS_MASTER" == true ]]; then sh ./ci/install-statsmodels-master.sh; fi;
  - source ci/install-common.sh

  - if [[ "$STATSMODELS_MASTER" == true ]]; then sh ./ci/install-statsmodels-master.sh; fi;
  - pip list
  - export SRCDIR="$PWD"
  - if [[ "$COVERAGE" == true ]]; then export COVERAGE_OPTS="--cov-config .coveragerc --cov=arch --cov-report xml:coverage.xml --cov-report term"; fi

install:
  - |
    if [[ "$COVERAGE" == true ]]; then
      pip install -e .
    else
      pip install .
    fi

script:
  - set -e
  - python ci/performance.py
  - |
    if [[ "$COVERAGE" == true ]]; then
      echo pytest -r a -m "$PYTEST_PATTERN" ${COVERAGE_OPTS} --durations=25 arch
      pytest -r a -m "$PYTEST_PATTERN" ${COVERAGE_OPTS} --durations=25 arch
    else
      mkdir test
      cd test
      python -c "import arch; arch.test(['-r a','-m (not slow)','--durations=25'])"
      cd ..
    fi
  - |
    if [[ "$DOCBUILD" = true ]]; then
      python setup.py install
      cd doc
      make spelling
      make html
      cd ..
      doctr deploy devel --build-tags
      if [[ "$TRAVIS_BRANCH" = "master" || ! -z "$TRAVIS_TAG" ]]; then
        doctr deploy . --build-tags
      fi
    fi
  - flake8 arch

after_success:
  - |
    if [[ "$COVERAGE" = true ]]; then
      codecov
      coveralls --rcfile="$SRCDIR"/.coveragerc
      python-codacy-coverage -r coverage.xml
    fi
